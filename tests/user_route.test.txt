const express = require('express');
const supertest = require('supertest');
const app = require('../CodEd/app');
const User = require('../CodEd/model/user');


const request = supertest(app);

describe('User Routes Test', () => {
    describe('POST /users/register - create new user', () => {
        test('201 Success register - should create new User', async () => {
            const username = 'testuser';
            const response = await request
                .post('/users/register')
                .send({ username });

            expect(response.status).toBe(200);
            expect(response.body).toEqual({ message: 'User registered successfully' });
        });

        test('400 Failed register - should return error if username already exists', async () => {
            const existingUser = await User.findOne({ username: 'testuser' });
            if (!existingUser) {
                await new User({ username: 'testuser' }).save();
            }

            const response = await request
                .post('/users/register')
                .send({ username: 'testuser' });

            expect(response.status).toBe(400);
            expect(response.text).toBe('Username already exists');
        });

        test('500 Failed register - should return internal server error', async () => {
            jest.spyOn(User, 'findOne').mockImplementation(() => {
                throw new Error('Internal server error');
            });

            const response = await request
                .post('/users/register')
                .send({ username: 'testuser' });

            expect(response.status).toBe(500);
            expect(response.body).toEqual({ message: 'Internal server error' });
        });
    });

    describe('POST /users/login - user login', () => {
        test('302 Success login - should redirect to /editor', async () => {
            const response = await request
                .post('/users/login')
                .send({ username: 'testuser' });

            expect(response.status).toBe(302);
            expect(response.header.location).toBe('/editor');
        });

        test('404 Failed login - should return "Invalid username"', async () => {
            jest.spyOn(User, 'findOne').mockResolvedValue(null);

            const response = await request
                .post('/users/login')
                .send({ username: 'nonexistentuser' });

            expect(response.status).toBe(404);
            expect(response.text).toBe('Invalid username');
        });

        test('500 Failed login - should return internal server error', async () => {
            jest.spyOn(User, 'findOne').mockImplementation(() => {
                throw new Error('Internal server error');
            });

            const response = await request
                .post('/users/login')
                .send({ username: 'testuser' });

            expect(response.status).toBe(500);
            expect(response.text).toBe('Internal server error');
        });
    });
});
