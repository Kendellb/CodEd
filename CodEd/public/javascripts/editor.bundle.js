(function () {
	'use strict';

	function getDefaultExportFromCjs (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function getAugmentedNamespace(n) {
	  if (n.__esModule) return n;
	  var f = n.default;
		if (typeof f == "function") {
			var a = function a () {
				if (this instanceof a) {
	        return Reflect.construct(f, arguments, this.constructor);
				}
				return f.apply(this, arguments);
			};
			a.prototype = f.prototype;
	  } else a = {};
	  Object.defineProperty(a, '__esModule', {value: true});
		Object.keys(n).forEach(function (k) {
			var d = Object.getOwnPropertyDescriptor(n, k);
			Object.defineProperty(a, k, d.get ? d : {
				enumerable: true,
				get: function () {
					return n[k];
				}
			});
		});
		return a;
	}

	var lib$1 = {exports: {}};

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re$1 = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts$1 = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	var parseuri$3 = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re$1.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts$1[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    return uri;
	};

	var browser$4 = {exports: {}};

	/**
	 * Helpers.
	 */

	var ms$1;
	var hasRequiredMs;

	function requireMs () {
		if (hasRequiredMs) return ms$1;
		hasRequiredMs = 1;
		var s = 1000;
		var m = s * 60;
		var h = m * 60;
		var d = h * 24;
		var w = d * 7;
		var y = d * 365.25;

		/**
		 * Parse or format the given `val`.
		 *
		 * Options:
		 *
		 *  - `long` verbose formatting [false]
		 *
		 * @param {String|Number} val
		 * @param {Object} [options]
		 * @throws {Error} throw an error if val is not a non-empty string or a number
		 * @return {String|Number}
		 * @api public
		 */

		ms$1 = function (val, options) {
		  options = options || {};
		  var type = typeof val;
		  if (type === 'string' && val.length > 0) {
		    return parse(val);
		  } else if (type === 'number' && isFinite(val)) {
		    return options.long ? fmtLong(val) : fmtShort(val);
		  }
		  throw new Error(
		    'val is not a non-empty string or a valid number. val=' +
		      JSON.stringify(val)
		  );
		};

		/**
		 * Parse the given `str` and return milliseconds.
		 *
		 * @param {String} str
		 * @return {Number}
		 * @api private
		 */

		function parse(str) {
		  str = String(str);
		  if (str.length > 100) {
		    return;
		  }
		  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
		    str
		  );
		  if (!match) {
		    return;
		  }
		  var n = parseFloat(match[1]);
		  var type = (match[2] || 'ms').toLowerCase();
		  switch (type) {
		    case 'years':
		    case 'year':
		    case 'yrs':
		    case 'yr':
		    case 'y':
		      return n * y;
		    case 'weeks':
		    case 'week':
		    case 'w':
		      return n * w;
		    case 'days':
		    case 'day':
		    case 'd':
		      return n * d;
		    case 'hours':
		    case 'hour':
		    case 'hrs':
		    case 'hr':
		    case 'h':
		      return n * h;
		    case 'minutes':
		    case 'minute':
		    case 'mins':
		    case 'min':
		    case 'm':
		      return n * m;
		    case 'seconds':
		    case 'second':
		    case 'secs':
		    case 'sec':
		    case 's':
		      return n * s;
		    case 'milliseconds':
		    case 'millisecond':
		    case 'msecs':
		    case 'msec':
		    case 'ms':
		      return n;
		    default:
		      return undefined;
		  }
		}

		/**
		 * Short format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtShort(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return Math.round(ms / d) + 'd';
		  }
		  if (msAbs >= h) {
		    return Math.round(ms / h) + 'h';
		  }
		  if (msAbs >= m) {
		    return Math.round(ms / m) + 'm';
		  }
		  if (msAbs >= s) {
		    return Math.round(ms / s) + 's';
		  }
		  return ms + 'ms';
		}

		/**
		 * Long format for `ms`.
		 *
		 * @param {Number} ms
		 * @return {String}
		 * @api private
		 */

		function fmtLong(ms) {
		  var msAbs = Math.abs(ms);
		  if (msAbs >= d) {
		    return plural(ms, msAbs, d, 'day');
		  }
		  if (msAbs >= h) {
		    return plural(ms, msAbs, h, 'hour');
		  }
		  if (msAbs >= m) {
		    return plural(ms, msAbs, m, 'minute');
		  }
		  if (msAbs >= s) {
		    return plural(ms, msAbs, s, 'second');
		  }
		  return ms + ' ms';
		}

		/**
		 * Pluralization helper.
		 */

		function plural(ms, msAbs, n, name) {
		  var isPlural = msAbs >= n * 1.5;
		  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
		}
		return ms$1;
	}

	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 */

	function setup(env) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled;
		createDebug.humanize = requireMs();

		Object.keys(env).forEach(key => {
			createDebug[key] = env[key];
		});

		/**
		* Active `debug` instances.
		*/
		createDebug.instances = [];

		/**
		* The currently active debug mode names, and names to skip.
		*/

		createDebug.names = [];
		createDebug.skips = [];

		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};

		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;

			for (let i = 0; i < namespace.length; i++) {
				hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
				hash |= 0; // Convert to 32bit integer
			}

			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;

		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;

			function debug(...args) {
				// Disabled?
				if (!debug.enabled) {
					return;
				}

				const self = debug;

				// Set `diff` timestamp
				const curr = Number(new Date());
				const ms = curr - (prevTime || curr);
				self.diff = ms;
				self.prev = prevTime;
				self.curr = curr;
				prevTime = curr;

				args[0] = createDebug.coerce(args[0]);

				if (typeof args[0] !== 'string') {
					// Anything else let's inspect with %O
					args.unshift('%O');
				}

				// Apply any `formatters` transformations
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
					// If we encounter an escaped % then don't increase the array index
					if (match === '%%') {
						return match;
					}
					index++;
					const formatter = createDebug.formatters[format];
					if (typeof formatter === 'function') {
						const val = args[index];
						match = formatter.call(self, val);

						// Now we need to remove `args[index]` since it's inlined in the `format`
						args.splice(index, 1);
						index--;
					}
					return match;
				});

				// Apply env-specific formatting (colors, etc.)
				createDebug.formatArgs.call(self, args);

				const logFn = self.log || createDebug.log;
				logFn.apply(self, args);
			}

			debug.namespace = namespace;
			debug.enabled = createDebug.enabled(namespace);
			debug.useColors = createDebug.useColors();
			debug.color = selectColor(namespace);
			debug.destroy = destroy;
			debug.extend = extend;
			// Debug.formatArgs = formatArgs;
			// debug.rawLog = rawLog;

			// env-specific initialization logic for debug instances
			if (typeof createDebug.init === 'function') {
				createDebug.init(debug);
			}

			createDebug.instances.push(debug);

			return debug;
		}

		function destroy() {
			const index = createDebug.instances.indexOf(this);
			if (index !== -1) {
				createDebug.instances.splice(index, 1);
				return true;
			}
			return false;
		}

		function extend(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}

		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);

			createDebug.names = [];
			createDebug.skips = [];

			let i;
			const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
			const len = split.length;

			for (i = 0; i < len; i++) {
				if (!split[i]) {
					// ignore empty strings
					continue;
				}

				namespaces = split[i].replace(/\*/g, '.*?');

				if (namespaces[0] === '-') {
					createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
				} else {
					createDebug.names.push(new RegExp('^' + namespaces + '$'));
				}
			}

			for (i = 0; i < createDebug.instances.length; i++) {
				const instance = createDebug.instances[i];
				instance.enabled = createDebug.enabled(instance.namespace);
			}
		}

		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [
				...createDebug.names.map(toNamespace),
				...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
			].join(',');
			createDebug.enable('');
			return namespaces;
		}

		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled(name) {
			if (name[name.length - 1] === '*') {
				return true;
			}

			let i;
			let len;

			for (i = 0, len = createDebug.skips.length; i < len; i++) {
				if (createDebug.skips[i].test(name)) {
					return false;
				}
			}

			for (i = 0, len = createDebug.names.length; i < len; i++) {
				if (createDebug.names[i].test(name)) {
					return true;
				}
			}

			return false;
		}

		/**
		* Convert regexp to namespace
		*
		* @param {RegExp} regxep
		* @return {String} namespace
		* @api private
		*/
		function toNamespace(regexp) {
			return regexp.toString()
				.substring(2, regexp.toString().length - 2)
				.replace(/\.\*\?$/, '*');
		}

		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce(val) {
			if (val instanceof Error) {
				return val.stack || val.message;
			}
			return val;
		}

		createDebug.enable(createDebug.load());

		return createDebug;
	}

	var common = setup;

	/* eslint-env browser */

	(function (module, exports) {
		/**
		 * This is the web browser implementation of `debug()`.
		 */

		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = localstorage();

		/**
		 * Colors.
		 */

		exports.colors = [
			'#0000CC',
			'#0000FF',
			'#0033CC',
			'#0033FF',
			'#0066CC',
			'#0066FF',
			'#0099CC',
			'#0099FF',
			'#00CC00',
			'#00CC33',
			'#00CC66',
			'#00CC99',
			'#00CCCC',
			'#00CCFF',
			'#3300CC',
			'#3300FF',
			'#3333CC',
			'#3333FF',
			'#3366CC',
			'#3366FF',
			'#3399CC',
			'#3399FF',
			'#33CC00',
			'#33CC33',
			'#33CC66',
			'#33CC99',
			'#33CCCC',
			'#33CCFF',
			'#6600CC',
			'#6600FF',
			'#6633CC',
			'#6633FF',
			'#66CC00',
			'#66CC33',
			'#9900CC',
			'#9900FF',
			'#9933CC',
			'#9933FF',
			'#99CC00',
			'#99CC33',
			'#CC0000',
			'#CC0033',
			'#CC0066',
			'#CC0099',
			'#CC00CC',
			'#CC00FF',
			'#CC3300',
			'#CC3333',
			'#CC3366',
			'#CC3399',
			'#CC33CC',
			'#CC33FF',
			'#CC6600',
			'#CC6633',
			'#CC9900',
			'#CC9933',
			'#CCCC00',
			'#CCCC33',
			'#FF0000',
			'#FF0033',
			'#FF0066',
			'#FF0099',
			'#FF00CC',
			'#FF00FF',
			'#FF3300',
			'#FF3333',
			'#FF3366',
			'#FF3399',
			'#FF33CC',
			'#FF33FF',
			'#FF6600',
			'#FF6633',
			'#FF9900',
			'#FF9933',
			'#FFCC00',
			'#FFCC33'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		// eslint-disable-next-line complexity
		function useColors() {
			// NB: In an Electron preload script, document will be defined but not fully
			// initialized. Since we know we're in Chrome, we'll just detect this case
			// explicitly
			if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
				return true;
			}

			// Internet Explorer and Edge do not support colors.
			if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
				return false;
			}

			// Is webkit? http://stackoverflow.com/a/16459606/376773
			// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
			return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
				// Is firebug? http://stackoverflow.com/a/398120/376773
				(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
				// Is firefox >= v31?
				// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
				// Double check webkit in userAgent just in case we are in a worker
				(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
			args[0] = (this.useColors ? '%c' : '') +
				this.namespace +
				(this.useColors ? ' %c' : ' ') +
				args[0] +
				(this.useColors ? '%c ' : ' ') +
				'+' + module.exports.humanize(this.diff);

			if (!this.useColors) {
				return;
			}

			const c = 'color: ' + this.color;
			args.splice(1, 0, c, 'color: inherit');

			// The final "%c" is somewhat tricky, because there could be other
			// arguments passed either before or after the %c, so we need to
			// figure out the correct index to insert the CSS into
			let index = 0;
			let lastC = 0;
			args[0].replace(/%[a-zA-Z%]/g, match => {
				if (match === '%%') {
					return;
				}
				index++;
				if (match === '%c') {
					// We only are interested in the *last* %c
					// (the user may have provided their own)
					lastC = index;
				}
			});

			args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.log()` when available.
		 * No-op when `console.log` is not a "function".
		 *
		 * @api public
		 */
		function log(...args) {
			// This hackery is required for IE8/9, where
			// the `console.log` function doesn't have 'apply'
			return typeof console === 'object' &&
				console.log &&
				console.log(...args);
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */
		function save(namespaces) {
			try {
				if (namespaces) {
					exports.storage.setItem('debug', namespaces);
				} else {
					exports.storage.removeItem('debug');
				}
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */
		function load() {
			let r;
			try {
				r = exports.storage.getItem('debug');
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}

			// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
			if (!r && typeof process !== 'undefined' && 'env' in process) {
				r = process.env.DEBUG;
			}

			return r;
		}

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
			try {
				// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
				// The Browser also has localStorage in the global context.
				return localStorage;
			} catch (error) {
				// Swallow
				// XXX (@Qix-) should we be logging these?
			}
		}

		module.exports = common(exports);

		const {formatters} = module.exports;

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		formatters.j = function (v) {
			try {
				return JSON.stringify(v);
			} catch (error) {
				return '[UnexpectedJSONParseError]: ' + error.message;
			}
		}; 
	} (browser$4, browser$4.exports));

	var browserExports$2 = browser$4.exports;

	/**
	 * Module dependencies.
	 */

	var parseuri$2 = parseuri$3;
	var debug$7 = browserExports$2('socket.io-client:url');

	/**
	 * Module exports.
	 */

	var url_1 = url;

	/**
	 * URL parser.
	 *
	 * @param {String} url
	 * @param {Object} An object meant to mimic window.location.
	 *                 Defaults to window.location.
	 * @api public
	 */

	function url (uri, loc) {
	  var obj = uri;

	  // default to window.location
	  loc = loc || (typeof location !== 'undefined' && location);
	  if (null == uri) uri = loc.protocol + '//' + loc.host;

	  // relative path support
	  if ('string' === typeof uri) {
	    if ('/' === uri.charAt(0)) {
	      if ('/' === uri.charAt(1)) {
	        uri = loc.protocol + uri;
	      } else {
	        uri = loc.host + uri;
	      }
	    }

	    if (!/^(https?|wss?):\/\//.test(uri)) {
	      debug$7('protocol-less url %s', uri);
	      if ('undefined' !== typeof loc) {
	        uri = loc.protocol + '//' + uri;
	      } else {
	        uri = 'https://' + uri;
	      }
	    }

	    // parse
	    debug$7('parse %s', uri);
	    obj = parseuri$2(uri);
	  }

	  // make sure we treat `localhost:80` and `localhost` equally
	  if (!obj.port) {
	    if (/^(http|ws)$/.test(obj.protocol)) {
	      obj.port = '80';
	    } else if (/^(http|ws)s$/.test(obj.protocol)) {
	      obj.port = '443';
	    }
	  }

	  obj.path = obj.path || '/';

	  var ipv6 = obj.host.indexOf(':') !== -1;
	  var host = ipv6 ? '[' + obj.host + ']' : obj.host;

	  // define unique id
	  obj.id = obj.protocol + '://' + host + ':' + obj.port;
	  // define href
	  obj.href = obj.protocol + '://' + host + (loc && loc.port === obj.port ? '' : (':' + obj.port));

	  return obj;
	}

	var socket_ioParser = {};

	var browser$3 = {exports: {}};

	var debug$6 = {exports: {}};

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} [options]
	 * @throws {Error} throw an error if val is not a non-empty string or a number
	 * @return {String|Number}
	 * @api public
	 */

	var ms = function(val, options) {
	  options = options || {};
	  var type = typeof val;
	  if (type === 'string' && val.length > 0) {
	    return parse(val);
	  } else if (type === 'number' && isNaN(val) === false) {
	    return options.long ? fmtLong(val) : fmtShort(val);
	  }
	  throw new Error(
	    'val is not a non-empty string or a valid number. val=' +
	      JSON.stringify(val)
	  );
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = String(str);
	  if (str.length > 100) {
	    return;
	  }
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
	    str
	  );
	  if (!match) {
	    return;
	  }
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	    default:
	      return undefined;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtShort(ms) {
	  if (ms >= d) {
	    return Math.round(ms / d) + 'd';
	  }
	  if (ms >= h) {
	    return Math.round(ms / h) + 'h';
	  }
	  if (ms >= m) {
	    return Math.round(ms / m) + 'm';
	  }
	  if (ms >= s) {
	    return Math.round(ms / s) + 's';
	  }
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function fmtLong(ms) {
	  return plural(ms, d, 'day') ||
	    plural(ms, h, 'hour') ||
	    plural(ms, m, 'minute') ||
	    plural(ms, s, 'second') ||
	    ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) {
	    return;
	  }
	  if (ms < n * 1.5) {
	    return Math.floor(ms / n) + ' ' + name;
	  }
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}

	(function (module, exports) {
		/**
		 * This is the common logic for both the Node.js and web browser
		 * implementations of `debug()`.
		 *
		 * Expose `debug()` as the module.
		 */

		exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
		exports.coerce = coerce;
		exports.disable = disable;
		exports.enable = enable;
		exports.enabled = enabled;
		exports.humanize = ms;

		/**
		 * Active `debug` instances.
		 */
		exports.instances = [];

		/**
		 * The currently active debug mode names, and names to skip.
		 */

		exports.names = [];
		exports.skips = [];

		/**
		 * Map of special "%n" handling functions, for the debug "format" argument.
		 *
		 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		 */

		exports.formatters = {};

		/**
		 * Select a color.
		 * @param {String} namespace
		 * @return {Number}
		 * @api private
		 */

		function selectColor(namespace) {
		  var hash = 0, i;

		  for (i in namespace) {
		    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
		    hash |= 0; // Convert to 32bit integer
		  }

		  return exports.colors[Math.abs(hash) % exports.colors.length];
		}

		/**
		 * Create a debugger with the given `namespace`.
		 *
		 * @param {String} namespace
		 * @return {Function}
		 * @api public
		 */

		function createDebug(namespace) {

		  var prevTime;

		  function debug() {
		    // disabled?
		    if (!debug.enabled) return;

		    var self = debug;

		    // set `diff` timestamp
		    var curr = +new Date();
		    var ms = curr - (prevTime || curr);
		    self.diff = ms;
		    self.prev = prevTime;
		    self.curr = curr;
		    prevTime = curr;

		    // turn the `arguments` into a proper Array
		    var args = new Array(arguments.length);
		    for (var i = 0; i < args.length; i++) {
		      args[i] = arguments[i];
		    }

		    args[0] = exports.coerce(args[0]);

		    if ('string' !== typeof args[0]) {
		      // anything else let's inspect with %O
		      args.unshift('%O');
		    }

		    // apply any `formatters` transformations
		    var index = 0;
		    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
		      // if we encounter an escaped % then don't increase the array index
		      if (match === '%%') return match;
		      index++;
		      var formatter = exports.formatters[format];
		      if ('function' === typeof formatter) {
		        var val = args[index];
		        match = formatter.call(self, val);

		        // now we need to remove `args[index]` since it's inlined in the `format`
		        args.splice(index, 1);
		        index--;
		      }
		      return match;
		    });

		    // apply env-specific formatting (colors, etc.)
		    exports.formatArgs.call(self, args);

		    var logFn = debug.log || exports.log || console.log.bind(console);
		    logFn.apply(self, args);
		  }

		  debug.namespace = namespace;
		  debug.enabled = exports.enabled(namespace);
		  debug.useColors = exports.useColors();
		  debug.color = selectColor(namespace);
		  debug.destroy = destroy;

		  // env-specific initialization logic for debug instances
		  if ('function' === typeof exports.init) {
		    exports.init(debug);
		  }

		  exports.instances.push(debug);

		  return debug;
		}

		function destroy () {
		  var index = exports.instances.indexOf(this);
		  if (index !== -1) {
		    exports.instances.splice(index, 1);
		    return true;
		  } else {
		    return false;
		  }
		}

		/**
		 * Enables a debug mode by namespaces. This can include modes
		 * separated by a colon and wildcards.
		 *
		 * @param {String} namespaces
		 * @api public
		 */

		function enable(namespaces) {
		  exports.save(namespaces);

		  exports.names = [];
		  exports.skips = [];

		  var i;
		  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		  var len = split.length;

		  for (i = 0; i < len; i++) {
		    if (!split[i]) continue; // ignore empty strings
		    namespaces = split[i].replace(/\*/g, '.*?');
		    if (namespaces[0] === '-') {
		      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
		    } else {
		      exports.names.push(new RegExp('^' + namespaces + '$'));
		    }
		  }

		  for (i = 0; i < exports.instances.length; i++) {
		    var instance = exports.instances[i];
		    instance.enabled = exports.enabled(instance.namespace);
		  }
		}

		/**
		 * Disable debug output.
		 *
		 * @api public
		 */

		function disable() {
		  exports.enable('');
		}

		/**
		 * Returns true if the given mode name is enabled, false otherwise.
		 *
		 * @param {String} name
		 * @return {Boolean}
		 * @api public
		 */

		function enabled(name) {
		  if (name[name.length - 1] === '*') {
		    return true;
		  }
		  var i, len;
		  for (i = 0, len = exports.skips.length; i < len; i++) {
		    if (exports.skips[i].test(name)) {
		      return false;
		    }
		  }
		  for (i = 0, len = exports.names.length; i < len; i++) {
		    if (exports.names[i].test(name)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * Coerce `val`.
		 *
		 * @param {Mixed} val
		 * @return {Mixed}
		 * @api private
		 */

		function coerce(val) {
		  if (val instanceof Error) return val.stack || val.message;
		  return val;
		} 
	} (debug$6, debug$6.exports));

	var debugExports$1 = debug$6.exports;

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	(function (module, exports) {
		exports = module.exports = debugExports$1;
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = 'undefined' != typeof chrome
		               && 'undefined' != typeof chrome.storage
		                  ? chrome.storage.local
		                  : localstorage();

		/**
		 * Colors.
		 */

		exports.colors = [
		  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
		  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
		  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
		  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
		  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
		  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
		  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
		  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
		  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
		  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
		  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		function useColors() {
		  // NB: In an Electron preload script, document will be defined but not fully
		  // initialized. Since we know we're in Chrome, we'll just detect this case
		  // explicitly
		  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
		    return true;
		  }

		  // Internet Explorer and Edge do not support colors.
		  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		    return false;
		  }

		  // is webkit? http://stackoverflow.com/a/16459606/376773
		  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		    // is firebug? http://stackoverflow.com/a/398120/376773
		    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		    // is firefox >= v31?
		    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		    // double check webkit in userAgent just in case we are in a worker
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		exports.formatters.j = function(v) {
		  try {
		    return JSON.stringify(v);
		  } catch (err) {
		    return '[UnexpectedJSONParseError]: ' + err.message;
		  }
		};


		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
		  var useColors = this.useColors;

		  args[0] = (useColors ? '%c' : '')
		    + this.namespace
		    + (useColors ? ' %c' : ' ')
		    + args[0]
		    + (useColors ? '%c ' : ' ')
		    + '+' + exports.humanize(this.diff);

		  if (!useColors) return;

		  var c = 'color: ' + this.color;
		  args.splice(1, 0, c, 'color: inherit');

		  // the final "%c" is somewhat tricky, because there could be other
		  // arguments passed either before or after the %c, so we need to
		  // figure out the correct index to insert the CSS into
		  var index = 0;
		  var lastC = 0;
		  args[0].replace(/%[a-zA-Z%]/g, function(match) {
		    if ('%%' === match) return;
		    index++;
		    if ('%c' === match) {
		      // we only are interested in the *last* %c
		      // (the user may have provided their own)
		      lastC = index;
		    }
		  });

		  args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.log()` when available.
		 * No-op when `console.log` is not a "function".
		 *
		 * @api public
		 */

		function log() {
		  // this hackery is required for IE8/9, where
		  // the `console.log` function doesn't have 'apply'
		  return 'object' === typeof console
		    && console.log
		    && Function.prototype.apply.call(console.log, console, arguments);
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */

		function save(namespaces) {
		  try {
		    if (null == namespaces) {
		      exports.storage.removeItem('debug');
		    } else {
		      exports.storage.debug = namespaces;
		    }
		  } catch(e) {}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
		  var r;
		  try {
		    r = exports.storage.debug;
		  } catch(e) {}

		  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		  if (!r && typeof process !== 'undefined' && 'env' in process) {
		    r = process.env.DEBUG;
		  }

		  return r;
		}

		/**
		 * Enable namespaces listed in `localStorage.debug` initially.
		 */

		exports.enable(load());

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
		  try {
		    return window.localStorage;
		  } catch (e) {}
		} 
	} (browser$3, browser$3.exports));

	var browserExports$1 = browser$3.exports;

	var componentEmitter$1 = {exports: {}};

	(function (module) {
		/**
		 * Expose `Emitter`.
		 */

		{
		  module.exports = Emitter;
		}

		/**
		 * Initialize a new `Emitter`.
		 *
		 * @api public
		 */

		function Emitter(obj) {
		  if (obj) return mixin(obj);
		}
		/**
		 * Mixin the emitter properties.
		 *
		 * @param {Object} obj
		 * @return {Object}
		 * @api private
		 */

		function mixin(obj) {
		  for (var key in Emitter.prototype) {
		    obj[key] = Emitter.prototype[key];
		  }
		  return obj;
		}

		/**
		 * Listen on the given `event` with `fn`.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.on =
		Emitter.prototype.addEventListener = function(event, fn){
		  this._callbacks = this._callbacks || {};
		  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
		    .push(fn);
		  return this;
		};

		/**
		 * Adds an `event` listener that will be invoked a single
		 * time then automatically removed.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.once = function(event, fn){
		  function on() {
		    this.off(event, on);
		    fn.apply(this, arguments);
		  }

		  on.fn = fn;
		  this.on(event, on);
		  return this;
		};

		/**
		 * Remove the given callback for `event` or all
		 * registered callbacks.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.off =
		Emitter.prototype.removeListener =
		Emitter.prototype.removeAllListeners =
		Emitter.prototype.removeEventListener = function(event, fn){
		  this._callbacks = this._callbacks || {};

		  // all
		  if (0 == arguments.length) {
		    this._callbacks = {};
		    return this;
		  }

		  // specific event
		  var callbacks = this._callbacks['$' + event];
		  if (!callbacks) return this;

		  // remove all handlers
		  if (1 == arguments.length) {
		    delete this._callbacks['$' + event];
		    return this;
		  }

		  // remove specific handler
		  var cb;
		  for (var i = 0; i < callbacks.length; i++) {
		    cb = callbacks[i];
		    if (cb === fn || cb.fn === fn) {
		      callbacks.splice(i, 1);
		      break;
		    }
		  }

		  // Remove event specific arrays for event types that no
		  // one is subscribed for to avoid memory leak.
		  if (callbacks.length === 0) {
		    delete this._callbacks['$' + event];
		  }

		  return this;
		};

		/**
		 * Emit `event` with the given args.
		 *
		 * @param {String} event
		 * @param {Mixed} ...
		 * @return {Emitter}
		 */

		Emitter.prototype.emit = function(event){
		  this._callbacks = this._callbacks || {};

		  var args = new Array(arguments.length - 1)
		    , callbacks = this._callbacks['$' + event];

		  for (var i = 1; i < arguments.length; i++) {
		    args[i - 1] = arguments[i];
		  }

		  if (callbacks) {
		    callbacks = callbacks.slice(0);
		    for (var i = 0, len = callbacks.length; i < len; ++i) {
		      callbacks[i].apply(this, args);
		    }
		  }

		  return this;
		};

		/**
		 * Return array of callbacks for `event`.
		 *
		 * @param {String} event
		 * @return {Array}
		 * @api public
		 */

		Emitter.prototype.listeners = function(event){
		  this._callbacks = this._callbacks || {};
		  return this._callbacks['$' + event] || [];
		};

		/**
		 * Check if this emitter has `event` handlers.
		 *
		 * @param {String} event
		 * @return {Boolean}
		 * @api public
		 */

		Emitter.prototype.hasListeners = function(event){
		  return !! this.listeners(event).length;
		}; 
	} (componentEmitter$1));

	var componentEmitterExports$1 = componentEmitter$1.exports;

	var binary = {};

	var toString$1 = {}.toString;

	var isarray$1 = Array.isArray || function (arr) {
	  return toString$1.call(arr) == '[object Array]';
	};

	var isBuffer = isBuf$1;

	var withNativeBuffer = typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function';
	var withNativeArrayBuffer = typeof ArrayBuffer === 'function';

	var isView = function (obj) {
	  return typeof ArrayBuffer.isView === 'function' ? ArrayBuffer.isView(obj) : (obj.buffer instanceof ArrayBuffer);
	};

	/**
	 * Returns true if obj is a buffer or an arraybuffer.
	 *
	 * @api private
	 */

	function isBuf$1(obj) {
	  return (withNativeBuffer && Buffer.isBuffer(obj)) ||
	          (withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)));
	}

	/*global Blob,File*/

	/**
	 * Module requirements
	 */

	var isArray = isarray$1;
	var isBuf = isBuffer;
	var toString = Object.prototype.toString;
	var withNativeBlob = typeof Blob === 'function' || (typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]');
	var withNativeFile = typeof File === 'function' || (typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]');

	/**
	 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
	 * Anything with blobs or files should be fed through removeBlobs before coming
	 * here.
	 *
	 * @param {Object} packet - socket.io event packet
	 * @return {Object} with deconstructed packet and list of buffers
	 * @api public
	 */

	binary.deconstructPacket = function(packet) {
	  var buffers = [];
	  var packetData = packet.data;
	  var pack = packet;
	  pack.data = _deconstructPacket(packetData, buffers);
	  pack.attachments = buffers.length; // number of binary 'attachments'
	  return {packet: pack, buffers: buffers};
	};

	function _deconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (isBuf(data)) {
	    var placeholder = { _placeholder: true, num: buffers.length };
	    buffers.push(data);
	    return placeholder;
	  } else if (isArray(data)) {
	    var newData = new Array(data.length);
	    for (var i = 0; i < data.length; i++) {
	      newData[i] = _deconstructPacket(data[i], buffers);
	    }
	    return newData;
	  } else if (typeof data === 'object' && !(data instanceof Date)) {
	    var newData = {};
	    for (var key in data) {
	      newData[key] = _deconstructPacket(data[key], buffers);
	    }
	    return newData;
	  }
	  return data;
	}

	/**
	 * Reconstructs a binary packet from its placeholder packet and buffers
	 *
	 * @param {Object} packet - event packet with placeholders
	 * @param {Array} buffers - binary buffers to put in placeholder positions
	 * @return {Object} reconstructed packet
	 * @api public
	 */

	binary.reconstructPacket = function(packet, buffers) {
	  packet.data = _reconstructPacket(packet.data, buffers);
	  packet.attachments = undefined; // no longer useful
	  return packet;
	};

	function _reconstructPacket(data, buffers) {
	  if (!data) return data;

	  if (data && data._placeholder === true) {
	    var isIndexValid =
	      typeof data.num === "number" &&
	      data.num >= 0 &&
	      data.num < buffers.length;
	    if (isIndexValid) {
	      return buffers[data.num]; // appropriate buffer (should be natural order anyway)
	    } else {
	      throw new Error("illegal attachments");
	    }
	  } else if (isArray(data)) {
	    for (var i = 0; i < data.length; i++) {
	      data[i] = _reconstructPacket(data[i], buffers);
	    }
	  } else if (typeof data === 'object') {
	    for (var key in data) {
	      data[key] = _reconstructPacket(data[key], buffers);
	    }
	  }

	  return data;
	}

	/**
	 * Asynchronously removes Blobs or Files from data via
	 * FileReader's readAsArrayBuffer method. Used before encoding
	 * data as msgpack. Calls callback with the blobless data.
	 *
	 * @param {Object} data
	 * @param {Function} callback
	 * @api private
	 */

	binary.removeBlobs = function(data, callback) {
	  function _removeBlobs(obj, curKey, containingObject) {
	    if (!obj) return obj;

	    // convert any blob
	    if ((withNativeBlob && obj instanceof Blob) ||
	        (withNativeFile && obj instanceof File)) {
	      pendingBlobs++;

	      // async filereader
	      var fileReader = new FileReader();
	      fileReader.onload = function() { // this.result == arraybuffer
	        if (containingObject) {
	          containingObject[curKey] = this.result;
	        }
	        else {
	          bloblessData = this.result;
	        }

	        // if nothing pending its callback time
	        if(! --pendingBlobs) {
	          callback(bloblessData);
	        }
	      };

	      fileReader.readAsArrayBuffer(obj); // blob -> arraybuffer
	    } else if (isArray(obj)) { // handle array
	      for (var i = 0; i < obj.length; i++) {
	        _removeBlobs(obj[i], i, obj);
	      }
	    } else if (typeof obj === 'object' && !isBuf(obj)) { // and object
	      for (var key in obj) {
	        _removeBlobs(obj[key], key, obj);
	      }
	    }
	  }

	  var pendingBlobs = 0;
	  var bloblessData = data;
	  _removeBlobs(bloblessData);
	  if (!pendingBlobs) {
	    callback(bloblessData);
	  }
	};

	(function (exports) {
		/**
		 * Module dependencies.
		 */

		var debug = browserExports$1('socket.io-parser');
		var Emitter = componentEmitterExports$1;
		var binary$1 = binary;
		var isArray = isarray$1;
		var isBuf = isBuffer;

		/**
		 * Protocol version.
		 *
		 * @api public
		 */

		exports.protocol = 4;

		/**
		 * Packet types.
		 *
		 * @api public
		 */

		exports.types = [
		  'CONNECT',
		  'DISCONNECT',
		  'EVENT',
		  'ACK',
		  'ERROR',
		  'BINARY_EVENT',
		  'BINARY_ACK'
		];

		/**
		 * Packet type `connect`.
		 *
		 * @api public
		 */

		exports.CONNECT = 0;

		/**
		 * Packet type `disconnect`.
		 *
		 * @api public
		 */

		exports.DISCONNECT = 1;

		/**
		 * Packet type `event`.
		 *
		 * @api public
		 */

		exports.EVENT = 2;

		/**
		 * Packet type `ack`.
		 *
		 * @api public
		 */

		exports.ACK = 3;

		/**
		 * Packet type `error`.
		 *
		 * @api public
		 */

		exports.ERROR = 4;

		/**
		 * Packet type 'binary event'
		 *
		 * @api public
		 */

		exports.BINARY_EVENT = 5;

		/**
		 * Packet type `binary ack`. For acks with binary arguments.
		 *
		 * @api public
		 */

		exports.BINARY_ACK = 6;

		/**
		 * Encoder constructor.
		 *
		 * @api public
		 */

		exports.Encoder = Encoder;

		/**
		 * Decoder constructor.
		 *
		 * @api public
		 */

		exports.Decoder = Decoder;

		/**
		 * A socket.io Encoder instance
		 *
		 * @api public
		 */

		function Encoder() {}

		var ERROR_PACKET = exports.ERROR + '"encode error"';

		/**
		 * Encode a packet as a single string if non-binary, or as a
		 * buffer sequence, depending on packet type.
		 *
		 * @param {Object} obj - packet object
		 * @param {Function} callback - function to handle encodings (likely engine.write)
		 * @return Calls callback with Array of encodings
		 * @api public
		 */

		Encoder.prototype.encode = function(obj, callback){
		  debug('encoding packet %j', obj);

		  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
		    encodeAsBinary(obj, callback);
		  } else {
		    var encoding = encodeAsString(obj);
		    callback([encoding]);
		  }
		};

		/**
		 * Encode packet as string.
		 *
		 * @param {Object} packet
		 * @return {String} encoded
		 * @api private
		 */

		function encodeAsString(obj) {

		  // first is type
		  var str = '' + obj.type;

		  // attachments if we have them
		  if (exports.BINARY_EVENT === obj.type || exports.BINARY_ACK === obj.type) {
		    str += obj.attachments + '-';
		  }

		  // if we have a namespace other than `/`
		  // we append it followed by a comma `,`
		  if (obj.nsp && '/' !== obj.nsp) {
		    str += obj.nsp + ',';
		  }

		  // immediately followed by the id
		  if (null != obj.id) {
		    str += obj.id;
		  }

		  // json data
		  if (null != obj.data) {
		    var payload = tryStringify(obj.data);
		    if (payload !== false) {
		      str += payload;
		    } else {
		      return ERROR_PACKET;
		    }
		  }

		  debug('encoded %j as %s', obj, str);
		  return str;
		}

		function tryStringify(str) {
		  try {
		    return JSON.stringify(str);
		  } catch(e){
		    return false;
		  }
		}

		/**
		 * Encode packet as 'buffer sequence' by removing blobs, and
		 * deconstructing packet into object with placeholders and
		 * a list of buffers.
		 *
		 * @param {Object} packet
		 * @return {Buffer} encoded
		 * @api private
		 */

		function encodeAsBinary(obj, callback) {

		  function writeEncoding(bloblessData) {
		    var deconstruction = binary$1.deconstructPacket(bloblessData);
		    var pack = encodeAsString(deconstruction.packet);
		    var buffers = deconstruction.buffers;

		    buffers.unshift(pack); // add packet info to beginning of data list
		    callback(buffers); // write all the buffers
		  }

		  binary$1.removeBlobs(obj, writeEncoding);
		}

		/**
		 * A socket.io Decoder instance
		 *
		 * @return {Object} decoder
		 * @api public
		 */

		function Decoder() {
		  this.reconstructor = null;
		}

		/**
		 * Mix in `Emitter` with Decoder.
		 */

		Emitter(Decoder.prototype);

		/**
		 * Decodes an encoded packet string into packet JSON.
		 *
		 * @param {String} obj - encoded packet
		 * @return {Object} packet
		 * @api public
		 */

		Decoder.prototype.add = function(obj) {
		  var packet;
		  if (typeof obj === 'string') {
		    if (this.reconstructor) {
		      throw new Error("got plaintext data when reconstructing a packet");
		    }
		    packet = decodeString(obj);
		    if (exports.BINARY_EVENT === packet.type || exports.BINARY_ACK === packet.type) { // binary packet's json
		      this.reconstructor = new BinaryReconstructor(packet);

		      // no attachments, labeled binary but no binary data to follow
		      if (this.reconstructor.reconPack.attachments === 0) {
		        this.emit('decoded', packet);
		      }
		    } else { // non-binary full packet
		      this.emit('decoded', packet);
		    }
		  } else if (isBuf(obj) || obj.base64) { // raw binary data
		    if (!this.reconstructor) {
		      throw new Error('got binary data when not reconstructing a packet');
		    } else {
		      packet = this.reconstructor.takeBinaryData(obj);
		      if (packet) { // received final buffer
		        this.reconstructor = null;
		        this.emit('decoded', packet);
		      }
		    }
		  } else {
		    throw new Error('Unknown type: ' + obj);
		  }
		};

		/**
		 * Decode a packet String (JSON data)
		 *
		 * @param {String} str
		 * @return {Object} packet
		 * @api private
		 */

		function decodeString(str) {
		  var i = 0;
		  // look up type
		  var p = {
		    type: Number(str.charAt(0))
		  };

		  if (null == exports.types[p.type]) {
		    return error('unknown packet type ' + p.type);
		  }

		  // look up attachments if type binary
		  if (exports.BINARY_EVENT === p.type || exports.BINARY_ACK === p.type) {
		    var start = i + 1;
		    while (str.charAt(++i) !== '-' && i != str.length) {}
		    var buf = str.substring(start, i);
		    if (buf != Number(buf) || str.charAt(i) !== '-') {
		      throw new Error('Illegal attachments');
		    }
		    p.attachments = Number(buf);
		  }

		  // look up namespace (if any)
		  if ('/' === str.charAt(i + 1)) {
		    var start = i + 1;
		    while (++i) {
		      var c = str.charAt(i);
		      if (',' === c) break;
		      if (i === str.length) break;
		    }
		    p.nsp = str.substring(start, i);
		  } else {
		    p.nsp = '/';
		  }

		  // look up id
		  var next = str.charAt(i + 1);
		  if ('' !== next && Number(next) == next) {
		    var start = i + 1;
		    while (++i) {
		      var c = str.charAt(i);
		      if (null == c || Number(c) != c) {
		        --i;
		        break;
		      }
		      if (i === str.length) break;
		    }
		    p.id = Number(str.substring(start, i + 1));
		  }

		  // look up json data
		  if (str.charAt(++i)) {
		    var payload = tryParse(str.substr(i));
		    var isPayloadValid = payload !== false && (p.type === exports.ERROR || isArray(payload));
		    if (isPayloadValid) {
		      p.data = payload;
		    } else {
		      return error('invalid payload');
		    }
		  }

		  debug('decoded %s as %j', str, p);
		  return p;
		}

		function tryParse(str) {
		  try {
		    return JSON.parse(str);
		  } catch(e){
		    return false;
		  }
		}

		/**
		 * Deallocates a parser's resources
		 *
		 * @api public
		 */

		Decoder.prototype.destroy = function() {
		  if (this.reconstructor) {
		    this.reconstructor.finishedReconstruction();
		  }
		};

		/**
		 * A manager of a binary event's 'buffer sequence'. Should
		 * be constructed whenever a packet of type BINARY_EVENT is
		 * decoded.
		 *
		 * @param {Object} packet
		 * @return {BinaryReconstructor} initialized reconstructor
		 * @api private
		 */

		function BinaryReconstructor(packet) {
		  this.reconPack = packet;
		  this.buffers = [];
		}

		/**
		 * Method to be called when binary data received from connection
		 * after a BINARY_EVENT packet.
		 *
		 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
		 * @return {null | Object} returns null if more binary data is expected or
		 *   a reconstructed packet object if all buffers have been received.
		 * @api private
		 */

		BinaryReconstructor.prototype.takeBinaryData = function(binData) {
		  this.buffers.push(binData);
		  if (this.buffers.length === this.reconPack.attachments) { // done with buffer list
		    var packet = binary$1.reconstructPacket(this.reconPack, this.buffers);
		    this.finishedReconstruction();
		    return packet;
		  }
		  return null;
		};

		/**
		 * Cleans up binary packet reconstruction variables.
		 *
		 * @api private
		 */

		BinaryReconstructor.prototype.finishedReconstruction = function() {
		  this.reconPack = null;
		  this.buffers = [];
		};

		function error(msg) {
		  return {
		    type: exports.ERROR,
		    data: 'parser error: ' + msg
		  };
		} 
	} (socket_ioParser));

	var lib = {exports: {}};

	var transports$1 = {};

	var hasCors = {exports: {}};

	/**
	 * Module exports.
	 *
	 * Logic borrowed from Modernizr:
	 *
	 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
	 */

	try {
	  hasCors.exports = typeof XMLHttpRequest !== 'undefined' &&
	    'withCredentials' in new XMLHttpRequest();
	} catch (err) {
	  // if XMLHttp support is disabled in IE then it will throw
	  // when trying to create
	  hasCors.exports = false;
	}

	var hasCorsExports = hasCors.exports;

	var globalThis_browser = (function () {
	  if (typeof self !== 'undefined') {
	    return self;
	  } else if (typeof window !== 'undefined') {
	    return window;
	  } else {
	    return Function('return this')(); // eslint-disable-line no-new-func
	  }
	})();

	// browser shim for xmlhttprequest module

	var hasCORS = hasCorsExports;
	var globalThis$3 = globalThis_browser;

	var xmlhttprequest = function (opts) {
	  var xdomain = opts.xdomain;

	  // scheme must be same when usign XDomainRequest
	  // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx
	  var xscheme = opts.xscheme;

	  // XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.
	  // https://github.com/Automattic/engine.io-client/pull/217
	  var enablesXDR = opts.enablesXDR;

	  // XMLHttpRequest can be disabled on IE
	  try {
	    if ('undefined' !== typeof XMLHttpRequest && (!xdomain || hasCORS)) {
	      return new XMLHttpRequest();
	    }
	  } catch (e) { }

	  // Use XDomainRequest for IE8 if enablesXDR is true
	  // because loading bar keeps flashing when using jsonp-polling
	  // https://github.com/yujiosaka/socke.io-ie8-loading-example
	  try {
	    if ('undefined' !== typeof XDomainRequest && !xscheme && enablesXDR) {
	      return new XDomainRequest();
	    }
	  } catch (e) { }

	  if (!xdomain) {
	    try {
	      return new globalThis$3[['Active'].concat('Object').join('X')]('Microsoft.XMLHTTP');
	    } catch (e) { }
	  }
	};

	var pollingXhr = {exports: {}};

	var browser$2 = {};

	/**
	 * Gets the keys for an object.
	 *
	 * @return {Array} keys
	 * @api private
	 */

	var keys$1 = Object.keys || function keys (obj){
	  var arr = [];
	  var has = Object.prototype.hasOwnProperty;

	  for (var i in obj) {
	    if (has.call(obj, i)) {
	      arr.push(i);
	    }
	  }
	  return arr;
	};

	var isarray;
	var hasRequiredIsarray;

	function requireIsarray () {
		if (hasRequiredIsarray) return isarray;
		hasRequiredIsarray = 1;
		var toString = {}.toString;

		isarray = Array.isArray || function (arr) {
		  return toString.call(arr) == '[object Array]';
		};
		return isarray;
	}

	/* global Blob File */

	var hasBinary2;
	var hasRequiredHasBinary2;

	function requireHasBinary2 () {
		if (hasRequiredHasBinary2) return hasBinary2;
		hasRequiredHasBinary2 = 1;
		/*
		 * Module requirements.
		 */

		var isArray = requireIsarray();

		var toString = Object.prototype.toString;
		var withNativeBlob = typeof Blob === 'function' ||
		                        typeof Blob !== 'undefined' && toString.call(Blob) === '[object BlobConstructor]';
		var withNativeFile = typeof File === 'function' ||
		                        typeof File !== 'undefined' && toString.call(File) === '[object FileConstructor]';

		/**
		 * Module exports.
		 */

		hasBinary2 = hasBinary;

		/**
		 * Checks for binary data.
		 *
		 * Supports Buffer, ArrayBuffer, Blob and File.
		 *
		 * @param {Object} anything
		 * @api public
		 */

		function hasBinary (obj) {
		  if (!obj || typeof obj !== 'object') {
		    return false;
		  }

		  if (isArray(obj)) {
		    for (var i = 0, l = obj.length; i < l; i++) {
		      if (hasBinary(obj[i])) {
		        return true;
		      }
		    }
		    return false;
		  }

		  if ((typeof Buffer === 'function' && Buffer.isBuffer && Buffer.isBuffer(obj)) ||
		    (typeof ArrayBuffer === 'function' && obj instanceof ArrayBuffer) ||
		    (withNativeBlob && obj instanceof Blob) ||
		    (withNativeFile && obj instanceof File)
		  ) {
		    return true;
		  }

		  // see: https://github.com/Automattic/has-binary/pull/4
		  if (obj.toJSON && typeof obj.toJSON === 'function' && arguments.length === 1) {
		    return hasBinary(obj.toJSON(), true);
		  }

		  for (var key in obj) {
		    if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
		      return true;
		    }
		  }

		  return false;
		}
		return hasBinary2;
	}

	/**
	 * An abstraction for slicing an arraybuffer even when
	 * ArrayBuffer.prototype.slice is not supported
	 *
	 * @api public
	 */

	var arraybuffer_slice = function(arraybuffer, start, end) {
	  var bytes = arraybuffer.byteLength;
	  start = start || 0;
	  end = end || bytes;

	  if (arraybuffer.slice) { return arraybuffer.slice(start, end); }

	  if (start < 0) { start += bytes; }
	  if (end < 0) { end += bytes; }
	  if (end > bytes) { end = bytes; }

	  if (start >= bytes || start >= end || bytes === 0) {
	    return new ArrayBuffer(0);
	  }

	  var abv = new Uint8Array(arraybuffer);
	  var result = new Uint8Array(end - start);
	  for (var i = start, ii = 0; i < end; i++, ii++) {
	    result[ii] = abv[i];
	  }
	  return result.buffer;
	};

	var after_1 = after;

	function after(count, callback, err_cb) {
	    var bail = false;
	    err_cb = err_cb || noop;
	    proxy.count = count;

	    return (count === 0) ? callback() : proxy

	    function proxy(err, result) {
	        if (proxy.count <= 0) {
	            throw new Error('after called too many times')
	        }
	        --proxy.count;

	        // after first error, rest are passed to err_cb
	        if (err) {
	            bail = true;
	            callback(err);
	            // future error callbacks will go to error handler
	            callback = err_cb;
	        } else if (proxy.count === 0 && !bail) {
	            callback(null, result);
	        }
	    }
	}

	function noop() {}

	/*! https://mths.be/utf8js v2.1.2 by @mathias */

	var stringFromCharCode = String.fromCharCode;

	// Taken from https://mths.be/punycode
	function ucs2decode(string) {
		var output = [];
		var counter = 0;
		var length = string.length;
		var value;
		var extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	// Taken from https://mths.be/punycode
	function ucs2encode(array) {
		var length = array.length;
		var index = -1;
		var value;
		var output = '';
		while (++index < length) {
			value = array[index];
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
		}
		return output;
	}

	function checkScalarValue(codePoint, strict) {
		if (codePoint >= 0xD800 && codePoint <= 0xDFFF) {
			if (strict) {
				throw Error(
					'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +
					' is not a scalar value'
				);
			}
			return false;
		}
		return true;
	}
	/*--------------------------------------------------------------------------*/

	function createByte(codePoint, shift) {
		return stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);
	}

	function encodeCodePoint(codePoint, strict) {
		if ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence
			return stringFromCharCode(codePoint);
		}
		var symbol = '';
		if ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence
			symbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);
		}
		else if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence
			if (!checkScalarValue(codePoint, strict)) {
				codePoint = 0xFFFD;
			}
			symbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);
			symbol += createByte(codePoint, 6);
		}
		else if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence
			symbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);
			symbol += createByte(codePoint, 12);
			symbol += createByte(codePoint, 6);
		}
		symbol += stringFromCharCode((codePoint & 0x3F) | 0x80);
		return symbol;
	}

	function utf8encode(string, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		var codePoints = ucs2decode(string);
		var length = codePoints.length;
		var index = -1;
		var codePoint;
		var byteString = '';
		while (++index < length) {
			codePoint = codePoints[index];
			byteString += encodeCodePoint(codePoint, strict);
		}
		return byteString;
	}

	/*--------------------------------------------------------------------------*/

	function readContinuationByte() {
		if (byteIndex >= byteCount) {
			throw Error('Invalid byte index');
		}

		var continuationByte = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		if ((continuationByte & 0xC0) == 0x80) {
			return continuationByte & 0x3F;
		}

		// If we end up here, it’s not a continuation byte
		throw Error('Invalid continuation byte');
	}

	function decodeSymbol(strict) {
		var byte1;
		var byte2;
		var byte3;
		var byte4;
		var codePoint;

		if (byteIndex > byteCount) {
			throw Error('Invalid byte index');
		}

		if (byteIndex == byteCount) {
			return false;
		}

		// Read first byte
		byte1 = byteArray[byteIndex] & 0xFF;
		byteIndex++;

		// 1-byte sequence (no continuation bytes)
		if ((byte1 & 0x80) == 0) {
			return byte1;
		}

		// 2-byte sequence
		if ((byte1 & 0xE0) == 0xC0) {
			byte2 = readContinuationByte();
			codePoint = ((byte1 & 0x1F) << 6) | byte2;
			if (codePoint >= 0x80) {
				return codePoint;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 3-byte sequence (may include unpaired surrogates)
		if ((byte1 & 0xF0) == 0xE0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			codePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;
			if (codePoint >= 0x0800) {
				return checkScalarValue(codePoint, strict) ? codePoint : 0xFFFD;
			} else {
				throw Error('Invalid continuation byte');
			}
		}

		// 4-byte sequence
		if ((byte1 & 0xF8) == 0xF0) {
			byte2 = readContinuationByte();
			byte3 = readContinuationByte();
			byte4 = readContinuationByte();
			codePoint = ((byte1 & 0x07) << 0x12) | (byte2 << 0x0C) |
				(byte3 << 0x06) | byte4;
			if (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {
				return codePoint;
			}
		}

		throw Error('Invalid UTF-8 detected');
	}

	var byteArray;
	var byteCount;
	var byteIndex;
	function utf8decode(byteString, opts) {
		opts = opts || {};
		var strict = false !== opts.strict;

		byteArray = ucs2decode(byteString);
		byteCount = byteArray.length;
		byteIndex = 0;
		var codePoints = [];
		var tmp;
		while ((tmp = decodeSymbol(strict)) !== false) {
			codePoints.push(tmp);
		}
		return ucs2encode(codePoints);
	}

	var utf8 = {
		version: '2.1.2',
		encode: utf8encode,
		decode: utf8decode
	};

	var base64Arraybuffer = {};

	/*
	 * base64-arraybuffer
	 * https://github.com/niklasvh/base64-arraybuffer
	 *
	 * Copyright (c) 2012 Niklas von Hertzen
	 * Licensed under the MIT license.
	 */

	var hasRequiredBase64Arraybuffer;

	function requireBase64Arraybuffer () {
		if (hasRequiredBase64Arraybuffer) return base64Arraybuffer;
		hasRequiredBase64Arraybuffer = 1;
		(function(chars){

		  base64Arraybuffer.encode = function(arraybuffer) {
		    var bytes = new Uint8Array(arraybuffer),
		    i, len = bytes.length, base64 = "";

		    for (i = 0; i < len; i+=3) {
		      base64 += chars[bytes[i] >> 2];
		      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
		      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
		      base64 += chars[bytes[i + 2] & 63];
		    }

		    if ((len % 3) === 2) {
		      base64 = base64.substring(0, base64.length - 1) + "=";
		    } else if (len % 3 === 1) {
		      base64 = base64.substring(0, base64.length - 2) + "==";
		    }

		    return base64;
		  };

		  base64Arraybuffer.decode =  function(base64) {
		    var bufferLength = base64.length * 0.75,
		    len = base64.length, i, p = 0,
		    encoded1, encoded2, encoded3, encoded4;

		    if (base64[base64.length - 1] === "=") {
		      bufferLength--;
		      if (base64[base64.length - 2] === "=") {
		        bufferLength--;
		      }
		    }

		    var arraybuffer = new ArrayBuffer(bufferLength),
		    bytes = new Uint8Array(arraybuffer);

		    for (i = 0; i < len; i+=4) {
		      encoded1 = chars.indexOf(base64[i]);
		      encoded2 = chars.indexOf(base64[i+1]);
		      encoded3 = chars.indexOf(base64[i+2]);
		      encoded4 = chars.indexOf(base64[i+3]);

		      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
		      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
		      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
		    }

		    return arraybuffer;
		  };
		})("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		return base64Arraybuffer;
	}

	/**
	 * Create a blob builder even when vendor prefixes exist
	 */

	var blob;
	var hasRequiredBlob;

	function requireBlob () {
		if (hasRequiredBlob) return blob;
		hasRequiredBlob = 1;
		var BlobBuilder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :
		  typeof WebKitBlobBuilder !== 'undefined' ? WebKitBlobBuilder :
		  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :
		  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : 
		  false;

		/**
		 * Check if Blob constructor is supported
		 */

		var blobSupported = (function() {
		  try {
		    var a = new Blob(['hi']);
		    return a.size === 2;
		  } catch(e) {
		    return false;
		  }
		})();

		/**
		 * Check if Blob constructor supports ArrayBufferViews
		 * Fails in Safari 6, so we need to map to ArrayBuffers there.
		 */

		var blobSupportsArrayBufferView = blobSupported && (function() {
		  try {
		    var b = new Blob([new Uint8Array([1,2])]);
		    return b.size === 2;
		  } catch(e) {
		    return false;
		  }
		})();

		/**
		 * Check if BlobBuilder is supported
		 */

		var blobBuilderSupported = BlobBuilder
		  && BlobBuilder.prototype.append
		  && BlobBuilder.prototype.getBlob;

		/**
		 * Helper function that maps ArrayBufferViews to ArrayBuffers
		 * Used by BlobBuilder constructor and old browsers that didn't
		 * support it in the Blob constructor.
		 */

		function mapArrayBufferViews(ary) {
		  return ary.map(function(chunk) {
		    if (chunk.buffer instanceof ArrayBuffer) {
		      var buf = chunk.buffer;

		      // if this is a subarray, make a copy so we only
		      // include the subarray region from the underlying buffer
		      if (chunk.byteLength !== buf.byteLength) {
		        var copy = new Uint8Array(chunk.byteLength);
		        copy.set(new Uint8Array(buf, chunk.byteOffset, chunk.byteLength));
		        buf = copy.buffer;
		      }

		      return buf;
		    }

		    return chunk;
		  });
		}

		function BlobBuilderConstructor(ary, options) {
		  options = options || {};

		  var bb = new BlobBuilder();
		  mapArrayBufferViews(ary).forEach(function(part) {
		    bb.append(part);
		  });

		  return (options.type) ? bb.getBlob(options.type) : bb.getBlob();
		}
		function BlobConstructor(ary, options) {
		  return new Blob(mapArrayBufferViews(ary), options || {});
		}
		if (typeof Blob !== 'undefined') {
		  BlobBuilderConstructor.prototype = Blob.prototype;
		  BlobConstructor.prototype = Blob.prototype;
		}

		blob = (function() {
		  if (blobSupported) {
		    return blobSupportsArrayBufferView ? Blob : BlobConstructor;
		  } else if (blobBuilderSupported) {
		    return BlobBuilderConstructor;
		  } else {
		    return undefined;
		  }
		})();
		return blob;
	}

	/**
	 * Module dependencies.
	 */

	(function (exports) {
		var keys = keys$1;
		var hasBinary = requireHasBinary2();
		var sliceBuffer = arraybuffer_slice;
		var after = after_1;
		var utf8$1 = utf8;

		var base64encoder;
		if (typeof ArrayBuffer !== 'undefined') {
		  base64encoder = requireBase64Arraybuffer();
		}

		/**
		 * Check if we are running an android browser. That requires us to use
		 * ArrayBuffer with polling transports...
		 *
		 * http://ghinda.net/jpeg-blob-ajax-android/
		 */

		var isAndroid = typeof navigator !== 'undefined' && /Android/i.test(navigator.userAgent);

		/**
		 * Check if we are running in PhantomJS.
		 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
		 * https://github.com/ariya/phantomjs/issues/11395
		 * @type boolean
		 */
		var isPhantomJS = typeof navigator !== 'undefined' && /PhantomJS/i.test(navigator.userAgent);

		/**
		 * When true, avoids using Blobs to encode payloads.
		 * @type boolean
		 */
		var dontSendBlobs = isAndroid || isPhantomJS;

		/**
		 * Current protocol version.
		 */

		exports.protocol = 3;

		/**
		 * Packet types.
		 */

		var packets = exports.packets = {
		    open:     0    // non-ws
		  , close:    1    // non-ws
		  , ping:     2
		  , pong:     3
		  , message:  4
		  , upgrade:  5
		  , noop:     6
		};

		var packetslist = keys(packets);

		/**
		 * Premade error packet.
		 */

		var err = { type: 'error', data: 'parser error' };

		/**
		 * Create a blob api even for blob builder when vendor prefixes exist
		 */

		var Blob = requireBlob();

		/**
		 * Encodes a packet.
		 *
		 *     <packet type id> [ <data> ]
		 *
		 * Example:
		 *
		 *     5hello world
		 *     3
		 *     4
		 *
		 * Binary is encoded in an identical principle
		 *
		 * @api private
		 */

		exports.encodePacket = function (packet, supportsBinary, utf8encode, callback) {
		  if (typeof supportsBinary === 'function') {
		    callback = supportsBinary;
		    supportsBinary = false;
		  }

		  if (typeof utf8encode === 'function') {
		    callback = utf8encode;
		    utf8encode = null;
		  }

		  var data = (packet.data === undefined)
		    ? undefined
		    : packet.data.buffer || packet.data;

		  if (typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) {
		    return encodeArrayBuffer(packet, supportsBinary, callback);
		  } else if (typeof Blob !== 'undefined' && data instanceof Blob) {
		    return encodeBlob(packet, supportsBinary, callback);
		  }

		  // might be an object with { base64: true, data: dataAsBase64String }
		  if (data && data.base64) {
		    return encodeBase64Object(packet, callback);
		  }

		  // Sending data as a utf-8 string
		  var encoded = packets[packet.type];

		  // data fragment is optional
		  if (undefined !== packet.data) {
		    encoded += utf8encode ? utf8$1.encode(String(packet.data), { strict: false }) : String(packet.data);
		  }

		  return callback('' + encoded);

		};

		function encodeBase64Object(packet, callback) {
		  // packet data is an object { base64: true, data: dataAsBase64String }
		  var message = 'b' + exports.packets[packet.type] + packet.data.data;
		  return callback(message);
		}

		/**
		 * Encode packet helpers for binary types
		 */

		function encodeArrayBuffer(packet, supportsBinary, callback) {
		  if (!supportsBinary) {
		    return exports.encodeBase64Packet(packet, callback);
		  }

		  var data = packet.data;
		  var contentArray = new Uint8Array(data);
		  var resultBuffer = new Uint8Array(1 + data.byteLength);

		  resultBuffer[0] = packets[packet.type];
		  for (var i = 0; i < contentArray.length; i++) {
		    resultBuffer[i+1] = contentArray[i];
		  }

		  return callback(resultBuffer.buffer);
		}

		function encodeBlobAsArrayBuffer(packet, supportsBinary, callback) {
		  if (!supportsBinary) {
		    return exports.encodeBase64Packet(packet, callback);
		  }

		  var fr = new FileReader();
		  fr.onload = function() {
		    exports.encodePacket({ type: packet.type, data: fr.result }, supportsBinary, true, callback);
		  };
		  return fr.readAsArrayBuffer(packet.data);
		}

		function encodeBlob(packet, supportsBinary, callback) {
		  if (!supportsBinary) {
		    return exports.encodeBase64Packet(packet, callback);
		  }

		  if (dontSendBlobs) {
		    return encodeBlobAsArrayBuffer(packet, supportsBinary, callback);
		  }

		  var length = new Uint8Array(1);
		  length[0] = packets[packet.type];
		  var blob = new Blob([length.buffer, packet.data]);

		  return callback(blob);
		}

		/**
		 * Encodes a packet with binary data in a base64 string
		 *
		 * @param {Object} packet, has `type` and `data`
		 * @return {String} base64 encoded message
		 */

		exports.encodeBase64Packet = function(packet, callback) {
		  var message = 'b' + exports.packets[packet.type];
		  if (typeof Blob !== 'undefined' && packet.data instanceof Blob) {
		    var fr = new FileReader();
		    fr.onload = function() {
		      var b64 = fr.result.split(',')[1];
		      callback(message + b64);
		    };
		    return fr.readAsDataURL(packet.data);
		  }

		  var b64data;
		  try {
		    b64data = String.fromCharCode.apply(null, new Uint8Array(packet.data));
		  } catch (e) {
		    // iPhone Safari doesn't let you apply with typed arrays
		    var typed = new Uint8Array(packet.data);
		    var basic = new Array(typed.length);
		    for (var i = 0; i < typed.length; i++) {
		      basic[i] = typed[i];
		    }
		    b64data = String.fromCharCode.apply(null, basic);
		  }
		  message += btoa(b64data);
		  return callback(message);
		};

		/**
		 * Decodes a packet. Changes format to Blob if requested.
		 *
		 * @return {Object} with `type` and `data` (if any)
		 * @api private
		 */

		exports.decodePacket = function (data, binaryType, utf8decode) {
		  if (data === undefined) {
		    return err;
		  }
		  // String data
		  if (typeof data === 'string') {
		    if (data.charAt(0) === 'b') {
		      return exports.decodeBase64Packet(data.substr(1), binaryType);
		    }

		    if (utf8decode) {
		      data = tryDecode(data);
		      if (data === false) {
		        return err;
		      }
		    }
		    var type = data.charAt(0);

		    if (Number(type) != type || !packetslist[type]) {
		      return err;
		    }

		    if (data.length > 1) {
		      return { type: packetslist[type], data: data.substring(1) };
		    } else {
		      return { type: packetslist[type] };
		    }
		  }

		  var asArray = new Uint8Array(data);
		  var type = asArray[0];
		  var rest = sliceBuffer(data, 1);
		  if (Blob && binaryType === 'blob') {
		    rest = new Blob([rest]);
		  }
		  return { type: packetslist[type], data: rest };
		};

		function tryDecode(data) {
		  try {
		    data = utf8$1.decode(data, { strict: false });
		  } catch (e) {
		    return false;
		  }
		  return data;
		}

		/**
		 * Decodes a packet encoded in a base64 string
		 *
		 * @param {String} base64 encoded message
		 * @return {Object} with `type` and `data` (if any)
		 */

		exports.decodeBase64Packet = function(msg, binaryType) {
		  var type = packetslist[msg.charAt(0)];
		  if (!base64encoder) {
		    return { type: type, data: { base64: true, data: msg.substr(1) } };
		  }

		  var data = base64encoder.decode(msg.substr(1));

		  if (binaryType === 'blob' && Blob) {
		    data = new Blob([data]);
		  }

		  return { type: type, data: data };
		};

		/**
		 * Encodes multiple messages (payload).
		 *
		 *     <length>:data
		 *
		 * Example:
		 *
		 *     11:hello world2:hi
		 *
		 * If any contents are binary, they will be encoded as base64 strings. Base64
		 * encoded strings are marked with a b before the length specifier
		 *
		 * @param {Array} packets
		 * @api private
		 */

		exports.encodePayload = function (packets, supportsBinary, callback) {
		  if (typeof supportsBinary === 'function') {
		    callback = supportsBinary;
		    supportsBinary = null;
		  }

		  var isBinary = hasBinary(packets);

		  if (supportsBinary && isBinary) {
		    if (Blob && !dontSendBlobs) {
		      return exports.encodePayloadAsBlob(packets, callback);
		    }

		    return exports.encodePayloadAsArrayBuffer(packets, callback);
		  }

		  if (!packets.length) {
		    return callback('0:');
		  }

		  function setLengthHeader(message) {
		    return message.length + ':' + message;
		  }

		  function encodeOne(packet, doneCallback) {
		    exports.encodePacket(packet, !isBinary ? false : supportsBinary, false, function(message) {
		      doneCallback(null, setLengthHeader(message));
		    });
		  }

		  map(packets, encodeOne, function(err, results) {
		    return callback(results.join(''));
		  });
		};

		/**
		 * Async array map using after
		 */

		function map(ary, each, done) {
		  var result = new Array(ary.length);
		  var next = after(ary.length, done);

		  var eachWithIndex = function(i, el, cb) {
		    each(el, function(error, msg) {
		      result[i] = msg;
		      cb(error, result);
		    });
		  };

		  for (var i = 0; i < ary.length; i++) {
		    eachWithIndex(i, ary[i], next);
		  }
		}

		/*
		 * Decodes data when a payload is maybe expected. Possible binary contents are
		 * decoded from their base64 representation
		 *
		 * @param {String} data, callback method
		 * @api public
		 */

		exports.decodePayload = function (data, binaryType, callback) {
		  if (typeof data !== 'string') {
		    return exports.decodePayloadAsBinary(data, binaryType, callback);
		  }

		  if (typeof binaryType === 'function') {
		    callback = binaryType;
		    binaryType = null;
		  }

		  var packet;
		  if (data === '') {
		    // parser error - ignoring payload
		    return callback(err, 0, 1);
		  }

		  var length = '', n, msg;

		  for (var i = 0, l = data.length; i < l; i++) {
		    var chr = data.charAt(i);

		    if (chr !== ':') {
		      length += chr;
		      continue;
		    }

		    if (length === '' || (length != (n = Number(length)))) {
		      // parser error - ignoring payload
		      return callback(err, 0, 1);
		    }

		    msg = data.substr(i + 1, n);

		    if (length != msg.length) {
		      // parser error - ignoring payload
		      return callback(err, 0, 1);
		    }

		    if (msg.length) {
		      packet = exports.decodePacket(msg, binaryType, false);

		      if (err.type === packet.type && err.data === packet.data) {
		        // parser error in individual packet - ignoring payload
		        return callback(err, 0, 1);
		      }

		      var ret = callback(packet, i + n, l);
		      if (false === ret) return;
		    }

		    // advance cursor
		    i += n;
		    length = '';
		  }

		  if (length !== '') {
		    // parser error - ignoring payload
		    return callback(err, 0, 1);
		  }

		};

		/**
		 * Encodes multiple messages (payload) as binary.
		 *
		 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
		 * 255><data>
		 *
		 * Example:
		 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
		 *
		 * @param {Array} packets
		 * @return {ArrayBuffer} encoded payload
		 * @api private
		 */

		exports.encodePayloadAsArrayBuffer = function(packets, callback) {
		  if (!packets.length) {
		    return callback(new ArrayBuffer(0));
		  }

		  function encodeOne(packet, doneCallback) {
		    exports.encodePacket(packet, true, true, function(data) {
		      return doneCallback(null, data);
		    });
		  }

		  map(packets, encodeOne, function(err, encodedPackets) {
		    var totalLength = encodedPackets.reduce(function(acc, p) {
		      var len;
		      if (typeof p === 'string'){
		        len = p.length;
		      } else {
		        len = p.byteLength;
		      }
		      return acc + len.toString().length + len + 2; // string/binary identifier + separator = 2
		    }, 0);

		    var resultArray = new Uint8Array(totalLength);

		    var bufferIndex = 0;
		    encodedPackets.forEach(function(p) {
		      var isString = typeof p === 'string';
		      var ab = p;
		      if (isString) {
		        var view = new Uint8Array(p.length);
		        for (var i = 0; i < p.length; i++) {
		          view[i] = p.charCodeAt(i);
		        }
		        ab = view.buffer;
		      }

		      if (isString) { // not true binary
		        resultArray[bufferIndex++] = 0;
		      } else { // true binary
		        resultArray[bufferIndex++] = 1;
		      }

		      var lenStr = ab.byteLength.toString();
		      for (var i = 0; i < lenStr.length; i++) {
		        resultArray[bufferIndex++] = parseInt(lenStr[i]);
		      }
		      resultArray[bufferIndex++] = 255;

		      var view = new Uint8Array(ab);
		      for (var i = 0; i < view.length; i++) {
		        resultArray[bufferIndex++] = view[i];
		      }
		    });

		    return callback(resultArray.buffer);
		  });
		};

		/**
		 * Encode as Blob
		 */

		exports.encodePayloadAsBlob = function(packets, callback) {
		  function encodeOne(packet, doneCallback) {
		    exports.encodePacket(packet, true, true, function(encoded) {
		      var binaryIdentifier = new Uint8Array(1);
		      binaryIdentifier[0] = 1;
		      if (typeof encoded === 'string') {
		        var view = new Uint8Array(encoded.length);
		        for (var i = 0; i < encoded.length; i++) {
		          view[i] = encoded.charCodeAt(i);
		        }
		        encoded = view.buffer;
		        binaryIdentifier[0] = 0;
		      }

		      var len = (encoded instanceof ArrayBuffer)
		        ? encoded.byteLength
		        : encoded.size;

		      var lenStr = len.toString();
		      var lengthAry = new Uint8Array(lenStr.length + 1);
		      for (var i = 0; i < lenStr.length; i++) {
		        lengthAry[i] = parseInt(lenStr[i]);
		      }
		      lengthAry[lenStr.length] = 255;

		      if (Blob) {
		        var blob = new Blob([binaryIdentifier.buffer, lengthAry.buffer, encoded]);
		        doneCallback(null, blob);
		      }
		    });
		  }

		  map(packets, encodeOne, function(err, results) {
		    return callback(new Blob(results));
		  });
		};

		/*
		 * Decodes data when a payload is maybe expected. Strings are decoded by
		 * interpreting each byte as a key code for entries marked to start with 0. See
		 * description of encodePayloadAsBinary
		 *
		 * @param {ArrayBuffer} data, callback method
		 * @api public
		 */

		exports.decodePayloadAsBinary = function (data, binaryType, callback) {
		  if (typeof binaryType === 'function') {
		    callback = binaryType;
		    binaryType = null;
		  }

		  var bufferTail = data;
		  var buffers = [];

		  while (bufferTail.byteLength > 0) {
		    var tailArray = new Uint8Array(bufferTail);
		    var isString = tailArray[0] === 0;
		    var msgLength = '';

		    for (var i = 1; ; i++) {
		      if (tailArray[i] === 255) break;

		      // 310 = char length of Number.MAX_VALUE
		      if (msgLength.length > 310) {
		        return callback(err, 0, 1);
		      }

		      msgLength += tailArray[i];
		    }

		    bufferTail = sliceBuffer(bufferTail, 2 + msgLength.length);
		    msgLength = parseInt(msgLength);

		    var msg = sliceBuffer(bufferTail, 0, msgLength);
		    if (isString) {
		      try {
		        msg = String.fromCharCode.apply(null, new Uint8Array(msg));
		      } catch (e) {
		        // iPhone Safari doesn't let you apply to typed arrays
		        var typed = new Uint8Array(msg);
		        msg = '';
		        for (var i = 0; i < typed.length; i++) {
		          msg += String.fromCharCode(typed[i]);
		        }
		      }
		    }

		    buffers.push(msg);
		    bufferTail = sliceBuffer(bufferTail, msgLength);
		  }

		  var total = buffers.length;
		  buffers.forEach(function(buffer, i) {
		    callback(exports.decodePacket(buffer, binaryType, true), i, total);
		  });
		}; 
	} (browser$2));

	/**
	 * Module dependencies.
	 */

	var transport;
	var hasRequiredTransport;

	function requireTransport () {
		if (hasRequiredTransport) return transport;
		hasRequiredTransport = 1;
		var parser = browser$2;
		var Emitter = componentEmitterExports$1;

		/**
		 * Module exports.
		 */

		transport = Transport;

		/**
		 * Transport abstract constructor.
		 *
		 * @param {Object} options.
		 * @api private
		 */

		function Transport (opts) {
		  this.path = opts.path;
		  this.hostname = opts.hostname;
		  this.port = opts.port;
		  this.secure = opts.secure;
		  this.query = opts.query;
		  this.timestampParam = opts.timestampParam;
		  this.timestampRequests = opts.timestampRequests;
		  this.readyState = '';
		  this.agent = opts.agent || false;
		  this.socket = opts.socket;
		  this.enablesXDR = opts.enablesXDR;
		  this.withCredentials = opts.withCredentials;

		  // SSL options for Node.js client
		  this.pfx = opts.pfx;
		  this.key = opts.key;
		  this.passphrase = opts.passphrase;
		  this.cert = opts.cert;
		  this.ca = opts.ca;
		  this.ciphers = opts.ciphers;
		  this.rejectUnauthorized = opts.rejectUnauthorized;
		  this.forceNode = opts.forceNode;

		  // results of ReactNative environment detection
		  this.isReactNative = opts.isReactNative;

		  // other options for Node.js client
		  this.extraHeaders = opts.extraHeaders;
		  this.localAddress = opts.localAddress;
		}

		/**
		 * Mix in `Emitter`.
		 */

		Emitter(Transport.prototype);

		/**
		 * Emits an error.
		 *
		 * @param {String} str
		 * @return {Transport} for chaining
		 * @api public
		 */

		Transport.prototype.onError = function (msg, desc) {
		  var err = new Error(msg);
		  err.type = 'TransportError';
		  err.description = desc;
		  this.emit('error', err);
		  return this;
		};

		/**
		 * Opens the transport.
		 *
		 * @api public
		 */

		Transport.prototype.open = function () {
		  if ('closed' === this.readyState || '' === this.readyState) {
		    this.readyState = 'opening';
		    this.doOpen();
		  }

		  return this;
		};

		/**
		 * Closes the transport.
		 *
		 * @api private
		 */

		Transport.prototype.close = function () {
		  if ('opening' === this.readyState || 'open' === this.readyState) {
		    this.doClose();
		    this.onClose();
		  }

		  return this;
		};

		/**
		 * Sends multiple packets.
		 *
		 * @param {Array} packets
		 * @api private
		 */

		Transport.prototype.send = function (packets) {
		  if ('open' === this.readyState) {
		    this.write(packets);
		  } else {
		    throw new Error('Transport not open');
		  }
		};

		/**
		 * Called upon open
		 *
		 * @api private
		 */

		Transport.prototype.onOpen = function () {
		  this.readyState = 'open';
		  this.writable = true;
		  this.emit('open');
		};

		/**
		 * Called with data.
		 *
		 * @param {String} data
		 * @api private
		 */

		Transport.prototype.onData = function (data) {
		  var packet = parser.decodePacket(data, this.socket.binaryType);
		  this.onPacket(packet);
		};

		/**
		 * Called with a decoded packet.
		 */

		Transport.prototype.onPacket = function (packet) {
		  this.emit('packet', packet);
		};

		/**
		 * Called upon close.
		 *
		 * @api private
		 */

		Transport.prototype.onClose = function () {
		  this.readyState = 'closed';
		  this.emit('close');
		};
		return transport;
	}

	var parseqs$4 = {};

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	parseqs$4.encode = function (obj) {
	  var str = '';

	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      if (str.length) str += '&';
	      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
	    }
	  }

	  return str;
	};

	/**
	 * Parses a simple querystring into an object
	 *
	 * @param {String} qs
	 * @api private
	 */

	parseqs$4.decode = function(qs){
	  var qry = {};
	  var pairs = qs.split('&');
	  for (var i = 0, l = pairs.length; i < l; i++) {
	    var pair = pairs[i].split('=');
	    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
	  }
	  return qry;
	};

	var componentInherit = function(a, b){
	  var fn = function(){};
	  fn.prototype = b.prototype;
	  a.prototype = new fn;
	  a.prototype.constructor = a;
	};

	var alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split('')
	  , length = 64
	  , map = {}
	  , seed = 0
	  , i$1 = 0
	  , prev;

	/**
	 * Return a string representing the specified number.
	 *
	 * @param {Number} num The number to convert.
	 * @returns {String} The string representation of the number.
	 * @api public
	 */
	function encode(num) {
	  var encoded = '';

	  do {
	    encoded = alphabet[num % length] + encoded;
	    num = Math.floor(num / length);
	  } while (num > 0);

	  return encoded;
	}

	/**
	 * Return the integer value specified by the given string.
	 *
	 * @param {String} str The string to convert.
	 * @returns {Number} The integer value represented by the string.
	 * @api public
	 */
	function decode(str) {
	  var decoded = 0;

	  for (i$1 = 0; i$1 < str.length; i$1++) {
	    decoded = decoded * length + map[str.charAt(i$1)];
	  }

	  return decoded;
	}

	/**
	 * Yeast: A tiny growing id generator.
	 *
	 * @returns {String} A unique id.
	 * @api public
	 */
	function yeast$2() {
	  var now = encode(+new Date());

	  if (now !== prev) return seed = 0, prev = now;
	  return now +'.'+ encode(seed++);
	}

	//
	// Map each character to its index.
	//
	for (; i$1 < length; i$1++) map[alphabet[i$1]] = i$1;

	//
	// Expose the `yeast`, `encode` and `decode` functions.
	//
	yeast$2.encode = encode;
	yeast$2.decode = decode;
	var yeast_1 = yeast$2;

	var browser$1 = {exports: {}};

	var debug$5 = {exports: {}};

	(function (module, exports) {
		/**
		 * This is the common logic for both the Node.js and web browser
		 * implementations of `debug()`.
		 *
		 * Expose `debug()` as the module.
		 */

		exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
		exports.coerce = coerce;
		exports.disable = disable;
		exports.enable = enable;
		exports.enabled = enabled;
		exports.humanize = ms;

		/**
		 * Active `debug` instances.
		 */
		exports.instances = [];

		/**
		 * The currently active debug mode names, and names to skip.
		 */

		exports.names = [];
		exports.skips = [];

		/**
		 * Map of special "%n" handling functions, for the debug "format" argument.
		 *
		 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		 */

		exports.formatters = {};

		/**
		 * Select a color.
		 * @param {String} namespace
		 * @return {Number}
		 * @api private
		 */

		function selectColor(namespace) {
		  var hash = 0, i;

		  for (i in namespace) {
		    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
		    hash |= 0; // Convert to 32bit integer
		  }

		  return exports.colors[Math.abs(hash) % exports.colors.length];
		}

		/**
		 * Create a debugger with the given `namespace`.
		 *
		 * @param {String} namespace
		 * @return {Function}
		 * @api public
		 */

		function createDebug(namespace) {

		  var prevTime;

		  function debug() {
		    // disabled?
		    if (!debug.enabled) return;

		    var self = debug;

		    // set `diff` timestamp
		    var curr = +new Date();
		    var ms = curr - (prevTime || curr);
		    self.diff = ms;
		    self.prev = prevTime;
		    self.curr = curr;
		    prevTime = curr;

		    // turn the `arguments` into a proper Array
		    var args = new Array(arguments.length);
		    for (var i = 0; i < args.length; i++) {
		      args[i] = arguments[i];
		    }

		    args[0] = exports.coerce(args[0]);

		    if ('string' !== typeof args[0]) {
		      // anything else let's inspect with %O
		      args.unshift('%O');
		    }

		    // apply any `formatters` transformations
		    var index = 0;
		    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
		      // if we encounter an escaped % then don't increase the array index
		      if (match === '%%') return match;
		      index++;
		      var formatter = exports.formatters[format];
		      if ('function' === typeof formatter) {
		        var val = args[index];
		        match = formatter.call(self, val);

		        // now we need to remove `args[index]` since it's inlined in the `format`
		        args.splice(index, 1);
		        index--;
		      }
		      return match;
		    });

		    // apply env-specific formatting (colors, etc.)
		    exports.formatArgs.call(self, args);

		    var logFn = debug.log || exports.log || console.log.bind(console);
		    logFn.apply(self, args);
		  }

		  debug.namespace = namespace;
		  debug.enabled = exports.enabled(namespace);
		  debug.useColors = exports.useColors();
		  debug.color = selectColor(namespace);
		  debug.destroy = destroy;

		  // env-specific initialization logic for debug instances
		  if ('function' === typeof exports.init) {
		    exports.init(debug);
		  }

		  exports.instances.push(debug);

		  return debug;
		}

		function destroy () {
		  var index = exports.instances.indexOf(this);
		  if (index !== -1) {
		    exports.instances.splice(index, 1);
		    return true;
		  } else {
		    return false;
		  }
		}

		/**
		 * Enables a debug mode by namespaces. This can include modes
		 * separated by a colon and wildcards.
		 *
		 * @param {String} namespaces
		 * @api public
		 */

		function enable(namespaces) {
		  exports.save(namespaces);

		  exports.names = [];
		  exports.skips = [];

		  var i;
		  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
		  var len = split.length;

		  for (i = 0; i < len; i++) {
		    if (!split[i]) continue; // ignore empty strings
		    namespaces = split[i].replace(/\*/g, '.*?');
		    if (namespaces[0] === '-') {
		      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
		    } else {
		      exports.names.push(new RegExp('^' + namespaces + '$'));
		    }
		  }

		  for (i = 0; i < exports.instances.length; i++) {
		    var instance = exports.instances[i];
		    instance.enabled = exports.enabled(instance.namespace);
		  }
		}

		/**
		 * Disable debug output.
		 *
		 * @api public
		 */

		function disable() {
		  exports.enable('');
		}

		/**
		 * Returns true if the given mode name is enabled, false otherwise.
		 *
		 * @param {String} name
		 * @return {Boolean}
		 * @api public
		 */

		function enabled(name) {
		  if (name[name.length - 1] === '*') {
		    return true;
		  }
		  var i, len;
		  for (i = 0, len = exports.skips.length; i < len; i++) {
		    if (exports.skips[i].test(name)) {
		      return false;
		    }
		  }
		  for (i = 0, len = exports.names.length; i < len; i++) {
		    if (exports.names[i].test(name)) {
		      return true;
		    }
		  }
		  return false;
		}

		/**
		 * Coerce `val`.
		 *
		 * @param {Mixed} val
		 * @return {Mixed}
		 * @api private
		 */

		function coerce(val) {
		  if (val instanceof Error) return val.stack || val.message;
		  return val;
		} 
	} (debug$5, debug$5.exports));

	var debugExports = debug$5.exports;

	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	(function (module, exports) {
		exports = module.exports = debugExports;
		exports.log = log;
		exports.formatArgs = formatArgs;
		exports.save = save;
		exports.load = load;
		exports.useColors = useColors;
		exports.storage = 'undefined' != typeof chrome
		               && 'undefined' != typeof chrome.storage
		                  ? chrome.storage.local
		                  : localstorage();

		/**
		 * Colors.
		 */

		exports.colors = [
		  '#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC',
		  '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF',
		  '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC',
		  '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF',
		  '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC',
		  '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033',
		  '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366',
		  '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933',
		  '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC',
		  '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF',
		  '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'
		];

		/**
		 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
		 * and the Firebug extension (any Firefox version) are known
		 * to support "%c" CSS customizations.
		 *
		 * TODO: add a `localStorage` variable to explicitly enable/disable colors
		 */

		function useColors() {
		  // NB: In an Electron preload script, document will be defined but not fully
		  // initialized. Since we know we're in Chrome, we'll just detect this case
		  // explicitly
		  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
		    return true;
		  }

		  // Internet Explorer and Edge do not support colors.
		  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
		    return false;
		  }

		  // is webkit? http://stackoverflow.com/a/16459606/376773
		  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
		  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
		    // is firebug? http://stackoverflow.com/a/398120/376773
		    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
		    // is firefox >= v31?
		    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
		    // double check webkit in userAgent just in case we are in a worker
		    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
		}

		/**
		 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
		 */

		exports.formatters.j = function(v) {
		  try {
		    return JSON.stringify(v);
		  } catch (err) {
		    return '[UnexpectedJSONParseError]: ' + err.message;
		  }
		};


		/**
		 * Colorize log arguments if enabled.
		 *
		 * @api public
		 */

		function formatArgs(args) {
		  var useColors = this.useColors;

		  args[0] = (useColors ? '%c' : '')
		    + this.namespace
		    + (useColors ? ' %c' : ' ')
		    + args[0]
		    + (useColors ? '%c ' : ' ')
		    + '+' + exports.humanize(this.diff);

		  if (!useColors) return;

		  var c = 'color: ' + this.color;
		  args.splice(1, 0, c, 'color: inherit');

		  // the final "%c" is somewhat tricky, because there could be other
		  // arguments passed either before or after the %c, so we need to
		  // figure out the correct index to insert the CSS into
		  var index = 0;
		  var lastC = 0;
		  args[0].replace(/%[a-zA-Z%]/g, function(match) {
		    if ('%%' === match) return;
		    index++;
		    if ('%c' === match) {
		      // we only are interested in the *last* %c
		      // (the user may have provided their own)
		      lastC = index;
		    }
		  });

		  args.splice(lastC, 0, c);
		}

		/**
		 * Invokes `console.log()` when available.
		 * No-op when `console.log` is not a "function".
		 *
		 * @api public
		 */

		function log() {
		  // this hackery is required for IE8/9, where
		  // the `console.log` function doesn't have 'apply'
		  return 'object' === typeof console
		    && console.log
		    && Function.prototype.apply.call(console.log, console, arguments);
		}

		/**
		 * Save `namespaces`.
		 *
		 * @param {String} namespaces
		 * @api private
		 */

		function save(namespaces) {
		  try {
		    if (null == namespaces) {
		      exports.storage.removeItem('debug');
		    } else {
		      exports.storage.debug = namespaces;
		    }
		  } catch(e) {}
		}

		/**
		 * Load `namespaces`.
		 *
		 * @return {String} returns the previously persisted debug modes
		 * @api private
		 */

		function load() {
		  var r;
		  try {
		    r = exports.storage.debug;
		  } catch(e) {}

		  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
		  if (!r && typeof process !== 'undefined' && 'env' in process) {
		    r = process.env.DEBUG;
		  }

		  return r;
		}

		/**
		 * Enable namespaces listed in `localStorage.debug` initially.
		 */

		exports.enable(load());

		/**
		 * Localstorage attempts to return the localstorage.
		 *
		 * This is necessary because safari throws
		 * when a user disables cookies/localstorage
		 * and you attempt to access it.
		 *
		 * @return {LocalStorage}
		 * @api private
		 */

		function localstorage() {
		  try {
		    return window.localStorage;
		  } catch (e) {}
		} 
	} (browser$1, browser$1.exports));

	var browserExports = browser$1.exports;

	/**
	 * Module dependencies.
	 */

	var Transport$1 = requireTransport();
	var parseqs$3 = parseqs$4;
	var parser$4 = browser$2;
	var inherit$3 = componentInherit;
	var yeast$1 = yeast_1;
	var debug$4 = browserExports('engine.io-client:polling');

	/**
	 * Module exports.
	 */

	var polling$1 = Polling$2;

	/**
	 * Is XHR2 supported?
	 */

	var hasXHR2 = (function () {
	  var XMLHttpRequest = xmlhttprequest;
	  var xhr = new XMLHttpRequest({ xdomain: false });
	  return null != xhr.responseType;
	})();

	/**
	 * Polling interface.
	 *
	 * @param {Object} opts
	 * @api private
	 */

	function Polling$2 (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (!hasXHR2 || forceBase64) {
	    this.supportsBinary = false;
	  }
	  Transport$1.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit$3(Polling$2, Transport$1);

	/**
	 * Transport name.
	 */

	Polling$2.prototype.name = 'polling';

	/**
	 * Opens the socket (triggers polling). We write a PING message to determine
	 * when the transport is open.
	 *
	 * @api private
	 */

	Polling$2.prototype.doOpen = function () {
	  this.poll();
	};

	/**
	 * Pauses polling.
	 *
	 * @param {Function} callback upon buffers are flushed and transport is paused
	 * @api private
	 */

	Polling$2.prototype.pause = function (onPause) {
	  var self = this;

	  this.readyState = 'pausing';

	  function pause () {
	    debug$4('paused');
	    self.readyState = 'paused';
	    onPause();
	  }

	  if (this.polling || !this.writable) {
	    var total = 0;

	    if (this.polling) {
	      debug$4('we are currently polling - waiting to pause');
	      total++;
	      this.once('pollComplete', function () {
	        debug$4('pre-pause polling complete');
	        --total || pause();
	      });
	    }

	    if (!this.writable) {
	      debug$4('we are currently writing - waiting to pause');
	      total++;
	      this.once('drain', function () {
	        debug$4('pre-pause writing complete');
	        --total || pause();
	      });
	    }
	  } else {
	    pause();
	  }
	};

	/**
	 * Starts polling cycle.
	 *
	 * @api public
	 */

	Polling$2.prototype.poll = function () {
	  debug$4('polling');
	  this.polling = true;
	  this.doPoll();
	  this.emit('poll');
	};

	/**
	 * Overloads onData to detect payloads.
	 *
	 * @api private
	 */

	Polling$2.prototype.onData = function (data) {
	  var self = this;
	  debug$4('polling got data %s', data);
	  var callback = function (packet, index, total) {
	    // if its the first message we consider the transport open
	    if ('opening' === self.readyState) {
	      self.onOpen();
	    }

	    // if its a close packet, we close the ongoing requests
	    if ('close' === packet.type) {
	      self.onClose();
	      return false;
	    }

	    // otherwise bypass onData and handle the message
	    self.onPacket(packet);
	  };

	  // decode payload
	  parser$4.decodePayload(data, this.socket.binaryType, callback);

	  // if an event did not trigger closing
	  if ('closed' !== this.readyState) {
	    // if we got data we're not polling
	    this.polling = false;
	    this.emit('pollComplete');

	    if ('open' === this.readyState) {
	      this.poll();
	    } else {
	      debug$4('ignoring poll - transport state "%s"', this.readyState);
	    }
	  }
	};

	/**
	 * For polling, send a close packet.
	 *
	 * @api private
	 */

	Polling$2.prototype.doClose = function () {
	  var self = this;

	  function close () {
	    debug$4('writing close packet');
	    self.write([{ type: 'close' }]);
	  }

	  if ('open' === this.readyState) {
	    debug$4('transport open - closing');
	    close();
	  } else {
	    // in case we're trying to close while
	    // handshaking is in progress (GH-164)
	    debug$4('transport not open - deferring close');
	    this.once('open', close);
	  }
	};

	/**
	 * Writes a packets payload.
	 *
	 * @param {Array} data packets
	 * @param {Function} drain callback
	 * @api private
	 */

	Polling$2.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;
	  var callbackfn = function () {
	    self.writable = true;
	    self.emit('drain');
	  };

	  parser$4.encodePayload(packets, this.supportsBinary, function (data) {
	    self.doWrite(data, callbackfn);
	  });
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	Polling$2.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'https' : 'http';
	  var port = '';

	  // cache busting is forced
	  if (false !== this.timestampRequests) {
	    query[this.timestampParam] = yeast$1();
	  }

	  if (!this.supportsBinary && !query.sid) {
	    query.b64 = 1;
	  }

	  query = parseqs$3.encode(query);

	  // avoid port if default for schema
	  if (this.port && (('https' === schema && Number(this.port) !== 443) ||
	     ('http' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/* global attachEvent */

	/**
	 * Module requirements.
	 */

	var XMLHttpRequest$2 = xmlhttprequest;
	var Polling$1 = polling$1;
	var Emitter$2 = componentEmitterExports$1;
	var inherit$2 = componentInherit;
	var debug$3 = browserExports('engine.io-client:polling-xhr');
	var globalThis$2 = globalThis_browser;

	/**
	 * Module exports.
	 */

	pollingXhr.exports = XHR$1;
	pollingXhr.exports.Request = Request;

	/**
	 * Empty function
	 */

	function empty$2 () {}

	/**
	 * XHR Polling constructor.
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function XHR$1 (opts) {
	  Polling$1.call(this, opts);
	  this.requestTimeout = opts.requestTimeout;
	  this.extraHeaders = opts.extraHeaders;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    this.xd = (typeof location !== 'undefined' && opts.hostname !== location.hostname) ||
	      port !== opts.port;
	    this.xs = opts.secure !== isSSL;
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit$2(XHR$1, Polling$1);

	/**
	 * XHR supports binary
	 */

	XHR$1.prototype.supportsBinary = true;

	/**
	 * Creates a request.
	 *
	 * @param {String} method
	 * @api private
	 */

	XHR$1.prototype.request = function (opts) {
	  opts = opts || {};
	  opts.uri = this.uri();
	  opts.xd = this.xd;
	  opts.xs = this.xs;
	  opts.agent = this.agent || false;
	  opts.supportsBinary = this.supportsBinary;
	  opts.enablesXDR = this.enablesXDR;
	  opts.withCredentials = this.withCredentials;

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;
	  opts.requestTimeout = this.requestTimeout;

	  // other options for Node.js client
	  opts.extraHeaders = this.extraHeaders;

	  return new Request(opts);
	};

	/**
	 * Sends data.
	 *
	 * @param {String} data to send.
	 * @param {Function} called upon flush.
	 * @api private
	 */

	XHR$1.prototype.doWrite = function (data, fn) {
	  var isBinary = typeof data !== 'string' && data !== undefined;
	  var req = this.request({ method: 'POST', data: data, isBinary: isBinary });
	  var self = this;
	  req.on('success', fn);
	  req.on('error', function (err) {
	    self.onError('xhr post error', err);
	  });
	  this.sendXhr = req;
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	XHR$1.prototype.doPoll = function () {
	  debug$3('xhr poll');
	  var req = this.request();
	  var self = this;
	  req.on('data', function (data) {
	    self.onData(data);
	  });
	  req.on('error', function (err) {
	    self.onError('xhr poll error', err);
	  });
	  this.pollXhr = req;
	};

	/**
	 * Request constructor
	 *
	 * @param {Object} options
	 * @api public
	 */

	function Request (opts) {
	  this.method = opts.method || 'GET';
	  this.uri = opts.uri;
	  this.xd = !!opts.xd;
	  this.xs = !!opts.xs;
	  this.async = false !== opts.async;
	  this.data = undefined !== opts.data ? opts.data : null;
	  this.agent = opts.agent;
	  this.isBinary = opts.isBinary;
	  this.supportsBinary = opts.supportsBinary;
	  this.enablesXDR = opts.enablesXDR;
	  this.withCredentials = opts.withCredentials;
	  this.requestTimeout = opts.requestTimeout;

	  // SSL options for Node.js client
	  this.pfx = opts.pfx;
	  this.key = opts.key;
	  this.passphrase = opts.passphrase;
	  this.cert = opts.cert;
	  this.ca = opts.ca;
	  this.ciphers = opts.ciphers;
	  this.rejectUnauthorized = opts.rejectUnauthorized;

	  // other options for Node.js client
	  this.extraHeaders = opts.extraHeaders;

	  this.create();
	}

	/**
	 * Mix in `Emitter`.
	 */

	Emitter$2(Request.prototype);

	/**
	 * Creates the XHR object and sends the request.
	 *
	 * @api private
	 */

	Request.prototype.create = function () {
	  var opts = { agent: this.agent, xdomain: this.xd, xscheme: this.xs, enablesXDR: this.enablesXDR };

	  // SSL options for Node.js client
	  opts.pfx = this.pfx;
	  opts.key = this.key;
	  opts.passphrase = this.passphrase;
	  opts.cert = this.cert;
	  opts.ca = this.ca;
	  opts.ciphers = this.ciphers;
	  opts.rejectUnauthorized = this.rejectUnauthorized;

	  var xhr = this.xhr = new XMLHttpRequest$2(opts);
	  var self = this;

	  try {
	    debug$3('xhr open %s: %s', this.method, this.uri);
	    xhr.open(this.method, this.uri, this.async);
	    try {
	      if (this.extraHeaders) {
	        xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
	        for (var i in this.extraHeaders) {
	          if (this.extraHeaders.hasOwnProperty(i)) {
	            xhr.setRequestHeader(i, this.extraHeaders[i]);
	          }
	        }
	      }
	    } catch (e) {}

	    if ('POST' === this.method) {
	      try {
	        if (this.isBinary) {
	          xhr.setRequestHeader('Content-type', 'application/octet-stream');
	        } else {
	          xhr.setRequestHeader('Content-type', 'text/plain;charset=UTF-8');
	        }
	      } catch (e) {}
	    }

	    try {
	      xhr.setRequestHeader('Accept', '*/*');
	    } catch (e) {}

	    // ie6 check
	    if ('withCredentials' in xhr) {
	      xhr.withCredentials = this.withCredentials;
	    }

	    if (this.requestTimeout) {
	      xhr.timeout = this.requestTimeout;
	    }

	    if (this.hasXDR()) {
	      xhr.onload = function () {
	        self.onLoad();
	      };
	      xhr.onerror = function () {
	        self.onError(xhr.responseText);
	      };
	    } else {
	      xhr.onreadystatechange = function () {
	        if (xhr.readyState === 2) {
	          try {
	            var contentType = xhr.getResponseHeader('Content-Type');
	            if (self.supportsBinary && contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
	              xhr.responseType = 'arraybuffer';
	            }
	          } catch (e) {}
	        }
	        if (4 !== xhr.readyState) return;
	        if (200 === xhr.status || 1223 === xhr.status) {
	          self.onLoad();
	        } else {
	          // make sure the `error` event handler that's user-set
	          // does not throw in the same tick and gets caught here
	          setTimeout(function () {
	            self.onError(typeof xhr.status === 'number' ? xhr.status : 0);
	          }, 0);
	        }
	      };
	    }

	    debug$3('xhr data %s', this.data);
	    xhr.send(this.data);
	  } catch (e) {
	    // Need to defer since .create() is called directly fhrom the constructor
	    // and thus the 'error' event can only be only bound *after* this exception
	    // occurs.  Therefore, also, we cannot throw here at all.
	    setTimeout(function () {
	      self.onError(e);
	    }, 0);
	    return;
	  }

	  if (typeof document !== 'undefined') {
	    this.index = Request.requestsCount++;
	    Request.requests[this.index] = this;
	  }
	};

	/**
	 * Called upon successful response.
	 *
	 * @api private
	 */

	Request.prototype.onSuccess = function () {
	  this.emit('success');
	  this.cleanup();
	};

	/**
	 * Called if we have data.
	 *
	 * @api private
	 */

	Request.prototype.onData = function (data) {
	  this.emit('data', data);
	  this.onSuccess();
	};

	/**
	 * Called upon error.
	 *
	 * @api private
	 */

	Request.prototype.onError = function (err) {
	  this.emit('error', err);
	  this.cleanup(true);
	};

	/**
	 * Cleans up house.
	 *
	 * @api private
	 */

	Request.prototype.cleanup = function (fromError) {
	  if ('undefined' === typeof this.xhr || null === this.xhr) {
	    return;
	  }
	  // xmlhttprequest
	  if (this.hasXDR()) {
	    this.xhr.onload = this.xhr.onerror = empty$2;
	  } else {
	    this.xhr.onreadystatechange = empty$2;
	  }

	  if (fromError) {
	    try {
	      this.xhr.abort();
	    } catch (e) {}
	  }

	  if (typeof document !== 'undefined') {
	    delete Request.requests[this.index];
	  }

	  this.xhr = null;
	};

	/**
	 * Called upon load.
	 *
	 * @api private
	 */

	Request.prototype.onLoad = function () {
	  var data;
	  try {
	    var contentType;
	    try {
	      contentType = this.xhr.getResponseHeader('Content-Type');
	    } catch (e) {}
	    if (contentType === 'application/octet-stream' || contentType === 'application/octet-stream; charset=UTF-8') {
	      data = this.xhr.response || this.xhr.responseText;
	    } else {
	      data = this.xhr.responseText;
	    }
	  } catch (e) {
	    this.onError(e);
	  }
	  if (null != data) {
	    this.onData(data);
	  }
	};

	/**
	 * Check if it has XDomainRequest.
	 *
	 * @api private
	 */

	Request.prototype.hasXDR = function () {
	  return typeof XDomainRequest !== 'undefined' && !this.xs && this.enablesXDR;
	};

	/**
	 * Aborts the request.
	 *
	 * @api public
	 */

	Request.prototype.abort = function () {
	  this.cleanup();
	};

	/**
	 * Aborts pending requests when unloading the window. This is needed to prevent
	 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
	 * emitted.
	 */

	Request.requestsCount = 0;
	Request.requests = {};

	if (typeof document !== 'undefined') {
	  if (typeof attachEvent === 'function') {
	    attachEvent('onunload', unloadHandler);
	  } else if (typeof addEventListener === 'function') {
	    var terminationEvent = 'onpagehide' in globalThis$2 ? 'pagehide' : 'unload';
	    addEventListener(terminationEvent, unloadHandler, false);
	  }
	}

	function unloadHandler () {
	  for (var i in Request.requests) {
	    if (Request.requests.hasOwnProperty(i)) {
	      Request.requests[i].abort();
	    }
	  }
	}

	var pollingXhrExports = pollingXhr.exports;

	/**
	 * Module requirements.
	 */

	var Polling = polling$1;
	var inherit$1 = componentInherit;
	var globalThis$1 = globalThis_browser;

	/**
	 * Module exports.
	 */

	var pollingJsonp = JSONPPolling;

	/**
	 * Cached regular expressions.
	 */

	var rNewline = /\n/g;
	var rEscapedNewline = /\\n/g;

	/**
	 * Global JSONP callbacks.
	 */

	var callbacks;

	/**
	 * Noop.
	 */

	function empty$1 () { }

	/**
	 * JSONP Polling constructor.
	 *
	 * @param {Object} opts.
	 * @api public
	 */

	function JSONPPolling (opts) {
	  Polling.call(this, opts);

	  this.query = this.query || {};

	  // define global callbacks array if not present
	  // we do this here (lazily) to avoid unneeded global pollution
	  if (!callbacks) {
	    // we need to consider multiple engines in the same page
	    callbacks = globalThis$1.___eio = (globalThis$1.___eio || []);
	  }

	  // callback identifier
	  this.index = callbacks.length;

	  // add callback to jsonp global
	  var self = this;
	  callbacks.push(function (msg) {
	    self.onData(msg);
	  });

	  // append to query string
	  this.query.j = this.index;

	  // prevent spurious errors from being emitted when the window is unloaded
	  if (typeof addEventListener === 'function') {
	    addEventListener('beforeunload', function () {
	      if (self.script) self.script.onerror = empty$1;
	    }, false);
	  }
	}

	/**
	 * Inherits from Polling.
	 */

	inherit$1(JSONPPolling, Polling);

	/*
	 * JSONP only supports binary as base64 encoded strings
	 */

	JSONPPolling.prototype.supportsBinary = false;

	/**
	 * Closes the socket.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doClose = function () {
	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  if (this.form) {
	    this.form.parentNode.removeChild(this.form);
	    this.form = null;
	    this.iframe = null;
	  }

	  Polling.prototype.doClose.call(this);
	};

	/**
	 * Starts a poll cycle.
	 *
	 * @api private
	 */

	JSONPPolling.prototype.doPoll = function () {
	  var self = this;
	  var script = document.createElement('script');

	  if (this.script) {
	    this.script.parentNode.removeChild(this.script);
	    this.script = null;
	  }

	  script.async = true;
	  script.src = this.uri();
	  script.onerror = function (e) {
	    self.onError('jsonp poll error', e);
	  };

	  var insertAt = document.getElementsByTagName('script')[0];
	  if (insertAt) {
	    insertAt.parentNode.insertBefore(script, insertAt);
	  } else {
	    (document.head || document.body).appendChild(script);
	  }
	  this.script = script;

	  var isUAgecko = 'undefined' !== typeof navigator && /gecko/i.test(navigator.userAgent);

	  if (isUAgecko) {
	    setTimeout(function () {
	      var iframe = document.createElement('iframe');
	      document.body.appendChild(iframe);
	      document.body.removeChild(iframe);
	    }, 100);
	  }
	};

	/**
	 * Writes with a hidden iframe.
	 *
	 * @param {String} data to send
	 * @param {Function} called upon flush.
	 * @api private
	 */

	JSONPPolling.prototype.doWrite = function (data, fn) {
	  var self = this;

	  if (!this.form) {
	    var form = document.createElement('form');
	    var area = document.createElement('textarea');
	    var id = this.iframeId = 'eio_iframe_' + this.index;
	    var iframe;

	    form.className = 'socketio';
	    form.style.position = 'absolute';
	    form.style.top = '-1000px';
	    form.style.left = '-1000px';
	    form.target = id;
	    form.method = 'POST';
	    form.setAttribute('accept-charset', 'utf-8');
	    area.name = 'd';
	    form.appendChild(area);
	    document.body.appendChild(form);

	    this.form = form;
	    this.area = area;
	  }

	  this.form.action = this.uri();

	  function complete () {
	    initIframe();
	    fn();
	  }

	  function initIframe () {
	    if (self.iframe) {
	      try {
	        self.form.removeChild(self.iframe);
	      } catch (e) {
	        self.onError('jsonp polling iframe removal error', e);
	      }
	    }

	    try {
	      // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	      var html = '<iframe src="javascript:0" name="' + self.iframeId + '">';
	      iframe = document.createElement(html);
	    } catch (e) {
	      iframe = document.createElement('iframe');
	      iframe.name = self.iframeId;
	      iframe.src = 'javascript:0';
	    }

	    iframe.id = self.iframeId;

	    self.form.appendChild(iframe);
	    self.iframe = iframe;
	  }

	  initIframe();

	  // escape \n to prevent it from being converted into \r\n by some UAs
	  // double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side
	  data = data.replace(rEscapedNewline, '\\\n');
	  this.area.value = data.replace(rNewline, '\\n');

	  try {
	    this.form.submit();
	  } catch (e) {}

	  if (this.iframe.attachEvent) {
	    this.iframe.onreadystatechange = function () {
	      if (self.iframe.readyState === 'complete') {
	        complete();
	      }
	    };
	  } else {
	    this.iframe.onload = complete;
	  }
	};

	var _nodeResolve_empty = {};

	var _nodeResolve_empty$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		default: _nodeResolve_empty
	});

	var require$$6 = /*@__PURE__*/getAugmentedNamespace(_nodeResolve_empty$1);

	/**
	 * Module dependencies.
	 */

	var Transport = requireTransport();
	var parser$3 = browser$2;
	var parseqs$2 = parseqs$4;
	var inherit = componentInherit;
	var yeast = yeast_1;
	var debug$2 = browserExports('engine.io-client:websocket');

	var BrowserWebSocket, NodeWebSocket;

	if (typeof WebSocket !== 'undefined') {
	  BrowserWebSocket = WebSocket;
	} else if (typeof self !== 'undefined') {
	  BrowserWebSocket = self.WebSocket || self.MozWebSocket;
	}

	if (typeof window === 'undefined') {
	  try {
	    NodeWebSocket = require$$6;
	  } catch (e) { }
	}

	/**
	 * Get either the `WebSocket` or `MozWebSocket` globals
	 * in the browser or try to resolve WebSocket-compatible
	 * interface exposed by `ws` for Node-like environment.
	 */

	var WebSocketImpl = BrowserWebSocket || NodeWebSocket;

	/**
	 * Module exports.
	 */

	var websocket$1 = WS;

	/**
	 * WebSocket transport constructor.
	 *
	 * @api {Object} connection options
	 * @api public
	 */

	function WS (opts) {
	  var forceBase64 = (opts && opts.forceBase64);
	  if (forceBase64) {
	    this.supportsBinary = false;
	  }
	  this.perMessageDeflate = opts.perMessageDeflate;
	  this.usingBrowserWebSocket = BrowserWebSocket && !opts.forceNode;
	  this.protocols = opts.protocols;
	  if (!this.usingBrowserWebSocket) {
	    WebSocketImpl = NodeWebSocket;
	  }
	  Transport.call(this, opts);
	}

	/**
	 * Inherits from Transport.
	 */

	inherit(WS, Transport);

	/**
	 * Transport name.
	 *
	 * @api public
	 */

	WS.prototype.name = 'websocket';

	/*
	 * WebSockets support binary
	 */

	WS.prototype.supportsBinary = true;

	/**
	 * Opens socket.
	 *
	 * @api private
	 */

	WS.prototype.doOpen = function () {
	  if (!this.check()) {
	    // let probe timeout
	    return;
	  }

	  var uri = this.uri();
	  var protocols = this.protocols;

	  var opts = {};

	  if (!this.isReactNative) {
	    opts.agent = this.agent;
	    opts.perMessageDeflate = this.perMessageDeflate;

	    // SSL options for Node.js client
	    opts.pfx = this.pfx;
	    opts.key = this.key;
	    opts.passphrase = this.passphrase;
	    opts.cert = this.cert;
	    opts.ca = this.ca;
	    opts.ciphers = this.ciphers;
	    opts.rejectUnauthorized = this.rejectUnauthorized;
	  }

	  if (this.extraHeaders) {
	    opts.headers = this.extraHeaders;
	  }
	  if (this.localAddress) {
	    opts.localAddress = this.localAddress;
	  }

	  try {
	    this.ws =
	      this.usingBrowserWebSocket && !this.isReactNative
	        ? protocols
	          ? new WebSocketImpl(uri, protocols)
	          : new WebSocketImpl(uri)
	        : new WebSocketImpl(uri, protocols, opts);
	  } catch (err) {
	    return this.emit('error', err);
	  }

	  if (this.ws.binaryType === undefined) {
	    this.supportsBinary = false;
	  }

	  if (this.ws.supports && this.ws.supports.binary) {
	    this.supportsBinary = true;
	    this.ws.binaryType = 'nodebuffer';
	  } else {
	    this.ws.binaryType = 'arraybuffer';
	  }

	  this.addEventListeners();
	};

	/**
	 * Adds event listeners to the socket
	 *
	 * @api private
	 */

	WS.prototype.addEventListeners = function () {
	  var self = this;

	  this.ws.onopen = function () {
	    self.onOpen();
	  };
	  this.ws.onclose = function () {
	    self.onClose();
	  };
	  this.ws.onmessage = function (ev) {
	    self.onData(ev.data);
	  };
	  this.ws.onerror = function (e) {
	    self.onError('websocket error', e);
	  };
	};

	/**
	 * Writes data to socket.
	 *
	 * @param {Array} array of packets.
	 * @api private
	 */

	WS.prototype.write = function (packets) {
	  var self = this;
	  this.writable = false;

	  // encodePacket efficient as it uses WS framing
	  // no need for encodePayload
	  var total = packets.length;
	  for (var i = 0, l = total; i < l; i++) {
	    (function (packet) {
	      parser$3.encodePacket(packet, self.supportsBinary, function (data) {
	        if (!self.usingBrowserWebSocket) {
	          // always create a new object (GH-437)
	          var opts = {};
	          if (packet.options) {
	            opts.compress = packet.options.compress;
	          }

	          if (self.perMessageDeflate) {
	            var len = 'string' === typeof data ? Buffer.byteLength(data) : data.length;
	            if (len < self.perMessageDeflate.threshold) {
	              opts.compress = false;
	            }
	          }
	        }

	        // Sometimes the websocket has already been closed but the browser didn't
	        // have a chance of informing us about it yet, in that case send will
	        // throw an error
	        try {
	          if (self.usingBrowserWebSocket) {
	            // TypeError is thrown when passing the second argument on Safari
	            self.ws.send(data);
	          } else {
	            self.ws.send(data, opts);
	          }
	        } catch (e) {
	          debug$2('websocket closed before onclose event');
	        }

	        --total || done();
	      });
	    })(packets[i]);
	  }

	  function done () {
	    self.emit('flush');

	    // fake drain
	    // defer to next tick to allow Socket to clear writeBuffer
	    setTimeout(function () {
	      self.writable = true;
	      self.emit('drain');
	    }, 0);
	  }
	};

	/**
	 * Called upon close
	 *
	 * @api private
	 */

	WS.prototype.onClose = function () {
	  Transport.prototype.onClose.call(this);
	};

	/**
	 * Closes socket.
	 *
	 * @api private
	 */

	WS.prototype.doClose = function () {
	  if (typeof this.ws !== 'undefined') {
	    this.ws.close();
	  }
	};

	/**
	 * Generates uri for connection.
	 *
	 * @api private
	 */

	WS.prototype.uri = function () {
	  var query = this.query || {};
	  var schema = this.secure ? 'wss' : 'ws';
	  var port = '';

	  // avoid port if default for schema
	  if (this.port && (('wss' === schema && Number(this.port) !== 443) ||
	    ('ws' === schema && Number(this.port) !== 80))) {
	    port = ':' + this.port;
	  }

	  // append timestamp to URI
	  if (this.timestampRequests) {
	    query[this.timestampParam] = yeast();
	  }

	  // communicate binary support capabilities
	  if (!this.supportsBinary) {
	    query.b64 = 1;
	  }

	  query = parseqs$2.encode(query);

	  // prepend ? to query
	  if (query.length) {
	    query = '?' + query;
	  }

	  var ipv6 = this.hostname.indexOf(':') !== -1;
	  return schema + '://' + (ipv6 ? '[' + this.hostname + ']' : this.hostname) + port + this.path + query;
	};

	/**
	 * Feature detection for WebSocket.
	 *
	 * @return {Boolean} whether this transport is available.
	 * @api public
	 */

	WS.prototype.check = function () {
	  return !!WebSocketImpl && !('__initialize' in WebSocketImpl && this.name === WS.prototype.name);
	};

	/**
	 * Module dependencies
	 */

	var XMLHttpRequest$1 = xmlhttprequest;
	var XHR = pollingXhrExports;
	var JSONP = pollingJsonp;
	var websocket = websocket$1;

	/**
	 * Export transports.
	 */

	transports$1.polling = polling;
	transports$1.websocket = websocket;

	/**
	 * Polling transport polymorphic constructor.
	 * Decides on xhr vs jsonp based on feature detection.
	 *
	 * @api private
	 */

	function polling (opts) {
	  var xhr;
	  var xd = false;
	  var xs = false;
	  var jsonp = false !== opts.jsonp;

	  if (typeof location !== 'undefined') {
	    var isSSL = 'https:' === location.protocol;
	    var port = location.port;

	    // some user agents have empty `location.port`
	    if (!port) {
	      port = isSSL ? 443 : 80;
	    }

	    xd = opts.hostname !== location.hostname || port !== opts.port;
	    xs = opts.secure !== isSSL;
	  }

	  opts.xdomain = xd;
	  opts.xscheme = xs;
	  xhr = new XMLHttpRequest$1(opts);

	  if ('open' in xhr && !opts.forceJSONP) {
	    return new XHR(opts);
	  } else {
	    if (!jsonp) throw new Error('JSONP disabled');
	    return new JSONP(opts);
	  }
	}

	var indexOf$1 = [].indexOf;

	var indexof = function(arr, obj){
	  if (indexOf$1) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

	/**
	 * Parses an URI
	 *
	 * @author Steven Levithan <stevenlevithan.com> (MIT license)
	 * @api private
	 */

	var re = /^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;

	var parts = [
	    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'
	];

	var parseuri$1 = function parseuri(str) {
	    var src = str,
	        b = str.indexOf('['),
	        e = str.indexOf(']');

	    if (b != -1 && e != -1) {
	        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);
	    }

	    var m = re.exec(str || ''),
	        uri = {},
	        i = 14;

	    while (i--) {
	        uri[parts[i]] = m[i] || '';
	    }

	    if (b != -1 && e != -1) {
	        uri.source = src;
	        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');
	        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');
	        uri.ipv6uri = true;
	    }

	    uri.pathNames = pathNames(uri, uri['path']);
	    uri.queryKey = queryKey(uri, uri['query']);

	    return uri;
	};

	function pathNames(obj, path) {
	    var regx = /\/{2,9}/g,
	        names = path.replace(regx, "/").split("/");

	    if (path.substr(0, 1) == '/' || path.length === 0) {
	        names.splice(0, 1);
	    }
	    if (path.substr(path.length - 1, 1) == '/') {
	        names.splice(names.length - 1, 1);
	    }

	    return names;
	}

	function queryKey(uri, query) {
	    var data = {};

	    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {
	        if ($1) {
	            data[$1] = $2;
	        }
	    });

	    return data;
	}

	/**
	 * Module dependencies.
	 */

	var transports = transports$1;
	var Emitter$1 = componentEmitterExports$1;
	var debug$1 = browserExports('engine.io-client:socket');
	var index = indexof;
	var parser$2 = browser$2;
	var parseuri = parseuri$1;
	var parseqs$1 = parseqs$4;

	/**
	 * Module exports.
	 */

	var socket$2 = Socket$1;

	/**
	 * Socket constructor.
	 *
	 * @param {String|Object} uri or options
	 * @param {Object} options
	 * @api public
	 */

	function Socket$1 (uri, opts) {
	  if (!(this instanceof Socket$1)) return new Socket$1(uri, opts);

	  opts = opts || {};

	  if (uri && 'object' === typeof uri) {
	    opts = uri;
	    uri = null;
	  }

	  if (uri) {
	    uri = parseuri(uri);
	    opts.hostname = uri.host;
	    opts.secure = uri.protocol === 'https' || uri.protocol === 'wss';
	    opts.port = uri.port;
	    if (uri.query) opts.query = uri.query;
	  } else if (opts.host) {
	    opts.hostname = parseuri(opts.host).host;
	  }

	  this.secure = null != opts.secure ? opts.secure
	    : (typeof location !== 'undefined' && 'https:' === location.protocol);

	  if (opts.hostname && !opts.port) {
	    // if no port is specified manually, use the protocol default
	    opts.port = this.secure ? '443' : '80';
	  }

	  this.agent = opts.agent || false;
	  this.hostname = opts.hostname ||
	    (typeof location !== 'undefined' ? location.hostname : 'localhost');
	  this.port = opts.port || (typeof location !== 'undefined' && location.port
	      ? location.port
	      : (this.secure ? 443 : 80));
	  this.query = opts.query || {};
	  if ('string' === typeof this.query) this.query = parseqs$1.decode(this.query);
	  this.upgrade = false !== opts.upgrade;
	  this.path = (opts.path || '/engine.io').replace(/\/$/, '') + '/';
	  this.forceJSONP = !!opts.forceJSONP;
	  this.jsonp = false !== opts.jsonp;
	  this.forceBase64 = !!opts.forceBase64;
	  this.enablesXDR = !!opts.enablesXDR;
	  this.withCredentials = false !== opts.withCredentials;
	  this.timestampParam = opts.timestampParam || 't';
	  this.timestampRequests = opts.timestampRequests;
	  this.transports = opts.transports || ['polling', 'websocket'];
	  this.transportOptions = opts.transportOptions || {};
	  this.readyState = '';
	  this.writeBuffer = [];
	  this.prevBufferLen = 0;
	  this.policyPort = opts.policyPort || 843;
	  this.rememberUpgrade = opts.rememberUpgrade || false;
	  this.binaryType = null;
	  this.onlyBinaryUpgrades = opts.onlyBinaryUpgrades;
	  this.perMessageDeflate = false !== opts.perMessageDeflate ? (opts.perMessageDeflate || {}) : false;

	  if (true === this.perMessageDeflate) this.perMessageDeflate = {};
	  if (this.perMessageDeflate && null == this.perMessageDeflate.threshold) {
	    this.perMessageDeflate.threshold = 1024;
	  }

	  // SSL options for Node.js client
	  this.pfx = opts.pfx || null;
	  this.key = opts.key || null;
	  this.passphrase = opts.passphrase || null;
	  this.cert = opts.cert || null;
	  this.ca = opts.ca || null;
	  this.ciphers = opts.ciphers || null;
	  this.rejectUnauthorized = opts.rejectUnauthorized === undefined ? true : opts.rejectUnauthorized;
	  this.forceNode = !!opts.forceNode;

	  // detect ReactNative environment
	  this.isReactNative = (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative');

	  // other options for Node.js or ReactNative client
	  if (typeof self === 'undefined' || this.isReactNative) {
	    if (opts.extraHeaders && Object.keys(opts.extraHeaders).length > 0) {
	      this.extraHeaders = opts.extraHeaders;
	    }

	    if (opts.localAddress) {
	      this.localAddress = opts.localAddress;
	    }
	  }

	  // set on handshake
	  this.id = null;
	  this.upgrades = null;
	  this.pingInterval = null;
	  this.pingTimeout = null;

	  // set on heartbeat
	  this.pingIntervalTimer = null;
	  this.pingTimeoutTimer = null;

	  this.open();
	}

	Socket$1.priorWebsocketSuccess = false;

	/**
	 * Mix in `Emitter`.
	 */

	Emitter$1(Socket$1.prototype);

	/**
	 * Protocol version.
	 *
	 * @api public
	 */

	Socket$1.protocol = parser$2.protocol; // this is an int

	/**
	 * Expose deps for legacy compatibility
	 * and standalone browser access.
	 */

	Socket$1.Socket = Socket$1;
	Socket$1.Transport = requireTransport();
	Socket$1.transports = transports$1;
	Socket$1.parser = browser$2;

	/**
	 * Creates transport of the given type.
	 *
	 * @param {String} transport name
	 * @return {Transport}
	 * @api private
	 */

	Socket$1.prototype.createTransport = function (name) {
	  debug$1('creating transport "%s"', name);
	  var query = clone(this.query);

	  // append engine.io protocol identifier
	  query.EIO = parser$2.protocol;

	  // transport name
	  query.transport = name;

	  // per-transport options
	  var options = this.transportOptions[name] || {};

	  // session id if we already have one
	  if (this.id) query.sid = this.id;

	  var transport = new transports[name]({
	    query: query,
	    socket: this,
	    agent: options.agent || this.agent,
	    hostname: options.hostname || this.hostname,
	    port: options.port || this.port,
	    secure: options.secure || this.secure,
	    path: options.path || this.path,
	    forceJSONP: options.forceJSONP || this.forceJSONP,
	    jsonp: options.jsonp || this.jsonp,
	    forceBase64: options.forceBase64 || this.forceBase64,
	    enablesXDR: options.enablesXDR || this.enablesXDR,
	    withCredentials: options.withCredentials || this.withCredentials,
	    timestampRequests: options.timestampRequests || this.timestampRequests,
	    timestampParam: options.timestampParam || this.timestampParam,
	    policyPort: options.policyPort || this.policyPort,
	    pfx: options.pfx || this.pfx,
	    key: options.key || this.key,
	    passphrase: options.passphrase || this.passphrase,
	    cert: options.cert || this.cert,
	    ca: options.ca || this.ca,
	    ciphers: options.ciphers || this.ciphers,
	    rejectUnauthorized: options.rejectUnauthorized || this.rejectUnauthorized,
	    perMessageDeflate: options.perMessageDeflate || this.perMessageDeflate,
	    extraHeaders: options.extraHeaders || this.extraHeaders,
	    forceNode: options.forceNode || this.forceNode,
	    localAddress: options.localAddress || this.localAddress,
	    requestTimeout: options.requestTimeout || this.requestTimeout,
	    protocols: options.protocols || void (0),
	    isReactNative: this.isReactNative
	  });

	  return transport;
	};

	function clone (obj) {
	  var o = {};
	  for (var i in obj) {
	    if (obj.hasOwnProperty(i)) {
	      o[i] = obj[i];
	    }
	  }
	  return o;
	}

	/**
	 * Initializes transport to use and starts probe.
	 *
	 * @api private
	 */
	Socket$1.prototype.open = function () {
	  var transport;
	  if (this.rememberUpgrade && Socket$1.priorWebsocketSuccess && this.transports.indexOf('websocket') !== -1) {
	    transport = 'websocket';
	  } else if (0 === this.transports.length) {
	    // Emit error on next tick so it can be listened to
	    var self = this;
	    setTimeout(function () {
	      self.emit('error', 'No transports available');
	    }, 0);
	    return;
	  } else {
	    transport = this.transports[0];
	  }
	  this.readyState = 'opening';

	  // Retry with the next transport if the transport is disabled (jsonp: false)
	  try {
	    transport = this.createTransport(transport);
	  } catch (e) {
	    this.transports.shift();
	    this.open();
	    return;
	  }

	  transport.open();
	  this.setTransport(transport);
	};

	/**
	 * Sets the current transport. Disables the existing one (if any).
	 *
	 * @api private
	 */

	Socket$1.prototype.setTransport = function (transport) {
	  debug$1('setting transport %s', transport.name);
	  var self = this;

	  if (this.transport) {
	    debug$1('clearing existing transport %s', this.transport.name);
	    this.transport.removeAllListeners();
	  }

	  // set up transport
	  this.transport = transport;

	  // set up transport listeners
	  transport
	  .on('drain', function () {
	    self.onDrain();
	  })
	  .on('packet', function (packet) {
	    self.onPacket(packet);
	  })
	  .on('error', function (e) {
	    self.onError(e);
	  })
	  .on('close', function () {
	    self.onClose('transport close');
	  });
	};

	/**
	 * Probes a transport.
	 *
	 * @param {String} transport name
	 * @api private
	 */

	Socket$1.prototype.probe = function (name) {
	  debug$1('probing transport "%s"', name);
	  var transport = this.createTransport(name, { probe: 1 });
	  var failed = false;
	  var self = this;

	  Socket$1.priorWebsocketSuccess = false;

	  function onTransportOpen () {
	    if (self.onlyBinaryUpgrades) {
	      var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;
	      failed = failed || upgradeLosesBinary;
	    }
	    if (failed) return;

	    debug$1('probe transport "%s" opened', name);
	    transport.send([{ type: 'ping', data: 'probe' }]);
	    transport.once('packet', function (msg) {
	      if (failed) return;
	      if ('pong' === msg.type && 'probe' === msg.data) {
	        debug$1('probe transport "%s" pong', name);
	        self.upgrading = true;
	        self.emit('upgrading', transport);
	        if (!transport) return;
	        Socket$1.priorWebsocketSuccess = 'websocket' === transport.name;

	        debug$1('pausing current transport "%s"', self.transport.name);
	        self.transport.pause(function () {
	          if (failed) return;
	          if ('closed' === self.readyState) return;
	          debug$1('changing transport and sending upgrade packet');

	          cleanup();

	          self.setTransport(transport);
	          transport.send([{ type: 'upgrade' }]);
	          self.emit('upgrade', transport);
	          transport = null;
	          self.upgrading = false;
	          self.flush();
	        });
	      } else {
	        debug$1('probe transport "%s" failed', name);
	        var err = new Error('probe error');
	        err.transport = transport.name;
	        self.emit('upgradeError', err);
	      }
	    });
	  }

	  function freezeTransport () {
	    if (failed) return;

	    // Any callback called by transport should be ignored since now
	    failed = true;

	    cleanup();

	    transport.close();
	    transport = null;
	  }

	  // Handle any error that happens while probing
	  function onerror (err) {
	    var error = new Error('probe error: ' + err);
	    error.transport = transport.name;

	    freezeTransport();

	    debug$1('probe transport "%s" failed because of error: %s', name, err);

	    self.emit('upgradeError', error);
	  }

	  function onTransportClose () {
	    onerror('transport closed');
	  }

	  // When the socket is closed while we're probing
	  function onclose () {
	    onerror('socket closed');
	  }

	  // When the socket is upgraded while we're probing
	  function onupgrade (to) {
	    if (transport && to.name !== transport.name) {
	      debug$1('"%s" works - aborting "%s"', to.name, transport.name);
	      freezeTransport();
	    }
	  }

	  // Remove all listeners on the transport and on self
	  function cleanup () {
	    transport.removeListener('open', onTransportOpen);
	    transport.removeListener('error', onerror);
	    transport.removeListener('close', onTransportClose);
	    self.removeListener('close', onclose);
	    self.removeListener('upgrading', onupgrade);
	  }

	  transport.once('open', onTransportOpen);
	  transport.once('error', onerror);
	  transport.once('close', onTransportClose);

	  this.once('close', onclose);
	  this.once('upgrading', onupgrade);

	  transport.open();
	};

	/**
	 * Called when connection is deemed open.
	 *
	 * @api public
	 */

	Socket$1.prototype.onOpen = function () {
	  debug$1('socket open');
	  this.readyState = 'open';
	  Socket$1.priorWebsocketSuccess = 'websocket' === this.transport.name;
	  this.emit('open');
	  this.flush();

	  // we check for `readyState` in case an `open`
	  // listener already closed the socket
	  if ('open' === this.readyState && this.upgrade && this.transport.pause) {
	    debug$1('starting upgrade probes');
	    for (var i = 0, l = this.upgrades.length; i < l; i++) {
	      this.probe(this.upgrades[i]);
	    }
	  }
	};

	/**
	 * Handles a packet.
	 *
	 * @api private
	 */

	Socket$1.prototype.onPacket = function (packet) {
	  if ('opening' === this.readyState || 'open' === this.readyState ||
	      'closing' === this.readyState) {
	    debug$1('socket receive: type "%s", data "%s"', packet.type, packet.data);

	    this.emit('packet', packet);

	    // Socket is live - any packet counts
	    this.emit('heartbeat');

	    switch (packet.type) {
	      case 'open':
	        this.onHandshake(JSON.parse(packet.data));
	        break;

	      case 'pong':
	        this.setPing();
	        this.emit('pong');
	        break;

	      case 'error':
	        var err = new Error('server error');
	        err.code = packet.data;
	        this.onError(err);
	        break;

	      case 'message':
	        this.emit('data', packet.data);
	        this.emit('message', packet.data);
	        break;
	    }
	  } else {
	    debug$1('packet received with socket readyState "%s"', this.readyState);
	  }
	};

	/**
	 * Called upon handshake completion.
	 *
	 * @param {Object} handshake obj
	 * @api private
	 */

	Socket$1.prototype.onHandshake = function (data) {
	  this.emit('handshake', data);
	  this.id = data.sid;
	  this.transport.query.sid = data.sid;
	  this.upgrades = this.filterUpgrades(data.upgrades);
	  this.pingInterval = data.pingInterval;
	  this.pingTimeout = data.pingTimeout;
	  this.onOpen();
	  // In case open handler closes socket
	  if ('closed' === this.readyState) return;
	  this.setPing();

	  // Prolong liveness of socket on heartbeat
	  this.removeListener('heartbeat', this.onHeartbeat);
	  this.on('heartbeat', this.onHeartbeat);
	};

	/**
	 * Resets ping timeout.
	 *
	 * @api private
	 */

	Socket$1.prototype.onHeartbeat = function (timeout) {
	  clearTimeout(this.pingTimeoutTimer);
	  var self = this;
	  self.pingTimeoutTimer = setTimeout(function () {
	    if ('closed' === self.readyState) return;
	    self.onClose('ping timeout');
	  }, timeout || (self.pingInterval + self.pingTimeout));
	};

	/**
	 * Pings server every `this.pingInterval` and expects response
	 * within `this.pingTimeout` or closes connection.
	 *
	 * @api private
	 */

	Socket$1.prototype.setPing = function () {
	  var self = this;
	  clearTimeout(self.pingIntervalTimer);
	  self.pingIntervalTimer = setTimeout(function () {
	    debug$1('writing ping packet - expecting pong within %sms', self.pingTimeout);
	    self.ping();
	    self.onHeartbeat(self.pingTimeout);
	  }, self.pingInterval);
	};

	/**
	* Sends a ping packet.
	*
	* @api private
	*/

	Socket$1.prototype.ping = function () {
	  var self = this;
	  this.sendPacket('ping', function () {
	    self.emit('ping');
	  });
	};

	/**
	 * Called on `drain` event
	 *
	 * @api private
	 */

	Socket$1.prototype.onDrain = function () {
	  this.writeBuffer.splice(0, this.prevBufferLen);

	  // setting prevBufferLen = 0 is very important
	  // for example, when upgrading, upgrade packet is sent over,
	  // and a nonzero prevBufferLen could cause problems on `drain`
	  this.prevBufferLen = 0;

	  if (0 === this.writeBuffer.length) {
	    this.emit('drain');
	  } else {
	    this.flush();
	  }
	};

	/**
	 * Flush write buffers.
	 *
	 * @api private
	 */

	Socket$1.prototype.flush = function () {
	  if ('closed' !== this.readyState && this.transport.writable &&
	    !this.upgrading && this.writeBuffer.length) {
	    debug$1('flushing %d packets in socket', this.writeBuffer.length);
	    this.transport.send(this.writeBuffer);
	    // keep track of current length of writeBuffer
	    // splice writeBuffer and callbackBuffer on `drain`
	    this.prevBufferLen = this.writeBuffer.length;
	    this.emit('flush');
	  }
	};

	/**
	 * Sends a message.
	 *
	 * @param {String} message.
	 * @param {Function} callback function.
	 * @param {Object} options.
	 * @return {Socket} for chaining.
	 * @api public
	 */

	Socket$1.prototype.write =
	Socket$1.prototype.send = function (msg, options, fn) {
	  this.sendPacket('message', msg, options, fn);
	  return this;
	};

	/**
	 * Sends a packet.
	 *
	 * @param {String} packet type.
	 * @param {String} data.
	 * @param {Object} options.
	 * @param {Function} callback function.
	 * @api private
	 */

	Socket$1.prototype.sendPacket = function (type, data, options, fn) {
	  if ('function' === typeof data) {
	    fn = data;
	    data = undefined;
	  }

	  if ('function' === typeof options) {
	    fn = options;
	    options = null;
	  }

	  if ('closing' === this.readyState || 'closed' === this.readyState) {
	    return;
	  }

	  options = options || {};
	  options.compress = false !== options.compress;

	  var packet = {
	    type: type,
	    data: data,
	    options: options
	  };
	  this.emit('packetCreate', packet);
	  this.writeBuffer.push(packet);
	  if (fn) this.once('flush', fn);
	  this.flush();
	};

	/**
	 * Closes the connection.
	 *
	 * @api private
	 */

	Socket$1.prototype.close = function () {
	  if ('opening' === this.readyState || 'open' === this.readyState) {
	    this.readyState = 'closing';

	    var self = this;

	    if (this.writeBuffer.length) {
	      this.once('drain', function () {
	        if (this.upgrading) {
	          waitForUpgrade();
	        } else {
	          close();
	        }
	      });
	    } else if (this.upgrading) {
	      waitForUpgrade();
	    } else {
	      close();
	    }
	  }

	  function close () {
	    self.onClose('forced close');
	    debug$1('socket closing - telling transport to close');
	    self.transport.close();
	  }

	  function cleanupAndClose () {
	    self.removeListener('upgrade', cleanupAndClose);
	    self.removeListener('upgradeError', cleanupAndClose);
	    close();
	  }

	  function waitForUpgrade () {
	    // wait for upgrade to finish since we can't send packets while pausing a transport
	    self.once('upgrade', cleanupAndClose);
	    self.once('upgradeError', cleanupAndClose);
	  }

	  return this;
	};

	/**
	 * Called upon transport error
	 *
	 * @api private
	 */

	Socket$1.prototype.onError = function (err) {
	  debug$1('socket error %j', err);
	  Socket$1.priorWebsocketSuccess = false;
	  this.emit('error', err);
	  this.onClose('transport error', err);
	};

	/**
	 * Called upon transport close.
	 *
	 * @api private
	 */

	Socket$1.prototype.onClose = function (reason, desc) {
	  if ('opening' === this.readyState || 'open' === this.readyState || 'closing' === this.readyState) {
	    debug$1('socket close with reason: "%s"', reason);
	    var self = this;

	    // clear timers
	    clearTimeout(this.pingIntervalTimer);
	    clearTimeout(this.pingTimeoutTimer);

	    // stop event from firing again for transport
	    this.transport.removeAllListeners('close');

	    // ensure transport won't stay open
	    this.transport.close();

	    // ignore further transport communication
	    this.transport.removeAllListeners();

	    // set ready state
	    this.readyState = 'closed';

	    // clear session id
	    this.id = null;

	    // emit close event
	    this.emit('close', reason, desc);

	    // clean buffers after, so users can still
	    // grab the buffers on `close` event
	    self.writeBuffer = [];
	    self.prevBufferLen = 0;
	  }
	};

	/**
	 * Filters upgrades, returning only those matching client transports.
	 *
	 * @param {Array} server upgrades
	 * @api private
	 *
	 */

	Socket$1.prototype.filterUpgrades = function (upgrades) {
	  var filteredUpgrades = [];
	  for (var i = 0, j = upgrades.length; i < j; i++) {
	    if (~index(this.transports, upgrades[i])) filteredUpgrades.push(upgrades[i]);
	  }
	  return filteredUpgrades;
	};

	lib.exports = socket$2;

	/**
	 * Exports parser
	 *
	 * @api public
	 *
	 */
	lib.exports.parser = browser$2;

	var libExports$1 = lib.exports;

	var socket$1 = {exports: {}};

	var componentEmitter = {exports: {}};

	(function (module) {
		/**
		 * Expose `Emitter`.
		 */

		{
		  module.exports = Emitter;
		}

		/**
		 * Initialize a new `Emitter`.
		 *
		 * @api public
		 */

		function Emitter(obj) {
		  if (obj) return mixin(obj);
		}
		/**
		 * Mixin the emitter properties.
		 *
		 * @param {Object} obj
		 * @return {Object}
		 * @api private
		 */

		function mixin(obj) {
		  for (var key in Emitter.prototype) {
		    obj[key] = Emitter.prototype[key];
		  }
		  return obj;
		}

		/**
		 * Listen on the given `event` with `fn`.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.on =
		Emitter.prototype.addEventListener = function(event, fn){
		  this._callbacks = this._callbacks || {};
		  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])
		    .push(fn);
		  return this;
		};

		/**
		 * Adds an `event` listener that will be invoked a single
		 * time then automatically removed.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.once = function(event, fn){
		  function on() {
		    this.off(event, on);
		    fn.apply(this, arguments);
		  }

		  on.fn = fn;
		  this.on(event, on);
		  return this;
		};

		/**
		 * Remove the given callback for `event` or all
		 * registered callbacks.
		 *
		 * @param {String} event
		 * @param {Function} fn
		 * @return {Emitter}
		 * @api public
		 */

		Emitter.prototype.off =
		Emitter.prototype.removeListener =
		Emitter.prototype.removeAllListeners =
		Emitter.prototype.removeEventListener = function(event, fn){
		  this._callbacks = this._callbacks || {};

		  // all
		  if (0 == arguments.length) {
		    this._callbacks = {};
		    return this;
		  }

		  // specific event
		  var callbacks = this._callbacks['$' + event];
		  if (!callbacks) return this;

		  // remove all handlers
		  if (1 == arguments.length) {
		    delete this._callbacks['$' + event];
		    return this;
		  }

		  // remove specific handler
		  var cb;
		  for (var i = 0; i < callbacks.length; i++) {
		    cb = callbacks[i];
		    if (cb === fn || cb.fn === fn) {
		      callbacks.splice(i, 1);
		      break;
		    }
		  }
		  return this;
		};

		/**
		 * Emit `event` with the given args.
		 *
		 * @param {String} event
		 * @param {Mixed} ...
		 * @return {Emitter}
		 */

		Emitter.prototype.emit = function(event){
		  this._callbacks = this._callbacks || {};
		  var args = [].slice.call(arguments, 1)
		    , callbacks = this._callbacks['$' + event];

		  if (callbacks) {
		    callbacks = callbacks.slice(0);
		    for (var i = 0, len = callbacks.length; i < len; ++i) {
		      callbacks[i].apply(this, args);
		    }
		  }

		  return this;
		};

		/**
		 * Return array of callbacks for `event`.
		 *
		 * @param {String} event
		 * @return {Array}
		 * @api public
		 */

		Emitter.prototype.listeners = function(event){
		  this._callbacks = this._callbacks || {};
		  return this._callbacks['$' + event] || [];
		};

		/**
		 * Check if this emitter has `event` handlers.
		 *
		 * @param {String} event
		 * @return {Boolean}
		 * @api public
		 */

		Emitter.prototype.hasListeners = function(event){
		  return !! this.listeners(event).length;
		}; 
	} (componentEmitter));

	var componentEmitterExports = componentEmitter.exports;

	var toArray_1;
	var hasRequiredToArray;

	function requireToArray () {
		if (hasRequiredToArray) return toArray_1;
		hasRequiredToArray = 1;
		toArray_1 = toArray;

		function toArray(list, index) {
		    var array = [];

		    index = index || 0;

		    for (var i = index || 0; i < list.length; i++) {
		        array[i - index] = list[i];
		    }

		    return array
		}
		return toArray_1;
	}

	/**
	 * Module exports.
	 */

	var on_1 = on$1;

	/**
	 * Helper for subscriptions.
	 *
	 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
	 * @param {String} event name
	 * @param {Function} callback
	 * @api public
	 */

	function on$1 (obj, ev, fn) {
	  obj.on(ev, fn);
	  return {
	    destroy: function () {
	      obj.removeListener(ev, fn);
	    }
	  };
	}

	/**
	 * Slice reference.
	 */

	var slice = [].slice;

	/**
	 * Bind `obj` to `fn`.
	 *
	 * @param {Object} obj
	 * @param {Function|String} fn or string
	 * @return {Function}
	 * @api public
	 */

	var componentBind = function(obj, fn){
	  if ('string' == typeof fn) fn = obj[fn];
	  if ('function' != typeof fn) throw new Error('bind() requires a function');
	  var args = slice.call(arguments, 2);
	  return function(){
	    return fn.apply(obj, args.concat(slice.call(arguments)));
	  }
	};

	var parseqs = {};

	/**
	 * Compiles a querystring
	 * Returns string representation of the object
	 *
	 * @param {Object}
	 * @api private
	 */

	var hasRequiredParseqs;

	function requireParseqs () {
		if (hasRequiredParseqs) return parseqs;
		hasRequiredParseqs = 1;
		parseqs.encode = function (obj) {
		  var str = '';

		  for (var i in obj) {
		    if (obj.hasOwnProperty(i)) {
		      if (str.length) str += '&';
		      str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);
		    }
		  }

		  return str;
		};

		/**
		 * Parses a simple querystring into an object
		 *
		 * @param {String} qs
		 * @api private
		 */

		parseqs.decode = function(qs){
		  var qry = {};
		  var pairs = qs.split('&');
		  for (var i = 0, l = pairs.length; i < l; i++) {
		    var pair = pairs[i].split('=');
		    qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
		  }
		  return qry;
		};
		return parseqs;
	}

	var hasRequiredSocket;

	function requireSocket () {
		if (hasRequiredSocket) return socket$1.exports;
		hasRequiredSocket = 1;
		(function (module, exports) {
			/**
			 * Module dependencies.
			 */

			var parser = socket_ioParser;
			var Emitter = componentEmitterExports;
			var toArray = requireToArray();
			var on = on_1;
			var bind = componentBind;
			var debug = browserExports$2('socket.io-client:socket');
			var parseqs = requireParseqs();
			var hasBin = requireHasBinary2();

			/**
			 * Module exports.
			 */

			module.exports = Socket;

			/**
			 * Internal events (blacklisted).
			 * These events can't be emitted by the user.
			 *
			 * @api private
			 */

			var events = {
			  connect: 1,
			  connect_error: 1,
			  connect_timeout: 1,
			  connecting: 1,
			  disconnect: 1,
			  error: 1,
			  reconnect: 1,
			  reconnect_attempt: 1,
			  reconnect_failed: 1,
			  reconnect_error: 1,
			  reconnecting: 1,
			  ping: 1,
			  pong: 1
			};

			/**
			 * Shortcut to `Emitter#emit`.
			 */

			var emit = Emitter.prototype.emit;

			/**
			 * `Socket` constructor.
			 *
			 * @api public
			 */

			function Socket (io, nsp, opts) {
			  this.io = io;
			  this.nsp = nsp;
			  this.json = this; // compat
			  this.ids = 0;
			  this.acks = {};
			  this.receiveBuffer = [];
			  this.sendBuffer = [];
			  this.connected = false;
			  this.disconnected = true;
			  this.flags = {};
			  if (opts && opts.query) {
			    this.query = opts.query;
			  }
			  if (this.io.autoConnect) this.open();
			}

			/**
			 * Mix in `Emitter`.
			 */

			Emitter(Socket.prototype);

			/**
			 * Subscribe to open, close and packet events
			 *
			 * @api private
			 */

			Socket.prototype.subEvents = function () {
			  if (this.subs) return;

			  var io = this.io;
			  this.subs = [
			    on(io, 'open', bind(this, 'onopen')),
			    on(io, 'packet', bind(this, 'onpacket')),
			    on(io, 'close', bind(this, 'onclose'))
			  ];
			};

			/**
			 * "Opens" the socket.
			 *
			 * @api public
			 */

			Socket.prototype.open =
			Socket.prototype.connect = function () {
			  if (this.connected) return this;

			  this.subEvents();
			  this.io.open(); // ensure open
			  if ('open' === this.io.readyState) this.onopen();
			  this.emit('connecting');
			  return this;
			};

			/**
			 * Sends a `message` event.
			 *
			 * @return {Socket} self
			 * @api public
			 */

			Socket.prototype.send = function () {
			  var args = toArray(arguments);
			  args.unshift('message');
			  this.emit.apply(this, args);
			  return this;
			};

			/**
			 * Override `emit`.
			 * If the event is in `events`, it's emitted normally.
			 *
			 * @param {String} event name
			 * @return {Socket} self
			 * @api public
			 */

			Socket.prototype.emit = function (ev) {
			  if (events.hasOwnProperty(ev)) {
			    emit.apply(this, arguments);
			    return this;
			  }

			  var args = toArray(arguments);
			  var packet = {
			    type: (this.flags.binary !== undefined ? this.flags.binary : hasBin(args)) ? parser.BINARY_EVENT : parser.EVENT,
			    data: args
			  };

			  packet.options = {};
			  packet.options.compress = !this.flags || false !== this.flags.compress;

			  // event ack callback
			  if ('function' === typeof args[args.length - 1]) {
			    debug('emitting packet with ack id %d', this.ids);
			    this.acks[this.ids] = args.pop();
			    packet.id = this.ids++;
			  }

			  if (this.connected) {
			    this.packet(packet);
			  } else {
			    this.sendBuffer.push(packet);
			  }

			  this.flags = {};

			  return this;
			};

			/**
			 * Sends a packet.
			 *
			 * @param {Object} packet
			 * @api private
			 */

			Socket.prototype.packet = function (packet) {
			  packet.nsp = this.nsp;
			  this.io.packet(packet);
			};

			/**
			 * Called upon engine `open`.
			 *
			 * @api private
			 */

			Socket.prototype.onopen = function () {
			  debug('transport is open - connecting');

			  // write connect packet if necessary
			  if ('/' !== this.nsp) {
			    if (this.query) {
			      var query = typeof this.query === 'object' ? parseqs.encode(this.query) : this.query;
			      debug('sending connect packet with query %s', query);
			      this.packet({type: parser.CONNECT, query: query});
			    } else {
			      this.packet({type: parser.CONNECT});
			    }
			  }
			};

			/**
			 * Called upon engine `close`.
			 *
			 * @param {String} reason
			 * @api private
			 */

			Socket.prototype.onclose = function (reason) {
			  debug('close (%s)', reason);
			  this.connected = false;
			  this.disconnected = true;
			  delete this.id;
			  this.emit('disconnect', reason);
			};

			/**
			 * Called with socket packet.
			 *
			 * @param {Object} packet
			 * @api private
			 */

			Socket.prototype.onpacket = function (packet) {
			  var sameNamespace = packet.nsp === this.nsp;
			  var rootNamespaceError = packet.type === parser.ERROR && packet.nsp === '/';

			  if (!sameNamespace && !rootNamespaceError) return;

			  switch (packet.type) {
			    case parser.CONNECT:
			      this.onconnect();
			      break;

			    case parser.EVENT:
			      this.onevent(packet);
			      break;

			    case parser.BINARY_EVENT:
			      this.onevent(packet);
			      break;

			    case parser.ACK:
			      this.onack(packet);
			      break;

			    case parser.BINARY_ACK:
			      this.onack(packet);
			      break;

			    case parser.DISCONNECT:
			      this.ondisconnect();
			      break;

			    case parser.ERROR:
			      this.emit('error', packet.data);
			      break;
			  }
			};

			/**
			 * Called upon a server event.
			 *
			 * @param {Object} packet
			 * @api private
			 */

			Socket.prototype.onevent = function (packet) {
			  var args = packet.data || [];
			  debug('emitting event %j', args);

			  if (null != packet.id) {
			    debug('attaching ack callback to event');
			    args.push(this.ack(packet.id));
			  }

			  if (this.connected) {
			    emit.apply(this, args);
			  } else {
			    this.receiveBuffer.push(args);
			  }
			};

			/**
			 * Produces an ack callback to emit with an event.
			 *
			 * @api private
			 */

			Socket.prototype.ack = function (id) {
			  var self = this;
			  var sent = false;
			  return function () {
			    // prevent double callbacks
			    if (sent) return;
			    sent = true;
			    var args = toArray(arguments);
			    debug('sending ack %j', args);

			    self.packet({
			      type: hasBin(args) ? parser.BINARY_ACK : parser.ACK,
			      id: id,
			      data: args
			    });
			  };
			};

			/**
			 * Called upon a server acknowlegement.
			 *
			 * @param {Object} packet
			 * @api private
			 */

			Socket.prototype.onack = function (packet) {
			  var ack = this.acks[packet.id];
			  if ('function' === typeof ack) {
			    debug('calling ack %s with %j', packet.id, packet.data);
			    ack.apply(this, packet.data);
			    delete this.acks[packet.id];
			  } else {
			    debug('bad ack %s', packet.id);
			  }
			};

			/**
			 * Called upon server connect.
			 *
			 * @api private
			 */

			Socket.prototype.onconnect = function () {
			  this.connected = true;
			  this.disconnected = false;
			  this.emit('connect');
			  this.emitBuffered();
			};

			/**
			 * Emit buffered events (received and emitted).
			 *
			 * @api private
			 */

			Socket.prototype.emitBuffered = function () {
			  var i;
			  for (i = 0; i < this.receiveBuffer.length; i++) {
			    emit.apply(this, this.receiveBuffer[i]);
			  }
			  this.receiveBuffer = [];

			  for (i = 0; i < this.sendBuffer.length; i++) {
			    this.packet(this.sendBuffer[i]);
			  }
			  this.sendBuffer = [];
			};

			/**
			 * Called upon server disconnect.
			 *
			 * @api private
			 */

			Socket.prototype.ondisconnect = function () {
			  debug('server disconnect (%s)', this.nsp);
			  this.destroy();
			  this.onclose('io server disconnect');
			};

			/**
			 * Called upon forced client/server side disconnections,
			 * this method ensures the manager stops tracking us and
			 * that reconnections don't get triggered for this.
			 *
			 * @api private.
			 */

			Socket.prototype.destroy = function () {
			  if (this.subs) {
			    // clean subscriptions to avoid reconnections
			    for (var i = 0; i < this.subs.length; i++) {
			      this.subs[i].destroy();
			    }
			    this.subs = null;
			  }

			  this.io.destroy(this);
			};

			/**
			 * Disconnects the socket manually.
			 *
			 * @return {Socket} self
			 * @api public
			 */

			Socket.prototype.close =
			Socket.prototype.disconnect = function () {
			  if (this.connected) {
			    debug('performing disconnect (%s)', this.nsp);
			    this.packet({ type: parser.DISCONNECT });
			  }

			  // remove socket from pool
			  this.destroy();

			  if (this.connected) {
			    // fire events
			    this.onclose('io client disconnect');
			  }
			  return this;
			};

			/**
			 * Sets the compress flag.
			 *
			 * @param {Boolean} if `true`, compresses the sending data
			 * @return {Socket} self
			 * @api public
			 */

			Socket.prototype.compress = function (compress) {
			  this.flags.compress = compress;
			  return this;
			};

			/**
			 * Sets the binary flag
			 *
			 * @param {Boolean} whether the emitted data contains binary
			 * @return {Socket} self
			 * @api public
			 */

			Socket.prototype.binary = function (binary) {
			  this.flags.binary = binary;
			  return this;
			}; 
		} (socket$1));
		return socket$1.exports;
	}

	/**
	 * Expose `Backoff`.
	 */

	var backo2 = Backoff$1;

	/**
	 * Initialize backoff timer with `opts`.
	 *
	 * - `min` initial timeout in milliseconds [100]
	 * - `max` max timeout [10000]
	 * - `jitter` [0]
	 * - `factor` [2]
	 *
	 * @param {Object} opts
	 * @api public
	 */

	function Backoff$1(opts) {
	  opts = opts || {};
	  this.ms = opts.min || 100;
	  this.max = opts.max || 10000;
	  this.factor = opts.factor || 2;
	  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
	  this.attempts = 0;
	}

	/**
	 * Return the backoff duration.
	 *
	 * @return {Number}
	 * @api public
	 */

	Backoff$1.prototype.duration = function(){
	  var ms = this.ms * Math.pow(this.factor, this.attempts++);
	  if (this.jitter) {
	    var rand =  Math.random();
	    var deviation = Math.floor(rand * this.jitter * ms);
	    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;
	  }
	  return Math.min(ms, this.max) | 0;
	};

	/**
	 * Reset the number of attempts.
	 *
	 * @api public
	 */

	Backoff$1.prototype.reset = function(){
	  this.attempts = 0;
	};

	/**
	 * Set the minimum duration
	 *
	 * @api public
	 */

	Backoff$1.prototype.setMin = function(min){
	  this.ms = min;
	};

	/**
	 * Set the maximum duration
	 *
	 * @api public
	 */

	Backoff$1.prototype.setMax = function(max){
	  this.max = max;
	};

	/**
	 * Set the jitter
	 *
	 * @api public
	 */

	Backoff$1.prototype.setJitter = function(jitter){
	  this.jitter = jitter;
	};

	/**
	 * Module dependencies.
	 */

	var eio = libExports$1;
	var Socket = requireSocket();
	var Emitter = componentEmitterExports;
	var parser$1 = socket_ioParser;
	var on = on_1;
	var bind = componentBind;
	var debug = browserExports$2('socket.io-client:manager');
	var indexOf = indexof;
	var Backoff = backo2;

	/**
	 * IE6+ hasOwnProperty
	 */

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Module exports
	 */

	var manager = Manager;

	/**
	 * `Manager` constructor.
	 *
	 * @param {String} engine instance or engine uri/opts
	 * @param {Object} options
	 * @api public
	 */

	function Manager (uri, opts) {
	  if (!(this instanceof Manager)) return new Manager(uri, opts);
	  if (uri && ('object' === typeof uri)) {
	    opts = uri;
	    uri = undefined;
	  }
	  opts = opts || {};

	  opts.path = opts.path || '/socket.io';
	  this.nsps = {};
	  this.subs = [];
	  this.opts = opts;
	  this.reconnection(opts.reconnection !== false);
	  this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
	  this.reconnectionDelay(opts.reconnectionDelay || 1000);
	  this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);
	  this.randomizationFactor(opts.randomizationFactor || 0.5);
	  this.backoff = new Backoff({
	    min: this.reconnectionDelay(),
	    max: this.reconnectionDelayMax(),
	    jitter: this.randomizationFactor()
	  });
	  this.timeout(null == opts.timeout ? 20000 : opts.timeout);
	  this.readyState = 'closed';
	  this.uri = uri;
	  this.connecting = [];
	  this.lastPing = null;
	  this.encoding = false;
	  this.packetBuffer = [];
	  var _parser = opts.parser || parser$1;
	  this.encoder = new _parser.Encoder();
	  this.decoder = new _parser.Decoder();
	  this.autoConnect = opts.autoConnect !== false;
	  if (this.autoConnect) this.open();
	}

	/**
	 * Propagate given event to sockets and emit on `this`
	 *
	 * @api private
	 */

	Manager.prototype.emitAll = function () {
	  this.emit.apply(this, arguments);
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].emit.apply(this.nsps[nsp], arguments);
	    }
	  }
	};

	/**
	 * Update `socket.id` of all sockets
	 *
	 * @api private
	 */

	Manager.prototype.updateSocketIds = function () {
	  for (var nsp in this.nsps) {
	    if (has.call(this.nsps, nsp)) {
	      this.nsps[nsp].id = this.generateId(nsp);
	    }
	  }
	};

	/**
	 * generate `socket.id` for the given `nsp`
	 *
	 * @param {String} nsp
	 * @return {String}
	 * @api private
	 */

	Manager.prototype.generateId = function (nsp) {
	  return (nsp === '/' ? '' : (nsp + '#')) + this.engine.id;
	};

	/**
	 * Mix in `Emitter`.
	 */

	Emitter(Manager.prototype);

	/**
	 * Sets the `reconnection` config.
	 *
	 * @param {Boolean} true/false if it should automatically reconnect
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnection = function (v) {
	  if (!arguments.length) return this._reconnection;
	  this._reconnection = !!v;
	  return this;
	};

	/**
	 * Sets the reconnection attempts config.
	 *
	 * @param {Number} max reconnection attempts before giving up
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionAttempts = function (v) {
	  if (!arguments.length) return this._reconnectionAttempts;
	  this._reconnectionAttempts = v;
	  return this;
	};

	/**
	 * Sets the delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelay = function (v) {
	  if (!arguments.length) return this._reconnectionDelay;
	  this._reconnectionDelay = v;
	  this.backoff && this.backoff.setMin(v);
	  return this;
	};

	Manager.prototype.randomizationFactor = function (v) {
	  if (!arguments.length) return this._randomizationFactor;
	  this._randomizationFactor = v;
	  this.backoff && this.backoff.setJitter(v);
	  return this;
	};

	/**
	 * Sets the maximum delay between reconnections.
	 *
	 * @param {Number} delay
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.reconnectionDelayMax = function (v) {
	  if (!arguments.length) return this._reconnectionDelayMax;
	  this._reconnectionDelayMax = v;
	  this.backoff && this.backoff.setMax(v);
	  return this;
	};

	/**
	 * Sets the connection timeout. `false` to disable
	 *
	 * @return {Manager} self or value
	 * @api public
	 */

	Manager.prototype.timeout = function (v) {
	  if (!arguments.length) return this._timeout;
	  this._timeout = v;
	  return this;
	};

	/**
	 * Starts trying to reconnect if reconnection is enabled and we have not
	 * started reconnecting yet
	 *
	 * @api private
	 */

	Manager.prototype.maybeReconnectOnOpen = function () {
	  // Only try to reconnect if it's the first time we're connecting
	  if (!this.reconnecting && this._reconnection && this.backoff.attempts === 0) {
	    // keeps reconnection from firing twice for the same reconnection loop
	    this.reconnect();
	  }
	};

	/**
	 * Sets the current transport `socket`.
	 *
	 * @param {Function} optional, callback
	 * @return {Manager} self
	 * @api public
	 */

	Manager.prototype.open =
	Manager.prototype.connect = function (fn, opts) {
	  debug('readyState %s', this.readyState);
	  if (~this.readyState.indexOf('open')) return this;

	  debug('opening %s', this.uri);
	  this.engine = eio(this.uri, this.opts);
	  var socket = this.engine;
	  var self = this;
	  this.readyState = 'opening';
	  this.skipReconnect = false;

	  // emit `open`
	  var openSub = on(socket, 'open', function () {
	    self.onopen();
	    fn && fn();
	  });

	  // emit `connect_error`
	  var errorSub = on(socket, 'error', function (data) {
	    debug('connect_error');
	    self.cleanup();
	    self.readyState = 'closed';
	    self.emitAll('connect_error', data);
	    if (fn) {
	      var err = new Error('Connection error');
	      err.data = data;
	      fn(err);
	    } else {
	      // Only do this if there is no fn to handle the error
	      self.maybeReconnectOnOpen();
	    }
	  });

	  // emit `connect_timeout`
	  if (false !== this._timeout) {
	    var timeout = this._timeout;
	    debug('connect attempt will timeout after %d', timeout);

	    // set timer
	    var timer = setTimeout(function () {
	      debug('connect attempt timed out after %d', timeout);
	      openSub.destroy();
	      socket.close();
	      socket.emit('error', 'timeout');
	      self.emitAll('connect_timeout', timeout);
	    }, timeout);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }

	  this.subs.push(openSub);
	  this.subs.push(errorSub);

	  return this;
	};

	/**
	 * Called upon transport open.
	 *
	 * @api private
	 */

	Manager.prototype.onopen = function () {
	  debug('open');

	  // clear old subs
	  this.cleanup();

	  // mark as open
	  this.readyState = 'open';
	  this.emit('open');

	  // add new subs
	  var socket = this.engine;
	  this.subs.push(on(socket, 'data', bind(this, 'ondata')));
	  this.subs.push(on(socket, 'ping', bind(this, 'onping')));
	  this.subs.push(on(socket, 'pong', bind(this, 'onpong')));
	  this.subs.push(on(socket, 'error', bind(this, 'onerror')));
	  this.subs.push(on(socket, 'close', bind(this, 'onclose')));
	  this.subs.push(on(this.decoder, 'decoded', bind(this, 'ondecoded')));
	};

	/**
	 * Called upon a ping.
	 *
	 * @api private
	 */

	Manager.prototype.onping = function () {
	  this.lastPing = new Date();
	  this.emitAll('ping');
	};

	/**
	 * Called upon a packet.
	 *
	 * @api private
	 */

	Manager.prototype.onpong = function () {
	  this.emitAll('pong', new Date() - this.lastPing);
	};

	/**
	 * Called with data.
	 *
	 * @api private
	 */

	Manager.prototype.ondata = function (data) {
	  this.decoder.add(data);
	};

	/**
	 * Called when parser fully decodes a packet.
	 *
	 * @api private
	 */

	Manager.prototype.ondecoded = function (packet) {
	  this.emit('packet', packet);
	};

	/**
	 * Called upon socket error.
	 *
	 * @api private
	 */

	Manager.prototype.onerror = function (err) {
	  debug('error', err);
	  this.emitAll('error', err);
	};

	/**
	 * Creates a new socket for the given `nsp`.
	 *
	 * @return {Socket}
	 * @api public
	 */

	Manager.prototype.socket = function (nsp, opts) {
	  var socket = this.nsps[nsp];
	  if (!socket) {
	    socket = new Socket(this, nsp, opts);
	    this.nsps[nsp] = socket;
	    var self = this;
	    socket.on('connecting', onConnecting);
	    socket.on('connect', function () {
	      socket.id = self.generateId(nsp);
	    });

	    if (this.autoConnect) {
	      // manually call here since connecting event is fired before listening
	      onConnecting();
	    }
	  }

	  function onConnecting () {
	    if (!~indexOf(self.connecting, socket)) {
	      self.connecting.push(socket);
	    }
	  }

	  return socket;
	};

	/**
	 * Called upon a socket close.
	 *
	 * @param {Socket} socket
	 */

	Manager.prototype.destroy = function (socket) {
	  var index = indexOf(this.connecting, socket);
	  if (~index) this.connecting.splice(index, 1);
	  if (this.connecting.length) return;

	  this.close();
	};

	/**
	 * Writes a packet.
	 *
	 * @param {Object} packet
	 * @api private
	 */

	Manager.prototype.packet = function (packet) {
	  debug('writing packet %j', packet);
	  var self = this;
	  if (packet.query && packet.type === 0) packet.nsp += '?' + packet.query;

	  if (!self.encoding) {
	    // encode, then write to engine with result
	    self.encoding = true;
	    this.encoder.encode(packet, function (encodedPackets) {
	      for (var i = 0; i < encodedPackets.length; i++) {
	        self.engine.write(encodedPackets[i], packet.options);
	      }
	      self.encoding = false;
	      self.processPacketQueue();
	    });
	  } else { // add packet to the queue
	    self.packetBuffer.push(packet);
	  }
	};

	/**
	 * If packet buffer is non-empty, begins encoding the
	 * next packet in line.
	 *
	 * @api private
	 */

	Manager.prototype.processPacketQueue = function () {
	  if (this.packetBuffer.length > 0 && !this.encoding) {
	    var pack = this.packetBuffer.shift();
	    this.packet(pack);
	  }
	};

	/**
	 * Clean up transport subscriptions and packet buffer.
	 *
	 * @api private
	 */

	Manager.prototype.cleanup = function () {
	  debug('cleanup');

	  var subsLength = this.subs.length;
	  for (var i = 0; i < subsLength; i++) {
	    var sub = this.subs.shift();
	    sub.destroy();
	  }

	  this.packetBuffer = [];
	  this.encoding = false;
	  this.lastPing = null;

	  this.decoder.destroy();
	};

	/**
	 * Close the current socket.
	 *
	 * @api private
	 */

	Manager.prototype.close =
	Manager.prototype.disconnect = function () {
	  debug('disconnect');
	  this.skipReconnect = true;
	  this.reconnecting = false;
	  if ('opening' === this.readyState) {
	    // `onclose` will not fire because
	    // an open event never happened
	    this.cleanup();
	  }
	  this.backoff.reset();
	  this.readyState = 'closed';
	  if (this.engine) this.engine.close();
	};

	/**
	 * Called upon engine close.
	 *
	 * @api private
	 */

	Manager.prototype.onclose = function (reason) {
	  debug('onclose');

	  this.cleanup();
	  this.backoff.reset();
	  this.readyState = 'closed';
	  this.emit('close', reason);

	  if (this._reconnection && !this.skipReconnect) {
	    this.reconnect();
	  }
	};

	/**
	 * Attempt a reconnection.
	 *
	 * @api private
	 */

	Manager.prototype.reconnect = function () {
	  if (this.reconnecting || this.skipReconnect) return this;

	  var self = this;

	  if (this.backoff.attempts >= this._reconnectionAttempts) {
	    debug('reconnect failed');
	    this.backoff.reset();
	    this.emitAll('reconnect_failed');
	    this.reconnecting = false;
	  } else {
	    var delay = this.backoff.duration();
	    debug('will wait %dms before reconnect attempt', delay);

	    this.reconnecting = true;
	    var timer = setTimeout(function () {
	      if (self.skipReconnect) return;

	      debug('attempting reconnect');
	      self.emitAll('reconnect_attempt', self.backoff.attempts);
	      self.emitAll('reconnecting', self.backoff.attempts);

	      // check again for the case socket closed in above events
	      if (self.skipReconnect) return;

	      self.open(function (err) {
	        if (err) {
	          debug('reconnect attempt error');
	          self.reconnecting = false;
	          self.reconnect();
	          self.emitAll('reconnect_error', err.data);
	        } else {
	          debug('reconnect success');
	          self.onreconnect();
	        }
	      });
	    }, delay);

	    this.subs.push({
	      destroy: function () {
	        clearTimeout(timer);
	      }
	    });
	  }
	};

	/**
	 * Called upon successful reconnect.
	 *
	 * @api private
	 */

	Manager.prototype.onreconnect = function () {
	  var attempt = this.backoff.attempts;
	  this.reconnecting = false;
	  this.backoff.reset();
	  this.updateSocketIds();
	  this.emitAll('reconnect', attempt);
	};

	(function (module, exports) {
		/**
		 * Module dependencies.
		 */

		var url = url_1;
		var parser = socket_ioParser;
		var Manager = manager;
		var debug = browserExports$2('socket.io-client');

		/**
		 * Module exports.
		 */

		module.exports = exports = lookup;

		/**
		 * Managers cache.
		 */

		var cache = exports.managers = {};

		/**
		 * Looks up an existing `Manager` for multiplexing.
		 * If the user summons:
		 *
		 *   `io('http://localhost/a');`
		 *   `io('http://localhost/b');`
		 *
		 * We reuse the existing instance based on same scheme/port/host,
		 * and we initialize sockets for each namespace.
		 *
		 * @api public
		 */

		function lookup (uri, opts) {
		  if (typeof uri === 'object') {
		    opts = uri;
		    uri = undefined;
		  }

		  opts = opts || {};

		  var parsed = url(uri);
		  var source = parsed.source;
		  var id = parsed.id;
		  var path = parsed.path;
		  var sameNamespace = cache[id] && path in cache[id].nsps;
		  var newConnection = opts.forceNew || opts['force new connection'] ||
		                      false === opts.multiplex || sameNamespace;

		  var io;

		  if (newConnection) {
		    debug('ignoring socket cache for %s', source);
		    io = Manager(source, opts);
		  } else {
		    if (!cache[id]) {
		      debug('new io instance for %s', source);
		      cache[id] = Manager(source, opts);
		    }
		    io = cache[id];
		  }
		  if (parsed.query && !opts.query) {
		    opts.query = parsed.query;
		  }
		  return io.socket(parsed.path, opts);
		}

		/**
		 * Protocol version.
		 *
		 * @api public
		 */

		exports.protocol = parser.protocol;

		/**
		 * `connect`.
		 *
		 * @param {String} uri
		 * @api public
		 */

		exports.connect = lookup;

		/**
		 * Expose constructors for standalone build.
		 *
		 * @api public
		 */

		exports.Manager = manager;
		exports.Socket = requireSocket(); 
	} (lib$1, lib$1.exports));

	var libExports = lib$1.exports;
	var io = /*@__PURE__*/getDefaultExportFromCjs(libExports);

	/**
	The data structure for documents. @nonabstract
	*/
	class Text {
	    /**
	    Get the line description around the given position.
	    */
	    lineAt(pos) {
	        if (pos < 0 || pos > this.length)
	            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
	        return this.lineInner(pos, false, 1, 0);
	    }
	    /**
	    Get the description for the given (1-based) line number.
	    */
	    line(n) {
	        if (n < 1 || n > this.lines)
	            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
	        return this.lineInner(n, true, 1, 0);
	    }
	    /**
	    Replace a range of the text with the given content.
	    */
	    replace(from, to, text) {
	        [from, to] = clip(this, from, to);
	        let parts = [];
	        this.decompose(0, from, parts, 2 /* Open.To */);
	        if (text.length)
	            text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
	        this.decompose(to, this.length, parts, 1 /* Open.From */);
	        return TextNode.from(parts, this.length - (to - from) + text.length);
	    }
	    /**
	    Append another document to this one.
	    */
	    append(other) {
	        return this.replace(this.length, this.length, other);
	    }
	    /**
	    Retrieve the text between the given points.
	    */
	    slice(from, to = this.length) {
	        [from, to] = clip(this, from, to);
	        let parts = [];
	        this.decompose(from, to, parts, 0);
	        return TextNode.from(parts, to - from);
	    }
	    /**
	    Test whether this text is equal to another instance.
	    */
	    eq(other) {
	        if (other == this)
	            return true;
	        if (other.length != this.length || other.lines != this.lines)
	            return false;
	        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
	        let a = new RawTextCursor(this), b = new RawTextCursor(other);
	        for (let skip = start, pos = start;;) {
	            a.next(skip);
	            b.next(skip);
	            skip = 0;
	            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
	                return false;
	            pos += a.value.length;
	            if (a.done || pos >= end)
	                return true;
	        }
	    }
	    /**
	    Iterate over the text. When `dir` is `-1`, iteration happens
	    from end to start. This will return lines and the breaks between
	    them as separate strings.
	    */
	    iter(dir = 1) { return new RawTextCursor(this, dir); }
	    /**
	    Iterate over a range of the text. When `from` > `to`, the
	    iterator will run in reverse.
	    */
	    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
	    /**
	    Return a cursor that iterates over the given range of lines,
	    _without_ returning the line breaks between, and yielding empty
	    strings for empty lines.
	    
	    When `from` and `to` are given, they should be 1-based line numbers.
	    */
	    iterLines(from, to) {
	        let inner;
	        if (from == null) {
	            inner = this.iter();
	        }
	        else {
	            if (to == null)
	                to = this.lines + 1;
	            let start = this.line(from).from;
	            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
	        }
	        return new LineCursor(inner);
	    }
	    /**
	    Return the document as a string, using newline characters to
	    separate lines.
	    */
	    toString() { return this.sliceString(0); }
	    /**
	    Convert the document to an array of lines (which can be
	    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
	    */
	    toJSON() {
	        let lines = [];
	        this.flatten(lines);
	        return lines;
	    }
	    /**
	    @internal
	    */
	    constructor() { }
	    /**
	    Create a `Text` instance for the given array of lines.
	    */
	    static of(text) {
	        if (text.length == 0)
	            throw new RangeError("A document must have at least one line");
	        if (text.length == 1 && !text[0])
	            return Text.empty;
	        return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
	    }
	}
	// Leaves store an array of line strings. There are always line breaks
	// between these strings. Leaves are limited in size and have to be
	// contained in TextNode instances for bigger documents.
	class TextLeaf extends Text {
	    constructor(text, length = textLength(text)) {
	        super();
	        this.text = text;
	        this.length = length;
	    }
	    get lines() { return this.text.length; }
	    get children() { return null; }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let string = this.text[i], end = offset + string.length;
	            if ((isLine ? line : end) >= target)
	                return new Line(offset, end, line, string);
	            offset = end + 1;
	            line++;
	        }
	    }
	    decompose(from, to, target, open) {
	        let text = from <= 0 && to >= this.length ? this
	            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
	        if (open & 1 /* Open.From */) {
	            let prev = target.pop();
	            let joined = appendText(text.text, prev.text.slice(), 0, text.length);
	            if (joined.length <= 32 /* Tree.Branch */) {
	                target.push(new TextLeaf(joined, prev.length + text.length));
	            }
	            else {
	                let mid = joined.length >> 1;
	                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
	            }
	        }
	        else {
	            target.push(text);
	        }
	    }
	    replace(from, to, text) {
	        if (!(text instanceof TextLeaf))
	            return super.replace(from, to, text);
	        [from, to] = clip(this, from, to);
	        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
	        let newLen = this.length + text.length - (to - from);
	        if (lines.length <= 32 /* Tree.Branch */)
	            return new TextLeaf(lines, newLen);
	        return TextNode.from(TextLeaf.split(lines, []), newLen);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        [from, to] = clip(this, from, to);
	        let result = "";
	        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
	            let line = this.text[i], end = pos + line.length;
	            if (pos > from && i)
	                result += lineSep;
	            if (from < end && to > pos)
	                result += line.slice(Math.max(0, from - pos), to - pos);
	            pos = end + 1;
	        }
	        return result;
	    }
	    flatten(target) {
	        for (let line of this.text)
	            target.push(line);
	    }
	    scanIdentical() { return 0; }
	    static split(text, target) {
	        let part = [], len = -1;
	        for (let line of text) {
	            part.push(line);
	            len += line.length + 1;
	            if (part.length == 32 /* Tree.Branch */) {
	                target.push(new TextLeaf(part, len));
	                part = [];
	                len = -1;
	            }
	        }
	        if (len > -1)
	            target.push(new TextLeaf(part, len));
	        return target;
	    }
	}
	// Nodes provide the tree structure of the `Text` type. They store a
	// number of other nodes or leaves, taking care to balance themselves
	// on changes. There are implied line breaks _between_ the children of
	// a node (but not before the first or after the last child).
	class TextNode extends Text {
	    constructor(children, length) {
	        super();
	        this.children = children;
	        this.length = length;
	        this.lines = 0;
	        for (let child of children)
	            this.lines += child.lines;
	    }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
	            if ((isLine ? endLine : end) >= target)
	                return child.lineInner(target, isLine, line, offset);
	            offset = end + 1;
	            line = endLine + 1;
	        }
	    }
	    decompose(from, to, target, open) {
	        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (from <= end && to >= pos) {
	                let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
	                if (pos >= from && end <= to && !childOpen)
	                    target.push(child);
	                else
	                    child.decompose(from - pos, to - pos, target, childOpen);
	            }
	            pos = end + 1;
	        }
	    }
	    replace(from, to, text) {
	        [from, to] = clip(this, from, to);
	        if (text.lines < this.lines)
	            for (let i = 0, pos = 0; i < this.children.length; i++) {
	                let child = this.children[i], end = pos + child.length;
	                // Fast path: if the change only affects one child and the
	                // child's size remains in the acceptable range, only update
	                // that child
	                if (from >= pos && to <= end) {
	                    let updated = child.replace(from - pos, to - pos, text);
	                    let totalLines = this.lines - child.lines + updated.lines;
	                    if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
	                        updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
	                        let copy = this.children.slice();
	                        copy[i] = updated;
	                        return new TextNode(copy, this.length - (to - from) + text.length);
	                    }
	                    return super.replace(pos, end, updated);
	                }
	                pos = end + 1;
	            }
	        return super.replace(from, to, text);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        [from, to] = clip(this, from, to);
	        let result = "";
	        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (pos > from && i)
	                result += lineSep;
	            if (from < end && to > pos)
	                result += child.sliceString(from - pos, to - pos, lineSep);
	            pos = end + 1;
	        }
	        return result;
	    }
	    flatten(target) {
	        for (let child of this.children)
	            child.flatten(target);
	    }
	    scanIdentical(other, dir) {
	        if (!(other instanceof TextNode))
	            return 0;
	        let length = 0;
	        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
	            : [this.children.length - 1, other.children.length - 1, -1, -1];
	        for (;; iA += dir, iB += dir) {
	            if (iA == eA || iB == eB)
	                return length;
	            let chA = this.children[iA], chB = other.children[iB];
	            if (chA != chB)
	                return length + chA.scanIdentical(chB, dir);
	            length += chA.length + 1;
	        }
	    }
	    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
	        let lines = 0;
	        for (let ch of children)
	            lines += ch.lines;
	        if (lines < 32 /* Tree.Branch */) {
	            let flat = [];
	            for (let ch of children)
	                ch.flatten(flat);
	            return new TextLeaf(flat, length);
	        }
	        let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
	        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
	        function add(child) {
	            let last;
	            if (child.lines > maxChunk && child instanceof TextNode) {
	                for (let node of child.children)
	                    add(node);
	            }
	            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
	                flush();
	                chunked.push(child);
	            }
	            else if (child instanceof TextLeaf && currentLines &&
	                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
	                child.lines + last.lines <= 32 /* Tree.Branch */) {
	                currentLines += child.lines;
	                currentLen += child.length + 1;
	                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
	            }
	            else {
	                if (currentLines + child.lines > chunk)
	                    flush();
	                currentLines += child.lines;
	                currentLen += child.length + 1;
	                currentChunk.push(child);
	            }
	        }
	        function flush() {
	            if (currentLines == 0)
	                return;
	            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
	            currentLen = -1;
	            currentLines = currentChunk.length = 0;
	        }
	        for (let child of children)
	            add(child);
	        flush();
	        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
	    }
	}
	Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
	function textLength(text) {
	    let length = -1;
	    for (let line of text)
	        length += line.length + 1;
	    return length;
	}
	function appendText(text, target, from = 0, to = 1e9) {
	    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
	        let line = text[i], end = pos + line.length;
	        if (end >= from) {
	            if (end > to)
	                line = line.slice(0, to - pos);
	            if (pos < from)
	                line = line.slice(from - pos);
	            if (first) {
	                target[target.length - 1] += line;
	                first = false;
	            }
	            else
	                target.push(line);
	        }
	        pos = end + 1;
	    }
	    return target;
	}
	function sliceText(text, from, to) {
	    return appendText(text, [""], from, to);
	}
	class RawTextCursor {
	    constructor(text, dir = 1) {
	        this.dir = dir;
	        this.done = false;
	        this.lineBreak = false;
	        this.value = "";
	        this.nodes = [text];
	        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
	    }
	    nextInner(skip, dir) {
	        this.done = this.lineBreak = false;
	        for (;;) {
	            let last = this.nodes.length - 1;
	            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
	            let size = top instanceof TextLeaf ? top.text.length : top.children.length;
	            if (offset == (dir > 0 ? size : 0)) {
	                if (last == 0) {
	                    this.done = true;
	                    this.value = "";
	                    return this;
	                }
	                if (dir > 0)
	                    this.offsets[last - 1]++;
	                this.nodes.pop();
	                this.offsets.pop();
	            }
	            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
	                this.offsets[last] += dir;
	                if (skip == 0) {
	                    this.lineBreak = true;
	                    this.value = "\n";
	                    return this;
	                }
	                skip--;
	            }
	            else if (top instanceof TextLeaf) {
	                // Move to the next string
	                let next = top.text[offset + (dir < 0 ? -1 : 0)];
	                this.offsets[last] += dir;
	                if (next.length > Math.max(0, skip)) {
	                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
	                    return this;
	                }
	                skip -= next.length;
	            }
	            else {
	                let next = top.children[offset + (dir < 0 ? -1 : 0)];
	                if (skip > next.length) {
	                    skip -= next.length;
	                    this.offsets[last] += dir;
	                }
	                else {
	                    if (dir < 0)
	                        this.offsets[last]--;
	                    this.nodes.push(next);
	                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
	                }
	            }
	        }
	    }
	    next(skip = 0) {
	        if (skip < 0) {
	            this.nextInner(-skip, (-this.dir));
	            skip = this.value.length;
	        }
	        return this.nextInner(skip, this.dir);
	    }
	}
	class PartialTextCursor {
	    constructor(text, start, end) {
	        this.value = "";
	        this.done = false;
	        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
	        this.pos = start > end ? text.length : 0;
	        this.from = Math.min(start, end);
	        this.to = Math.max(start, end);
	    }
	    nextInner(skip, dir) {
	        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
	            this.value = "";
	            this.done = true;
	            return this;
	        }
	        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
	        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
	        if (skip > limit)
	            skip = limit;
	        limit -= skip;
	        let { value } = this.cursor.next(skip);
	        this.pos += (value.length + skip) * dir;
	        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
	        this.done = !this.value;
	        return this;
	    }
	    next(skip = 0) {
	        if (skip < 0)
	            skip = Math.max(skip, this.from - this.pos);
	        else if (skip > 0)
	            skip = Math.min(skip, this.to - this.pos);
	        return this.nextInner(skip, this.cursor.dir);
	    }
	    get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
	}
	class LineCursor {
	    constructor(inner) {
	        this.inner = inner;
	        this.afterBreak = true;
	        this.value = "";
	        this.done = false;
	    }
	    next(skip = 0) {
	        let { done, lineBreak, value } = this.inner.next(skip);
	        if (done && this.afterBreak) {
	            this.value = "";
	            this.afterBreak = false;
	        }
	        else if (done) {
	            this.done = true;
	            this.value = "";
	        }
	        else if (lineBreak) {
	            if (this.afterBreak) {
	                this.value = "";
	            }
	            else {
	                this.afterBreak = true;
	                this.next();
	            }
	        }
	        else {
	            this.value = value;
	            this.afterBreak = false;
	        }
	        return this;
	    }
	    get lineBreak() { return false; }
	}
	if (typeof Symbol != "undefined") {
	    Text.prototype[Symbol.iterator] = function () { return this.iter(); };
	    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
	        LineCursor.prototype[Symbol.iterator] = function () { return this; };
	}
	/**
	This type describes a line in the document. It is created
	on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
	*/
	class Line {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The position of the start of the line.
	    */
	    from, 
	    /**
	    The position at the end of the line (_before_ the line break,
	    or at the end of document for the last line).
	    */
	    to, 
	    /**
	    This line's line number (1-based).
	    */
	    number, 
	    /**
	    The line's content.
	    */
	    text) {
	        this.from = from;
	        this.to = to;
	        this.number = number;
	        this.text = text;
	    }
	    /**
	    The length of the line (not including any line break after it).
	    */
	    get length() { return this.to - this.from; }
	}
	function clip(text, from, to) {
	    from = Math.max(0, Math.min(text.length, from));
	    return [from, Math.max(from, Math.min(text.length, to))];
	}

	// Compressed representation of the Grapheme_Cluster_Break=Extend
	// information from
	// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
	// Each pair of elements represents a range, as an offet from the
	// previous range and a length. Numbers are in base-36, with the empty
	// string being a shorthand for 1.
	let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
	// Convert offsets into absolute values
	for (let i = 1; i < extend.length; i++)
	    extend[i] += extend[i - 1];
	function isExtendingChar(code) {
	    for (let i = 1; i < extend.length; i += 2)
	        if (extend[i] > code)
	            return extend[i - 1] <= code;
	    return false;
	}
	function isRegionalIndicator(code) {
	    return code >= 0x1F1E6 && code <= 0x1F1FF;
	}
	const ZWJ = 0x200d;
	/**
	Returns a next grapheme cluster break _after_ (not equal to)
	`pos`, if `forward` is true, or before otherwise. Returns `pos`
	itself if no further cluster break is available in the string.
	Moves across surrogate pairs, extending characters (when
	`includeExtending` is true), characters joined with zero-width
	joiners, and flag emoji.
	*/
	function findClusterBreak(str, pos, forward = true, includeExtending = true) {
	    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
	}
	function nextClusterBreak(str, pos, includeExtending) {
	    if (pos == str.length)
	        return pos;
	    // If pos is in the middle of a surrogate pair, move to its start
	    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
	        pos--;
	    let prev = codePointAt(str, pos);
	    pos += codePointSize(prev);
	    while (pos < str.length) {
	        let next = codePointAt(str, pos);
	        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
	            pos += codePointSize(next);
	            prev = next;
	        }
	        else if (isRegionalIndicator(next)) {
	            let countBefore = 0, i = pos - 2;
	            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
	                countBefore++;
	                i -= 2;
	            }
	            if (countBefore % 2 == 0)
	                break;
	            else
	                pos += 2;
	        }
	        else {
	            break;
	        }
	    }
	    return pos;
	}
	function prevClusterBreak(str, pos, includeExtending) {
	    while (pos > 0) {
	        let found = nextClusterBreak(str, pos - 2, includeExtending);
	        if (found < pos)
	            return found;
	        pos--;
	    }
	    return 0;
	}
	function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
	function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
	/**
	Find the code point at the given position in a string (like the
	[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
	string method).
	*/
	function codePointAt(str, pos) {
	    let code0 = str.charCodeAt(pos);
	    if (!surrogateHigh(code0) || pos + 1 == str.length)
	        return code0;
	    let code1 = str.charCodeAt(pos + 1);
	    if (!surrogateLow(code1))
	        return code0;
	    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
	}
	/**
	Given a Unicode codepoint, return the JavaScript string that
	respresents it (like
	[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
	*/
	function fromCodePoint(code) {
	    if (code <= 0xffff)
	        return String.fromCharCode(code);
	    code -= 0x10000;
	    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
	}
	/**
	The amount of positions a character takes up a JavaScript string.
	*/
	function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

	const DefaultSplit = /\r\n?|\n/;
	/**
	Distinguishes different ways in which positions can be mapped.
	*/
	var MapMode = /*@__PURE__*/(function (MapMode) {
	    /**
	    Map a position to a valid new position, even when its context
	    was deleted.
	    */
	    MapMode[MapMode["Simple"] = 0] = "Simple";
	    /**
	    Return null if deletion happens across the position.
	    */
	    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
	    /**
	    Return null if the character _before_ the position is deleted.
	    */
	    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
	    /**
	    Return null if the character _after_ the position is deleted.
	    */
	    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
	return MapMode})(MapMode || (MapMode = {}));
	/**
	A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
	that doesn't store the inserted text. As such, it can't be
	applied, but is cheaper to store and manipulate.
	*/
	class ChangeDesc {
	    // Sections are encoded as pairs of integers. The first is the
	    // length in the current document, and the second is -1 for
	    // unaffected sections, and the length of the replacement content
	    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
	    // 0), and a replacement two positive numbers.
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    sections) {
	        this.sections = sections;
	    }
	    /**
	    The length of the document before the change.
	    */
	    get length() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2)
	            result += this.sections[i];
	        return result;
	    }
	    /**
	    The length of the document after the change.
	    */
	    get newLength() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2) {
	            let ins = this.sections[i + 1];
	            result += ins < 0 ? this.sections[i] : ins;
	        }
	        return result;
	    }
	    /**
	    False when there are actual changes in this set.
	    */
	    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
	    /**
	    Iterate over the unchanged parts left by these changes. `posA`
	    provides the position of the range in the old document, `posB`
	    the new position in the changed document.
	    */
	    iterGaps(f) {
	        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0) {
	                f(posA, posB, len);
	                posB += len;
	            }
	            else {
	                posB += ins;
	            }
	            posA += len;
	        }
	    }
	    /**
	    Iterate over the ranges changed by these changes. (See
	    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
	    variant that also provides you with the inserted text.)
	    `fromA`/`toA` provides the extent of the change in the starting
	    document, `fromB`/`toB` the extent of the replacement in the
	    changed document.
	    
	    When `individual` is true, adjacent changes (which are kept
	    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
	    reported separately.
	    */
	    iterChangedRanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /**
	    Get a description of the inverted form of these changes.
	    */
	    get invertedDesc() {
	        let sections = [];
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0)
	                sections.push(len, ins);
	            else
	                sections.push(ins, len);
	        }
	        return new ChangeDesc(sections);
	    }
	    /**
	    Compute the combined effect of applying another set of changes
	    after this one. The length of the document after this set should
	    match the length before `other`.
	    */
	    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
	    /**
	    Map this description, which should start with the same document
	    as `other`, over another set of changes, so that it can be
	    applied after it. When `before` is true, map as if the changes
	    in `other` happened before the ones in `this`.
	    */
	    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
	    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
	        let posA = 0, posB = 0;
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
	            if (ins < 0) {
	                if (endA > pos)
	                    return posB + (pos - posA);
	                posB += len;
	            }
	            else {
	                if (mode != MapMode.Simple && endA >= pos &&
	                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||
	                        mode == MapMode.TrackBefore && posA < pos ||
	                        mode == MapMode.TrackAfter && endA > pos))
	                    return null;
	                if (endA > pos || endA == pos && assoc < 0 && !len)
	                    return pos == posA || assoc < 0 ? posB : posB + ins;
	                posB += ins;
	            }
	            posA = endA;
	        }
	        if (pos > posA)
	            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
	        return posB;
	    }
	    /**
	    Check whether these changes touch a given range. When one of the
	    changes entirely covers the range, the string `"cover"` is
	    returned.
	    */
	    touchesRange(from, to = from) {
	        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
	            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
	            if (ins >= 0 && pos <= to && end >= from)
	                return pos < from && end > to ? "cover" : true;
	            pos = end;
	        }
	        return false;
	    }
	    /**
	    @internal
	    */
	    toString() {
	        let result = "";
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
	        }
	        return result;
	    }
	    /**
	    Serialize this change desc to a JSON-representable value.
	    */
	    toJSON() { return this.sections; }
	    /**
	    Create a change desc from its JSON representation (as produced
	    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
	    */
	    static fromJSON(json) {
	        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
	            throw new RangeError("Invalid JSON representation of ChangeDesc");
	        return new ChangeDesc(json);
	    }
	    /**
	    @internal
	    */
	    static create(sections) { return new ChangeDesc(sections); }
	}
	/**
	A change set represents a group of modifications to a document. It
	stores the document length, and can only be applied to documents
	with exactly that length.
	*/
	class ChangeSet extends ChangeDesc {
	    constructor(sections, 
	    /**
	    @internal
	    */
	    inserted) {
	        super(sections);
	        this.inserted = inserted;
	    }
	    /**
	    Apply the changes to a document, returning the modified
	    document.
	    */
	    apply(doc) {
	        if (this.length != doc.length)
	            throw new RangeError("Applying change set to a document with the wrong length");
	        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
	        return doc;
	    }
	    mapDesc(other, before = false) { return mapSet(this, other, before, true); }
	    /**
	    Given the document as it existed _before_ the changes, return a
	    change set that represents the inverse of this set, which could
	    be used to go from the document created by the changes back to
	    the document as it existed before the changes.
	    */
	    invert(doc) {
	        let sections = this.sections.slice(), inserted = [];
	        for (let i = 0, pos = 0; i < sections.length; i += 2) {
	            let len = sections[i], ins = sections[i + 1];
	            if (ins >= 0) {
	                sections[i] = ins;
	                sections[i + 1] = len;
	                let index = i >> 1;
	                while (inserted.length < index)
	                    inserted.push(Text.empty);
	                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
	            }
	            pos += len;
	        }
	        return new ChangeSet(sections, inserted);
	    }
	    /**
	    Combine two subsequent change sets into a single set. `other`
	    must start in the document produced by `this`. If `this` goes
	    `docA` → `docB` and `other` represents `docB` → `docC`, the
	    returned value will represent the change `docA` → `docC`.
	    */
	    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
	    /**
	    Given another change set starting in the same document, maps this
	    change set over the other, producing a new change set that can be
	    applied to the document produced by applying `other`. When
	    `before` is `true`, order changes as if `this` comes before
	    `other`, otherwise (the default) treat `other` as coming first.
	    
	    Given two changes `A` and `B`, `A.compose(B.map(A))` and
	    `B.compose(A.map(B, true))` will produce the same document. This
	    provides a basic form of [operational
	    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
	    and can be used for collaborative editing.
	    */
	    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
	    /**
	    Iterate over the changed ranges in the document, calling `f` for
	    each, with the range in the original document (`fromA`-`toA`)
	    and the range that replaces it in the new document
	    (`fromB`-`toB`).
	    
	    When `individual` is true, adjacent changes are reported
	    separately.
	    */
	    iterChanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /**
	    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
	    set.
	    */
	    get desc() { return ChangeDesc.create(this.sections); }
	    /**
	    @internal
	    */
	    filter(ranges) {
	        let resultSections = [], resultInserted = [], filteredSections = [];
	        let iter = new SectionIter(this);
	        done: for (let i = 0, pos = 0;;) {
	            let next = i == ranges.length ? 1e9 : ranges[i++];
	            while (pos < next || pos == next && iter.len == 0) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, next - pos);
	                addSection(filteredSections, len, -1);
	                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
	                addSection(resultSections, len, ins);
	                if (ins > 0)
	                    addInsert(resultInserted, resultSections, iter.text);
	                iter.forward(len);
	                pos += len;
	            }
	            let end = ranges[i++];
	            while (pos < end) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, end - pos);
	                addSection(resultSections, len, -1);
	                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
	                iter.forward(len);
	                pos += len;
	            }
	        }
	        return { changes: new ChangeSet(resultSections, resultInserted),
	            filtered: ChangeDesc.create(filteredSections) };
	    }
	    /**
	    Serialize this change set to a JSON-representable value.
	    */
	    toJSON() {
	        let parts = [];
	        for (let i = 0; i < this.sections.length; i += 2) {
	            let len = this.sections[i], ins = this.sections[i + 1];
	            if (ins < 0)
	                parts.push(len);
	            else if (ins == 0)
	                parts.push([len]);
	            else
	                parts.push([len].concat(this.inserted[i >> 1].toJSON()));
	        }
	        return parts;
	    }
	    /**
	    Create a change set for the given changes, for a document of the
	    given length, using `lineSep` as line separator.
	    */
	    static of(changes, length, lineSep) {
	        let sections = [], inserted = [], pos = 0;
	        let total = null;
	        function flush(force = false) {
	            if (!force && !sections.length)
	                return;
	            if (pos < length)
	                addSection(sections, length - pos, -1);
	            let set = new ChangeSet(sections, inserted);
	            total = total ? total.compose(set.map(total)) : set;
	            sections = [];
	            inserted = [];
	            pos = 0;
	        }
	        function process(spec) {
	            if (Array.isArray(spec)) {
	                for (let sub of spec)
	                    process(sub);
	            }
	            else if (spec instanceof ChangeSet) {
	                if (spec.length != length)
	                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
	                flush();
	                total = total ? total.compose(spec.map(total)) : spec;
	            }
	            else {
	                let { from, to = from, insert } = spec;
	                if (from > to || from < 0 || to > length)
	                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
	                let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
	                let insLen = insText.length;
	                if (from == to && insLen == 0)
	                    return;
	                if (from < pos)
	                    flush();
	                if (from > pos)
	                    addSection(sections, from - pos, -1);
	                addSection(sections, to - from, insLen);
	                addInsert(inserted, sections, insText);
	                pos = to;
	            }
	        }
	        process(changes);
	        flush(!total);
	        return total;
	    }
	    /**
	    Create an empty changeset of the given length.
	    */
	    static empty(length) {
	        return new ChangeSet(length ? [length, -1] : [], []);
	    }
	    /**
	    Create a changeset from its JSON representation (as produced by
	    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
	    */
	    static fromJSON(json) {
	        if (!Array.isArray(json))
	            throw new RangeError("Invalid JSON representation of ChangeSet");
	        let sections = [], inserted = [];
	        for (let i = 0; i < json.length; i++) {
	            let part = json[i];
	            if (typeof part == "number") {
	                sections.push(part, -1);
	            }
	            else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
	                throw new RangeError("Invalid JSON representation of ChangeSet");
	            }
	            else if (part.length == 1) {
	                sections.push(part[0], 0);
	            }
	            else {
	                while (inserted.length < i)
	                    inserted.push(Text.empty);
	                inserted[i] = Text.of(part.slice(1));
	                sections.push(part[0], inserted[i].length);
	            }
	        }
	        return new ChangeSet(sections, inserted);
	    }
	    /**
	    @internal
	    */
	    static createSet(sections, inserted) {
	        return new ChangeSet(sections, inserted);
	    }
	}
	function addSection(sections, len, ins, forceJoin = false) {
	    if (len == 0 && ins <= 0)
	        return;
	    let last = sections.length - 2;
	    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
	        sections[last] += len;
	    else if (len == 0 && sections[last] == 0)
	        sections[last + 1] += ins;
	    else if (forceJoin) {
	        sections[last] += len;
	        sections[last + 1] += ins;
	    }
	    else
	        sections.push(len, ins);
	}
	function addInsert(values, sections, value) {
	    if (value.length == 0)
	        return;
	    let index = (sections.length - 2) >> 1;
	    if (index < values.length) {
	        values[values.length - 1] = values[values.length - 1].append(value);
	    }
	    else {
	        while (values.length < index)
	            values.push(Text.empty);
	        values.push(value);
	    }
	}
	function iterChanges(desc, f, individual) {
	    let inserted = desc.inserted;
	    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
	        let len = desc.sections[i++], ins = desc.sections[i++];
	        if (ins < 0) {
	            posA += len;
	            posB += len;
	        }
	        else {
	            let endA = posA, endB = posB, text = Text.empty;
	            for (;;) {
	                endA += len;
	                endB += ins;
	                if (ins && inserted)
	                    text = text.append(inserted[(i - 2) >> 1]);
	                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
	                    break;
	                len = desc.sections[i++];
	                ins = desc.sections[i++];
	            }
	            f(posA, endA, posB, endB, text);
	            posA = endA;
	            posB = endB;
	        }
	    }
	}
	function mapSet(setA, setB, before, mkSet = false) {
	    // Produce a copy of setA that applies to the document after setB
	    // has been applied (assuming both start at the same document).
	    let sections = [], insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    // Iterate over both sets in parallel. inserted tracks, for changes
	    // in A that have to be processed piece-by-piece, whether their
	    // content has been inserted already, and refers to the section
	    // index.
	    for (let inserted = -1;;) {
	        if (a.ins == -1 && b.ins == -1) {
	            // Move across ranges skipped by both sets.
	            let len = Math.min(a.len, b.len);
	            addSection(sections, len, -1);
	            a.forward(len);
	            b.forward(len);
	        }
	        else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
	            // If there's a change in B that comes before the next change in
	            // A (ordered by start pos, then len, then before flag), skip
	            // that (and process any changes in A it covers).
	            let len = b.len;
	            addSection(sections, b.ins, -1);
	            while (len) {
	                let piece = Math.min(a.len, len);
	                if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
	                    addSection(sections, 0, a.ins);
	                    if (insert)
	                        addInsert(insert, sections, a.text);
	                    inserted = a.i;
	                }
	                a.forward(piece);
	                len -= piece;
	            }
	            b.next();
	        }
	        else if (a.ins >= 0) {
	            // Process the part of a change in A up to the start of the next
	            // non-deletion change in B (if overlapping).
	            let len = 0, left = a.len;
	            while (left) {
	                if (b.ins == -1) {
	                    let piece = Math.min(left, b.len);
	                    len += piece;
	                    left -= piece;
	                    b.forward(piece);
	                }
	                else if (b.ins == 0 && b.len < left) {
	                    left -= b.len;
	                    b.next();
	                }
	                else {
	                    break;
	                }
	            }
	            addSection(sections, len, inserted < a.i ? a.ins : 0);
	            if (insert && inserted < a.i)
	                addInsert(insert, sections, a.text);
	            inserted = a.i;
	            a.forward(a.len - left);
	        }
	        else if (a.done && b.done) {
	            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
	        }
	        else {
	            throw new Error("Mismatched change set lengths");
	        }
	    }
	}
	function composeSets(setA, setB, mkSet = false) {
	    let sections = [];
	    let insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    for (let open = false;;) {
	        if (a.done && b.done) {
	            return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
	        }
	        else if (a.ins == 0) { // Deletion in A
	            addSection(sections, a.len, 0, open);
	            a.next();
	        }
	        else if (b.len == 0 && !b.done) { // Insertion in B
	            addSection(sections, 0, b.ins, open);
	            if (insert)
	                addInsert(insert, sections, b.text);
	            b.next();
	        }
	        else if (a.done || b.done) {
	            throw new Error("Mismatched change set lengths");
	        }
	        else {
	            let len = Math.min(a.len2, b.len), sectionLen = sections.length;
	            if (a.ins == -1) {
	                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
	                addSection(sections, len, insB, open);
	                if (insert && insB)
	                    addInsert(insert, sections, b.text);
	            }
	            else if (b.ins == -1) {
	                addSection(sections, a.off ? 0 : a.len, len, open);
	                if (insert)
	                    addInsert(insert, sections, a.textBit(len));
	            }
	            else {
	                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
	                if (insert && !b.off)
	                    addInsert(insert, sections, b.text);
	            }
	            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
	            a.forward2(len);
	            b.forward(len);
	        }
	    }
	}
	class SectionIter {
	    constructor(set) {
	        this.set = set;
	        this.i = 0;
	        this.next();
	    }
	    next() {
	        let { sections } = this.set;
	        if (this.i < sections.length) {
	            this.len = sections[this.i++];
	            this.ins = sections[this.i++];
	        }
	        else {
	            this.len = 0;
	            this.ins = -2;
	        }
	        this.off = 0;
	    }
	    get done() { return this.ins == -2; }
	    get len2() { return this.ins < 0 ? this.len : this.ins; }
	    get text() {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length ? Text.empty : inserted[index];
	    }
	    textBit(len) {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length && !len ? Text.empty
	            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
	    }
	    forward(len) {
	        if (len == this.len)
	            this.next();
	        else {
	            this.len -= len;
	            this.off += len;
	        }
	    }
	    forward2(len) {
	        if (this.ins == -1)
	            this.forward(len);
	        else if (len == this.ins)
	            this.next();
	        else {
	            this.ins -= len;
	            this.off += len;
	        }
	    }
	}

	/**
	A single selection range. When
	[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
	is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
	multiple ranges. By default, selections hold exactly one range.
	*/
	class SelectionRange {
	    constructor(
	    /**
	    The lower boundary of the range.
	    */
	    from, 
	    /**
	    The upper boundary of the range.
	    */
	    to, flags) {
	        this.from = from;
	        this.to = to;
	        this.flags = flags;
	    }
	    /**
	    The anchor of the range—the side that doesn't move when you
	    extend it.
	    */
	    get anchor() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.to : this.from; }
	    /**
	    The head of the range, which is moved when the range is
	    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
	    */
	    get head() { return this.flags & 32 /* RangeFlag.Inverted */ ? this.from : this.to; }
	    /**
	    True when `anchor` and `head` are at the same position.
	    */
	    get empty() { return this.from == this.to; }
	    /**
	    If this is a cursor that is explicitly associated with the
	    character on one of its sides, this returns the side. -1 means
	    the character before its position, 1 the character after, and 0
	    means no association.
	    */
	    get assoc() { return this.flags & 8 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 16 /* RangeFlag.AssocAfter */ ? 1 : 0; }
	    /**
	    The bidirectional text level associated with this cursor, if
	    any.
	    */
	    get bidiLevel() {
	        let level = this.flags & 7 /* RangeFlag.BidiLevelMask */;
	        return level == 7 ? null : level;
	    }
	    /**
	    The goal column (stored vertical offset) associated with a
	    cursor. This is used to preserve the vertical position when
	    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
	    lines of different length.
	    */
	    get goalColumn() {
	        let value = this.flags >> 6 /* RangeFlag.GoalColumnOffset */;
	        return value == 16777215 /* RangeFlag.NoGoalColumn */ ? undefined : value;
	    }
	    /**
	    Map this range through a change, producing a valid range in the
	    updated document.
	    */
	    map(change, assoc = -1) {
	        let from, to;
	        if (this.empty) {
	            from = to = change.mapPos(this.from, assoc);
	        }
	        else {
	            from = change.mapPos(this.from, 1);
	            to = change.mapPos(this.to, -1);
	        }
	        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
	    }
	    /**
	    Extend this range to cover at least `from` to `to`.
	    */
	    extend(from, to = from) {
	        if (from <= this.anchor && to >= this.anchor)
	            return EditorSelection.range(from, to);
	        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
	        return EditorSelection.range(this.anchor, head);
	    }
	    /**
	    Compare this range to another range.
	    */
	    eq(other, includeAssoc = false) {
	        return this.anchor == other.anchor && this.head == other.head &&
	            (!includeAssoc || !this.empty || this.assoc == other.assoc);
	    }
	    /**
	    Return a JSON-serializable object representing the range.
	    */
	    toJSON() { return { anchor: this.anchor, head: this.head }; }
	    /**
	    Convert a JSON representation of a range to a `SelectionRange`
	    instance.
	    */
	    static fromJSON(json) {
	        if (!json || typeof json.anchor != "number" || typeof json.head != "number")
	            throw new RangeError("Invalid JSON representation for SelectionRange");
	        return EditorSelection.range(json.anchor, json.head);
	    }
	    /**
	    @internal
	    */
	    static create(from, to, flags) {
	        return new SelectionRange(from, to, flags);
	    }
	}
	/**
	An editor selection holds one or more selection ranges.
	*/
	class EditorSelection {
	    constructor(
	    /**
	    The ranges in the selection, sorted by position. Ranges cannot
	    overlap (but they may touch, if they aren't empty).
	    */
	    ranges, 
	    /**
	    The index of the _main_ range in the selection (which is
	    usually the range that was added last).
	    */
	    mainIndex) {
	        this.ranges = ranges;
	        this.mainIndex = mainIndex;
	    }
	    /**
	    Map a selection through a change. Used to adjust the selection
	    position for changes.
	    */
	    map(change, assoc = -1) {
	        if (change.empty)
	            return this;
	        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
	    }
	    /**
	    Compare this selection to another selection. By default, ranges
	    are compared only by position. When `includeAssoc` is true,
	    cursor ranges must also have the same
	    [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
	    */
	    eq(other, includeAssoc = false) {
	        if (this.ranges.length != other.ranges.length ||
	            this.mainIndex != other.mainIndex)
	            return false;
	        for (let i = 0; i < this.ranges.length; i++)
	            if (!this.ranges[i].eq(other.ranges[i], includeAssoc))
	                return false;
	        return true;
	    }
	    /**
	    Get the primary selection range. Usually, you should make sure
	    your code applies to _all_ ranges, by using methods like
	    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
	    */
	    get main() { return this.ranges[this.mainIndex]; }
	    /**
	    Make sure the selection only has one range. Returns a selection
	    holding only the main range from this selection.
	    */
	    asSingle() {
	        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
	    }
	    /**
	    Extend this selection with an extra range.
	    */
	    addRange(range, main = true) {
	        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
	    }
	    /**
	    Replace a given range with another range, and then normalize the
	    selection to merge and sort ranges if necessary.
	    */
	    replaceRange(range, which = this.mainIndex) {
	        let ranges = this.ranges.slice();
	        ranges[which] = range;
	        return EditorSelection.create(ranges, this.mainIndex);
	    }
	    /**
	    Convert this selection to an object that can be serialized to
	    JSON.
	    */
	    toJSON() {
	        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
	    }
	    /**
	    Create a selection from a JSON representation.
	    */
	    static fromJSON(json) {
	        if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
	            throw new RangeError("Invalid JSON representation for EditorSelection");
	        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
	    }
	    /**
	    Create a selection holding a single range.
	    */
	    static single(anchor, head = anchor) {
	        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
	    }
	    /**
	    Sort and merge the given set of ranges, creating a valid
	    selection.
	    */
	    static create(ranges, mainIndex = 0) {
	        if (ranges.length == 0)
	            throw new RangeError("A selection needs at least one range");
	        for (let pos = 0, i = 0; i < ranges.length; i++) {
	            let range = ranges[i];
	            if (range.empty ? range.from <= pos : range.from < pos)
	                return EditorSelection.normalized(ranges.slice(), mainIndex);
	            pos = range.to;
	        }
	        return new EditorSelection(ranges, mainIndex);
	    }
	    /**
	    Create a cursor selection range at the given position. You can
	    safely ignore the optional arguments in most situations.
	    */
	    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
	        return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 8 /* RangeFlag.AssocBefore */ : 16 /* RangeFlag.AssocAfter */) |
	            (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) |
	            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */));
	    }
	    /**
	    Create a selection range.
	    */
	    static range(anchor, head, goalColumn, bidiLevel) {
	        let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215 /* RangeFlag.NoGoalColumn */) << 6 /* RangeFlag.GoalColumnOffset */) |
	            (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
	        return head < anchor ? SelectionRange.create(head, anchor, 32 /* RangeFlag.Inverted */ | 16 /* RangeFlag.AssocAfter */ | flags)
	            : SelectionRange.create(anchor, head, (head > anchor ? 8 /* RangeFlag.AssocBefore */ : 0) | flags);
	    }
	    /**
	    @internal
	    */
	    static normalized(ranges, mainIndex = 0) {
	        let main = ranges[mainIndex];
	        ranges.sort((a, b) => a.from - b.from);
	        mainIndex = ranges.indexOf(main);
	        for (let i = 1; i < ranges.length; i++) {
	            let range = ranges[i], prev = ranges[i - 1];
	            if (range.empty ? range.from <= prev.to : range.from < prev.to) {
	                let from = prev.from, to = Math.max(range.to, prev.to);
	                if (i <= mainIndex)
	                    mainIndex--;
	                ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
	            }
	        }
	        return new EditorSelection(ranges, mainIndex);
	    }
	}
	function checkSelection(selection, docLength) {
	    for (let range of selection.ranges)
	        if (range.to > docLength)
	            throw new RangeError("Selection points outside of document");
	}

	let nextID = 0;
	/**
	A facet is a labeled value that is associated with an editor
	state. It takes inputs from any number of extensions, and combines
	those into a single output value.

	Examples of uses of facets are the [tab
	size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
	attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
	listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).

	Note that `Facet` instances can be used anywhere where
	[`FacetReader`](https://codemirror.net/6/docs/ref/#state.FacetReader) is expected.
	*/
	class Facet {
	    constructor(
	    /**
	    @internal
	    */
	    combine, 
	    /**
	    @internal
	    */
	    compareInput, 
	    /**
	    @internal
	    */
	    compare, isStatic, enables) {
	        this.combine = combine;
	        this.compareInput = compareInput;
	        this.compare = compare;
	        this.isStatic = isStatic;
	        /**
	        @internal
	        */
	        this.id = nextID++;
	        this.default = combine([]);
	        this.extensions = typeof enables == "function" ? enables(this) : enables;
	    }
	    /**
	    Returns a facet reader for this facet, which can be used to
	    [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
	    */
	    get reader() { return this; }
	    /**
	    Define a new facet.
	    */
	    static define(config = {}) {
	        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
	    }
	    /**
	    Returns an extension that adds the given value to this facet.
	    */
	    of(value) {
	        return new FacetProvider([], this, 0 /* Provider.Static */, value);
	    }
	    /**
	    Create an extension that computes a value for the facet from a
	    state. You must take care to declare the parts of the state that
	    this value depends on, since your function is only called again
	    for a new state when one of those parts changed.
	    
	    In cases where your value depends only on a single field, you'll
	    want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
	    */
	    compute(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
	    }
	    /**
	    Create an extension that computes zero or more values for this
	    facet from a state.
	    */
	    computeN(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
	    }
	    from(field, get) {
	        if (!get)
	            get = x => x;
	        return this.compute([field], state => get(state.field(field)));
	    }
	}
	function sameArray$1(a, b) {
	    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
	}
	class FacetProvider {
	    constructor(dependencies, facet, type, value) {
	        this.dependencies = dependencies;
	        this.facet = facet;
	        this.type = type;
	        this.value = value;
	        this.id = nextID++;
	    }
	    dynamicSlot(addresses) {
	        var _a;
	        let getter = this.value;
	        let compare = this.facet.compareInput;
	        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
	        let depDoc = false, depSel = false, depAddrs = [];
	        for (let dep of this.dependencies) {
	            if (dep == "doc")
	                depDoc = true;
	            else if (dep == "selection")
	                depSel = true;
	            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
	                depAddrs.push(addresses[dep.id]);
	        }
	        return {
	            create(state) {
	                state.values[idx] = getter(state);
	                return 1 /* SlotStatus.Changed */;
	            },
	            update(state, tr) {
	                if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
	                    let newVal = getter(state);
	                    if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
	                        state.values[idx] = newVal;
	                        return 1 /* SlotStatus.Changed */;
	                    }
	                }
	                return 0;
	            },
	            reconfigure: (state, oldState) => {
	                let newVal, oldAddr = oldState.config.address[id];
	                if (oldAddr != null) {
	                    let oldVal = getAddr(oldState, oldAddr);
	                    if (this.dependencies.every(dep => {
	                        return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
	                            dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
	                    }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
	                        state.values[idx] = oldVal;
	                        return 0;
	                    }
	                }
	                else {
	                    newVal = getter(state);
	                }
	                state.values[idx] = newVal;
	                return 1 /* SlotStatus.Changed */;
	            }
	        };
	    }
	}
	function compareArray(a, b, compare) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!compare(a[i], b[i]))
	            return false;
	    return true;
	}
	function ensureAll(state, addrs) {
	    let changed = false;
	    for (let addr of addrs)
	        if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
	            changed = true;
	    return changed;
	}
	function dynamicFacetSlot(addresses, facet, providers) {
	    let providerAddrs = providers.map(p => addresses[p.id]);
	    let providerTypes = providers.map(p => p.type);
	    let dynamic = providerAddrs.filter(p => !(p & 1));
	    let idx = addresses[facet.id] >> 1;
	    function get(state) {
	        let values = [];
	        for (let i = 0; i < providerAddrs.length; i++) {
	            let value = getAddr(state, providerAddrs[i]);
	            if (providerTypes[i] == 2 /* Provider.Multi */)
	                for (let val of value)
	                    values.push(val);
	            else
	                values.push(value);
	        }
	        return facet.combine(values);
	    }
	    return {
	        create(state) {
	            for (let addr of providerAddrs)
	                ensureAddr(state, addr);
	            state.values[idx] = get(state);
	            return 1 /* SlotStatus.Changed */;
	        },
	        update(state, tr) {
	            if (!ensureAll(state, dynamic))
	                return 0;
	            let value = get(state);
	            if (facet.compare(value, state.values[idx]))
	                return 0;
	            state.values[idx] = value;
	            return 1 /* SlotStatus.Changed */;
	        },
	        reconfigure(state, oldState) {
	            let depChanged = ensureAll(state, providerAddrs);
	            let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
	            if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
	                state.values[idx] = oldValue;
	                return 0;
	            }
	            let value = get(state);
	            if (facet.compare(value, oldValue)) {
	                state.values[idx] = oldValue;
	                return 0;
	            }
	            state.values[idx] = value;
	            return 1 /* SlotStatus.Changed */;
	        }
	    };
	}
	const initField = /*@__PURE__*/Facet.define({ static: true });
	/**
	Fields can store additional information in an editor state, and
	keep it in sync with the rest of the state.
	*/
	class StateField {
	    constructor(
	    /**
	    @internal
	    */
	    id, createF, updateF, compareF, 
	    /**
	    @internal
	    */
	    spec) {
	        this.id = id;
	        this.createF = createF;
	        this.updateF = updateF;
	        this.compareF = compareF;
	        this.spec = spec;
	        /**
	        @internal
	        */
	        this.provides = undefined;
	    }
	    /**
	    Define a state field.
	    */
	    static define(config) {
	        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
	        if (config.provide)
	            field.provides = config.provide(field);
	        return field;
	    }
	    create(state) {
	        let init = state.facet(initField).find(i => i.field == this);
	        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
	    }
	    /**
	    @internal
	    */
	    slot(addresses) {
	        let idx = addresses[this.id] >> 1;
	        return {
	            create: (state) => {
	                state.values[idx] = this.create(state);
	                return 1 /* SlotStatus.Changed */;
	            },
	            update: (state, tr) => {
	                let oldVal = state.values[idx];
	                let value = this.updateF(oldVal, tr);
	                if (this.compareF(oldVal, value))
	                    return 0;
	                state.values[idx] = value;
	                return 1 /* SlotStatus.Changed */;
	            },
	            reconfigure: (state, oldState) => {
	                if (oldState.config.address[this.id] != null) {
	                    state.values[idx] = oldState.field(this);
	                    return 0;
	                }
	                state.values[idx] = this.create(state);
	                return 1 /* SlotStatus.Changed */;
	            }
	        };
	    }
	    /**
	    Returns an extension that enables this field and overrides the
	    way it is initialized. Can be useful when you need to provide a
	    non-default starting value for the field.
	    */
	    init(create) {
	        return [this, initField.of({ field: this, create })];
	    }
	    /**
	    State field instances can be used as
	    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
	    given state.
	    */
	    get extension() { return this; }
	}
	const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
	function prec(value) {
	    return (ext) => new PrecExtension(ext, value);
	}
	/**
	By default extensions are registered in the order they are found
	in the flattened form of nested array that was provided.
	Individual extension values can be assigned a precedence to
	override this. Extensions that do not have a precedence set get
	the precedence of the nearest parent with a precedence, or
	[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
	final ordering of extensions is determined by first sorting by
	precedence and then by order within each precedence.
	*/
	const Prec = {
	    /**
	    The highest precedence level, for extensions that should end up
	    near the start of the precedence ordering.
	    */
	    highest: /*@__PURE__*/prec(Prec_.highest),
	    /**
	    A higher-than-default precedence, for extensions that should
	    come before those with default precedence.
	    */
	    high: /*@__PURE__*/prec(Prec_.high),
	    /**
	    The default precedence, which is also used for extensions
	    without an explicit precedence.
	    */
	    default: /*@__PURE__*/prec(Prec_.default),
	    /**
	    A lower-than-default precedence.
	    */
	    low: /*@__PURE__*/prec(Prec_.low),
	    /**
	    The lowest precedence level. Meant for things that should end up
	    near the end of the extension order.
	    */
	    lowest: /*@__PURE__*/prec(Prec_.lowest)
	};
	class PrecExtension {
	    constructor(inner, prec) {
	        this.inner = inner;
	        this.prec = prec;
	    }
	}
	/**
	Extension compartments can be used to make a configuration
	dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
	configuration in a compartment, you can later
	[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
	transaction.
	*/
	class Compartment {
	    /**
	    Create an instance of this compartment to add to your [state
	    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
	    */
	    of(ext) { return new CompartmentInstance(this, ext); }
	    /**
	    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
	    reconfigures this compartment.
	    */
	    reconfigure(content) {
	        return Compartment.reconfigure.of({ compartment: this, extension: content });
	    }
	    /**
	    Get the current content of the compartment in the state, or
	    `undefined` if it isn't present.
	    */
	    get(state) {
	        return state.config.compartments.get(this);
	    }
	}
	class CompartmentInstance {
	    constructor(compartment, inner) {
	        this.compartment = compartment;
	        this.inner = inner;
	    }
	}
	class Configuration {
	    constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
	        this.base = base;
	        this.compartments = compartments;
	        this.dynamicSlots = dynamicSlots;
	        this.address = address;
	        this.staticValues = staticValues;
	        this.facets = facets;
	        this.statusTemplate = [];
	        while (this.statusTemplate.length < dynamicSlots.length)
	            this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
	    }
	    staticFacet(facet) {
	        let addr = this.address[facet.id];
	        return addr == null ? facet.default : this.staticValues[addr >> 1];
	    }
	    static resolve(base, compartments, oldState) {
	        let fields = [];
	        let facets = Object.create(null);
	        let newCompartments = new Map();
	        for (let ext of flatten(base, compartments, newCompartments)) {
	            if (ext instanceof StateField)
	                fields.push(ext);
	            else
	                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
	        }
	        let address = Object.create(null);
	        let staticValues = [];
	        let dynamicSlots = [];
	        for (let field of fields) {
	            address[field.id] = dynamicSlots.length << 1;
	            dynamicSlots.push(a => field.slot(a));
	        }
	        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
	        for (let id in facets) {
	            let providers = facets[id], facet = providers[0].facet;
	            let oldProviders = oldFacets && oldFacets[id] || [];
	            if (providers.every(p => p.type == 0 /* Provider.Static */)) {
	                address[facet.id] = (staticValues.length << 1) | 1;
	                if (sameArray$1(oldProviders, providers)) {
	                    staticValues.push(oldState.facet(facet));
	                }
	                else {
	                    let value = facet.combine(providers.map(p => p.value));
	                    staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
	                }
	            }
	            else {
	                for (let p of providers) {
	                    if (p.type == 0 /* Provider.Static */) {
	                        address[p.id] = (staticValues.length << 1) | 1;
	                        staticValues.push(p.value);
	                    }
	                    else {
	                        address[p.id] = dynamicSlots.length << 1;
	                        dynamicSlots.push(a => p.dynamicSlot(a));
	                    }
	                }
	                address[facet.id] = dynamicSlots.length << 1;
	                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
	            }
	        }
	        let dynamic = dynamicSlots.map(f => f(address));
	        return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
	    }
	}
	function flatten(extension, compartments, newCompartments) {
	    let result = [[], [], [], [], []];
	    let seen = new Map();
	    function inner(ext, prec) {
	        let known = seen.get(ext);
	        if (known != null) {
	            if (known <= prec)
	                return;
	            let found = result[known].indexOf(ext);
	            if (found > -1)
	                result[known].splice(found, 1);
	            if (ext instanceof CompartmentInstance)
	                newCompartments.delete(ext.compartment);
	        }
	        seen.set(ext, prec);
	        if (Array.isArray(ext)) {
	            for (let e of ext)
	                inner(e, prec);
	        }
	        else if (ext instanceof CompartmentInstance) {
	            if (newCompartments.has(ext.compartment))
	                throw new RangeError(`Duplicate use of compartment in extensions`);
	            let content = compartments.get(ext.compartment) || ext.inner;
	            newCompartments.set(ext.compartment, content);
	            inner(content, prec);
	        }
	        else if (ext instanceof PrecExtension) {
	            inner(ext.inner, ext.prec);
	        }
	        else if (ext instanceof StateField) {
	            result[prec].push(ext);
	            if (ext.provides)
	                inner(ext.provides, prec);
	        }
	        else if (ext instanceof FacetProvider) {
	            result[prec].push(ext);
	            if (ext.facet.extensions)
	                inner(ext.facet.extensions, Prec_.default);
	        }
	        else {
	            let content = ext.extension;
	            if (!content)
	                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
	            inner(content, prec);
	        }
	    }
	    inner(extension, Prec_.default);
	    return result.reduce((a, b) => a.concat(b));
	}
	function ensureAddr(state, addr) {
	    if (addr & 1)
	        return 2 /* SlotStatus.Computed */;
	    let idx = addr >> 1;
	    let status = state.status[idx];
	    if (status == 4 /* SlotStatus.Computing */)
	        throw new Error("Cyclic dependency between fields and/or facets");
	    if (status & 2 /* SlotStatus.Computed */)
	        return status;
	    state.status[idx] = 4 /* SlotStatus.Computing */;
	    let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
	    return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
	}
	function getAddr(state, addr) {
	    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
	}

	const languageData = /*@__PURE__*/Facet.define();
	const allowMultipleSelections = /*@__PURE__*/Facet.define({
	    combine: values => values.some(v => v),
	    static: true
	});
	const lineSeparator = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : undefined,
	    static: true
	});
	const changeFilter = /*@__PURE__*/Facet.define();
	const transactionFilter = /*@__PURE__*/Facet.define();
	const transactionExtender = /*@__PURE__*/Facet.define();
	const readOnly = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : false
	});

	/**
	Annotations are tagged values that are used to add metadata to
	transactions in an extensible way. They should be used to model
	things that effect the entire transaction (such as its [time
	stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
	[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
	_alongside_ the other changes made by the transaction, [state
	effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
	*/
	class Annotation {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The annotation type.
	    */
	    type, 
	    /**
	    The value of this annotation.
	    */
	    value) {
	        this.type = type;
	        this.value = value;
	    }
	    /**
	    Define a new type of annotation.
	    */
	    static define() { return new AnnotationType(); }
	}
	/**
	Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
	*/
	class AnnotationType {
	    /**
	    Create an instance of this annotation.
	    */
	    of(value) { return new Annotation(this, value); }
	}
	/**
	Representation of a type of state effect. Defined with
	[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
	*/
	class StateEffectType {
	    /**
	    @internal
	    */
	    constructor(
	    // The `any` types in these function types are there to work
	    // around TypeScript issue #37631, where the type guard on
	    // `StateEffect.is` mysteriously stops working when these properly
	    // have type `Value`.
	    /**
	    @internal
	    */
	    map) {
	        this.map = map;
	    }
	    /**
	    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
	    type.
	    */
	    of(value) { return new StateEffect(this, value); }
	}
	/**
	State effects can be used to represent additional effects
	associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
	are often useful to model changes to custom [state
	fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
	document or selection changes.
	*/
	class StateEffect {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    type, 
	    /**
	    The value of this effect.
	    */
	    value) {
	        this.type = type;
	        this.value = value;
	    }
	    /**
	    Map this effect through a position mapping. Will return
	    `undefined` when that ends up deleting the effect.
	    */
	    map(mapping) {
	        let mapped = this.type.map(this.value, mapping);
	        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
	    }
	    /**
	    Tells you whether this effect object is of a given
	    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
	    */
	    is(type) { return this.type == type; }
	    /**
	    Define a new effect type. The type parameter indicates the type
	    of values that his effect holds. It should be a type that
	    doesn't include `undefined`, since that is used in
	    [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
	    removed.
	    */
	    static define(spec = {}) {
	        return new StateEffectType(spec.map || (v => v));
	    }
	    /**
	    Map an array of effects through a change set.
	    */
	    static mapEffects(effects, mapping) {
	        if (!effects.length)
	            return effects;
	        let result = [];
	        for (let effect of effects) {
	            let mapped = effect.map(mapping);
	            if (mapped)
	                result.push(mapped);
	        }
	        return result;
	    }
	}
	/**
	This effect can be used to reconfigure the root extensions of
	the editor. Doing this will discard any extensions
	[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
	the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
	compartments.
	*/
	StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
	/**
	Append extensions to the top-level configuration of the editor.
	*/
	StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
	/**
	Changes to the editor state are grouped into transactions.
	Typically, a user action creates a single transaction, which may
	contain any number of document changes, may change the selection,
	or have other effects. Create a transaction by calling
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
	dispatch one by calling
	[`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
	*/
	class Transaction {
	    constructor(
	    /**
	    The state from which the transaction starts.
	    */
	    startState, 
	    /**
	    The document changes made by this transaction.
	    */
	    changes, 
	    /**
	    The selection set by this transaction, or undefined if it
	    doesn't explicitly set a selection.
	    */
	    selection, 
	    /**
	    The effects added to the transaction.
	    */
	    effects, 
	    /**
	    @internal
	    */
	    annotations, 
	    /**
	    Whether the selection should be scrolled into view after this
	    transaction is dispatched.
	    */
	    scrollIntoView) {
	        this.startState = startState;
	        this.changes = changes;
	        this.selection = selection;
	        this.effects = effects;
	        this.annotations = annotations;
	        this.scrollIntoView = scrollIntoView;
	        /**
	        @internal
	        */
	        this._doc = null;
	        /**
	        @internal
	        */
	        this._state = null;
	        if (selection)
	            checkSelection(selection, changes.newLength);
	        if (!annotations.some((a) => a.type == Transaction.time))
	            this.annotations = annotations.concat(Transaction.time.of(Date.now()));
	    }
	    /**
	    @internal
	    */
	    static create(startState, changes, selection, effects, annotations, scrollIntoView) {
	        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
	    }
	    /**
	    The new document produced by the transaction. Contrary to
	    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
	    force the entire new state to be computed right away, so it is
	    recommended that [transaction
	    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
	    when they need to look at the new document.
	    */
	    get newDoc() {
	        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
	    }
	    /**
	    The new selection produced by the transaction. If
	    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
	    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
	    current selection through the changes made by the transaction.
	    */
	    get newSelection() {
	        return this.selection || this.startState.selection.map(this.changes);
	    }
	    /**
	    The new state created by the transaction. Computed on demand
	    (but retained for subsequent access), so it is recommended not to
	    access it in [transaction
	    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
	    */
	    get state() {
	        if (!this._state)
	            this.startState.applyTransaction(this);
	        return this._state;
	    }
	    /**
	    Get the value of the given annotation type, if any.
	    */
	    annotation(type) {
	        for (let ann of this.annotations)
	            if (ann.type == type)
	                return ann.value;
	        return undefined;
	    }
	    /**
	    Indicates whether the transaction changed the document.
	    */
	    get docChanged() { return !this.changes.empty; }
	    /**
	    Indicates whether this transaction reconfigures the state
	    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
	    with a top-level configuration
	    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
	    */
	    get reconfigured() { return this.startState.config != this.state.config; }
	    /**
	    Returns true if the transaction has a [user
	    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
	    or more specific than `event`. For example, if the transaction
	    has `"select.pointer"` as user event, `"select"` and
	    `"select.pointer"` will match it.
	    */
	    isUserEvent(event) {
	        let e = this.annotation(Transaction.userEvent);
	        return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
	    }
	}
	/**
	Annotation used to store transaction timestamps. Automatically
	added to every transaction, holding `Date.now()`.
	*/
	Transaction.time = /*@__PURE__*/Annotation.define();
	/**
	Annotation used to associate a transaction with a user interface
	event. Holds a string identifying the event, using a
	dot-separated format to support attaching more specific
	information. The events used by the core libraries are:

	 - `"input"` when content is entered
	   - `"input.type"` for typed input
	     - `"input.type.compose"` for composition
	   - `"input.paste"` for pasted input
	   - `"input.drop"` when adding content with drag-and-drop
	   - `"input.complete"` when autocompleting
	 - `"delete"` when the user deletes content
	   - `"delete.selection"` when deleting the selection
	   - `"delete.forward"` when deleting forward from the selection
	   - `"delete.backward"` when deleting backward from the selection
	   - `"delete.cut"` when cutting to the clipboard
	 - `"move"` when content is moved
	   - `"move.drop"` when content is moved within the editor through drag-and-drop
	 - `"select"` when explicitly changing the selection
	   - `"select.pointer"` when selecting with a mouse or other pointing device
	 - `"undo"` and `"redo"` for history actions

	Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
	whether the annotation matches a given event.
	*/
	Transaction.userEvent = /*@__PURE__*/Annotation.define();
	/**
	Annotation indicating whether a transaction should be added to
	the undo history or not.
	*/
	Transaction.addToHistory = /*@__PURE__*/Annotation.define();
	/**
	Annotation indicating (when present and true) that a transaction
	represents a change made by some other actor, not the user. This
	is used, for example, to tag other people's changes in
	collaborative editing.
	*/
	Transaction.remote = /*@__PURE__*/Annotation.define();
	function joinRanges(a, b) {
	    let result = [];
	    for (let iA = 0, iB = 0;;) {
	        let from, to;
	        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
	            from = a[iA++];
	            to = a[iA++];
	        }
	        else if (iB < b.length) {
	            from = b[iB++];
	            to = b[iB++];
	        }
	        else
	            return result;
	        if (!result.length || result[result.length - 1] < from)
	            result.push(from, to);
	        else if (result[result.length - 1] < to)
	            result[result.length - 1] = to;
	    }
	}
	function mergeTransaction(a, b, sequential) {
	    var _a;
	    let mapForA, mapForB, changes;
	    if (sequential) {
	        mapForA = b.changes;
	        mapForB = ChangeSet.empty(b.changes.length);
	        changes = a.changes.compose(b.changes);
	    }
	    else {
	        mapForA = b.changes.map(a.changes);
	        mapForB = a.changes.mapDesc(b.changes, true);
	        changes = a.changes.compose(mapForA);
	    }
	    return {
	        changes,
	        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
	        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
	        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
	        scrollIntoView: a.scrollIntoView || b.scrollIntoView
	    };
	}
	function resolveTransactionInner(state, spec, docSize) {
	    let sel = spec.selection, annotations = asArray$1(spec.annotations);
	    if (spec.userEvent)
	        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
	    return {
	        changes: spec.changes instanceof ChangeSet ? spec.changes
	            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
	        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
	        effects: asArray$1(spec.effects),
	        annotations,
	        scrollIntoView: !!spec.scrollIntoView
	    };
	}
	function resolveTransaction(state, specs, filter) {
	    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
	    if (specs.length && specs[0].filter === false)
	        filter = false;
	    for (let i = 1; i < specs.length; i++) {
	        if (specs[i].filter === false)
	            filter = false;
	        let seq = !!specs[i].sequential;
	        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
	    }
	    let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
	    return extendTransaction(filter ? filterTransaction(tr) : tr);
	}
	// Finish a transaction by applying filters if necessary.
	function filterTransaction(tr) {
	    let state = tr.startState;
	    // Change filters
	    let result = true;
	    for (let filter of state.facet(changeFilter)) {
	        let value = filter(tr);
	        if (value === false) {
	            result = false;
	            break;
	        }
	        if (Array.isArray(value))
	            result = result === true ? value : joinRanges(result, value);
	    }
	    if (result !== true) {
	        let changes, back;
	        if (result === false) {
	            back = tr.changes.invertedDesc;
	            changes = ChangeSet.empty(state.doc.length);
	        }
	        else {
	            let filtered = tr.changes.filter(result);
	            changes = filtered.changes;
	            back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
	        }
	        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
	    }
	    // Transaction filters
	    let filters = state.facet(transactionFilter);
	    for (let i = filters.length - 1; i >= 0; i--) {
	        let filtered = filters[i](tr);
	        if (filtered instanceof Transaction)
	            tr = filtered;
	        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
	            tr = filtered[0];
	        else
	            tr = resolveTransaction(state, asArray$1(filtered), false);
	    }
	    return tr;
	}
	function extendTransaction(tr) {
	    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
	    for (let i = extenders.length - 1; i >= 0; i--) {
	        let extension = extenders[i](tr);
	        if (extension && Object.keys(extension).length)
	            spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
	    }
	    return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
	}
	const none$1 = [];
	function asArray$1(value) {
	    return value == null ? none$1 : Array.isArray(value) ? value : [value];
	}

	/**
	The categories produced by a [character
	categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
	do things like selecting by word.
	*/
	var CharCategory = /*@__PURE__*/(function (CharCategory) {
	    /**
	    Word characters.
	    */
	    CharCategory[CharCategory["Word"] = 0] = "Word";
	    /**
	    Whitespace.
	    */
	    CharCategory[CharCategory["Space"] = 1] = "Space";
	    /**
	    Anything else.
	    */
	    CharCategory[CharCategory["Other"] = 2] = "Other";
	return CharCategory})(CharCategory || (CharCategory = {}));
	const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
	let wordChar;
	try {
	    wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
	}
	catch (_) { }
	function hasWordChar(str) {
	    if (wordChar)
	        return wordChar.test(str);
	    for (let i = 0; i < str.length; i++) {
	        let ch = str[i];
	        if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
	            return true;
	    }
	    return false;
	}
	function makeCategorizer(wordChars) {
	    return (char) => {
	        if (!/\S/.test(char))
	            return CharCategory.Space;
	        if (hasWordChar(char))
	            return CharCategory.Word;
	        for (let i = 0; i < wordChars.length; i++)
	            if (char.indexOf(wordChars[i]) > -1)
	                return CharCategory.Word;
	        return CharCategory.Other;
	    };
	}

	/**
	The editor state class is a persistent (immutable) data structure.
	To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
	[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
	instance, without modifying the original object.

	As such, _never_ mutate properties of a state directly. That'll
	just break things.
	*/
	class EditorState {
	    constructor(
	    /**
	    @internal
	    */
	    config, 
	    /**
	    The current document.
	    */
	    doc, 
	    /**
	    The current selection.
	    */
	    selection, 
	    /**
	    @internal
	    */
	    values, computeSlot, tr) {
	        this.config = config;
	        this.doc = doc;
	        this.selection = selection;
	        this.values = values;
	        this.status = config.statusTemplate.slice();
	        this.computeSlot = computeSlot;
	        // Fill in the computed state immediately, so that further queries
	        // for it made during the update return this state
	        if (tr)
	            tr._state = this;
	        for (let i = 0; i < this.config.dynamicSlots.length; i++)
	            ensureAddr(this, i << 1);
	        this.computeSlot = null;
	    }
	    field(field, require = true) {
	        let addr = this.config.address[field.id];
	        if (addr == null) {
	            if (require)
	                throw new RangeError("Field is not present in this state");
	            return undefined;
	        }
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /**
	    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
	    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
	    can be passed. Unless
	    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
	    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
	    are assumed to start in the _current_ document (not the document
	    produced by previous specs), and its
	    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
	    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
	    to the document created by its _own_ changes. The resulting
	    transaction contains the combined effect of all the different
	    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
	    specs take precedence over earlier ones.
	    */
	    update(...specs) {
	        return resolveTransaction(this, specs, true);
	    }
	    /**
	    @internal
	    */
	    applyTransaction(tr) {
	        let conf = this.config, { base, compartments } = conf;
	        for (let effect of tr.effects) {
	            if (effect.is(Compartment.reconfigure)) {
	                if (conf) {
	                    compartments = new Map;
	                    conf.compartments.forEach((val, key) => compartments.set(key, val));
	                    conf = null;
	                }
	                compartments.set(effect.value.compartment, effect.value.extension);
	            }
	            else if (effect.is(StateEffect.reconfigure)) {
	                conf = null;
	                base = effect.value;
	            }
	            else if (effect.is(StateEffect.appendConfig)) {
	                conf = null;
	                base = asArray$1(base).concat(effect.value);
	            }
	        }
	        let startValues;
	        if (!conf) {
	            conf = Configuration.resolve(base, compartments, this);
	            let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
	            startValues = intermediateState.values;
	        }
	        else {
	            startValues = tr.startState.values.slice();
	        }
	        let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
	        new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
	    }
	    /**
	    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
	    replaces every selection range with the given content.
	    */
	    replaceSelection(text) {
	        if (typeof text == "string")
	            text = this.toText(text);
	        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
	            range: EditorSelection.cursor(range.from + text.length) }));
	    }
	    /**
	    Create a set of changes and a new selection by running the given
	    function for each range in the active selection. The function
	    can return an optional set of changes (in the coordinate space
	    of the start document), plus an updated range (in the coordinate
	    space of the document produced by the call's own changes). This
	    method will merge all the changes and ranges into a single
	    changeset and selection, and return it as a [transaction
	    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
	    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
	    */
	    changeByRange(f) {
	        let sel = this.selection;
	        let result1 = f(sel.ranges[0]);
	        let changes = this.changes(result1.changes), ranges = [result1.range];
	        let effects = asArray$1(result1.effects);
	        for (let i = 1; i < sel.ranges.length; i++) {
	            let result = f(sel.ranges[i]);
	            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
	            for (let j = 0; j < i; j++)
	                ranges[j] = ranges[j].map(newMapped);
	            let mapBy = changes.mapDesc(newChanges, true);
	            ranges.push(result.range.map(mapBy));
	            changes = changes.compose(newMapped);
	            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
	        }
	        return {
	            changes,
	            selection: EditorSelection.create(ranges, sel.mainIndex),
	            effects
	        };
	    }
	    /**
	    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
	    description, taking the state's document length and line
	    separator into account.
	    */
	    changes(spec = []) {
	        if (spec instanceof ChangeSet)
	            return spec;
	        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
	    }
	    /**
	    Using the state's [line
	    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
	    [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
	    */
	    toText(string) {
	        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
	    }
	    /**
	    Return the given range of the document as a string.
	    */
	    sliceDoc(from = 0, to = this.doc.length) {
	        return this.doc.sliceString(from, to, this.lineBreak);
	    }
	    /**
	    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
	    */
	    facet(facet) {
	        let addr = this.config.address[facet.id];
	        if (addr == null)
	            return facet.default;
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /**
	    Convert this state to a JSON-serializable object. When custom
	    fields should be serialized, you can pass them in as an object
	    mapping property names (in the resulting object, which should
	    not use `doc` or `selection`) to fields.
	    */
	    toJSON(fields) {
	        let result = {
	            doc: this.sliceDoc(),
	            selection: this.selection.toJSON()
	        };
	        if (fields)
	            for (let prop in fields) {
	                let value = fields[prop];
	                if (value instanceof StateField && this.config.address[value.id] != null)
	                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
	            }
	        return result;
	    }
	    /**
	    Deserialize a state from its JSON representation. When custom
	    fields should be deserialized, pass the same object you passed
	    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
	    third argument.
	    */
	    static fromJSON(json, config = {}, fields) {
	        if (!json || typeof json.doc != "string")
	            throw new RangeError("Invalid JSON representation for EditorState");
	        let fieldInit = [];
	        if (fields)
	            for (let prop in fields) {
	                if (Object.prototype.hasOwnProperty.call(json, prop)) {
	                    let field = fields[prop], value = json[prop];
	                    fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
	                }
	            }
	        return EditorState.create({
	            doc: json.doc,
	            selection: EditorSelection.fromJSON(json.selection),
	            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
	        });
	    }
	    /**
	    Create a new state. You'll usually only need this when
	    initializing an editor—updated states are created by applying
	    transactions.
	    */
	    static create(config = {}) {
	        let configuration = Configuration.resolve(config.extensions || [], new Map);
	        let doc = config.doc instanceof Text ? config.doc
	            : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
	        let selection = !config.selection ? EditorSelection.single(0)
	            : config.selection instanceof EditorSelection ? config.selection
	                : EditorSelection.single(config.selection.anchor, config.selection.head);
	        checkSelection(selection, doc.length);
	        if (!configuration.staticFacet(allowMultipleSelections))
	            selection = selection.asSingle();
	        return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
	    }
	    /**
	    The size (in columns) of a tab in the document, determined by
	    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
	    */
	    get tabSize() { return this.facet(EditorState.tabSize); }
	    /**
	    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
	    string for this state.
	    */
	    get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
	    /**
	    Returns true when the editor is
	    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
	    */
	    get readOnly() { return this.facet(readOnly); }
	    /**
	    Look up a translation for the given phrase (via the
	    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
	    original string if no translation is found.
	    
	    If additional arguments are passed, they will be inserted in
	    place of markers like `$1` (for the first value) and `$2`, etc.
	    A single `$` is equivalent to `$1`, and `$$` will produce a
	    literal dollar sign.
	    */
	    phrase(phrase, ...insert) {
	        for (let map of this.facet(EditorState.phrases))
	            if (Object.prototype.hasOwnProperty.call(map, phrase)) {
	                phrase = map[phrase];
	                break;
	            }
	        if (insert.length)
	            phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
	                if (i == "$")
	                    return "$";
	                let n = +(i || 1);
	                return !n || n > insert.length ? m : insert[n - 1];
	            });
	        return phrase;
	    }
	    /**
	    Find the values for a given language data field, provided by the
	    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
	    
	    Examples of language data fields are...
	    
	    - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
	      comment syntax.
	    - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
	      for providing language-specific completion sources.
	    - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
	      characters that should be considered part of words in this
	      language.
	    - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
	      bracket closing behavior.
	    */
	    languageDataAt(name, pos, side = -1) {
	        let values = [];
	        for (let provider of this.facet(languageData)) {
	            for (let result of provider(this, pos, side)) {
	                if (Object.prototype.hasOwnProperty.call(result, name))
	                    values.push(result[name]);
	            }
	        }
	        return values;
	    }
	    /**
	    Return a function that can categorize strings (expected to
	    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
	    into one of:
	    
	     - Word (contains an alphanumeric character or a character
	       explicitly listed in the local language's `"wordChars"`
	       language data, which should be a string)
	     - Space (contains only whitespace)
	     - Other (anything else)
	    */
	    charCategorizer(at) {
	        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
	    }
	    /**
	    Find the word at the given position, meaning the range
	    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
	    around it. If no word characters are adjacent to the position,
	    this returns null.
	    */
	    wordAt(pos) {
	        let { text, from, length } = this.doc.lineAt(pos);
	        let cat = this.charCategorizer(pos);
	        let start = pos - from, end = pos - from;
	        while (start > 0) {
	            let prev = findClusterBreak(text, start, false);
	            if (cat(text.slice(prev, start)) != CharCategory.Word)
	                break;
	            start = prev;
	        }
	        while (end < length) {
	            let next = findClusterBreak(text, end);
	            if (cat(text.slice(end, next)) != CharCategory.Word)
	                break;
	            end = next;
	        }
	        return start == end ? null : EditorSelection.range(start + from, end + from);
	    }
	}
	/**
	A facet that, when enabled, causes the editor to allow multiple
	ranges to be selected. Be careful though, because by default the
	editor relies on the native DOM selection, which cannot handle
	multiple selections. An extension like
	[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
	secondary selections visible to the user.
	*/
	EditorState.allowMultipleSelections = allowMultipleSelections;
	/**
	Configures the tab size to use in this state. The first
	(highest-precedence) value of the facet is used. If no value is
	given, this defaults to 4.
	*/
	EditorState.tabSize = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : 4
	});
	/**
	The line separator to use. By default, any of `"\n"`, `"\r\n"`
	and `"\r"` is treated as a separator when splitting lines, and
	lines are joined with `"\n"`.

	When you configure a value here, only that precise separator
	will be used, allowing you to round-trip documents through the
	editor without normalizing line separators.
	*/
	EditorState.lineSeparator = lineSeparator;
	/**
	This facet controls the value of the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
	consulted by commands and extensions that implement editing
	functionality to determine whether they should apply. It
	defaults to false, but when its highest-precedence value is
	`true`, such functionality disables itself.

	Not to be confused with
	[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
	controls whether the editor's DOM is set to be editable (and
	thus focusable).
	*/
	EditorState.readOnly = readOnly;
	/**
	Registers translation phrases. The
	[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
	all objects registered with this facet to find translations for
	its argument.
	*/
	EditorState.phrases = /*@__PURE__*/Facet.define({
	    compare(a, b) {
	        let kA = Object.keys(a), kB = Object.keys(b);
	        return kA.length == kB.length && kA.every(k => a[k] == b[k]);
	    }
	});
	/**
	A facet used to register [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
	*/
	EditorState.languageData = languageData;
	/**
	Facet used to register change filters, which are called for each
	transaction (unless explicitly
	[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
	part of the transaction's changes.

	Such a function can return `true` to indicate that it doesn't
	want to do anything, `false` to completely stop the changes in
	the transaction, or a set of ranges in which changes should be
	suppressed. Such ranges are represented as an array of numbers,
	with each pair of two numbers indicating the start and end of a
	range. So for example `[10, 20, 100, 110]` suppresses changes
	between 10 and 20, and between 100 and 110.
	*/
	EditorState.changeFilter = changeFilter;
	/**
	Facet used to register a hook that gets a chance to update or
	replace transaction specs before they are applied. This will
	only be applied for transactions that don't have
	[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
	can either return a single transaction spec (possibly the input
	transaction), or an array of specs (which will be combined in
	the same way as the arguments to
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

	When possible, it is recommended to avoid accessing
	[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
	since it will force creation of a state that will then be
	discarded again, if the transaction is actually filtered.

	(This functionality should be used with care. Indiscriminately
	modifying transaction is likely to break something or degrade
	the user experience.)
	*/
	EditorState.transactionFilter = transactionFilter;
	/**
	This is a more limited form of
	[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
	which can only add
	[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
	[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
	of filter runs even if the transaction has disabled regular
	[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
	for effects that don't need to touch the changes or selection,
	but do want to process every transaction.

	Extenders run _after_ filters, when both are present.
	*/
	EditorState.transactionExtender = transactionExtender;
	Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

	/**
	Utility function for combining behaviors to fill in a config
	object from an array of provided configs. `defaults` should hold
	default values for all optional fields in `Config`.

	The function will, by default, error
	when a field gets two values that aren't `===`-equal, but you can
	provide combine functions per field to do something else.
	*/
	function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
	combine = {}) {
	    let result = {};
	    for (let config of configs)
	        for (let key of Object.keys(config)) {
	            let value = config[key], current = result[key];
	            if (current === undefined)
	                result[key] = value;
	            else if (current === value || value === undefined) ; // No conflict
	            else if (Object.hasOwnProperty.call(combine, key))
	                result[key] = combine[key](current, value);
	            else
	                throw new Error("Config merge conflict for field " + key);
	        }
	    for (let key in defaults)
	        if (result[key] === undefined)
	            result[key] = defaults[key];
	    return result;
	}

	/**
	Each range is associated with a value, which must inherit from
	this class.
	*/
	class RangeValue {
	    /**
	    Compare this value with another value. Used when comparing
	    rangesets. The default implementation compares by identity.
	    Unless you are only creating a fixed number of unique instances
	    of your value type, it is a good idea to implement this
	    properly.
	    */
	    eq(other) { return this == other; }
	    /**
	    Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
	    */
	    range(from, to = from) { return Range$1.create(from, to, this); }
	}
	RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
	RangeValue.prototype.point = false;
	RangeValue.prototype.mapMode = MapMode.TrackDel;
	/**
	A range associates a value with a range of positions.
	*/
	let Range$1 = class Range {
	    constructor(
	    /**
	    The range's start position.
	    */
	    from, 
	    /**
	    Its end position.
	    */
	    to, 
	    /**
	    The value associated with this range.
	    */
	    value) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	    }
	    /**
	    @internal
	    */
	    static create(from, to, value) {
	        return new Range(from, to, value);
	    }
	};
	function cmpRange(a, b) {
	    return a.from - b.from || a.value.startSide - b.value.startSide;
	}
	class Chunk {
	    constructor(from, to, value, 
	    // Chunks are marked with the largest point that occurs
	    // in them (or -1 for no points), so that scans that are
	    // only interested in points (such as the
	    // heightmap-related logic) can skip range-only chunks.
	    maxPoint) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	        this.maxPoint = maxPoint;
	    }
	    get length() { return this.to[this.to.length - 1]; }
	    // Find the index of the given position and side. Use the ranges'
	    // `from` pos when `end == false`, `to` when `end == true`.
	    findIndex(pos, side, end, startAt = 0) {
	        let arr = end ? this.to : this.from;
	        for (let lo = startAt, hi = arr.length;;) {
	            if (lo == hi)
	                return lo;
	            let mid = (lo + hi) >> 1;
	            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
	            if (mid == lo)
	                return diff >= 0 ? lo : hi;
	            if (diff >= 0)
	                hi = mid;
	            else
	                lo = mid + 1;
	        }
	    }
	    between(offset, from, to, f) {
	        for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
	            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
	                return false;
	    }
	    map(offset, changes) {
	        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
	        for (let i = 0; i < this.value.length; i++) {
	            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
	            if (curFrom == curTo) {
	                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
	                if (mapped == null)
	                    continue;
	                newFrom = newTo = mapped;
	                if (val.startSide != val.endSide) {
	                    newTo = changes.mapPos(curFrom, val.endSide);
	                    if (newTo < newFrom)
	                        continue;
	                }
	            }
	            else {
	                newFrom = changes.mapPos(curFrom, val.startSide);
	                newTo = changes.mapPos(curTo, val.endSide);
	                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
	                    continue;
	            }
	            if ((newTo - newFrom || val.endSide - val.startSide) < 0)
	                continue;
	            if (newPos < 0)
	                newPos = newFrom;
	            if (val.point)
	                maxPoint = Math.max(maxPoint, newTo - newFrom);
	            value.push(val);
	            from.push(newFrom - newPos);
	            to.push(newTo - newPos);
	        }
	        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
	    }
	}
	/**
	A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
	way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
	[update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
	structure.
	*/
	class RangeSet {
	    constructor(
	    /**
	    @internal
	    */
	    chunkPos, 
	    /**
	    @internal
	    */
	    chunk, 
	    /**
	    @internal
	    */
	    nextLayer, 
	    /**
	    @internal
	    */
	    maxPoint) {
	        this.chunkPos = chunkPos;
	        this.chunk = chunk;
	        this.nextLayer = nextLayer;
	        this.maxPoint = maxPoint;
	    }
	    /**
	    @internal
	    */
	    static create(chunkPos, chunk, nextLayer, maxPoint) {
	        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
	    }
	    /**
	    @internal
	    */
	    get length() {
	        let last = this.chunk.length - 1;
	        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
	    }
	    /**
	    The number of ranges in the set.
	    */
	    get size() {
	        if (this.isEmpty)
	            return 0;
	        let size = this.nextLayer.size;
	        for (let chunk of this.chunk)
	            size += chunk.value.length;
	        return size;
	    }
	    /**
	    @internal
	    */
	    chunkEnd(index) {
	        return this.chunkPos[index] + this.chunk[index].length;
	    }
	    /**
	    Update the range set, optionally adding new ranges or filtering
	    out existing ones.
	    
	    (Note: The type parameter is just there as a kludge to work
	    around TypeScript variance issues that prevented `RangeSet<X>`
	    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
	    `Y`.)
	    */
	    update(updateSpec) {
	        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
	        let filter = updateSpec.filter;
	        if (add.length == 0 && !filter)
	            return this;
	        if (sort)
	            add = add.slice().sort(cmpRange);
	        if (this.isEmpty)
	            return add.length ? RangeSet.of(add) : this;
	        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
	        let builder = new RangeSetBuilder();
	        while (cur.value || i < add.length) {
	            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
	                let range = add[i++];
	                if (!builder.addInner(range.from, range.to, range.value))
	                    spill.push(range);
	            }
	            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
	                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
	                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
	                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
	                cur.nextChunk();
	            }
	            else {
	                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
	                    if (!builder.addInner(cur.from, cur.to, cur.value))
	                        spill.push(Range$1.create(cur.from, cur.to, cur.value));
	                }
	                cur.next();
	            }
	        }
	        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
	            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
	    }
	    /**
	    Map this range set through a set of changes, return the new set.
	    */
	    map(changes) {
	        if (changes.empty || this.isEmpty)
	            return this;
	        let chunks = [], chunkPos = [], maxPoint = -1;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            let touch = changes.touchesRange(start, start + chunk.length);
	            if (touch === false) {
	                maxPoint = Math.max(maxPoint, chunk.maxPoint);
	                chunks.push(chunk);
	                chunkPos.push(changes.mapPos(start));
	            }
	            else if (touch === true) {
	                let { mapped, pos } = chunk.map(start, changes);
	                if (mapped) {
	                    maxPoint = Math.max(maxPoint, mapped.maxPoint);
	                    chunks.push(mapped);
	                    chunkPos.push(pos);
	                }
	            }
	        }
	        let next = this.nextLayer.map(changes);
	        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
	    }
	    /**
	    Iterate over the ranges that touch the region `from` to `to`,
	    calling `f` for each. There is no guarantee that the ranges will
	    be reported in any specific order. When the callback returns
	    `false`, iteration stops.
	    */
	    between(from, to, f) {
	        if (this.isEmpty)
	            return;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            if (to >= start && from <= start + chunk.length &&
	                chunk.between(start, from - start, to - start, f) === false)
	                return;
	        }
	        this.nextLayer.between(from, to, f);
	    }
	    /**
	    Iterate over the ranges in this set, in order, including all
	    ranges that end at or after `from`.
	    */
	    iter(from = 0) {
	        return HeapCursor.from([this]).goto(from);
	    }
	    /**
	    @internal
	    */
	    get isEmpty() { return this.nextLayer == this; }
	    /**
	    Iterate over the ranges in a collection of sets, in order,
	    starting from `from`.
	    */
	    static iter(sets, from = 0) {
	        return HeapCursor.from(sets).goto(from);
	    }
	    /**
	    Iterate over two groups of sets, calling methods on `comparator`
	    to notify it of possible differences.
	    */
	    static compare(oldSets, newSets, 
	    /**
	    This indicates how the underlying data changed between these
	    ranges, and is needed to synchronize the iteration.
	    */
	    textDiff, comparator, 
	    /**
	    Can be used to ignore all non-point ranges, and points below
	    the given size. When -1, all ranges are compared.
	    */
	    minPointSize = -1) {
	        let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
	        let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
	        let sharedChunks = findSharedChunks(a, b, textDiff);
	        let sideA = new SpanCursor(a, sharedChunks, minPointSize);
	        let sideB = new SpanCursor(b, sharedChunks, minPointSize);
	        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
	        if (textDiff.empty && textDiff.length == 0)
	            compare(sideA, 0, sideB, 0, 0, comparator);
	    }
	    /**
	    Compare the contents of two groups of range sets, returning true
	    if they are equivalent in the given range.
	    */
	    static eq(oldSets, newSets, from = 0, to) {
	        if (to == null)
	            to = 1000000000 /* C.Far */ - 1;
	        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
	        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
	        if (a.length != b.length)
	            return false;
	        if (!a.length)
	            return true;
	        let sharedChunks = findSharedChunks(a, b);
	        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
	        for (;;) {
	            if (sideA.to != sideB.to ||
	                !sameValues(sideA.active, sideB.active) ||
	                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
	                return false;
	            if (sideA.to > to)
	                return true;
	            sideA.next();
	            sideB.next();
	        }
	    }
	    /**
	    Iterate over a group of range sets at the same time, notifying
	    the iterator about the ranges covering every given piece of
	    content. Returns the open count (see
	    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
	    of the iteration.
	    */
	    static spans(sets, from, to, iterator, 
	    /**
	    When given and greater than -1, only points of at least this
	    size are taken into account.
	    */
	    minPointSize = -1) {
	        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
	        let openRanges = cursor.openStart;
	        for (;;) {
	            let curTo = Math.min(cursor.to, to);
	            if (cursor.point) {
	                let active = cursor.activeForPoint(cursor.to);
	                let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
	                iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
	                openRanges = Math.min(cursor.openEnd(curTo), active.length);
	            }
	            else if (curTo > pos) {
	                iterator.span(pos, curTo, cursor.active, openRanges);
	                openRanges = cursor.openEnd(curTo);
	            }
	            if (cursor.to > to)
	                return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
	            pos = cursor.to;
	            cursor.next();
	        }
	    }
	    /**
	    Create a range set for the given range or array of ranges. By
	    default, this expects the ranges to be _sorted_ (by start
	    position and, if two start at the same position,
	    `value.startSide`). You can pass `true` as second argument to
	    cause the method to sort them.
	    */
	    static of(ranges, sort = false) {
	        let build = new RangeSetBuilder();
	        for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
	            build.add(range.from, range.to, range.value);
	        return build.finish();
	    }
	    /**
	    Join an array of range sets into a single set.
	    */
	    static join(sets) {
	        if (!sets.length)
	            return RangeSet.empty;
	        let result = sets[sets.length - 1];
	        for (let i = sets.length - 2; i >= 0; i--) {
	            for (let layer = sets[i]; layer != RangeSet.empty; layer = layer.nextLayer)
	                result = new RangeSet(layer.chunkPos, layer.chunk, result, Math.max(layer.maxPoint, result.maxPoint));
	        }
	        return result;
	    }
	}
	/**
	The empty set of ranges.
	*/
	RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
	function lazySort(ranges) {
	    if (ranges.length > 1)
	        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
	            let cur = ranges[i];
	            if (cmpRange(prev, cur) > 0)
	                return ranges.slice().sort(cmpRange);
	            prev = cur;
	        }
	    return ranges;
	}
	RangeSet.empty.nextLayer = RangeSet.empty;
	/**
	A range set builder is a data structure that helps build up a
	[range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
	an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
	*/
	class RangeSetBuilder {
	    finishChunk(newArrays) {
	        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
	        this.chunkPos.push(this.chunkStart);
	        this.chunkStart = -1;
	        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
	        this.maxPoint = -1;
	        if (newArrays) {
	            this.from = [];
	            this.to = [];
	            this.value = [];
	        }
	    }
	    /**
	    Create an empty builder.
	    */
	    constructor() {
	        this.chunks = [];
	        this.chunkPos = [];
	        this.chunkStart = -1;
	        this.last = null;
	        this.lastFrom = -1000000000 /* C.Far */;
	        this.lastTo = -1000000000 /* C.Far */;
	        this.from = [];
	        this.to = [];
	        this.value = [];
	        this.maxPoint = -1;
	        this.setMaxPoint = -1;
	        this.nextLayer = null;
	    }
	    /**
	    Add a range. Ranges should be added in sorted (by `from` and
	    `value.startSide`) order.
	    */
	    add(from, to, value) {
	        if (!this.addInner(from, to, value))
	            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
	    }
	    /**
	    @internal
	    */
	    addInner(from, to, value) {
	        let diff = from - this.lastTo || value.startSide - this.last.endSide;
	        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
	            throw new Error("Ranges must be added sorted by `from` position and `startSide`");
	        if (diff < 0)
	            return false;
	        if (this.from.length == 250 /* C.ChunkSize */)
	            this.finishChunk(true);
	        if (this.chunkStart < 0)
	            this.chunkStart = from;
	        this.from.push(from - this.chunkStart);
	        this.to.push(to - this.chunkStart);
	        this.last = value;
	        this.lastFrom = from;
	        this.lastTo = to;
	        this.value.push(value);
	        if (value.point)
	            this.maxPoint = Math.max(this.maxPoint, to - from);
	        return true;
	    }
	    /**
	    @internal
	    */
	    addChunk(from, chunk) {
	        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
	            return false;
	        if (this.from.length)
	            this.finishChunk(true);
	        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
	        this.chunks.push(chunk);
	        this.chunkPos.push(from);
	        let last = chunk.value.length - 1;
	        this.last = chunk.value[last];
	        this.lastFrom = chunk.from[last] + from;
	        this.lastTo = chunk.to[last] + from;
	        return true;
	    }
	    /**
	    Finish the range set. Returns the new set. The builder can't be
	    used anymore after this has been called.
	    */
	    finish() { return this.finishInner(RangeSet.empty); }
	    /**
	    @internal
	    */
	    finishInner(next) {
	        if (this.from.length)
	            this.finishChunk(false);
	        if (this.chunks.length == 0)
	            return next;
	        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
	        this.from = null; // Make sure further `add` calls produce errors
	        return result;
	    }
	}
	function findSharedChunks(a, b, textDiff) {
	    let inA = new Map();
	    for (let set of a)
	        for (let i = 0; i < set.chunk.length; i++)
	            if (set.chunk[i].maxPoint <= 0)
	                inA.set(set.chunk[i], set.chunkPos[i]);
	    let shared = new Set();
	    for (let set of b)
	        for (let i = 0; i < set.chunk.length; i++) {
	            let known = inA.get(set.chunk[i]);
	            if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
	                !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
	                shared.add(set.chunk[i]);
	        }
	    return shared;
	}
	class LayerCursor {
	    constructor(layer, skip, minPoint, rank = 0) {
	        this.layer = layer;
	        this.skip = skip;
	        this.minPoint = minPoint;
	        this.rank = rank;
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    get endSide() { return this.value ? this.value.endSide : 0; }
	    goto(pos, side = -1000000000 /* C.Far */) {
	        this.chunkIndex = this.rangeIndex = 0;
	        this.gotoInner(pos, side, false);
	        return this;
	    }
	    gotoInner(pos, side, forward) {
	        while (this.chunkIndex < this.layer.chunk.length) {
	            let next = this.layer.chunk[this.chunkIndex];
	            if (!(this.skip && this.skip.has(next) ||
	                this.layer.chunkEnd(this.chunkIndex) < pos ||
	                next.maxPoint < this.minPoint))
	                break;
	            this.chunkIndex++;
	            forward = false;
	        }
	        if (this.chunkIndex < this.layer.chunk.length) {
	            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
	            if (!forward || this.rangeIndex < rangeIndex)
	                this.setRangeIndex(rangeIndex);
	        }
	        this.next();
	    }
	    forward(pos, side) {
	        if ((this.to - pos || this.endSide - side) < 0)
	            this.gotoInner(pos, side, true);
	    }
	    next() {
	        for (;;) {
	            if (this.chunkIndex == this.layer.chunk.length) {
	                this.from = this.to = 1000000000 /* C.Far */;
	                this.value = null;
	                break;
	            }
	            else {
	                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
	                let from = chunkPos + chunk.from[this.rangeIndex];
	                this.from = from;
	                this.to = chunkPos + chunk.to[this.rangeIndex];
	                this.value = chunk.value[this.rangeIndex];
	                this.setRangeIndex(this.rangeIndex + 1);
	                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
	                    break;
	            }
	        }
	    }
	    setRangeIndex(index) {
	        if (index == this.layer.chunk[this.chunkIndex].value.length) {
	            this.chunkIndex++;
	            if (this.skip) {
	                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
	                    this.chunkIndex++;
	            }
	            this.rangeIndex = 0;
	        }
	        else {
	            this.rangeIndex = index;
	        }
	    }
	    nextChunk() {
	        this.chunkIndex++;
	        this.rangeIndex = 0;
	        this.next();
	    }
	    compare(other) {
	        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
	            this.to - other.to || this.endSide - other.endSide;
	    }
	}
	class HeapCursor {
	    constructor(heap) {
	        this.heap = heap;
	    }
	    static from(sets, skip = null, minPoint = -1) {
	        let heap = [];
	        for (let i = 0; i < sets.length; i++) {
	            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
	                if (cur.maxPoint >= minPoint)
	                    heap.push(new LayerCursor(cur, skip, minPoint, i));
	            }
	        }
	        return heap.length == 1 ? heap[0] : new HeapCursor(heap);
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    goto(pos, side = -1000000000 /* C.Far */) {
	        for (let cur of this.heap)
	            cur.goto(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        for (let cur of this.heap)
	            cur.forward(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        if ((this.to - pos || this.value.endSide - side) < 0)
	            this.next();
	    }
	    next() {
	        if (this.heap.length == 0) {
	            this.from = this.to = 1000000000 /* C.Far */;
	            this.value = null;
	            this.rank = -1;
	        }
	        else {
	            let top = this.heap[0];
	            this.from = top.from;
	            this.to = top.to;
	            this.value = top.value;
	            this.rank = top.rank;
	            if (top.value)
	                top.next();
	            heapBubble(this.heap, 0);
	        }
	    }
	}
	function heapBubble(heap, index) {
	    for (let cur = heap[index];;) {
	        let childIndex = (index << 1) + 1;
	        if (childIndex >= heap.length)
	            break;
	        let child = heap[childIndex];
	        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
	            child = heap[childIndex + 1];
	            childIndex++;
	        }
	        if (cur.compare(child) < 0)
	            break;
	        heap[childIndex] = cur;
	        heap[index] = child;
	        index = childIndex;
	    }
	}
	class SpanCursor {
	    constructor(sets, skip, minPoint) {
	        this.minPoint = minPoint;
	        this.active = [];
	        this.activeTo = [];
	        this.activeRank = [];
	        this.minActive = -1;
	        // A currently active point range, if any
	        this.point = null;
	        this.pointFrom = 0;
	        this.pointRank = 0;
	        this.to = -1000000000 /* C.Far */;
	        this.endSide = 0;
	        // The amount of open active ranges at the start of the iterator.
	        // Not including points.
	        this.openStart = -1;
	        this.cursor = HeapCursor.from(sets, skip, minPoint);
	    }
	    goto(pos, side = -1000000000 /* C.Far */) {
	        this.cursor.goto(pos, side);
	        this.active.length = this.activeTo.length = this.activeRank.length = 0;
	        this.minActive = -1;
	        this.to = pos;
	        this.endSide = side;
	        this.openStart = -1;
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
	            this.removeActive(this.minActive);
	        this.cursor.forward(pos, side);
	    }
	    removeActive(index) {
	        remove(this.active, index);
	        remove(this.activeTo, index);
	        remove(this.activeRank, index);
	        this.minActive = findMinIndex(this.active, this.activeTo);
	    }
	    addActive(trackOpen) {
	        let i = 0, { value, to, rank } = this.cursor;
	        // Organize active marks by rank first, then by size
	        while (i < this.activeRank.length && (rank - this.activeRank[i] || to - this.activeTo[i]) > 0)
	            i++;
	        insert(this.active, i, value);
	        insert(this.activeTo, i, to);
	        insert(this.activeRank, i, rank);
	        if (trackOpen)
	            insert(trackOpen, i, this.cursor.from);
	        this.minActive = findMinIndex(this.active, this.activeTo);
	    }
	    // After calling this, if `this.point` != null, the next range is a
	    // point. Otherwise, it's a regular range, covered by `this.active`.
	    next() {
	        let from = this.to, wasPoint = this.point;
	        this.point = null;
	        let trackOpen = this.openStart < 0 ? [] : null;
	        for (;;) {
	            let a = this.minActive;
	            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
	                if (this.activeTo[a] > from) {
	                    this.to = this.activeTo[a];
	                    this.endSide = this.active[a].endSide;
	                    break;
	                }
	                this.removeActive(a);
	                if (trackOpen)
	                    remove(trackOpen, a);
	            }
	            else if (!this.cursor.value) {
	                this.to = this.endSide = 1000000000 /* C.Far */;
	                break;
	            }
	            else if (this.cursor.from > from) {
	                this.to = this.cursor.from;
	                this.endSide = this.cursor.startSide;
	                break;
	            }
	            else {
	                let nextVal = this.cursor.value;
	                if (!nextVal.point) { // Opening a range
	                    this.addActive(trackOpen);
	                    this.cursor.next();
	                }
	                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
	                    // Ignore any non-empty points that end precisely at the end of the prev point
	                    this.cursor.next();
	                }
	                else { // New point
	                    this.point = nextVal;
	                    this.pointFrom = this.cursor.from;
	                    this.pointRank = this.cursor.rank;
	                    this.to = this.cursor.to;
	                    this.endSide = nextVal.endSide;
	                    this.cursor.next();
	                    this.forward(this.to, this.endSide);
	                    break;
	                }
	            }
	        }
	        if (trackOpen) {
	            this.openStart = 0;
	            for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
	                this.openStart++;
	        }
	    }
	    activeForPoint(to) {
	        if (!this.active.length)
	            return this.active;
	        let active = [];
	        for (let i = this.active.length - 1; i >= 0; i--) {
	            if (this.activeRank[i] < this.pointRank)
	                break;
	            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
	                active.push(this.active[i]);
	        }
	        return active.reverse();
	    }
	    openEnd(to) {
	        let open = 0;
	        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
	            open++;
	        return open;
	    }
	}
	function compare(a, startA, b, startB, length, comparator) {
	    a.goto(startA);
	    b.goto(startB);
	    let endB = startB + length;
	    let pos = startB, dPos = startB - startA;
	    for (;;) {
	        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
	        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
	        if (a.point || b.point) {
	            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
	                sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
	                comparator.comparePoint(pos, clipEnd, a.point, b.point);
	        }
	        else {
	            if (clipEnd > pos && !sameValues(a.active, b.active))
	                comparator.compareRange(pos, clipEnd, a.active, b.active);
	        }
	        if (end > endB)
	            break;
	        pos = end;
	        if (diff <= 0)
	            a.next();
	        if (diff >= 0)
	            b.next();
	    }
	}
	function sameValues(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (a[i] != b[i] && !a[i].eq(b[i]))
	            return false;
	    return true;
	}
	function remove(array, index) {
	    for (let i = index, e = array.length - 1; i < e; i++)
	        array[i] = array[i + 1];
	    array.pop();
	}
	function insert(array, index, value) {
	    for (let i = array.length - 1; i >= index; i--)
	        array[i + 1] = array[i];
	    array[index] = value;
	}
	function findMinIndex(value, array) {
	    let found = -1, foundPos = 1000000000 /* C.Far */;
	    for (let i = 0; i < array.length; i++)
	        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
	            found = i;
	            foundPos = array[i];
	        }
	    return found;
	}

	/**
	Count the column position at the given offset into the string,
	taking extending characters and tab size into account.
	*/
	function countColumn(string, tabSize, to = string.length) {
	    let n = 0;
	    for (let i = 0; i < to;) {
	        if (string.charCodeAt(i) == 9) {
	            n += tabSize - (n % tabSize);
	            i++;
	        }
	        else {
	            n++;
	            i = findClusterBreak(string, i);
	        }
	    }
	    return n;
	}
	/**
	Find the offset that corresponds to the given column position in a
	string, taking extending characters and tab size into account. By
	default, the string length is returned when it is too short to
	reach the column. Pass `strict` true to make it return -1 in that
	situation.
	*/
	function findColumn(string, col, tabSize, strict) {
	    for (let i = 0, n = 0;;) {
	        if (n >= col)
	            return i;
	        if (i == string.length)
	            break;
	        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
	        i = findClusterBreak(string, i);
	    }
	    return strict === true ? -1 : string.length;
	}

	const C = "\u037c";
	const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
	const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
	const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

	// :: - Style modules encapsulate a set of CSS rules defined from
	// JavaScript. Their definitions are only available in a given DOM
	// root after it has been _mounted_ there with `StyleModule.mount`.
	//
	// Style modules should be created once and stored somewhere, as
	// opposed to re-creating them every time you need them. The amount of
	// CSS rules generated for a given DOM root is bounded by the amount
	// of style modules that were used. So to avoid leaking rules, don't
	// create these dynamically, but treat them as one-time allocations.
	class StyleModule {
	  // :: (Object<Style>, ?{finish: ?(string) → string})
	  // Create a style module from the given spec.
	  //
	  // When `finish` is given, it is called on regular (non-`@`)
	  // selectors (after `&` expansion) to compute the final selector.
	  constructor(spec, options) {
	    this.rules = [];
	    let {finish} = options || {};

	    function splitSelector(selector) {
	      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
	    }

	    function render(selectors, spec, target, isKeyframes) {
	      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
	      if (isAt && spec == null) return target.push(selectors[0] + ";")
	      for (let prop in spec) {
	        let value = spec[prop];
	        if (/&/.test(prop)) {
	          render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
	                 value, target);
	        } else if (value && typeof value == "object") {
	          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
	          render(splitSelector(prop), value, local, keyframes);
	        } else if (value != null) {
	          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
	        }
	      }
	      if (local.length || keyframes) {
	        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
	                    " {" + local.join(" ") + "}");
	      }
	    }

	    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
	  }

	  // :: () → string
	  // Returns a string containing the module's CSS rules.
	  getRules() { return this.rules.join("\n") }

	  // :: () → string
	  // Generate a new unique CSS class name.
	  static newName() {
	    let id = top[COUNT] || 1;
	    top[COUNT] = id + 1;
	    return C + id.toString(36)
	  }

	  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
	  //
	  // Mount the given set of modules in the given DOM root, which ensures
	  // that the CSS rules defined by the module are available in that
	  // context.
	  //
	  // Rules are only added to the document once per root.
	  //
	  // Rule order will follow the order of the modules, so that rules from
	  // modules later in the array take precedence of those from earlier
	  // modules. If you call this function multiple times for the same root
	  // in a way that changes the order of already mounted modules, the old
	  // order will be changed.
	  //
	  // If a Content Security Policy nonce is provided, it is added to
	  // the `<style>` tag generated by the library.
	  static mount(root, modules, options) {
	    let set = root[SET], nonce = options && options.nonce;
	    if (!set) set = new StyleSet(root, nonce);
	    else if (nonce) set.setNonce(nonce);
	    set.mount(Array.isArray(modules) ? modules : [modules]);
	  }
	}

	let adoptedSet = new Map; //<Document, StyleSet>

	class StyleSet {
	  constructor(root, nonce) {
	    let doc = root.ownerDocument || root, win = doc.defaultView;
	    if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
	      let adopted = adoptedSet.get(doc);
	      if (adopted) {
	        root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets];
	        return root[SET] = adopted
	      }
	      this.sheet = new win.CSSStyleSheet;
	      root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
	      adoptedSet.set(doc, this);
	    } else {
	      this.styleTag = doc.createElement("style");
	      if (nonce) this.styleTag.setAttribute("nonce", nonce);
	      let target = root.head || root;
	      target.insertBefore(this.styleTag, target.firstChild);
	    }
	    this.modules = [];
	    root[SET] = this;
	  }

	  mount(modules) {
	    let sheet = this.sheet;
	    let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
	    for (let i = 0; i < modules.length; i++) {
	      let mod = modules[i], index = this.modules.indexOf(mod);
	      if (index < j && index > -1) { // Ordering conflict
	        this.modules.splice(index, 1);
	        j--;
	        index = -1;
	      }
	      if (index == -1) {
	        this.modules.splice(j++, 0, mod);
	        if (sheet) for (let k = 0; k < mod.rules.length; k++)
	          sheet.insertRule(mod.rules[k], pos++);
	      } else {
	        while (j < index) pos += this.modules[j++].rules.length;
	        pos += mod.rules.length;
	        j++;
	      }
	    }

	    if (!sheet) {
	      let text = "";
	      for (let i = 0; i < this.modules.length; i++)
	        text += this.modules[i].getRules() + "\n";
	      this.styleTag.textContent = text;
	    }
	  }

	  setNonce(nonce) {
	    if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
	      this.styleTag.setAttribute("nonce", nonce);
	  }
	}

	// Style::Object<union<Style,string>>
	//
	// A style is an object that, in the simple case, maps CSS property
	// names to strings holding their values, as in `{color: "red",
	// fontWeight: "bold"}`. The property names can be given in
	// camel-case—the library will insert a dash before capital letters
	// when converting them to CSS.
	//
	// If you include an underscore in a property name, it and everything
	// after it will be removed from the output, which can be useful when
	// providing a property multiple times, for browser compatibility
	// reasons.
	//
	// A property in a style object can also be a sub-selector, which
	// extends the current context to add a pseudo-selector or a child
	// selector. Such a property should contain a `&` character, which
	// will be replaced by the current selector. For example `{"&:before":
	// {content: '"hi"'}}`. Sub-selectors and regular properties can
	// freely be mixed in a given object. Any property containing a `&` is
	// assumed to be a sub-selector.
	//
	// Finally, a property can specify an @-block to be wrapped around the
	// styles defined inside the object that's the property's value. For
	// example to create a media query you can do `{"@media screen and
	// (min-width: 400px)": {...}}`.

	var base = {
	  8: "Backspace",
	  9: "Tab",
	  10: "Enter",
	  12: "NumLock",
	  13: "Enter",
	  16: "Shift",
	  17: "Control",
	  18: "Alt",
	  20: "CapsLock",
	  27: "Escape",
	  32: " ",
	  33: "PageUp",
	  34: "PageDown",
	  35: "End",
	  36: "Home",
	  37: "ArrowLeft",
	  38: "ArrowUp",
	  39: "ArrowRight",
	  40: "ArrowDown",
	  44: "PrintScreen",
	  45: "Insert",
	  46: "Delete",
	  59: ";",
	  61: "=",
	  91: "Meta",
	  92: "Meta",
	  106: "*",
	  107: "+",
	  108: ",",
	  109: "-",
	  110: ".",
	  111: "/",
	  144: "NumLock",
	  145: "ScrollLock",
	  160: "Shift",
	  161: "Shift",
	  162: "Control",
	  163: "Control",
	  164: "Alt",
	  165: "Alt",
	  173: "-",
	  186: ";",
	  187: "=",
	  188: ",",
	  189: "-",
	  190: ".",
	  191: "/",
	  192: "`",
	  219: "[",
	  220: "\\",
	  221: "]",
	  222: "'"
	};

	var shift = {
	  48: ")",
	  49: "!",
	  50: "@",
	  51: "#",
	  52: "$",
	  53: "%",
	  54: "^",
	  55: "&",
	  56: "*",
	  57: "(",
	  59: ":",
	  61: "+",
	  173: "_",
	  186: ":",
	  187: "+",
	  188: "<",
	  189: "_",
	  190: ">",
	  191: "?",
	  192: "~",
	  219: "{",
	  220: "|",
	  221: "}",
	  222: "\""
	};

	var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
	var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);

	// Fill in the digit keys
	for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

	// The function keys
	for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

	// And the alphabetic keys
	for (var i = 65; i <= 90; i++) {
	  base[i] = String.fromCharCode(i + 32);
	  shift[i] = String.fromCharCode(i);
	}

	// For each code that doesn't have a shift-equivalent, copy the base name
	for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];

	function keyName(event) {
	  // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
	  // On IE, shift effect is never included in `.key`.
	  var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
	      ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
	      event.key == "Unidentified";
	  var name = (!ignoreKey && event.key) ||
	    (event.shiftKey ? shift : base)[event.keyCode] ||
	    event.key || "Unidentified";
	  // Edge sometimes produces wrong names (Issue #3)
	  if (name == "Esc") name = "Escape";
	  if (name == "Del") name = "Delete";
	  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
	  if (name == "Left") name = "ArrowLeft";
	  if (name == "Up") name = "ArrowUp";
	  if (name == "Right") name = "ArrowRight";
	  if (name == "Down") name = "ArrowDown";
	  return name
	}

	function getSelection(root) {
	    let target;
	    // Browsers differ on whether shadow roots have a getSelection
	    // method. If it exists, use that, otherwise, call it on the
	    // document.
	    if (root.nodeType == 11) { // Shadow root
	        target = root.getSelection ? root : root.ownerDocument;
	    }
	    else {
	        target = root;
	    }
	    return target.getSelection();
	}
	function contains(dom, node) {
	    return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
	}
	function deepActiveElement(doc) {
	    let elt = doc.activeElement;
	    while (elt && elt.shadowRoot)
	        elt = elt.shadowRoot.activeElement;
	    return elt;
	}
	function hasSelection(dom, selection) {
	    if (!selection.anchorNode)
	        return false;
	    try {
	        // Firefox will raise 'permission denied' errors when accessing
	        // properties of `sel.anchorNode` when it's in a generated CSS
	        // element.
	        return contains(dom, selection.anchorNode);
	    }
	    catch (_) {
	        return false;
	    }
	}
	function clientRectsFor(dom) {
	    if (dom.nodeType == 3)
	        return textRange(dom, 0, dom.nodeValue.length).getClientRects();
	    else if (dom.nodeType == 1)
	        return dom.getClientRects();
	    else
	        return [];
	}
	// Scans forward and backward through DOM positions equivalent to the
	// given one to see if the two are in the same place (i.e. after a
	// text node vs at the end of that text node)
	function isEquivalentPosition(node, off, targetNode, targetOff) {
	    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
	        scanFor(node, off, targetNode, targetOff, 1)) : false;
	}
	function domIndex(node) {
	    for (var index = 0;; index++) {
	        node = node.previousSibling;
	        if (!node)
	            return index;
	    }
	}
	function scanFor(node, off, targetNode, targetOff, dir) {
	    for (;;) {
	        if (node == targetNode && off == targetOff)
	            return true;
	        if (off == (dir < 0 ? 0 : maxOffset(node))) {
	            if (node.nodeName == "DIV")
	                return false;
	            let parent = node.parentNode;
	            if (!parent || parent.nodeType != 1)
	                return false;
	            off = domIndex(node) + (dir < 0 ? 0 : 1);
	            node = parent;
	        }
	        else if (node.nodeType == 1) {
	            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
	            if (node.nodeType == 1 && node.contentEditable == "false")
	                return false;
	            off = dir < 0 ? maxOffset(node) : 0;
	        }
	        else {
	            return false;
	        }
	    }
	}
	function maxOffset(node) {
	    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
	}
	function flattenRect(rect, left) {
	    let x = left ? rect.left : rect.right;
	    return { left: x, right: x, top: rect.top, bottom: rect.bottom };
	}
	function windowRect(win) {
	    return { left: 0, right: win.innerWidth,
	        top: 0, bottom: win.innerHeight };
	}
	function getScale(elt, rect) {
	    let scaleX = rect.width / elt.offsetWidth;
	    let scaleY = rect.height / elt.offsetHeight;
	    if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
	        scaleX = 1;
	    if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
	        scaleY = 1;
	    return { scaleX, scaleY };
	}
	function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
	    let doc = dom.ownerDocument, win = doc.defaultView || window;
	    for (let cur = dom, stop = false; cur && !stop;) {
	        if (cur.nodeType == 1) { // Element
	            let bounding, top = cur == doc.body;
	            let scaleX = 1, scaleY = 1;
	            if (top) {
	                bounding = windowRect(win);
	            }
	            else {
	                if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
	                    stop = true;
	                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
	                    cur = cur.assignedSlot || cur.parentNode;
	                    continue;
	                }
	                let rect = cur.getBoundingClientRect();
	                ({ scaleX, scaleY } = getScale(cur, rect));
	                // Make sure scrollbar width isn't included in the rectangle
	                bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
	                    top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
	            }
	            let moveX = 0, moveY = 0;
	            if (y == "nearest") {
	                if (rect.top < bounding.top) {
	                    moveY = -(bounding.top - rect.top + yMargin);
	                    if (side > 0 && rect.bottom > bounding.bottom + moveY)
	                        moveY = rect.bottom - bounding.bottom + moveY + yMargin;
	                }
	                else if (rect.bottom > bounding.bottom) {
	                    moveY = rect.bottom - bounding.bottom + yMargin;
	                    if (side < 0 && (rect.top - moveY) < bounding.top)
	                        moveY = -(bounding.top + moveY - rect.top + yMargin);
	                }
	            }
	            else {
	                let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
	                let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
	                    y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
	                        rect.bottom - boundingHeight + yMargin;
	                moveY = targetTop - bounding.top;
	            }
	            if (x == "nearest") {
	                if (rect.left < bounding.left) {
	                    moveX = -(bounding.left - rect.left + xMargin);
	                    if (side > 0 && rect.right > bounding.right + moveX)
	                        moveX = rect.right - bounding.right + moveX + xMargin;
	                }
	                else if (rect.right > bounding.right) {
	                    moveX = rect.right - bounding.right + xMargin;
	                    if (side < 0 && rect.left < bounding.left + moveX)
	                        moveX = -(bounding.left + moveX - rect.left + xMargin);
	                }
	            }
	            else {
	                let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
	                    (x == "start") == ltr ? rect.left - xMargin :
	                        rect.right - (bounding.right - bounding.left) + xMargin;
	                moveX = targetLeft - bounding.left;
	            }
	            if (moveX || moveY) {
	                if (top) {
	                    win.scrollBy(moveX, moveY);
	                }
	                else {
	                    let movedX = 0, movedY = 0;
	                    if (moveY) {
	                        let start = cur.scrollTop;
	                        cur.scrollTop += moveY / scaleY;
	                        movedY = (cur.scrollTop - start) * scaleY;
	                    }
	                    if (moveX) {
	                        let start = cur.scrollLeft;
	                        cur.scrollLeft += moveX / scaleX;
	                        movedX = (cur.scrollLeft - start) * scaleX;
	                    }
	                    rect = { left: rect.left - movedX, top: rect.top - movedY,
	                        right: rect.right - movedX, bottom: rect.bottom - movedY };
	                    if (movedX && Math.abs(movedX - moveX) < 1)
	                        x = "nearest";
	                    if (movedY && Math.abs(movedY - moveY) < 1)
	                        y = "nearest";
	                }
	            }
	            if (top)
	                break;
	            cur = cur.assignedSlot || cur.parentNode;
	        }
	        else if (cur.nodeType == 11) { // A shadow root
	            cur = cur.host;
	        }
	        else {
	            break;
	        }
	    }
	}
	function scrollableParent(dom) {
	    let doc = dom.ownerDocument;
	    for (let cur = dom.parentNode; cur;) {
	        if (cur == doc.body) {
	            break;
	        }
	        else if (cur.nodeType == 1) {
	            if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
	                return cur;
	            cur = cur.assignedSlot || cur.parentNode;
	        }
	        else if (cur.nodeType == 11) {
	            cur = cur.host;
	        }
	        else {
	            break;
	        }
	    }
	    return null;
	}
	class DOMSelectionState {
	    constructor() {
	        this.anchorNode = null;
	        this.anchorOffset = 0;
	        this.focusNode = null;
	        this.focusOffset = 0;
	    }
	    eq(domSel) {
	        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
	            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
	    }
	    setRange(range) {
	        let { anchorNode, focusNode } = range;
	        // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
	        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
	    }
	    set(anchorNode, anchorOffset, focusNode, focusOffset) {
	        this.anchorNode = anchorNode;
	        this.anchorOffset = anchorOffset;
	        this.focusNode = focusNode;
	        this.focusOffset = focusOffset;
	    }
	}
	let preventScrollSupported = null;
	// Feature-detects support for .focus({preventScroll: true}), and uses
	// a fallback kludge when not supported.
	function focusPreventScroll(dom) {
	    if (dom.setActive)
	        return dom.setActive(); // in IE
	    if (preventScrollSupported)
	        return dom.focus(preventScrollSupported);
	    let stack = [];
	    for (let cur = dom; cur; cur = cur.parentNode) {
	        stack.push(cur, cur.scrollTop, cur.scrollLeft);
	        if (cur == cur.ownerDocument)
	            break;
	    }
	    dom.focus(preventScrollSupported == null ? {
	        get preventScroll() {
	            preventScrollSupported = { preventScroll: true };
	            return true;
	        }
	    } : undefined);
	    if (!preventScrollSupported) {
	        preventScrollSupported = false;
	        for (let i = 0; i < stack.length;) {
	            let elt = stack[i++], top = stack[i++], left = stack[i++];
	            if (elt.scrollTop != top)
	                elt.scrollTop = top;
	            if (elt.scrollLeft != left)
	                elt.scrollLeft = left;
	        }
	    }
	}
	let scratchRange;
	function textRange(node, from, to = from) {
	    let range = scratchRange || (scratchRange = document.createRange());
	    range.setEnd(node, to);
	    range.setStart(node, from);
	    return range;
	}
	function dispatchKey(elt, name, code) {
	    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
	    let down = new KeyboardEvent("keydown", options);
	    down.synthetic = true;
	    elt.dispatchEvent(down);
	    let up = new KeyboardEvent("keyup", options);
	    up.synthetic = true;
	    elt.dispatchEvent(up);
	    return down.defaultPrevented || up.defaultPrevented;
	}
	function getRoot(node) {
	    while (node) {
	        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
	            return node;
	        node = node.assignedSlot || node.parentNode;
	    }
	    return null;
	}
	function clearAttributes(node) {
	    while (node.attributes.length)
	        node.removeAttributeNode(node.attributes[0]);
	}
	function atElementStart(doc, selection) {
	    let node = selection.focusNode, offset = selection.focusOffset;
	    if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
	        return false;
	    // Safari can report bogus offsets (#1152)
	    offset = Math.min(offset, maxOffset(node));
	    for (;;) {
	        if (offset) {
	            if (node.nodeType != 1)
	                return false;
	            let prev = node.childNodes[offset - 1];
	            if (prev.contentEditable == "false")
	                offset--;
	            else {
	                node = prev;
	                offset = maxOffset(node);
	            }
	        }
	        else if (node == doc) {
	            return true;
	        }
	        else {
	            offset = domIndex(node);
	            node = node.parentNode;
	        }
	    }
	}
	function isScrolledToBottom(elt) {
	    return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
	}

	class DOMPos {
	    constructor(node, offset, precise = true) {
	        this.node = node;
	        this.offset = offset;
	        this.precise = precise;
	    }
	    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
	    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
	}
	const noChildren = [];
	class ContentView {
	    constructor() {
	        this.parent = null;
	        this.dom = null;
	        this.flags = 2 /* ViewFlag.NodeDirty */;
	    }
	    get overrideDOMText() { return null; }
	    get posAtStart() {
	        return this.parent ? this.parent.posBefore(this) : 0;
	    }
	    get posAtEnd() {
	        return this.posAtStart + this.length;
	    }
	    posBefore(view) {
	        let pos = this.posAtStart;
	        for (let child of this.children) {
	            if (child == view)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	        throw new RangeError("Invalid child in posBefore");
	    }
	    posAfter(view) {
	        return this.posBefore(view) + view.length;
	    }
	    sync(view, track) {
	        if (this.flags & 2 /* ViewFlag.NodeDirty */) {
	            let parent = this.dom;
	            let prev = null, next;
	            for (let child of this.children) {
	                if (child.flags & 7 /* ViewFlag.Dirty */) {
	                    if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
	                        let contentView = ContentView.get(next);
	                        if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
	                            child.reuseDOM(next);
	                    }
	                    child.sync(view, track);
	                    child.flags &= ~7 /* ViewFlag.Dirty */;
	                }
	                next = prev ? prev.nextSibling : parent.firstChild;
	                if (track && !track.written && track.node == parent && next != child.dom)
	                    track.written = true;
	                if (child.dom.parentNode == parent) {
	                    while (next && next != child.dom)
	                        next = rm$1(next);
	                }
	                else {
	                    parent.insertBefore(child.dom, next);
	                }
	                prev = child.dom;
	            }
	            next = prev ? prev.nextSibling : parent.firstChild;
	            if (next && track && track.node == parent)
	                track.written = true;
	            while (next)
	                next = rm$1(next);
	        }
	        else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
	            for (let child of this.children)
	                if (child.flags & 7 /* ViewFlag.Dirty */) {
	                    child.sync(view, track);
	                    child.flags &= ~7 /* ViewFlag.Dirty */;
	                }
	        }
	    }
	    reuseDOM(_dom) { }
	    localPosFromDOM(node, offset) {
	        let after;
	        if (node == this.dom) {
	            after = this.dom.childNodes[offset];
	        }
	        else {
	            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
	            for (;;) {
	                let parent = node.parentNode;
	                if (parent == this.dom)
	                    break;
	                if (bias == 0 && parent.firstChild != parent.lastChild) {
	                    if (node == parent.firstChild)
	                        bias = -1;
	                    else
	                        bias = 1;
	                }
	                node = parent;
	            }
	            if (bias < 0)
	                after = node;
	            else
	                after = node.nextSibling;
	        }
	        if (after == this.dom.firstChild)
	            return 0;
	        while (after && !ContentView.get(after))
	            after = after.nextSibling;
	        if (!after)
	            return this.length;
	        for (let i = 0, pos = 0;; i++) {
	            let child = this.children[i];
	            if (child.dom == after)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	    }
	    domBoundsAround(from, to, offset = 0) {
	        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
	        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (pos < from && end > to)
	                return child.domBoundsAround(from, to, pos);
	            if (end >= from && fromI == -1) {
	                fromI = i;
	                fromStart = pos;
	            }
	            if (pos > to && child.dom.parentNode == this.dom) {
	                toI = i;
	                toEnd = prevEnd;
	                break;
	            }
	            prevEnd = end;
	            pos = end + child.breakAfter;
	        }
	        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
	            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
	            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
	    }
	    markDirty(andParent = false) {
	        this.flags |= 2 /* ViewFlag.NodeDirty */;
	        this.markParentsDirty(andParent);
	    }
	    markParentsDirty(childList) {
	        for (let parent = this.parent; parent; parent = parent.parent) {
	            if (childList)
	                parent.flags |= 2 /* ViewFlag.NodeDirty */;
	            if (parent.flags & 1 /* ViewFlag.ChildDirty */)
	                return;
	            parent.flags |= 1 /* ViewFlag.ChildDirty */;
	            childList = false;
	        }
	    }
	    setParent(parent) {
	        if (this.parent != parent) {
	            this.parent = parent;
	            if (this.flags & 7 /* ViewFlag.Dirty */)
	                this.markParentsDirty(true);
	        }
	    }
	    setDOM(dom) {
	        if (this.dom == dom)
	            return;
	        if (this.dom)
	            this.dom.cmView = null;
	        this.dom = dom;
	        dom.cmView = this;
	    }
	    get rootView() {
	        for (let v = this;;) {
	            let parent = v.parent;
	            if (!parent)
	                return v;
	            v = parent;
	        }
	    }
	    replaceChildren(from, to, children = noChildren) {
	        this.markDirty();
	        for (let i = from; i < to; i++) {
	            let child = this.children[i];
	            if (child.parent == this && children.indexOf(child) < 0)
	                child.destroy();
	        }
	        this.children.splice(from, to - from, ...children);
	        for (let i = 0; i < children.length; i++)
	            children[i].setParent(this);
	    }
	    ignoreMutation(_rec) { return false; }
	    ignoreEvent(_event) { return false; }
	    childCursor(pos = this.length) {
	        return new ChildCursor(this.children, pos, this.children.length);
	    }
	    childPos(pos, bias = 1) {
	        return this.childCursor().findPos(pos, bias);
	    }
	    toString() {
	        let name = this.constructor.name.replace("View", "");
	        return name + (this.children.length ? "(" + this.children.join() + ")" :
	            this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
	            (this.breakAfter ? "#" : "");
	    }
	    static get(node) { return node.cmView; }
	    get isEditable() { return true; }
	    get isWidget() { return false; }
	    get isHidden() { return false; }
	    merge(from, to, source, hasStart, openStart, openEnd) {
	        return false;
	    }
	    become(other) { return false; }
	    canReuseDOM(other) {
	        return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
	    }
	    // When this is a zero-length view with a side, this should return a
	    // number <= 0 to indicate it is before its position, or a
	    // number > 0 when after its position.
	    getSide() { return 0; }
	    destroy() {
	        for (let child of this.children)
	            if (child.parent == this)
	                child.destroy();
	        this.parent = null;
	    }
	}
	ContentView.prototype.breakAfter = 0;
	// Remove a DOM node and return its next sibling.
	function rm$1(dom) {
	    let next = dom.nextSibling;
	    dom.parentNode.removeChild(dom);
	    return next;
	}
	class ChildCursor {
	    constructor(children, pos, i) {
	        this.children = children;
	        this.pos = pos;
	        this.i = i;
	        this.off = 0;
	    }
	    findPos(pos, bias = 1) {
	        for (;;) {
	            if (pos > this.pos || pos == this.pos &&
	                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
	                this.off = pos - this.pos;
	                return this;
	            }
	            let next = this.children[--this.i];
	            this.pos -= next.length + next.breakAfter;
	        }
	    }
	}
	function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
	    let { children } = parent;
	    let before = children.length ? children[fromI] : null;
	    let last = insert.length ? insert[insert.length - 1] : null;
	    let breakAtEnd = last ? last.breakAfter : breakAtStart;
	    // Change within a single child
	    if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
	        before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
	        return;
	    if (toI < children.length) {
	        let after = children[toI];
	        // Make sure the end of the child after the update is preserved in `after`
	        if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
	            // If we're splitting a child, separate part of it to avoid that
	            // being mangled when updating the child before the update.
	            if (fromI == toI) {
	                after = after.split(toOff);
	                toOff = 0;
	            }
	            // If the element after the replacement should be merged with
	            // the last replacing element, update `content`
	            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
	                insert[insert.length - 1] = after;
	            }
	            else {
	                // Remove the start of the after element, if necessary, and
	                // add it to `content`.
	                if (toOff || after.children.length && !after.children[0].length)
	                    after.merge(0, toOff, null, false, 0, openEnd);
	                insert.push(after);
	            }
	        }
	        else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
	            // The element at `toI` is entirely covered by this range.
	            // Preserve its line break, if any.
	            if (last)
	                last.breakAfter = 1;
	            else
	                breakAtStart = 1;
	        }
	        // Since we've handled the next element from the current elements
	        // now, make sure `toI` points after that.
	        toI++;
	    }
	    if (before) {
	        before.breakAfter = breakAtStart;
	        if (fromOff > 0) {
	            if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
	                before.breakAfter = insert.shift().breakAfter;
	            }
	            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
	                before.merge(fromOff, before.length, null, false, openStart, 0);
	            }
	            fromI++;
	        }
	    }
	    // Try to merge widgets on the boundaries of the replacement
	    while (fromI < toI && insert.length) {
	        if (children[toI - 1].become(insert[insert.length - 1])) {
	            toI--;
	            insert.pop();
	            openEnd = insert.length ? 0 : openStart;
	        }
	        else if (children[fromI].become(insert[0])) {
	            fromI++;
	            insert.shift();
	            openStart = insert.length ? 0 : openEnd;
	        }
	        else {
	            break;
	        }
	    }
	    if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
	        children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
	        fromI--;
	    if (fromI < toI || insert.length)
	        parent.replaceChildren(fromI, toI, insert);
	}
	function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
	    let cur = parent.childCursor();
	    let { i: toI, off: toOff } = cur.findPos(to, 1);
	    let { i: fromI, off: fromOff } = cur.findPos(from, -1);
	    let dLen = from - to;
	    for (let view of insert)
	        dLen += view.length;
	    parent.length += dLen;
	    replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
	}

	let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
	let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
	const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
	const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
	const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
	const ie = !!(ie_upto10 || ie_11up || ie_edge);
	const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
	const chrome$1 = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
	const webkit = "webkitFontSmoothing" in doc.documentElement.style;
	const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
	const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
	var browser = {
	    mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
	    windows: /*@__PURE__*//Win/.test(nav.platform),
	    linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
	    ie,
	    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
	    gecko,
	    gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
	    chrome: !!chrome$1,
	    chrome_version: chrome$1 ? +chrome$1[1] : 0,
	    ios,
	    android: /*@__PURE__*//Android\b/.test(nav.userAgent),
	    webkit,
	    safari,
	    webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
	    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
	};

	const MaxJoinLen = 256;
	class TextView extends ContentView {
	    constructor(text) {
	        super();
	        this.text = text;
	    }
	    get length() { return this.text.length; }
	    createDOM(textDOM) {
	        this.setDOM(textDOM || document.createTextNode(this.text));
	    }
	    sync(view, track) {
	        if (!this.dom)
	            this.createDOM();
	        if (this.dom.nodeValue != this.text) {
	            if (track && track.node == this.dom)
	                track.written = true;
	            this.dom.nodeValue = this.text;
	        }
	    }
	    reuseDOM(dom) {
	        if (dom.nodeType == 3)
	            this.createDOM(dom);
	    }
	    merge(from, to, source) {
	        if ((this.flags & 8 /* ViewFlag.Composition */) ||
	            source && (!(source instanceof TextView) ||
	                this.length - (to - from) + source.length > MaxJoinLen ||
	                (source.flags & 8 /* ViewFlag.Composition */)))
	            return false;
	        this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
	        this.markDirty();
	        return true;
	    }
	    split(from) {
	        let result = new TextView(this.text.slice(from));
	        this.text = this.text.slice(0, from);
	        this.markDirty();
	        result.flags |= this.flags & 8 /* ViewFlag.Composition */;
	        return result;
	    }
	    localPosFromDOM(node, offset) {
	        return node == this.dom ? offset : offset ? this.text.length : 0;
	    }
	    domAtPos(pos) { return new DOMPos(this.dom, pos); }
	    domBoundsAround(_from, _to, offset) {
	        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
	    }
	    coordsAt(pos, side) {
	        return textCoords(this.dom, pos, side);
	    }
	}
	class MarkView extends ContentView {
	    constructor(mark, children = [], length = 0) {
	        super();
	        this.mark = mark;
	        this.children = children;
	        this.length = length;
	        for (let ch of children)
	            ch.setParent(this);
	    }
	    setAttrs(dom) {
	        clearAttributes(dom);
	        if (this.mark.class)
	            dom.className = this.mark.class;
	        if (this.mark.attrs)
	            for (let name in this.mark.attrs)
	                dom.setAttribute(name, this.mark.attrs[name]);
	        return dom;
	    }
	    canReuseDOM(other) {
	        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
	    }
	    reuseDOM(node) {
	        if (node.nodeName == this.mark.tagName.toUpperCase()) {
	            this.setDOM(node);
	            this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
	        }
	    }
	    sync(view, track) {
	        if (!this.dom)
	            this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
	        else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
	            this.setAttrs(this.dom);
	        super.sync(view, track);
	    }
	    merge(from, to, source, _hasStart, openStart, openEnd) {
	        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
	            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
	            return false;
	        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart - 1, openEnd - 1);
	        this.markDirty();
	        return true;
	    }
	    split(from) {
	        let result = [], off = 0, detachFrom = -1, i = 0;
	        for (let elt of this.children) {
	            let end = off + elt.length;
	            if (end > from)
	                result.push(off < from ? elt.split(from - off) : elt);
	            if (detachFrom < 0 && off >= from)
	                detachFrom = i;
	            off = end;
	            i++;
	        }
	        let length = this.length - from;
	        this.length = from;
	        if (detachFrom > -1) {
	            this.children.length = detachFrom;
	            this.markDirty();
	        }
	        return new MarkView(this.mark, result, length);
	    }
	    domAtPos(pos) {
	        return inlineDOMAtPos(this, pos);
	    }
	    coordsAt(pos, side) {
	        return coordsInChildren(this, pos, side);
	    }
	}
	function textCoords(text, pos, side) {
	    let length = text.nodeValue.length;
	    if (pos > length)
	        pos = length;
	    let from = pos, to = pos, flatten = 0;
	    if (pos == 0 && side < 0 || pos == length && side >= 0) {
	        if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
	            if (pos) {
	                from--;
	                flatten = 1;
	            } // FIXME this is wrong in RTL text
	            else if (to < length) {
	                to++;
	                flatten = -1;
	            }
	        }
	    }
	    else {
	        if (side < 0)
	            from--;
	        else if (to < length)
	            to++;
	    }
	    let rects = textRange(text, from, to).getClientRects();
	    if (!rects.length)
	        return null;
	    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
	    if (browser.safari && !flatten && rect.width == 0)
	        rect = Array.prototype.find.call(rects, r => r.width) || rect;
	    return flatten ? flattenRect(rect, flatten < 0) : rect || null;
	}
	// Also used for collapsed ranges that don't have a placeholder widget!
	class WidgetView extends ContentView {
	    static create(widget, length, side) {
	        return new WidgetView(widget, length, side);
	    }
	    constructor(widget, length, side) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.side = side;
	        this.prevWidget = null;
	    }
	    split(from) {
	        let result = WidgetView.create(this.widget, this.length - from, this.side);
	        this.length -= from;
	        return result;
	    }
	    sync(view) {
	        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
	            if (this.dom && this.prevWidget)
	                this.prevWidget.destroy(this.dom);
	            this.prevWidget = null;
	            this.setDOM(this.widget.toDOM(view));
	            if (!this.widget.editable)
	                this.dom.contentEditable = "false";
	        }
	    }
	    getSide() { return this.side; }
	    merge(from, to, source, hasStart, openStart, openEnd) {
	        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
	            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
	            return false;
	        this.length = from + (source ? source.length : 0) + (this.length - to);
	        return true;
	    }
	    become(other) {
	        if (other instanceof WidgetView && other.side == this.side &&
	            this.widget.constructor == other.widget.constructor) {
	            if (!this.widget.compare(other.widget))
	                this.markDirty(true);
	            if (this.dom && !this.prevWidget)
	                this.prevWidget = this.widget;
	            this.widget = other.widget;
	            this.length = other.length;
	            return true;
	        }
	        return false;
	    }
	    ignoreMutation() { return true; }
	    ignoreEvent(event) { return this.widget.ignoreEvent(event); }
	    get overrideDOMText() {
	        if (this.length == 0)
	            return Text.empty;
	        let top = this;
	        while (top.parent)
	            top = top.parent;
	        let { view } = top, text = view && view.state.doc, start = this.posAtStart;
	        return text ? text.slice(start, start + this.length) : Text.empty;
	    }
	    domAtPos(pos) {
	        return (this.length ? pos == 0 : this.side > 0)
	            ? DOMPos.before(this.dom)
	            : DOMPos.after(this.dom, pos == this.length);
	    }
	    domBoundsAround() { return null; }
	    coordsAt(pos, side) {
	        let custom = this.widget.coordsAt(this.dom, pos, side);
	        if (custom)
	            return custom;
	        let rects = this.dom.getClientRects(), rect = null;
	        if (!rects.length)
	            return null;
	        let fromBack = this.side ? this.side < 0 : pos > 0;
	        for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
	            rect = rects[i];
	            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
	                break;
	        }
	        return flattenRect(rect, !fromBack);
	    }
	    get isEditable() { return false; }
	    get isWidget() { return true; }
	    get isHidden() { return this.widget.isHidden; }
	    destroy() {
	        super.destroy();
	        if (this.dom)
	            this.widget.destroy(this.dom);
	    }
	}
	// These are drawn around uneditable widgets to avoid a number of
	// browser bugs that show up when the cursor is directly next to
	// uneditable inline content.
	class WidgetBufferView extends ContentView {
	    constructor(side) {
	        super();
	        this.side = side;
	    }
	    get length() { return 0; }
	    merge() { return false; }
	    become(other) {
	        return other instanceof WidgetBufferView && other.side == this.side;
	    }
	    split() { return new WidgetBufferView(this.side); }
	    sync() {
	        if (!this.dom) {
	            let dom = document.createElement("img");
	            dom.className = "cm-widgetBuffer";
	            dom.setAttribute("aria-hidden", "true");
	            this.setDOM(dom);
	        }
	    }
	    getSide() { return this.side; }
	    domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
	    localPosFromDOM() { return 0; }
	    domBoundsAround() { return null; }
	    coordsAt(pos) {
	        return this.dom.getBoundingClientRect();
	    }
	    get overrideDOMText() {
	        return Text.empty;
	    }
	    get isHidden() { return true; }
	}
	TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
	function inlineDOMAtPos(parent, pos) {
	    let dom = parent.dom, { children } = parent, i = 0;
	    for (let off = 0; i < children.length; i++) {
	        let child = children[i], end = off + child.length;
	        if (end == off && child.getSide() <= 0)
	            continue;
	        if (pos > off && pos < end && child.dom.parentNode == dom)
	            return child.domAtPos(pos - off);
	        if (pos <= off)
	            break;
	        off = end;
	    }
	    for (let j = i; j > 0; j--) {
	        let prev = children[j - 1];
	        if (prev.dom.parentNode == dom)
	            return prev.domAtPos(prev.length);
	    }
	    for (let j = i; j < children.length; j++) {
	        let next = children[j];
	        if (next.dom.parentNode == dom)
	            return next.domAtPos(0);
	    }
	    return new DOMPos(dom, 0);
	}
	// Assumes `view`, if a mark view, has precisely 1 child.
	function joinInlineInto(parent, view, open) {
	    let last, { children } = parent;
	    if (open > 0 && view instanceof MarkView && children.length &&
	        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
	        joinInlineInto(last, view.children[0], open - 1);
	    }
	    else {
	        children.push(view);
	        view.setParent(parent);
	    }
	    parent.length += view.length;
	}
	function coordsInChildren(view, pos, side) {
	    let before = null, beforePos = -1, after = null, afterPos = -1;
	    function scan(view, pos) {
	        for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
	            let child = view.children[i], end = off + child.length;
	            if (end >= pos) {
	                if (child.children.length) {
	                    scan(child, pos - off);
	                }
	                else if ((!after || after.isHidden && side > 0) &&
	                    (end > pos || off == end && child.getSide() > 0)) {
	                    after = child;
	                    afterPos = pos - off;
	                }
	                else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
	                    before = child;
	                    beforePos = pos - off;
	                }
	            }
	            off = end;
	        }
	    }
	    scan(view, pos);
	    let target = (side < 0 ? before : after) || before || after;
	    if (target)
	        return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
	    return fallbackRect(view);
	}
	function fallbackRect(view) {
	    let last = view.dom.lastChild;
	    if (!last)
	        return view.dom.getBoundingClientRect();
	    let rects = clientRectsFor(last);
	    return rects[rects.length - 1] || null;
	}

	function combineAttrs(source, target) {
	    for (let name in source) {
	        if (name == "class" && target.class)
	            target.class += " " + source.class;
	        else if (name == "style" && target.style)
	            target.style += ";" + source.style;
	        else
	            target[name] = source[name];
	    }
	    return target;
	}
	const noAttrs = /*@__PURE__*/Object.create(null);
	function attrsEq(a, b, ignore) {
	    if (a == b)
	        return true;
	    if (!a)
	        a = noAttrs;
	    if (!b)
	        b = noAttrs;
	    let keysA = Object.keys(a), keysB = Object.keys(b);
	    if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
	        keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
	        return false;
	    for (let key of keysA) {
	        if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
	            return false;
	    }
	    return true;
	}
	function updateAttrs(dom, prev, attrs) {
	    let changed = false;
	    if (prev)
	        for (let name in prev)
	            if (!(attrs && name in attrs)) {
	                changed = true;
	                if (name == "style")
	                    dom.style.cssText = "";
	                else
	                    dom.removeAttribute(name);
	            }
	    if (attrs)
	        for (let name in attrs)
	            if (!(prev && prev[name] == attrs[name])) {
	                changed = true;
	                if (name == "style")
	                    dom.style.cssText = attrs[name];
	                else
	                    dom.setAttribute(name, attrs[name]);
	            }
	    return changed;
	}
	function getAttrs(dom) {
	    let attrs = Object.create(null);
	    for (let i = 0; i < dom.attributes.length; i++) {
	        let attr = dom.attributes[i];
	        attrs[attr.name] = attr.value;
	    }
	    return attrs;
	}

	class LineView extends ContentView {
	    constructor() {
	        super(...arguments);
	        this.children = [];
	        this.length = 0;
	        this.prevAttrs = undefined;
	        this.attrs = null;
	        this.breakAfter = 0;
	    }
	    // Consumes source
	    merge(from, to, source, hasStart, openStart, openEnd) {
	        if (source) {
	            if (!(source instanceof LineView))
	                return false;
	            if (!this.dom)
	                source.transferDOM(this); // Reuse source.dom when appropriate
	        }
	        if (hasStart)
	            this.setDeco(source ? source.attrs : null);
	        mergeChildrenInto(this, from, to, source ? source.children.slice() : [], openStart, openEnd);
	        return true;
	    }
	    split(at) {
	        let end = new LineView;
	        end.breakAfter = this.breakAfter;
	        if (this.length == 0)
	            return end;
	        let { i, off } = this.childPos(at);
	        if (off) {
	            end.append(this.children[i].split(off), 0);
	            this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
	            i++;
	        }
	        for (let j = i; j < this.children.length; j++)
	            end.append(this.children[j], 0);
	        while (i > 0 && this.children[i - 1].length == 0)
	            this.children[--i].destroy();
	        this.children.length = i;
	        this.markDirty();
	        this.length = at;
	        return end;
	    }
	    transferDOM(other) {
	        if (!this.dom)
	            return;
	        this.markDirty();
	        other.setDOM(this.dom);
	        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
	        this.prevAttrs = undefined;
	        this.dom = null;
	    }
	    setDeco(attrs) {
	        if (!attrsEq(this.attrs, attrs)) {
	            if (this.dom) {
	                this.prevAttrs = this.attrs;
	                this.markDirty();
	            }
	            this.attrs = attrs;
	        }
	    }
	    append(child, openStart) {
	        joinInlineInto(this, child, openStart);
	    }
	    // Only called when building a line view in ContentBuilder
	    addLineDeco(deco) {
	        let attrs = deco.spec.attributes, cls = deco.spec.class;
	        if (attrs)
	            this.attrs = combineAttrs(attrs, this.attrs || {});
	        if (cls)
	            this.attrs = combineAttrs({ class: cls }, this.attrs || {});
	    }
	    domAtPos(pos) {
	        return inlineDOMAtPos(this, pos);
	    }
	    reuseDOM(node) {
	        if (node.nodeName == "DIV") {
	            this.setDOM(node);
	            this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
	        }
	    }
	    sync(view, track) {
	        var _a;
	        if (!this.dom) {
	            this.setDOM(document.createElement("div"));
	            this.dom.className = "cm-line";
	            this.prevAttrs = this.attrs ? null : undefined;
	        }
	        else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
	            clearAttributes(this.dom);
	            this.dom.className = "cm-line";
	            this.prevAttrs = this.attrs ? null : undefined;
	        }
	        if (this.prevAttrs !== undefined) {
	            updateAttrs(this.dom, this.prevAttrs, this.attrs);
	            this.dom.classList.add("cm-line");
	            this.prevAttrs = undefined;
	        }
	        super.sync(view, track);
	        let last = this.dom.lastChild;
	        while (last && ContentView.get(last) instanceof MarkView)
	            last = last.lastChild;
	        if (!last || !this.length ||
	            last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
	                (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
	            let hack = document.createElement("BR");
	            hack.cmIgnore = true;
	            this.dom.appendChild(hack);
	        }
	    }
	    measureTextSize() {
	        if (this.children.length == 0 || this.length > 20)
	            return null;
	        let totalWidth = 0, textHeight;
	        for (let child of this.children) {
	            if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
	                return null;
	            let rects = clientRectsFor(child.dom);
	            if (rects.length != 1)
	                return null;
	            totalWidth += rects[0].width;
	            textHeight = rects[0].height;
	        }
	        return !totalWidth ? null : {
	            lineHeight: this.dom.getBoundingClientRect().height,
	            charWidth: totalWidth / this.length,
	            textHeight
	        };
	    }
	    coordsAt(pos, side) {
	        let rect = coordsInChildren(this, pos, side);
	        // Correct rectangle height for empty lines when the returned
	        // height is larger than the text height.
	        if (!this.children.length && rect && this.parent) {
	            let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
	            if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
	                let dist = (height - heightOracle.textHeight) / 2;
	                return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
	            }
	        }
	        return rect;
	    }
	    become(_other) { return false; }
	    covers() { return true; }
	    static find(docView, pos) {
	        for (let i = 0, off = 0; i < docView.children.length; i++) {
	            let block = docView.children[i], end = off + block.length;
	            if (end >= pos) {
	                if (block instanceof LineView)
	                    return block;
	                if (end > pos)
	                    break;
	            }
	            off = end + block.breakAfter;
	        }
	        return null;
	    }
	}
	class BlockWidgetView extends ContentView {
	    constructor(widget, length, deco) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.deco = deco;
	        this.breakAfter = 0;
	        this.prevWidget = null;
	    }
	    merge(from, to, source, _takeDeco, openStart, openEnd) {
	        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
	            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
	            return false;
	        this.length = from + (source ? source.length : 0) + (this.length - to);
	        return true;
	    }
	    domAtPos(pos) {
	        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
	    }
	    split(at) {
	        let len = this.length - at;
	        this.length = at;
	        let end = new BlockWidgetView(this.widget, len, this.deco);
	        end.breakAfter = this.breakAfter;
	        return end;
	    }
	    get children() { return noChildren; }
	    sync(view) {
	        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
	            if (this.dom && this.prevWidget)
	                this.prevWidget.destroy(this.dom);
	            this.prevWidget = null;
	            this.setDOM(this.widget.toDOM(view));
	            if (!this.widget.editable)
	                this.dom.contentEditable = "false";
	        }
	    }
	    get overrideDOMText() {
	        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
	    }
	    domBoundsAround() { return null; }
	    become(other) {
	        if (other instanceof BlockWidgetView &&
	            other.widget.constructor == this.widget.constructor) {
	            if (!other.widget.compare(this.widget))
	                this.markDirty(true);
	            if (this.dom && !this.prevWidget)
	                this.prevWidget = this.widget;
	            this.widget = other.widget;
	            this.length = other.length;
	            this.deco = other.deco;
	            this.breakAfter = other.breakAfter;
	            return true;
	        }
	        return false;
	    }
	    ignoreMutation() { return true; }
	    ignoreEvent(event) { return this.widget.ignoreEvent(event); }
	    get isEditable() { return false; }
	    get isWidget() { return true; }
	    coordsAt(pos, side) {
	        return this.widget.coordsAt(this.dom, pos, side);
	    }
	    destroy() {
	        super.destroy();
	        if (this.dom)
	            this.widget.destroy(this.dom);
	    }
	    covers(side) {
	        let { startSide, endSide } = this.deco;
	        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
	    }
	}

	/**
	Widgets added to the content are described by subclasses of this
	class. Using a description object like that makes it possible to
	delay creating of the DOM structure for a widget until it is
	needed, and to avoid redrawing widgets even if the decorations
	that define them are recreated.
	*/
	class WidgetType {
	    /**
	    Compare this instance to another instance of the same type.
	    (TypeScript can't express this, but only instances of the same
	    specific class will be passed to this method.) This is used to
	    avoid redrawing widgets when they are replaced by a new
	    decoration of the same type. The default implementation just
	    returns `false`, which will cause new instances of the widget to
	    always be redrawn.
	    */
	    eq(widget) { return false; }
	    /**
	    Update a DOM element created by a widget of the same type (but
	    different, non-`eq` content) to reflect this widget. May return
	    true to indicate that it could update, false to indicate it
	    couldn't (in which case the widget will be redrawn). The default
	    implementation just returns false.
	    */
	    updateDOM(dom, view) { return false; }
	    /**
	    @internal
	    */
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other);
	    }
	    /**
	    The estimated height this widget will have, to be used when
	    estimating the height of content that hasn't been drawn. May
	    return -1 to indicate you don't know. The default implementation
	    returns -1.
	    */
	    get estimatedHeight() { return -1; }
	    /**
	    For inline widgets that are displayed inline (as opposed to
	    `inline-block`) and introduce line breaks (through `<br>` tags
	    or textual newlines), this must indicate the amount of line
	    breaks they introduce. Defaults to 0.
	    */
	    get lineBreaks() { return 0; }
	    /**
	    Can be used to configure which kinds of events inside the widget
	    should be ignored by the editor. The default is to ignore all
	    events.
	    */
	    ignoreEvent(event) { return true; }
	    /**
	    Override the way screen coordinates for positions at/in the
	    widget are found. `pos` will be the offset into the widget, and
	    `side` the side of the position that is being queried—less than
	    zero for before, greater than zero for after, and zero for
	    directly at that position.
	    */
	    coordsAt(dom, pos, side) { return null; }
	    /**
	    @internal
	    */
	    get isHidden() { return false; }
	    /**
	    @internal
	    */
	    get editable() { return false; }
	    /**
	    This is called when the an instance of the widget is removed
	    from the editor view.
	    */
	    destroy(dom) { }
	}
	/**
	The different types of blocks that can occur in an editor view.
	*/
	var BlockType = /*@__PURE__*/(function (BlockType) {
	    /**
	    A line of text.
	    */
	    BlockType[BlockType["Text"] = 0] = "Text";
	    /**
	    A block widget associated with the position after it.
	    */
	    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
	    /**
	    A block widget associated with the position before it.
	    */
	    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
	    /**
	    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
	    */
	    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
	return BlockType})(BlockType || (BlockType = {}));
	/**
	A decoration provides information on how to draw or style a piece
	of content. You'll usually use it wrapped in a
	[`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
	@nonabstract
	*/
	class Decoration extends RangeValue {
	    constructor(
	    /**
	    @internal
	    */
	    startSide, 
	    /**
	    @internal
	    */
	    endSide, 
	    /**
	    @internal
	    */
	    widget, 
	    /**
	    The config object used to create this decoration. You can
	    include additional properties in there to store metadata about
	    your decoration.
	    */
	    spec) {
	        super();
	        this.startSide = startSide;
	        this.endSide = endSide;
	        this.widget = widget;
	        this.spec = spec;
	    }
	    /**
	    @internal
	    */
	    get heightRelevant() { return false; }
	    /**
	    Create a mark decoration, which influences the styling of the
	    content in its range. Nested mark decorations will cause nested
	    DOM elements to be created. Nesting order is determined by
	    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
	    the higher-precedence decorations creating the inner DOM nodes.
	    Such elements are split on line boundaries and on the boundaries
	    of lower-precedence decorations.
	    */
	    static mark(spec) {
	        return new MarkDecoration(spec);
	    }
	    /**
	    Create a widget decoration, which displays a DOM element at the
	    given position.
	    */
	    static widget(spec) {
	        let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
	        side += (block && !spec.inlineOrder)
	            ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
	            : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
	        return new PointDecoration(spec, side, side, block, spec.widget || null, false);
	    }
	    /**
	    Create a replace decoration which replaces the given range with
	    a widget, or simply hides it.
	    */
	    static replace(spec) {
	        let block = !!spec.block, startSide, endSide;
	        if (spec.isBlockGap) {
	            startSide = -500000000 /* Side.GapStart */;
	            endSide = 400000000 /* Side.GapEnd */;
	        }
	        else {
	            let { start, end } = getInclusive(spec, block);
	            startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
	            endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
	        }
	        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
	    }
	    /**
	    Create a line decoration, which can add DOM attributes to the
	    line starting at the given position.
	    */
	    static line(spec) {
	        return new LineDecoration(spec);
	    }
	    /**
	    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
	    decorated range or ranges. If the ranges aren't already sorted,
	    pass `true` for `sort` to make the library sort them for you.
	    */
	    static set(of, sort = false) {
	        return RangeSet.of(of, sort);
	    }
	    /**
	    @internal
	    */
	    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
	}
	/**
	The empty set of decorations.
	*/
	Decoration.none = RangeSet.empty;
	class MarkDecoration extends Decoration {
	    constructor(spec) {
	        let { start, end } = getInclusive(spec);
	        super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
	        this.tagName = spec.tagName || "span";
	        this.class = spec.class || "";
	        this.attrs = spec.attributes || null;
	    }
	    eq(other) {
	        var _a, _b;
	        return this == other ||
	            other instanceof MarkDecoration &&
	                this.tagName == other.tagName &&
	                (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
	                attrsEq(this.attrs, other.attrs, "class");
	    }
	    range(from, to = from) {
	        if (from >= to)
	            throw new RangeError("Mark decorations may not be empty");
	        return super.range(from, to);
	    }
	}
	MarkDecoration.prototype.point = false;
	class LineDecoration extends Decoration {
	    constructor(spec) {
	        super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
	    }
	    eq(other) {
	        return other instanceof LineDecoration &&
	            this.spec.class == other.spec.class &&
	            attrsEq(this.spec.attributes, other.spec.attributes);
	    }
	    range(from, to = from) {
	        if (to != from)
	            throw new RangeError("Line decoration ranges must be zero-length");
	        return super.range(from, to);
	    }
	}
	LineDecoration.prototype.mapMode = MapMode.TrackBefore;
	LineDecoration.prototype.point = true;
	class PointDecoration extends Decoration {
	    constructor(spec, startSide, endSide, block, widget, isReplace) {
	        super(startSide, endSide, widget, spec);
	        this.block = block;
	        this.isReplace = isReplace;
	        this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
	    }
	    // Only relevant when this.block == true
	    get type() {
	        return this.startSide != this.endSide ? BlockType.WidgetRange
	            : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
	    }
	    get heightRelevant() {
	        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
	    }
	    eq(other) {
	        return other instanceof PointDecoration &&
	            widgetsEq(this.widget, other.widget) &&
	            this.block == other.block &&
	            this.startSide == other.startSide && this.endSide == other.endSide;
	    }
	    range(from, to = from) {
	        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
	            throw new RangeError("Invalid range for replacement decoration");
	        if (!this.isReplace && to != from)
	            throw new RangeError("Widget decorations can only have zero-length ranges");
	        return super.range(from, to);
	    }
	}
	PointDecoration.prototype.point = true;
	function getInclusive(spec, block = false) {
	    let { inclusiveStart: start, inclusiveEnd: end } = spec;
	    if (start == null)
	        start = spec.inclusive;
	    if (end == null)
	        end = spec.inclusive;
	    return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
	}
	function widgetsEq(a, b) {
	    return a == b || !!(a && b && a.compare(b));
	}
	function addRange(from, to, ranges, margin = 0) {
	    let last = ranges.length - 1;
	    if (last >= 0 && ranges[last] + margin >= from)
	        ranges[last] = Math.max(ranges[last], to);
	    else
	        ranges.push(from, to);
	}

	class ContentBuilder {
	    constructor(doc, pos, end, disallowBlockEffectsFor) {
	        this.doc = doc;
	        this.pos = pos;
	        this.end = end;
	        this.disallowBlockEffectsFor = disallowBlockEffectsFor;
	        this.content = [];
	        this.curLine = null;
	        this.breakAtStart = 0;
	        this.pendingBuffer = 0 /* Buf.No */;
	        this.bufferMarks = [];
	        // Set to false directly after a widget that covers the position after it
	        this.atCursorPos = true;
	        this.openStart = -1;
	        this.openEnd = -1;
	        this.text = "";
	        this.textOff = 0;
	        this.cursor = doc.iter();
	        this.skip = pos;
	    }
	    posCovered() {
	        if (this.content.length == 0)
	            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
	        let last = this.content[this.content.length - 1];
	        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
	    }
	    getLine() {
	        if (!this.curLine) {
	            this.content.push(this.curLine = new LineView);
	            this.atCursorPos = true;
	        }
	        return this.curLine;
	    }
	    flushBuffer(active = this.bufferMarks) {
	        if (this.pendingBuffer) {
	            this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
	            this.pendingBuffer = 0 /* Buf.No */;
	        }
	    }
	    addBlockWidget(view) {
	        this.flushBuffer();
	        this.curLine = null;
	        this.content.push(view);
	    }
	    finish(openEnd) {
	        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
	            this.flushBuffer();
	        else
	            this.pendingBuffer = 0 /* Buf.No */;
	        if (!this.posCovered() &&
	            !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
	            this.getLine();
	    }
	    buildText(length, active, openStart) {
	        while (length > 0) {
	            if (this.textOff == this.text.length) {
	                let { value, lineBreak, done } = this.cursor.next(this.skip);
	                this.skip = 0;
	                if (done)
	                    throw new Error("Ran out of text content when drawing inline views");
	                if (lineBreak) {
	                    if (!this.posCovered())
	                        this.getLine();
	                    if (this.content.length)
	                        this.content[this.content.length - 1].breakAfter = 1;
	                    else
	                        this.breakAtStart = 1;
	                    this.flushBuffer();
	                    this.curLine = null;
	                    this.atCursorPos = true;
	                    length--;
	                    continue;
	                }
	                else {
	                    this.text = value;
	                    this.textOff = 0;
	                }
	            }
	            let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
	            this.flushBuffer(active.slice(active.length - openStart));
	            this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
	            this.atCursorPos = true;
	            this.textOff += take;
	            length -= take;
	            openStart = 0;
	        }
	    }
	    span(from, to, active, openStart) {
	        this.buildText(to - from, active, openStart);
	        this.pos = to;
	        if (this.openStart < 0)
	            this.openStart = openStart;
	    }
	    point(from, to, deco, active, openStart, index) {
	        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
	            if (deco.block)
	                throw new RangeError("Block decorations may not be specified via plugins");
	            if (to > this.doc.lineAt(this.pos).to)
	                throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
	        }
	        let len = to - from;
	        if (deco instanceof PointDecoration) {
	            if (deco.block) {
	                if (deco.startSide > 0 && !this.posCovered())
	                    this.getLine();
	                this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, deco));
	            }
	            else {
	                let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
	                let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
	                    (from < to || deco.startSide > 0);
	                let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
	                let line = this.getLine();
	                if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
	                    this.pendingBuffer = 0 /* Buf.No */;
	                this.flushBuffer(active);
	                if (cursorBefore) {
	                    line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
	                    openStart = active.length + Math.max(0, openStart - active.length);
	                }
	                line.append(wrapMarks(view, active), openStart);
	                this.atCursorPos = cursorAfter;
	                this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
	                if (this.pendingBuffer)
	                    this.bufferMarks = active.slice();
	            }
	        }
	        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
	            this.getLine().addLineDeco(deco);
	        }
	        if (len) {
	            // Advance the iterator past the replaced content
	            if (this.textOff + len <= this.text.length) {
	                this.textOff += len;
	            }
	            else {
	                this.skip += len - (this.text.length - this.textOff);
	                this.text = "";
	                this.textOff = 0;
	            }
	            this.pos = to;
	        }
	        if (this.openStart < 0)
	            this.openStart = openStart;
	    }
	    static build(text, from, to, decorations, dynamicDecorationMap) {
	        let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
	        builder.openEnd = RangeSet.spans(decorations, from, to, builder);
	        if (builder.openStart < 0)
	            builder.openStart = builder.openEnd;
	        builder.finish(builder.openEnd);
	        return builder;
	    }
	}
	function wrapMarks(view, active) {
	    for (let mark of active)
	        view = new MarkView(mark, [view], view.length);
	    return view;
	}
	class NullWidget extends WidgetType {
	    constructor(tag) {
	        super();
	        this.tag = tag;
	    }
	    eq(other) { return other.tag == this.tag; }
	    toDOM() { return document.createElement(this.tag); }
	    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
	    get isHidden() { return true; }
	}

	/**
	Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
	*/
	var Direction = /*@__PURE__*/(function (Direction) {
	    // (These are chosen to match the base levels, in bidi algorithm
	    // terms, of spans in that direction.)
	    /**
	    Left-to-right.
	    */
	    Direction[Direction["LTR"] = 0] = "LTR";
	    /**
	    Right-to-left.
	    */
	    Direction[Direction["RTL"] = 1] = "RTL";
	return Direction})(Direction || (Direction = {}));
	const LTR = Direction.LTR, RTL = Direction.RTL;
	// Decode a string with each type encoded as log2(type)
	function dec(str) {
	    let result = [];
	    for (let i = 0; i < str.length; i++)
	        result.push(1 << +str[i]);
	    return result;
	}
	// Character types for codepoints 0 to 0xf8
	const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
	// Character types for codepoints 0x600 to 0x6f9
	const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
	const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
	// There's a lot more in
	// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
	// which are left out to keep code size down.
	for (let p of ["()", "[]", "{}"]) {
	    let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
	    Brackets[l] = r;
	    Brackets[r] = -l;
	}
	function charType(ch) {
	    return ch <= 0xf7 ? LowTypes[ch] :
	        0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
	            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
	                0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
	                    0x2000 <= ch && ch <= 0x200c ? 256 /* T.NI */ :
	                        0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ : 1 /* T.L */;
	}
	const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
	/**
	Represents a contiguous range of text that has a single direction
	(as in left-to-right or right-to-left).
	*/
	class BidiSpan {
	    /**
	    The direction of this span.
	    */
	    get dir() { return this.level % 2 ? RTL : LTR; }
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The start of the span (relative to the start of the line).
	    */
	    from, 
	    /**
	    The end of the span.
	    */
	    to, 
	    /**
	    The ["bidi
	    level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
	    of the span (in this context, 0 means
	    left-to-right, 1 means right-to-left, 2 means left-to-right
	    number inside right-to-left text).
	    */
	    level) {
	        this.from = from;
	        this.to = to;
	        this.level = level;
	    }
	    /**
	    @internal
	    */
	    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
	    /**
	    @internal
	    */
	    forward(forward, dir) { return forward == (this.dir == dir); }
	    /**
	    @internal
	    */
	    static find(order, index, level, assoc) {
	        let maybe = -1;
	        for (let i = 0; i < order.length; i++) {
	            let span = order[i];
	            if (span.from <= index && span.to >= index) {
	                if (span.level == level)
	                    return i;
	                // When multiple spans match, if assoc != 0, take the one that
	                // covers that side, otherwise take the one with the minimum
	                // level.
	                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
	                    maybe = i;
	            }
	        }
	        if (maybe < 0)
	            throw new RangeError("Index out of range");
	        return maybe;
	    }
	}
	function isolatesEq(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++) {
	        let iA = a[i], iB = b[i];
	        if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
	            return false;
	    }
	    return true;
	}
	// Reused array of character types
	const types = [];
	// Fill in the character types (in `types`) from `from` to `to` and
	// apply W normalization rules.
	function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
	    for (let iI = 0; iI <= isolates.length; iI++) {
	        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
	        let prevType = iI ? 256 /* T.NI */ : outerType;
	        // W1. Examine each non-spacing mark (NSM) in the level run, and
	        // change the type of the NSM to the type of the previous
	        // character. If the NSM is at the start of the level run, it will
	        // get the type of sor.
	        // W2. Search backwards from each instance of a European number
	        // until the first strong type (R, L, AL, or sor) is found. If an
	        // AL is found, change the type of the European number to Arabic
	        // number.
	        // W3. Change all ALs to R.
	        // (Left after this: L, R, EN, AN, ET, CS, NI)
	        for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
	            let type = charType(line.charCodeAt(i));
	            if (type == 512 /* T.NSM */)
	                type = prev;
	            else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
	                type = 16 /* T.AN */;
	            types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
	            if (type & 7 /* T.Strong */)
	                prevStrong = type;
	            prev = type;
	        }
	        // W5. A sequence of European terminators adjacent to European
	        // numbers changes to all European numbers.
	        // W6. Otherwise, separators and terminators change to Other
	        // Neutral.
	        // W7. Search backwards from each instance of a European number
	        // until the first strong type (R, L, or sor) is found. If an L is
	        // found, then change the type of the European number to L.
	        // (Left after this: L, R, EN+AN, NI)
	        for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
	            let type = types[i];
	            if (type == 128 /* T.CS */) {
	                if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
	                    type = types[i] = prev;
	                else
	                    types[i] = 256 /* T.NI */;
	            }
	            else if (type == 64 /* T.ET */) {
	                let end = i + 1;
	                while (end < to && types[end] == 64 /* T.ET */)
	                    end++;
	                let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
	                for (let j = i; j < end; j++)
	                    types[j] = replace;
	                i = end - 1;
	            }
	            else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
	                types[i] = 1 /* T.L */;
	            }
	            prev = type;
	            if (type & 7 /* T.Strong */)
	                prevStrong = type;
	        }
	    }
	}
	// Process brackets throughout a run sequence.
	function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
	    let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
	    for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
	        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
	        // N0. Process bracket pairs in an isolating run sequence
	        // sequentially in the logical order of the text positions of the
	        // opening paired brackets using the logic given below. Within this
	        // scope, bidirectional types EN and AN are treated as R.
	        for (let i = from, ch, br, type; i < to; i++) {
	            // Keeps [startIndex, type, strongSeen] triples for each open
	            // bracket on BracketStack.
	            if (br = Brackets[ch = line.charCodeAt(i)]) {
	                if (br < 0) { // Closing bracket
	                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
	                        if (BracketStack[sJ + 1] == -br) {
	                            let flags = BracketStack[sJ + 2];
	                            let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
	                                !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
	                                    (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
	                            if (type)
	                                types[i] = types[BracketStack[sJ]] = type;
	                            sI = sJ;
	                            break;
	                        }
	                    }
	                }
	                else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
	                    break;
	                }
	                else {
	                    BracketStack[sI++] = i;
	                    BracketStack[sI++] = ch;
	                    BracketStack[sI++] = context;
	                }
	            }
	            else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
	                let embed = type == outerType;
	                context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
	                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
	                    let cur = BracketStack[sJ + 2];
	                    if (cur & 2 /* Bracketed.EmbedInside */)
	                        break;
	                    if (embed) {
	                        BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
	                    }
	                    else {
	                        if (cur & 4 /* Bracketed.OppositeInside */)
	                            break;
	                        BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
	                    }
	                }
	            }
	        }
	    }
	}
	function processNeutrals(rFrom, rTo, isolates, outerType) {
	    for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
	        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
	        // N1. A sequence of neutrals takes the direction of the
	        // surrounding strong text if the text on both sides has the same
	        // direction. European and Arabic numbers act as if they were R in
	        // terms of their influence on neutrals. Start-of-level-run (sor)
	        // and end-of-level-run (eor) are used at level run boundaries.
	        // N2. Any remaining neutrals take the embedding direction.
	        // (Left after this: L, R, EN+AN)
	        for (let i = from; i < to;) {
	            let type = types[i];
	            if (type == 256 /* T.NI */) {
	                let end = i + 1;
	                for (;;) {
	                    if (end == to) {
	                        if (iI == isolates.length)
	                            break;
	                        end = isolates[iI++].to;
	                        to = iI < isolates.length ? isolates[iI].from : rTo;
	                    }
	                    else if (types[end] == 256 /* T.NI */) {
	                        end++;
	                    }
	                    else {
	                        break;
	                    }
	                }
	                let beforeL = prev == 1 /* T.L */;
	                let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
	                let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
	                for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
	                    if (j == fromJ) {
	                        j = isolates[--jI].from;
	                        fromJ = jI ? isolates[jI - 1].to : rFrom;
	                    }
	                    types[--j] = replace;
	                }
	                i = end;
	            }
	            else {
	                prev = type;
	                i++;
	            }
	        }
	    }
	}
	// Find the contiguous ranges of character types in a given range, and
	// emit spans for them. Flip the order of the spans as appropriate
	// based on the level, and call through to compute the spans for
	// isolates at the proper point.
	function emitSpans(line, from, to, level, baseLevel, isolates, order) {
	    let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
	    if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
	        for (let iCh = from, iI = 0; iCh < to;) {
	            // Scan a section of characters in direction ourType, unless
	            // there's another type of char right after iCh, in which case
	            // we scan a section of other characters (which, if ourType ==
	            // T.L, may contain both T.R and T.AN chars).
	            let sameDir = true, isNum = false;
	            if (iI == isolates.length || iCh < isolates[iI].from) {
	                let next = types[iCh];
	                if (next != ourType) {
	                    sameDir = false;
	                    isNum = next == 16 /* T.AN */;
	                }
	            }
	            // Holds an array of isolates to pass to a recursive call if we
	            // must recurse (to distinguish T.AN inside an RTL section in
	            // LTR text), null if we can emit directly
	            let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
	            let localLevel = sameDir ? level : level + 1;
	            let iScan = iCh;
	            run: for (;;) {
	                if (iI < isolates.length && iScan == isolates[iI].from) {
	                    if (isNum)
	                        break run;
	                    let iso = isolates[iI];
	                    // Scan ahead to verify that there is another char in this dir after the isolate(s)
	                    if (!sameDir)
	                        for (let upto = iso.to, jI = iI + 1;;) {
	                            if (upto == to)
	                                break run;
	                            if (jI < isolates.length && isolates[jI].from == upto)
	                                upto = isolates[jI++].to;
	                            else if (types[upto] == ourType)
	                                break run;
	                            else
	                                break;
	                        }
	                    iI++;
	                    if (recurse) {
	                        recurse.push(iso);
	                    }
	                    else {
	                        if (iso.from > iCh)
	                            order.push(new BidiSpan(iCh, iso.from, localLevel));
	                        let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
	                        computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
	                        iCh = iso.to;
	                    }
	                    iScan = iso.to;
	                }
	                else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
	                    break;
	                }
	                else {
	                    iScan++;
	                }
	            }
	            if (recurse)
	                emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
	            else if (iCh < iScan)
	                order.push(new BidiSpan(iCh, iScan, localLevel));
	            iCh = iScan;
	        }
	    }
	    else {
	        // Iterate in reverse to flip the span order. Same code again, but
	        // going from the back of the section to the front
	        for (let iCh = to, iI = isolates.length; iCh > from;) {
	            let sameDir = true, isNum = false;
	            if (!iI || iCh > isolates[iI - 1].to) {
	                let next = types[iCh - 1];
	                if (next != ourType) {
	                    sameDir = false;
	                    isNum = next == 16 /* T.AN */;
	                }
	            }
	            let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
	            let localLevel = sameDir ? level : level + 1;
	            let iScan = iCh;
	            run: for (;;) {
	                if (iI && iScan == isolates[iI - 1].to) {
	                    if (isNum)
	                        break run;
	                    let iso = isolates[--iI];
	                    // Scan ahead to verify that there is another char in this dir after the isolate(s)
	                    if (!sameDir)
	                        for (let upto = iso.from, jI = iI;;) {
	                            if (upto == from)
	                                break run;
	                            if (jI && isolates[jI - 1].to == upto)
	                                upto = isolates[--jI].from;
	                            else if (types[upto - 1] == ourType)
	                                break run;
	                            else
	                                break;
	                        }
	                    if (recurse) {
	                        recurse.push(iso);
	                    }
	                    else {
	                        if (iso.to < iCh)
	                            order.push(new BidiSpan(iso.to, iCh, localLevel));
	                        let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
	                        computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
	                        iCh = iso.from;
	                    }
	                    iScan = iso.from;
	                }
	                else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
	                    break;
	                }
	                else {
	                    iScan--;
	                }
	            }
	            if (recurse)
	                emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
	            else if (iScan < iCh)
	                order.push(new BidiSpan(iScan, iCh, localLevel));
	            iCh = iScan;
	        }
	    }
	}
	function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
	    let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
	    computeCharTypes(line, from, to, isolates, outerType);
	    processBracketPairs(line, from, to, isolates, outerType);
	    processNeutrals(from, to, isolates, outerType);
	    emitSpans(line, from, to, level, baseLevel, isolates, order);
	}
	function computeOrder(line, direction, isolates) {
	    if (!line)
	        return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
	    if (direction == LTR && !isolates.length && !BidiRE.test(line))
	        return trivialOrder(line.length);
	    if (isolates.length)
	        while (line.length > types.length)
	            types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
	    let order = [], level = direction == LTR ? 0 : 1;
	    computeSectionOrder(line, level, level, isolates, 0, line.length, order);
	    return order;
	}
	function trivialOrder(length) {
	    return [new BidiSpan(0, length, 0)];
	}
	let movedOver = "";
	// This implementation moves strictly visually, without concern for a
	// traversal visiting every logical position in the string. It will
	// still do so for simple input, but situations like multiple isolates
	// with the same level next to each other, or text going against the
	// main dir at the end of the line, will make some positions
	// unreachable with this motion. Each visible cursor position will
	// correspond to the lower-level bidi span that touches it.
	//
	// The alternative would be to solve an order globally for a given
	// line, making sure that it includes every position, but that would
	// require associating non-canonical (higher bidi span level)
	// positions with a given visual position, which is likely to confuse
	// people. (And would generally be a lot more complicated.)
	function moveVisually(line, order, dir, start, forward) {
	    var _a;
	    let startIndex = start.head - line.from;
	    let spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
	    let span = order[spanI], spanEnd = span.side(forward, dir);
	    // End of span
	    if (startIndex == spanEnd) {
	        let nextI = spanI += forward ? 1 : -1;
	        if (nextI < 0 || nextI >= order.length)
	            return null;
	        span = order[spanI = nextI];
	        startIndex = span.side(!forward, dir);
	        spanEnd = span.side(forward, dir);
	    }
	    let nextIndex = findClusterBreak(line.text, startIndex, span.forward(forward, dir));
	    if (nextIndex < span.from || nextIndex > span.to)
	        nextIndex = spanEnd;
	    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
	    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
	    if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
	        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
	    return EditorSelection.cursor(nextIndex + line.from, span.forward(forward, dir) ? -1 : 1, span.level);
	}
	function autoDirection(text, from, to) {
	    for (let i = from; i < to; i++) {
	        let type = charType(text.charCodeAt(i));
	        if (type == 1 /* T.L */)
	            return LTR;
	        if (type == 2 /* T.R */ || type == 4 /* T.AL */)
	            return RTL;
	    }
	    return LTR;
	}

	const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
	const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
	const mouseSelectionStyle = /*@__PURE__*/Facet.define();
	const exceptionSink = /*@__PURE__*/Facet.define();
	const updateListener = /*@__PURE__*/Facet.define();
	const inputHandler$1 = /*@__PURE__*/Facet.define();
	const focusChangeEffect = /*@__PURE__*/Facet.define();
	const perLineTextDirection = /*@__PURE__*/Facet.define({
	    combine: values => values.some(x => x)
	});
	const nativeSelectionHidden = /*@__PURE__*/Facet.define({
	    combine: values => values.some(x => x)
	});
	class ScrollTarget {
	    constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5, 
	    // This data structure is abused to also store precise scroll
	    // snapshots, instead of a `scrollIntoView` request. When this
	    // flag is `true`, `range` points at a position in the reference
	    // line, `yMargin` holds the difference between the top of that
	    // line and the top of the editor, and `xMargin` holds the
	    // editor's `scrollLeft`.
	    isSnapshot = false) {
	        this.range = range;
	        this.y = y;
	        this.x = x;
	        this.yMargin = yMargin;
	        this.xMargin = xMargin;
	        this.isSnapshot = isSnapshot;
	    }
	    map(changes) {
	        return changes.empty ? this :
	            new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
	    }
	    clip(state) {
	        return this.range.to <= state.doc.length ? this :
	            new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
	    }
	}
	const scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
	/**
	Log or report an unhandled exception in client code. Should
	probably only be used by extension code that allows client code to
	provide functions, and calls those functions in a context where an
	exception can't be propagated to calling code in a reasonable way
	(for example when in an event handler).

	Either calls a handler registered with
	[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
	`window.onerror`, if defined, or `console.error` (in which case
	it'll pass `context`, when given, as first argument).
	*/
	function logException(state, exception, context) {
	    let handler = state.facet(exceptionSink);
	    if (handler.length)
	        handler[0](exception);
	    else if (window.onerror)
	        window.onerror(String(exception), context, undefined, undefined, exception);
	    else if (context)
	        console.error(context + ":", exception);
	    else
	        console.error(exception);
	}
	const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
	let nextPluginID = 0;
	const viewPlugin = /*@__PURE__*/Facet.define();
	/**
	View plugins associate stateful values with a view. They can
	influence the way the content is drawn, and are notified of things
	that happen in the view.
	*/
	class ViewPlugin {
	    constructor(
	    /**
	    @internal
	    */
	    id, 
	    /**
	    @internal
	    */
	    create, 
	    /**
	    @internal
	    */
	    domEventHandlers, 
	    /**
	    @internal
	    */
	    domEventObservers, buildExtensions) {
	        this.id = id;
	        this.create = create;
	        this.domEventHandlers = domEventHandlers;
	        this.domEventObservers = domEventObservers;
	        this.extension = buildExtensions(this);
	    }
	    /**
	    Define a plugin from a constructor function that creates the
	    plugin's value, given an editor view.
	    */
	    static define(create, spec) {
	        const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
	        return new ViewPlugin(nextPluginID++, create, eventHandlers, eventObservers, plugin => {
	            let ext = [viewPlugin.of(plugin)];
	            if (deco)
	                ext.push(decorations.of(view => {
	                    let pluginInst = view.plugin(plugin);
	                    return pluginInst ? deco(pluginInst) : Decoration.none;
	                }));
	            if (provide)
	                ext.push(provide(plugin));
	            return ext;
	        });
	    }
	    /**
	    Create a plugin for a class whose constructor takes a single
	    editor view as argument.
	    */
	    static fromClass(cls, spec) {
	        return ViewPlugin.define(view => new cls(view), spec);
	    }
	}
	class PluginInstance {
	    constructor(spec) {
	        this.spec = spec;
	        // When starting an update, all plugins have this field set to the
	        // update object, indicating they need to be updated. When finished
	        // updating, it is set to `false`. Retrieving a plugin that needs to
	        // be updated with `view.plugin` forces an eager update.
	        this.mustUpdate = null;
	        // This is null when the plugin is initially created, but
	        // initialized on the first update.
	        this.value = null;
	    }
	    update(view) {
	        if (!this.value) {
	            if (this.spec) {
	                try {
	                    this.value = this.spec.create(view);
	                }
	                catch (e) {
	                    logException(view.state, e, "CodeMirror plugin crashed");
	                    this.deactivate();
	                }
	            }
	        }
	        else if (this.mustUpdate) {
	            let update = this.mustUpdate;
	            this.mustUpdate = null;
	            if (this.value.update) {
	                try {
	                    this.value.update(update);
	                }
	                catch (e) {
	                    logException(update.state, e, "CodeMirror plugin crashed");
	                    if (this.value.destroy)
	                        try {
	                            this.value.destroy();
	                        }
	                        catch (_) { }
	                    this.deactivate();
	                }
	            }
	        }
	        return this;
	    }
	    destroy(view) {
	        var _a;
	        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
	            try {
	                this.value.destroy();
	            }
	            catch (e) {
	                logException(view.state, e, "CodeMirror plugin crashed");
	            }
	        }
	    }
	    deactivate() {
	        this.spec = this.value = null;
	    }
	}
	const editorAttributes = /*@__PURE__*/Facet.define();
	const contentAttributes = /*@__PURE__*/Facet.define();
	// Provide decorations
	const decorations = /*@__PURE__*/Facet.define();
	const outerDecorations = /*@__PURE__*/Facet.define();
	const atomicRanges = /*@__PURE__*/Facet.define();
	const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
	function getIsolatedRanges(view, line) {
	    let isolates = view.state.facet(bidiIsolatedRanges);
	    if (!isolates.length)
	        return isolates;
	    let sets = isolates.map(i => i instanceof Function ? i(view) : i);
	    let result = [];
	    RangeSet.spans(sets, line.from, line.to, {
	        point() { },
	        span(fromDoc, toDoc, active, open) {
	            let from = fromDoc - line.from, to = toDoc - line.from;
	            let level = result;
	            for (let i = active.length - 1; i >= 0; i--, open--) {
	                let direction = active[i].spec.bidiIsolate, update;
	                if (direction == null)
	                    direction = autoDirection(line.text, from, to);
	                if (open > 0 && level.length &&
	                    (update = level[level.length - 1]).to == from && update.direction == direction) {
	                    update.to = to;
	                    level = update.inner;
	                }
	                else {
	                    let add = { from, to, direction, inner: [] };
	                    level.push(add);
	                    level = add.inner;
	                }
	            }
	        }
	    });
	    return result;
	}
	const scrollMargins = /*@__PURE__*/Facet.define();
	function getScrollMargins(view) {
	    let left = 0, right = 0, top = 0, bottom = 0;
	    for (let source of view.state.facet(scrollMargins)) {
	        let m = source(view);
	        if (m) {
	            if (m.left != null)
	                left = Math.max(left, m.left);
	            if (m.right != null)
	                right = Math.max(right, m.right);
	            if (m.top != null)
	                top = Math.max(top, m.top);
	            if (m.bottom != null)
	                bottom = Math.max(bottom, m.bottom);
	        }
	    }
	    return { left, right, top, bottom };
	}
	const styleModule = /*@__PURE__*/Facet.define();
	class ChangedRange {
	    constructor(fromA, toA, fromB, toB) {
	        this.fromA = fromA;
	        this.toA = toA;
	        this.fromB = fromB;
	        this.toB = toB;
	    }
	    join(other) {
	        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
	    }
	    addToSet(set) {
	        let i = set.length, me = this;
	        for (; i > 0; i--) {
	            let range = set[i - 1];
	            if (range.fromA > me.toA)
	                continue;
	            if (range.toA < me.fromA)
	                break;
	            me = me.join(range);
	            set.splice(i - 1, 1);
	        }
	        set.splice(i, 0, me);
	        return set;
	    }
	    static extendWithRanges(diff, ranges) {
	        if (ranges.length == 0)
	            return diff;
	        let result = [];
	        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
	            let next = dI == diff.length ? null : diff[dI], off = posA - posB;
	            let end = next ? next.fromB : 1e9;
	            while (rI < ranges.length && ranges[rI] < end) {
	                let from = ranges[rI], to = ranges[rI + 1];
	                let fromB = Math.max(posB, from), toB = Math.min(end, to);
	                if (fromB <= toB)
	                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
	                if (to > end)
	                    break;
	                else
	                    rI += 2;
	            }
	            if (!next)
	                return result;
	            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
	            posA = next.toA;
	            posB = next.toB;
	        }
	    }
	}
	/**
	View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
	class, which describe what happened, whenever the view is updated.
	*/
	class ViewUpdate {
	    constructor(
	    /**
	    The editor view that the update is associated with.
	    */
	    view, 
	    /**
	    The new editor state.
	    */
	    state, 
	    /**
	    The transactions involved in the update. May be empty.
	    */
	    transactions) {
	        this.view = view;
	        this.state = state;
	        this.transactions = transactions;
	        /**
	        @internal
	        */
	        this.flags = 0;
	        this.startState = view.state;
	        this.changes = ChangeSet.empty(this.startState.doc.length);
	        for (let tr of transactions)
	            this.changes = this.changes.compose(tr.changes);
	        let changedRanges = [];
	        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
	        this.changedRanges = changedRanges;
	    }
	    /**
	    @internal
	    */
	    static create(view, state, transactions) {
	        return new ViewUpdate(view, state, transactions);
	    }
	    /**
	    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
	    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
	    update.
	    */
	    get viewportChanged() {
	        return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
	    }
	    /**
	    Indicates whether the height of a block element in the editor
	    changed in this update.
	    */
	    get heightChanged() {
	        return (this.flags & 2 /* UpdateFlag.Height */) > 0;
	    }
	    /**
	    Returns true when the document was modified or the size of the
	    editor, or elements within the editor, changed.
	    */
	    get geometryChanged() {
	        return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
	    }
	    /**
	    True when this update indicates a focus change.
	    */
	    get focusChanged() {
	        return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
	    }
	    /**
	    Whether the document changed in this update.
	    */
	    get docChanged() {
	        return !this.changes.empty;
	    }
	    /**
	    Whether the selection was explicitly set in this update.
	    */
	    get selectionSet() {
	        return this.transactions.some(tr => tr.selection);
	    }
	    /**
	    @internal
	    */
	    get empty() { return this.flags == 0 && this.transactions.length == 0; }
	}

	class DocView extends ContentView {
	    get length() { return this.view.state.doc.length; }
	    constructor(view) {
	        super();
	        this.view = view;
	        this.decorations = [];
	        this.dynamicDecorationMap = [];
	        this.domChanged = null;
	        this.hasComposition = null;
	        this.markedForComposition = new Set;
	        // Track a minimum width for the editor. When measuring sizes in
	        // measureVisibleLineHeights, this is updated to point at the width
	        // of a given element and its extent in the document. When a change
	        // happens in that range, these are reset. That way, once we've seen
	        // a line/element of a given length, we keep the editor wide enough
	        // to fit at least that element, until it is changed, at which point
	        // we forget it again.
	        this.minWidth = 0;
	        this.minWidthFrom = 0;
	        this.minWidthTo = 0;
	        // Track whether the DOM selection was set in a lossy way, so that
	        // we don't mess it up when reading it back it
	        this.impreciseAnchor = null;
	        this.impreciseHead = null;
	        this.forceSelection = false;
	        // Used by the resize observer to ignore resizes that we caused
	        // ourselves
	        this.lastUpdate = Date.now();
	        this.setDOM(view.contentDOM);
	        this.children = [new LineView];
	        this.children[0].setParent(this);
	        this.updateDeco();
	        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
	    }
	    // Update the document view to a given state.
	    update(update) {
	        var _a;
	        let changedRanges = update.changedRanges;
	        if (this.minWidth > 0 && changedRanges.length) {
	            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
	                this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
	            }
	            else {
	                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
	                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
	            }
	        }
	        let readCompositionAt = -1;
	        if (this.view.inputState.composing >= 0) {
	            if ((_a = this.domChanged) === null || _a === void 0 ? void 0 : _a.newSel)
	                readCompositionAt = this.domChanged.newSel.head;
	            else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
	                readCompositionAt = update.state.selection.main.head;
	        }
	        let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
	        this.domChanged = null;
	        if (this.hasComposition) {
	            this.markedForComposition.clear();
	            let { from, to } = this.hasComposition;
	            changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
	                .addToSet(changedRanges.slice());
	        }
	        this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
	        // When the DOM nodes around the selection are moved to another
	        // parent, Chrome sometimes reports a different selection through
	        // getSelection than the one that it actually shows to the user.
	        // This forces a selection update when lines are joined to work
	        // around that. Issue #54
	        if ((browser.ie || browser.chrome) && !composition && update &&
	            update.state.doc.lines != update.startState.doc.lines)
	            this.forceSelection = true;
	        let prevDeco = this.decorations, deco = this.updateDeco();
	        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
	        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
	        if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
	            return false;
	        }
	        else {
	            this.updateInner(changedRanges, update.startState.doc.length, composition);
	            if (update.transactions.length)
	                this.lastUpdate = Date.now();
	            return true;
	        }
	    }
	    // Used by update and the constructor do perform the actual DOM
	    // update
	    updateInner(changes, oldLength, composition) {
	        this.view.viewState.mustMeasureContent = true;
	        this.updateChildren(changes, oldLength, composition);
	        let { observer } = this.view;
	        observer.ignore(() => {
	            // Lock the height during redrawing, since Chrome sometimes
	            // messes with the scroll position during DOM mutation (though
	            // no relayout is triggered and I cannot imagine how it can
	            // recompute the scroll position without a layout)
	            this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
	            this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
	            // Chrome will sometimes, when DOM mutations occur directly
	            // around the selection, get confused and report a different
	            // selection from the one it displays (issue #218). This tries
	            // to detect that situation.
	            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
	            this.sync(this.view, track);
	            this.flags &= ~7 /* ViewFlag.Dirty */;
	            if (track && (track.written || observer.selectionRange.focusNode != track.node))
	                this.forceSelection = true;
	            this.dom.style.height = "";
	        });
	        this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
	        let gaps = [];
	        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
	            for (let child of this.children)
	                if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
	                    gaps.push(child.dom);
	        observer.updateGaps(gaps);
	    }
	    updateChildren(changes, oldLength, composition) {
	        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
	        let cursor = this.childCursor(oldLength);
	        for (let i = ranges.length - 1;; i--) {
	            let next = i >= 0 ? ranges[i] : null;
	            if (!next)
	                break;
	            let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
	            if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
	                let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
	                let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
	                breakAtStart = before.breakAtStart;
	                openStart = before.openStart;
	                openEnd = after.openEnd;
	                let compLine = this.compositionView(composition);
	                if (after.breakAtStart) {
	                    compLine.breakAfter = 1;
	                }
	                else if (after.content.length &&
	                    compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
	                    compLine.breakAfter = after.content[0].breakAfter;
	                    after.content.shift();
	                }
	                if (before.content.length &&
	                    compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
	                    before.content.pop();
	                }
	                content = before.content.concat(compLine).concat(after.content);
	            }
	            else {
	                ({ content, breakAtStart, openStart, openEnd } =
	                    ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
	            }
	            let { i: toI, off: toOff } = cursor.findPos(toA, 1);
	            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
	            replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
	        }
	        if (composition)
	            this.fixCompositionDOM(composition);
	    }
	    compositionView(composition) {
	        let cur = new TextView(composition.text.nodeValue);
	        cur.flags |= 8 /* ViewFlag.Composition */;
	        for (let { deco } of composition.marks)
	            cur = new MarkView(deco, [cur], cur.length);
	        let line = new LineView;
	        line.append(cur, 0);
	        return line;
	    }
	    fixCompositionDOM(composition) {
	        let fix = (dom, cView) => {
	            cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
	            this.markedForComposition.add(cView);
	            let prev = ContentView.get(dom);
	            if (prev && prev != cView)
	                prev.dom = null;
	            cView.setDOM(dom);
	        };
	        let pos = this.childPos(composition.range.fromB, 1);
	        let cView = this.children[pos.i];
	        fix(composition.line, cView);
	        for (let i = composition.marks.length - 1; i >= -1; i--) {
	            pos = cView.childPos(pos.off, 1);
	            cView = cView.children[pos.i];
	            fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
	        }
	    }
	    // Sync the DOM selection to this.state.selection
	    updateSelection(mustRead = false, fromPointer = false) {
	        if (mustRead || !this.view.observer.selectionRange.focusNode)
	            this.view.observer.readSelectionRange();
	        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
	        let selectionNotFocus = !focused &&
	            hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
	        if (!(focused || fromPointer || selectionNotFocus))
	            return;
	        let force = this.forceSelection;
	        this.forceSelection = false;
	        let main = this.view.state.selection.main;
	        let anchor = this.moveToLine(this.domAtPos(main.anchor));
	        let head = main.empty ? anchor : this.moveToLine(this.domAtPos(main.head));
	        // Always reset on Firefox when next to an uneditable node to
	        // avoid invisible cursor bugs (#111)
	        if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
	            let dummy = document.createTextNode("");
	            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
	            anchor = head = new DOMPos(dummy, 0);
	            force = true;
	        }
	        let domSel = this.view.observer.selectionRange;
	        // If the selection is already here, or in an equivalent position, don't touch it
	        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
	            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main)) {
	            this.view.observer.ignore(() => {
	                // Chrome Android will hide the virtual keyboard when tapping
	                // inside an uneditable node, and not bring it back when we
	                // move the cursor to its proper position. This tries to
	                // restore the keyboard by cycling focus.
	                if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
	                    inUneditable(domSel.focusNode, this.dom)) {
	                    this.dom.blur();
	                    this.dom.focus({ preventScroll: true });
	                }
	                let rawSel = getSelection(this.view.root);
	                if (!rawSel) ;
	                else if (main.empty) {
	                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
	                    if (browser.gecko) {
	                        let nextTo = nextToUneditable(anchor.node, anchor.offset);
	                        if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
	                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
	                            if (text)
	                                anchor = new DOMPos(text.node, text.offset);
	                        }
	                    }
	                    rawSel.collapse(anchor.node, anchor.offset);
	                    if (main.bidiLevel != null && rawSel.caretBidiLevel !== undefined)
	                        rawSel.caretBidiLevel = main.bidiLevel;
	                }
	                else if (rawSel.extend) {
	                    // Selection.extend can be used to create an 'inverted' selection
	                    // (one where the focus is before the anchor), but not all
	                    // browsers support it yet.
	                    rawSel.collapse(anchor.node, anchor.offset);
	                    // Safari will ignore the call above when the editor is
	                    // hidden, and then raise an error on the call to extend
	                    // (#940).
	                    try {
	                        rawSel.extend(head.node, head.offset);
	                    }
	                    catch (_) { }
	                }
	                else {
	                    // Primitive (IE) way
	                    let range = document.createRange();
	                    if (main.anchor > main.head)
	                        [anchor, head] = [head, anchor];
	                    range.setEnd(head.node, head.offset);
	                    range.setStart(anchor.node, anchor.offset);
	                    rawSel.removeAllRanges();
	                    rawSel.addRange(range);
	                }
	                if (selectionNotFocus && this.view.root.activeElement == this.dom) {
	                    this.dom.blur();
	                    if (activeElt)
	                        activeElt.focus();
	                }
	            });
	            this.view.observer.setSelectionRange(anchor, head);
	        }
	        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
	        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
	    }
	    // If a zero-length widget is inserted next to the cursor during
	    // composition, avoid moving it across it and disrupting the
	    // composition.
	    suppressWidgetCursorChange(sel, cursor) {
	        return this.hasComposition && cursor.empty &&
	            isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) &&
	            this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
	    }
	    enforceCursorAssoc() {
	        if (this.hasComposition)
	            return;
	        let { view } = this, cursor = view.state.selection.main;
	        let sel = getSelection(view.root);
	        let { anchorNode, anchorOffset } = view.observer.selectionRange;
	        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
	            return;
	        let line = LineView.find(this, cursor.head);
	        if (!line)
	            return;
	        let lineStart = line.posAtStart;
	        if (cursor.head == lineStart || cursor.head == lineStart + line.length)
	            return;
	        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
	        if (!before || !after || before.bottom > after.top)
	            return;
	        let dom = this.domAtPos(cursor.head + cursor.assoc);
	        sel.collapse(dom.node, dom.offset);
	        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
	        // This can go wrong in corner cases like single-character lines,
	        // so check and reset if necessary.
	        view.observer.readSelectionRange();
	        let newRange = view.observer.selectionRange;
	        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
	            sel.collapse(anchorNode, anchorOffset);
	    }
	    // If a position is in/near a block widget, move it to a nearby text
	    // line, since we don't want the cursor inside a block widget.
	    moveToLine(pos) {
	        // Block widgets will return positions before/after them, which
	        // are thus directly in the document DOM element.
	        let dom = this.dom, newPos;
	        if (pos.node != dom)
	            return pos;
	        for (let i = pos.offset; !newPos && i < dom.childNodes.length; i++) {
	            let view = ContentView.get(dom.childNodes[i]);
	            if (view instanceof LineView)
	                newPos = view.domAtPos(0);
	        }
	        for (let i = pos.offset - 1; !newPos && i >= 0; i--) {
	            let view = ContentView.get(dom.childNodes[i]);
	            if (view instanceof LineView)
	                newPos = view.domAtPos(view.length);
	        }
	        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos;
	    }
	    nearest(dom) {
	        for (let cur = dom; cur;) {
	            let domView = ContentView.get(cur);
	            if (domView && domView.rootView == this)
	                return domView;
	            cur = cur.parentNode;
	        }
	        return null;
	    }
	    posFromDOM(node, offset) {
	        let view = this.nearest(node);
	        if (!view)
	            throw new RangeError("Trying to find position for a DOM position outside of the document");
	        return view.localPosFromDOM(node, offset) + view.posAtStart;
	    }
	    domAtPos(pos) {
	        let { i, off } = this.childCursor().findPos(pos, -1);
	        for (; i < this.children.length - 1;) {
	            let child = this.children[i];
	            if (off < child.length || child instanceof LineView)
	                break;
	            i++;
	            off = 0;
	        }
	        return this.children[i].domAtPos(off);
	    }
	    coordsAt(pos, side) {
	        let best = null, bestPos = 0;
	        for (let off = this.length, i = this.children.length - 1; i >= 0; i--) {
	            let child = this.children[i], end = off - child.breakAfter, start = end - child.length;
	            if (end < pos)
	                break;
	            if (start <= pos && (start < pos || child.covers(-1)) && (end > pos || child.covers(1)) &&
	                (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
	                best = child;
	                bestPos = start;
	            }
	            off = start;
	        }
	        return best ? best.coordsAt(pos - bestPos, side) : null;
	    }
	    coordsForChar(pos) {
	        let { i, off } = this.childPos(pos, 1), child = this.children[i];
	        if (!(child instanceof LineView))
	            return null;
	        while (child.children.length) {
	            let { i, off: childOff } = child.childPos(off, 1);
	            for (;; i++) {
	                if (i == child.children.length)
	                    return null;
	                if ((child = child.children[i]).length)
	                    break;
	            }
	            off = childOff;
	        }
	        if (!(child instanceof TextView))
	            return null;
	        let end = findClusterBreak(child.text, off);
	        if (end == off)
	            return null;
	        let rects = textRange(child.dom, off, end).getClientRects();
	        for (let i = 0; i < rects.length; i++) {
	            let rect = rects[i];
	            if (i == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
	                return rect;
	        }
	        return null;
	    }
	    measureVisibleLineHeights(viewport) {
	        let result = [], { from, to } = viewport;
	        let contentWidth = this.view.contentDOM.clientWidth;
	        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
	        let widest = -1, ltr = this.view.textDirection == Direction.LTR;
	        for (let pos = 0, i = 0; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (end > to)
	                break;
	            if (pos >= from) {
	                let childRect = child.dom.getBoundingClientRect();
	                result.push(childRect.height);
	                if (isWider) {
	                    let last = child.dom.lastChild;
	                    let rects = last ? clientRectsFor(last) : [];
	                    if (rects.length) {
	                        let rect = rects[rects.length - 1];
	                        let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
	                        if (width > widest) {
	                            widest = width;
	                            this.minWidth = contentWidth;
	                            this.minWidthFrom = pos;
	                            this.minWidthTo = end;
	                        }
	                    }
	                }
	            }
	            pos = end + child.breakAfter;
	        }
	        return result;
	    }
	    textDirectionAt(pos) {
	        let { i } = this.childPos(pos, 1);
	        return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
	    }
	    measureTextSize() {
	        for (let child of this.children) {
	            if (child instanceof LineView) {
	                let measure = child.measureTextSize();
	                if (measure)
	                    return measure;
	            }
	        }
	        // If no workable line exists, force a layout of a measurable element
	        let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
	        dummy.className = "cm-line";
	        dummy.style.width = "99999px";
	        dummy.style.position = "absolute";
	        dummy.textContent = "abc def ghi jkl mno pqr stu";
	        this.view.observer.ignore(() => {
	            this.dom.appendChild(dummy);
	            let rect = clientRectsFor(dummy.firstChild)[0];
	            lineHeight = dummy.getBoundingClientRect().height;
	            charWidth = rect ? rect.width / 27 : 7;
	            textHeight = rect ? rect.height : lineHeight;
	            dummy.remove();
	        });
	        return { lineHeight, charWidth, textHeight };
	    }
	    childCursor(pos = this.length) {
	        // Move back to start of last element when possible, so that
	        // `ChildCursor.findPos` doesn't have to deal with the edge case
	        // of being after the last element.
	        let i = this.children.length;
	        if (i)
	            pos -= this.children[--i].length;
	        return new ChildCursor(this.children, pos, i);
	    }
	    computeBlockGapDeco() {
	        let deco = [], vs = this.view.viewState;
	        for (let pos = 0, i = 0;; i++) {
	            let next = i == vs.viewports.length ? null : vs.viewports[i];
	            let end = next ? next.from - 1 : this.length;
	            if (end > pos) {
	                let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
	                deco.push(Decoration.replace({
	                    widget: new BlockGapWidget(height),
	                    block: true,
	                    inclusive: true,
	                    isBlockGap: true,
	                }).range(pos, end));
	            }
	            if (!next)
	                break;
	            pos = next.to + 1;
	        }
	        return Decoration.set(deco);
	    }
	    updateDeco() {
	        let allDeco = this.view.state.facet(decorations).map((d, i) => {
	            let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
	            return dynamic ? d(this.view) : d;
	        });
	        let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d, i) => {
	            let dynamic = typeof d == "function";
	            if (dynamic)
	                dynamicOuter = true;
	            return dynamic ? d(this.view) : d;
	        });
	        if (outerDeco.length) {
	            this.dynamicDecorationMap[allDeco.length] = dynamicOuter;
	            allDeco.push(RangeSet.join(outerDeco));
	        }
	        for (let i = allDeco.length; i < allDeco.length + 3; i++)
	            this.dynamicDecorationMap[i] = false;
	        return this.decorations = [
	            ...allDeco,
	            this.computeBlockGapDeco(),
	            this.view.viewState.lineGapDeco
	        ];
	    }
	    scrollIntoView(target) {
	        if (target.isSnapshot) {
	            let ref = this.view.viewState.lineBlockAt(target.range.head);
	            this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
	            this.view.scrollDOM.scrollLeft = target.xMargin;
	            return;
	        }
	        let { range } = target;
	        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
	        if (!rect)
	            return;
	        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
	            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
	                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
	        let margins = getScrollMargins(this.view);
	        let targetRect = {
	            left: rect.left - margins.left, top: rect.top - margins.top,
	            right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
	        };
	        let { offsetWidth, offsetHeight } = this.view.scrollDOM;
	        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
	    }
	}
	function betweenUneditable(pos) {
	    return pos.node.nodeType == 1 && pos.node.firstChild &&
	        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
	        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
	}
	class BlockGapWidget extends WidgetType {
	    constructor(height) {
	        super();
	        this.height = height;
	    }
	    toDOM() {
	        let elt = document.createElement("div");
	        elt.className = "cm-gap";
	        this.updateDOM(elt);
	        return elt;
	    }
	    eq(other) { return other.height == this.height; }
	    updateDOM(elt) {
	        elt.style.height = this.height + "px";
	        return true;
	    }
	    get editable() { return true; }
	    get estimatedHeight() { return this.height; }
	}
	function findCompositionNode(view, headPos) {
	    let sel = view.observer.selectionRange;
	    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
	    if (!textNode)
	        return null;
	    let from = headPos - textNode.offset;
	    return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
	}
	function findCompositionRange(view, changes, headPos) {
	    let found = findCompositionNode(view, headPos);
	    if (!found)
	        return null;
	    let { node: textNode, from, to } = found, text = textNode.nodeValue;
	    // Don't try to preserve multi-line compositions
	    if (/[\n\r]/.test(text))
	        return null;
	    if (view.state.doc.sliceString(found.from, found.to) != text)
	        return null;
	    let inv = changes.invertedDesc;
	    let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
	    let marks = [];
	    for (let parent = textNode.parentNode;; parent = parent.parentNode) {
	        let parentView = ContentView.get(parent);
	        if (parentView instanceof MarkView)
	            marks.push({ node: parent, deco: parentView.mark });
	        else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
	            return { range, text: textNode, marks, line: parent };
	        else if (parent != view.contentDOM)
	            marks.push({ node: parent, deco: new MarkDecoration({
	                    inclusive: true,
	                    attributes: getAttrs(parent),
	                    tagName: parent.tagName.toLowerCase()
	                }) });
	        else
	            return null;
	    }
	}
	function nearbyTextNode(startNode, startOffset, side) {
	    if (side <= 0)
	        for (let node = startNode, offset = startOffset;;) {
	            if (node.nodeType == 3)
	                return { node: node, offset: offset };
	            if (node.nodeType == 1 && offset > 0) {
	                node = node.childNodes[offset - 1];
	                offset = maxOffset(node);
	            }
	            else {
	                break;
	            }
	        }
	    if (side >= 0)
	        for (let node = startNode, offset = startOffset;;) {
	            if (node.nodeType == 3)
	                return { node: node, offset: offset };
	            if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
	                node = node.childNodes[offset];
	                offset = 0;
	            }
	            else {
	                break;
	            }
	        }
	    return null;
	}
	function nextToUneditable(node, offset) {
	    if (node.nodeType != 1)
	        return 0;
	    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
	        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
	}
	let DecorationComparator$1 = class DecorationComparator {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange(from, to) { addRange(from, to, this.changes); }
	    comparePoint(from, to) { addRange(from, to, this.changes); }
	};
	function findChangedDeco(a, b, diff) {
	    let comp = new DecorationComparator$1;
	    RangeSet.compare(a, b, diff, comp);
	    return comp.changes;
	}
	function inUneditable(node, inside) {
	    for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
	        if (cur.nodeType == 1 && cur.contentEditable == 'false') {
	            return true;
	        }
	    }
	    return false;
	}
	function touchesComposition(changes, composition) {
	    let touched = false;
	    if (composition)
	        changes.iterChangedRanges((from, to) => {
	            if (from < composition.to && to > composition.from)
	                touched = true;
	        });
	    return touched;
	}

	function groupAt(state, pos, bias = 1) {
	    let categorize = state.charCategorizer(pos);
	    let line = state.doc.lineAt(pos), linePos = pos - line.from;
	    if (line.length == 0)
	        return EditorSelection.cursor(pos);
	    if (linePos == 0)
	        bias = 1;
	    else if (linePos == line.length)
	        bias = -1;
	    let from = linePos, to = linePos;
	    if (bias < 0)
	        from = findClusterBreak(line.text, linePos, false);
	    else
	        to = findClusterBreak(line.text, linePos);
	    let cat = categorize(line.text.slice(from, to));
	    while (from > 0) {
	        let prev = findClusterBreak(line.text, from, false);
	        if (categorize(line.text.slice(prev, from)) != cat)
	            break;
	        from = prev;
	    }
	    while (to < line.length) {
	        let next = findClusterBreak(line.text, to);
	        if (categorize(line.text.slice(to, next)) != cat)
	            break;
	        to = next;
	    }
	    return EditorSelection.range(from + line.from, to + line.from);
	}
	// Search the DOM for the {node, offset} position closest to the given
	// coordinates. Very inefficient and crude, but can usually be avoided
	// by calling caret(Position|Range)FromPoint instead.
	function getdx(x, rect) {
	    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
	}
	function getdy(y, rect) {
	    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
	}
	function yOverlap(a, b) {
	    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
	}
	function upTop(rect, top) {
	    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
	}
	function upBot(rect, bottom) {
	    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
	}
	function domPosAtCoords(parent, x, y) {
	    let closest, closestRect, closestX, closestY, closestOverlap = false;
	    let above, below, aboveRect, belowRect;
	    for (let child = parent.firstChild; child; child = child.nextSibling) {
	        let rects = clientRectsFor(child);
	        for (let i = 0; i < rects.length; i++) {
	            let rect = rects[i];
	            if (closestRect && yOverlap(closestRect, rect))
	                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
	            let dx = getdx(x, rect), dy = getdy(y, rect);
	            if (dx == 0 && dy == 0)
	                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
	            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
	                closest = child;
	                closestRect = rect;
	                closestX = dx;
	                closestY = dy;
	                let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
	                closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
	            }
	            if (dx == 0) {
	                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
	                    above = child;
	                    aboveRect = rect;
	                }
	                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
	                    below = child;
	                    belowRect = rect;
	                }
	            }
	            else if (aboveRect && yOverlap(aboveRect, rect)) {
	                aboveRect = upBot(aboveRect, rect.bottom);
	            }
	            else if (belowRect && yOverlap(belowRect, rect)) {
	                belowRect = upTop(belowRect, rect.top);
	            }
	        }
	    }
	    if (aboveRect && aboveRect.bottom >= y) {
	        closest = above;
	        closestRect = aboveRect;
	    }
	    else if (belowRect && belowRect.top <= y) {
	        closest = below;
	        closestRect = belowRect;
	    }
	    if (!closest)
	        return { node: parent, offset: 0 };
	    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
	    if (closest.nodeType == 3)
	        return domPosInText(closest, clipX, y);
	    if (closestOverlap && closest.contentEditable != "false")
	        return domPosAtCoords(closest, clipX, y);
	    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
	        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
	    return { node: parent, offset };
	}
	function domPosInText(node, x, y) {
	    let len = node.nodeValue.length;
	    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
	    for (let i = 0; i < len; i++) {
	        let rects = textRange(node, i, i + 1).getClientRects();
	        for (let j = 0; j < rects.length; j++) {
	            let rect = rects[j];
	            if (rect.top == rect.bottom)
	                continue;
	            if (!generalSide)
	                generalSide = x - rect.left;
	            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
	            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
	                let right = x >= (rect.left + rect.right) / 2, after = right;
	                if (browser.chrome || browser.gecko) {
	                    // Check for RTL on browsers that support getting client
	                    // rects for empty ranges.
	                    let rectBefore = textRange(node, i).getBoundingClientRect();
	                    if (rectBefore.left == rect.right)
	                        after = !right;
	                }
	                if (dy <= 0)
	                    return { node, offset: i + (after ? 1 : 0) };
	                closestOffset = i + (after ? 1 : 0);
	                closestDY = dy;
	            }
	        }
	    }
	    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
	}
	function posAtCoords(view, coords, precise, bias = -1) {
	    var _a, _b;
	    let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
	    let block, { docHeight } = view.viewState;
	    let { x, y } = coords, yOffset = y - docTop;
	    if (yOffset < 0)
	        return 0;
	    if (yOffset > docHeight)
	        return view.state.doc.length;
	    // Scan for a text block near the queried y position
	    for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
	        block = view.elementAtHeight(yOffset);
	        if (block.type == BlockType.Text)
	            break;
	        for (;;) {
	            // Move the y position out of this block
	            yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
	            if (yOffset >= 0 && yOffset <= docHeight)
	                break;
	            // If the document consists entirely of replaced widgets, we
	            // won't find a text block, so return 0
	            if (bounced)
	                return precise ? null : 0;
	            bounced = true;
	            bias = -bias;
	        }
	    }
	    y = docTop + yOffset;
	    let lineStart = block.from;
	    // If this is outside of the rendered viewport, we can't determine a position
	    if (lineStart < view.viewport.from)
	        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
	    if (lineStart > view.viewport.to)
	        return view.viewport.to == view.state.doc.length ? view.state.doc.length :
	            precise ? null : posAtCoordsImprecise(view, content, block, x, y);
	    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
	    let doc = view.dom.ownerDocument;
	    let root = view.root.elementFromPoint ? view.root : doc;
	    let element = root.elementFromPoint(x, y);
	    if (element && !view.contentDOM.contains(element))
	        element = null;
	    // If the element is unexpected, clip x at the sides of the content area and try again
	    if (!element) {
	        x = Math.max(content.left + 1, Math.min(content.right - 1, x));
	        element = root.elementFromPoint(x, y);
	        if (element && !view.contentDOM.contains(element))
	            element = null;
	    }
	    // There's visible editor content under the point, so we can try
	    // using caret(Position|Range)FromPoint as a shortcut
	    let node, offset = -1;
	    if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
	        if (doc.caretPositionFromPoint) {
	            let pos = doc.caretPositionFromPoint(x, y);
	            if (pos)
	                ({ offsetNode: node, offset } = pos);
	        }
	        else if (doc.caretRangeFromPoint) {
	            let range = doc.caretRangeFromPoint(x, y);
	            if (range) {
	                ({ startContainer: node, startOffset: offset } = range);
	                if (!view.contentDOM.contains(node) ||
	                    browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
	                    browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
	                    node = undefined;
	            }
	        }
	    }
	    // No luck, do our own (potentially expensive) search
	    if (!node || !view.docView.dom.contains(node)) {
	        let line = LineView.find(view.docView, lineStart);
	        if (!line)
	            return yOffset > block.top + block.height / 2 ? block.to : block.from;
	        ({ node, offset } = domPosAtCoords(line.dom, x, y));
	    }
	    let nearest = view.docView.nearest(node);
	    if (!nearest)
	        return null;
	    if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
	        let rect = nearest.dom.getBoundingClientRect();
	        return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
	            ? nearest.posAtStart : nearest.posAtEnd;
	    }
	    else {
	        return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
	    }
	}
	function posAtCoordsImprecise(view, contentRect, block, x, y) {
	    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
	    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
	        let textHeight = view.viewState.heightOracle.textHeight;
	        let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
	        into += line * view.viewState.heightOracle.lineLength;
	    }
	    let content = view.state.sliceDoc(block.from, block.to);
	    return block.from + findColumn(content, into, view.state.tabSize);
	}
	// In case of a high line height, Safari's caretRangeFromPoint treats
	// the space between lines as belonging to the last character of the
	// line before. This is used to detect such a result so that it can be
	// ignored (issue #401).
	function isSuspiciousSafariCaretResult(node, offset, x) {
	    let len;
	    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
	        return false;
	    for (let next = node.nextSibling; next; next = next.nextSibling)
	        if (next.nodeType != 1 || next.nodeName != "BR")
	            return false;
	    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
	}
	// Chrome will move positions between lines to the start of the next line
	function isSuspiciousChromeCaretResult(node, offset, x) {
	    if (offset != 0)
	        return false;
	    for (let cur = node;;) {
	        let parent = cur.parentNode;
	        if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
	            return false;
	        if (parent.classList.contains("cm-line"))
	            break;
	        cur = parent;
	    }
	    let rect = node.nodeType == 1 ? node.getBoundingClientRect()
	        : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
	    return x - rect.left > 5;
	}
	function blockAt(view, pos) {
	    let line = view.lineBlockAt(pos);
	    if (Array.isArray(line.type))
	        for (let l of line.type) {
	            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
	                return l;
	        }
	    return line;
	}
	function moveToLineBoundary(view, start, forward, includeWrap) {
	    let line = blockAt(view, start.head);
	    let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
	        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
	    if (coords) {
	        let editorRect = view.dom.getBoundingClientRect();
	        let direction = view.textDirectionAt(line.from);
	        let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
	            y: (coords.top + coords.bottom) / 2 });
	        if (pos != null)
	            return EditorSelection.cursor(pos, forward ? -1 : 1);
	    }
	    return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
	}
	function moveByChar(view, start, forward, by) {
	    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
	    let direction = view.textDirectionAt(line.from);
	    for (let cur = start, check = null;;) {
	        let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
	        if (!next) {
	            if (line.number == (forward ? view.state.doc.lines : 1))
	                return cur;
	            char = "\n";
	            line = view.state.doc.line(line.number + (forward ? 1 : -1));
	            spans = view.bidiSpans(line);
	            next = view.visualLineSide(line, !forward);
	        }
	        if (!check) {
	            if (!by)
	                return next;
	            check = by(char);
	        }
	        else if (!check(char)) {
	            return cur;
	        }
	        cur = next;
	    }
	}
	function byGroup(view, pos, start) {
	    let categorize = view.state.charCategorizer(pos);
	    let cat = categorize(start);
	    return (next) => {
	        let nextCat = categorize(next);
	        if (cat == CharCategory.Space)
	            cat = nextCat;
	        return cat == nextCat;
	    };
	}
	function moveVertically(view, start, forward, distance) {
	    let startPos = start.head, dir = forward ? 1 : -1;
	    if (startPos == (forward ? view.state.doc.length : 0))
	        return EditorSelection.cursor(startPos, start.assoc);
	    let goal = start.goalColumn, startY;
	    let rect = view.contentDOM.getBoundingClientRect();
	    let startCoords = view.coordsAtPos(startPos, start.assoc || -1), docTop = view.documentTop;
	    if (startCoords) {
	        if (goal == null)
	            goal = startCoords.left - rect.left;
	        startY = dir < 0 ? startCoords.top : startCoords.bottom;
	    }
	    else {
	        let line = view.viewState.lineBlockAt(startPos);
	        if (goal == null)
	            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
	        startY = (dir < 0 ? line.top : line.bottom) + docTop;
	    }
	    let resolvedGoal = rect.left + goal;
	    let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
	    for (let extra = 0;; extra += 10) {
	        let curY = startY + (dist + extra) * dir;
	        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
	        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) {
	            let charRect = view.docView.coordsForChar(pos);
	            let assoc = !charRect || curY < charRect.top ? -1 : 1;
	            return EditorSelection.cursor(pos, assoc, undefined, goal);
	        }
	    }
	}
	function skipAtomicRanges(atoms, pos, bias) {
	    for (;;) {
	        let moved = 0;
	        for (let set of atoms) {
	            set.between(pos - 1, pos + 1, (from, to, value) => {
	                if (pos > from && pos < to) {
	                    let side = moved || bias || (pos - from < to - pos ? -1 : 1);
	                    pos = side < 0 ? from : to;
	                    moved = side;
	                }
	            });
	        }
	        if (!moved)
	            return pos;
	    }
	}
	function skipAtoms(view, oldPos, pos) {
	    let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
	    return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
	}

	// This will also be where dragging info and such goes
	class InputState {
	    setSelectionOrigin(origin) {
	        this.lastSelectionOrigin = origin;
	        this.lastSelectionTime = Date.now();
	    }
	    constructor(view) {
	        this.view = view;
	        this.lastKeyCode = 0;
	        this.lastKeyTime = 0;
	        this.lastTouchTime = 0;
	        this.lastFocusTime = 0;
	        this.lastScrollTop = 0;
	        this.lastScrollLeft = 0;
	        // On iOS, some keys need to have their default behavior happen
	        // (after which we retroactively handle them and reset the DOM) to
	        // avoid messing up the virtual keyboard state.
	        this.pendingIOSKey = undefined;
	        this.lastSelectionOrigin = null;
	        this.lastSelectionTime = 0;
	        this.lastEscPress = 0;
	        this.lastContextMenu = 0;
	        this.scrollHandlers = [];
	        this.handlers = Object.create(null);
	        // -1 means not in a composition. Otherwise, this counts the number
	        // of changes made during the composition. The count is used to
	        // avoid treating the start state of the composition, before any
	        // changes have been made, as part of the composition.
	        this.composing = -1;
	        // Tracks whether the next change should be marked as starting the
	        // composition (null means no composition, true means next is the
	        // first, false means first has already been marked for this
	        // composition)
	        this.compositionFirstChange = null;
	        // End time of the previous composition
	        this.compositionEndedAt = 0;
	        // Used in a kludge to detect when an Enter keypress should be
	        // considered part of the composition on Safari, which fires events
	        // in the wrong order
	        this.compositionPendingKey = false;
	        // Used to categorize changes as part of a composition, even when
	        // the mutation events fire shortly after the compositionend event
	        this.compositionPendingChange = false;
	        this.mouseSelection = null;
	        // When a drag from the editor is active, this points at the range
	        // being dragged.
	        this.draggedContent = null;
	        this.handleEvent = this.handleEvent.bind(this);
	        this.notifiedFocused = view.hasFocus;
	        // On Safari adding an input event handler somehow prevents an
	        // issue where the composition vanishes when you press enter.
	        if (browser.safari)
	            view.contentDOM.addEventListener("input", () => null);
	        if (browser.gecko)
	            firefoxCopyCutHack(view.contentDOM.ownerDocument);
	    }
	    handleEvent(event) {
	        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
	            return;
	        if (event.type == "keydown" && this.keydown(event))
	            return;
	        this.runHandlers(event.type, event);
	    }
	    runHandlers(type, event) {
	        let handlers = this.handlers[type];
	        if (handlers) {
	            for (let observer of handlers.observers)
	                observer(this.view, event);
	            for (let handler of handlers.handlers) {
	                if (event.defaultPrevented)
	                    break;
	                if (handler(this.view, event)) {
	                    event.preventDefault();
	                    break;
	                }
	            }
	        }
	    }
	    ensureHandlers(plugins) {
	        let handlers = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
	        for (let type in handlers)
	            if (type != "scroll") {
	                let passive = !handlers[type].handlers.length;
	                let exists = prev[type];
	                if (exists && passive != !exists.handlers.length) {
	                    dom.removeEventListener(type, this.handleEvent);
	                    exists = null;
	                }
	                if (!exists)
	                    dom.addEventListener(type, this.handleEvent, { passive });
	            }
	        for (let type in prev)
	            if (type != "scroll" && !handlers[type])
	                dom.removeEventListener(type, this.handleEvent);
	        this.handlers = handlers;
	    }
	    keydown(event) {
	        // Must always run, even if a custom handler handled the event
	        this.lastKeyCode = event.keyCode;
	        this.lastKeyTime = Date.now();
	        if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
	            return true;
	        if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
	            this.view.inputState.lastEscPress = 0;
	        // Chrome for Android usually doesn't fire proper key events, but
	        // occasionally does, usually surrounded by a bunch of complicated
	        // composition changes. When an enter or backspace key event is
	        // seen, hold off on handling DOM events for a bit, and then
	        // dispatch it.
	        if (browser.android && browser.chrome && !event.synthetic &&
	            (event.keyCode == 13 || event.keyCode == 8)) {
	            this.view.observer.delayAndroidKey(event.key, event.keyCode);
	            return true;
	        }
	        // Preventing the default behavior of Enter on iOS makes the
	        // virtual keyboard get stuck in the wrong (lowercase)
	        // state. So we let it go through, and then, in
	        // applyDOMChange, notify key handlers of it and reset to
	        // the state they produce.
	        let pending;
	        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
	            ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
	                EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
	            this.pendingIOSKey = pending || event;
	            setTimeout(() => this.flushIOSKey(), 250);
	            return true;
	        }
	        if (event.keyCode != 229)
	            this.view.observer.forceFlush();
	        return false;
	    }
	    flushIOSKey() {
	        let key = this.pendingIOSKey;
	        if (!key)
	            return false;
	        this.pendingIOSKey = undefined;
	        return dispatchKey(this.view.contentDOM, key.key, key.keyCode);
	    }
	    ignoreDuringComposition(event) {
	        if (!/^key/.test(event.type))
	            return false;
	        if (this.composing > 0)
	            return true;
	        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
	        // On some input method editors (IMEs), the Enter key is used to
	        // confirm character selection. On Safari, when Enter is pressed,
	        // compositionend and keydown events are sometimes emitted in the
	        // wrong order. The key event should still be ignored, even when
	        // it happens after the compositionend event.
	        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
	            this.compositionPendingKey = false;
	            return true;
	        }
	        return false;
	    }
	    startMouseSelection(mouseSelection) {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	        this.mouseSelection = mouseSelection;
	    }
	    update(update) {
	        if (this.mouseSelection)
	            this.mouseSelection.update(update);
	        if (this.draggedContent && update.docChanged)
	            this.draggedContent = this.draggedContent.map(update.changes);
	        if (update.transactions.length)
	            this.lastKeyCode = this.lastSelectionTime = 0;
	    }
	    destroy() {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	    }
	}
	function bindHandler(plugin, handler) {
	    return (view, event) => {
	        try {
	            return handler.call(plugin, event, view);
	        }
	        catch (e) {
	            logException(view.state, e);
	        }
	    };
	}
	function computeHandlers(plugins) {
	    let result = Object.create(null);
	    function record(type) {
	        return result[type] || (result[type] = { observers: [], handlers: [] });
	    }
	    for (let plugin of plugins) {
	        let spec = plugin.spec;
	        if (spec && spec.domEventHandlers)
	            for (let type in spec.domEventHandlers) {
	                let f = spec.domEventHandlers[type];
	                if (f)
	                    record(type).handlers.push(bindHandler(plugin.value, f));
	            }
	        if (spec && spec.domEventObservers)
	            for (let type in spec.domEventObservers) {
	                let f = spec.domEventObservers[type];
	                if (f)
	                    record(type).observers.push(bindHandler(plugin.value, f));
	            }
	    }
	    for (let type in handlers)
	        record(type).handlers.push(handlers[type]);
	    for (let type in observers)
	        record(type).observers.push(observers[type]);
	    return result;
	}
	const PendingKeys = [
	    { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
	    { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
	    { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
	    { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
	];
	const EmacsyPendingKeys = "dthko";
	// Key codes for modifier keys
	const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
	const dragScrollMargin = 6;
	function dragScrollSpeed(dist) {
	    return Math.max(0, dist) * 0.7 + 8;
	}
	function dist(a, b) {
	    return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
	}
	class MouseSelection {
	    constructor(view, startEvent, style, mustSelect) {
	        this.view = view;
	        this.startEvent = startEvent;
	        this.style = style;
	        this.mustSelect = mustSelect;
	        this.scrollSpeed = { x: 0, y: 0 };
	        this.scrolling = -1;
	        this.lastEvent = startEvent;
	        this.scrollParent = scrollableParent(view.contentDOM);
	        this.atoms = view.state.facet(atomicRanges).map(f => f(view));
	        let doc = view.contentDOM.ownerDocument;
	        doc.addEventListener("mousemove", this.move = this.move.bind(this));
	        doc.addEventListener("mouseup", this.up = this.up.bind(this));
	        this.extend = startEvent.shiftKey;
	        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
	        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
	    }
	    start(event) {
	        // When clicking outside of the selection, immediately apply the
	        // effect of starting the selection
	        if (this.dragging === false)
	            this.select(event);
	    }
	    move(event) {
	        var _a;
	        if (event.buttons == 0)
	            return this.destroy();
	        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
	            return;
	        this.select(this.lastEvent = event);
	        let sx = 0, sy = 0;
	        let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
	            || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
	        let margins = getScrollMargins(this.view);
	        if (event.clientX - margins.left <= rect.left + dragScrollMargin)
	            sx = -dragScrollSpeed(rect.left - event.clientX);
	        else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
	            sx = dragScrollSpeed(event.clientX - rect.right);
	        if (event.clientY - margins.top <= rect.top + dragScrollMargin)
	            sy = -dragScrollSpeed(rect.top - event.clientY);
	        else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
	            sy = dragScrollSpeed(event.clientY - rect.bottom);
	        this.setScrollSpeed(sx, sy);
	    }
	    up(event) {
	        if (this.dragging == null)
	            this.select(this.lastEvent);
	        if (!this.dragging)
	            event.preventDefault();
	        this.destroy();
	    }
	    destroy() {
	        this.setScrollSpeed(0, 0);
	        let doc = this.view.contentDOM.ownerDocument;
	        doc.removeEventListener("mousemove", this.move);
	        doc.removeEventListener("mouseup", this.up);
	        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
	    }
	    setScrollSpeed(sx, sy) {
	        this.scrollSpeed = { x: sx, y: sy };
	        if (sx || sy) {
	            if (this.scrolling < 0)
	                this.scrolling = setInterval(() => this.scroll(), 50);
	        }
	        else if (this.scrolling > -1) {
	            clearInterval(this.scrolling);
	            this.scrolling = -1;
	        }
	    }
	    scroll() {
	        if (this.scrollParent) {
	            this.scrollParent.scrollLeft += this.scrollSpeed.x;
	            this.scrollParent.scrollTop += this.scrollSpeed.y;
	        }
	        else {
	            this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
	        }
	        if (this.dragging === false)
	            this.select(this.lastEvent);
	    }
	    skipAtoms(sel) {
	        let ranges = null;
	        for (let i = 0; i < sel.ranges.length; i++) {
	            let range = sel.ranges[i], updated = null;
	            if (range.empty) {
	                let pos = skipAtomicRanges(this.atoms, range.from, 0);
	                if (pos != range.from)
	                    updated = EditorSelection.cursor(pos, -1);
	            }
	            else {
	                let from = skipAtomicRanges(this.atoms, range.from, -1);
	                let to = skipAtomicRanges(this.atoms, range.to, 1);
	                if (from != range.from || to != range.to)
	                    updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
	            }
	            if (updated) {
	                if (!ranges)
	                    ranges = sel.ranges.slice();
	                ranges[i] = updated;
	            }
	        }
	        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
	    }
	    select(event) {
	        let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
	        if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
	            this.view.dispatch({
	                selection,
	                userEvent: "select.pointer"
	            });
	        this.mustSelect = false;
	    }
	    update(update) {
	        if (this.style.update(update))
	            setTimeout(() => this.select(this.lastEvent), 20);
	    }
	}
	function addsSelectionRange(view, event) {
	    let facet = view.state.facet(clickAddsSelectionRange);
	    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
	}
	function dragMovesSelection(view, event) {
	    let facet = view.state.facet(dragMovesSelection$1);
	    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
	}
	function isInPrimarySelection(view, event) {
	    let { main } = view.state.selection;
	    if (main.empty)
	        return false;
	    // On boundary clicks, check whether the coordinates are inside the
	    // selection's client rectangles
	    let sel = getSelection(view.root);
	    if (!sel || sel.rangeCount == 0)
	        return true;
	    let rects = sel.getRangeAt(0).getClientRects();
	    for (let i = 0; i < rects.length; i++) {
	        let rect = rects[i];
	        if (rect.left <= event.clientX && rect.right >= event.clientX &&
	            rect.top <= event.clientY && rect.bottom >= event.clientY)
	            return true;
	    }
	    return false;
	}
	function eventBelongsToEditor(view, event) {
	    if (!event.bubbles)
	        return true;
	    if (event.defaultPrevented)
	        return false;
	    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
	        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
	            return false;
	    return true;
	}
	const handlers = /*@__PURE__*/Object.create(null);
	const observers = /*@__PURE__*/Object.create(null);
	// This is very crude, but unfortunately both these browsers _pretend_
	// that they have a clipboard API—all the objects and methods are
	// there, they just don't work, and they are hard to test.
	const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
	    (browser.ios && browser.webkit_version < 604);
	function capturePaste(view) {
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.focus();
	    setTimeout(() => {
	        view.focus();
	        target.remove();
	        doPaste(view, target.value);
	    }, 50);
	}
	function doPaste(view, input) {
	    let { state } = view, changes, i = 1, text = state.toText(input);
	    let byLine = text.lines == state.selection.ranges.length;
	    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
	    if (linewise) {
	        let lastLine = -1;
	        changes = state.changeByRange(range => {
	            let line = state.doc.lineAt(range.from);
	            if (line.from == lastLine)
	                return { range };
	            lastLine = line.from;
	            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
	            return { changes: { from: line.from, insert },
	                range: EditorSelection.cursor(range.from + insert.length) };
	        });
	    }
	    else if (byLine) {
	        changes = state.changeByRange(range => {
	            let line = text.line(i++);
	            return { changes: { from: range.from, to: range.to, insert: line.text },
	                range: EditorSelection.cursor(range.from + line.length) };
	        });
	    }
	    else {
	        changes = state.replaceSelection(text);
	    }
	    view.dispatch(changes, {
	        userEvent: "input.paste",
	        scrollIntoView: true
	    });
	}
	observers.scroll = view => {
	    view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
	    view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
	};
	handlers.keydown = (view, event) => {
	    view.inputState.setSelectionOrigin("select");
	    if (event.keyCode == 27)
	        view.inputState.lastEscPress = Date.now();
	    return false;
	};
	observers.touchstart = (view, e) => {
	    view.inputState.lastTouchTime = Date.now();
	    view.inputState.setSelectionOrigin("select.pointer");
	};
	observers.touchmove = view => {
	    view.inputState.setSelectionOrigin("select.pointer");
	};
	handlers.mousedown = (view, event) => {
	    view.observer.flush();
	    if (view.inputState.lastTouchTime > Date.now() - 2000)
	        return false; // Ignore touch interaction
	    let style = null;
	    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
	        style = makeStyle(view, event);
	        if (style)
	            break;
	    }
	    if (!style && event.button == 0)
	        style = basicMouseSelection(view, event);
	    if (style) {
	        let mustFocus = !view.hasFocus;
	        view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
	        if (mustFocus)
	            view.observer.ignore(() => focusPreventScroll(view.contentDOM));
	        let mouseSel = view.inputState.mouseSelection;
	        if (mouseSel) {
	            mouseSel.start(event);
	            return mouseSel.dragging === false;
	        }
	    }
	    return false;
	};
	function rangeForClick(view, pos, bias, type) {
	    if (type == 1) { // Single click
	        return EditorSelection.cursor(pos, bias);
	    }
	    else if (type == 2) { // Double click
	        return groupAt(view.state, pos, bias);
	    }
	    else { // Triple click
	        let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
	        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
	        if (to < view.state.doc.length && to == line.to)
	            to++;
	        return EditorSelection.range(from, to);
	    }
	}
	let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
	let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
	// Try to determine, for the given coordinates, associated with the
	// given position, whether they are related to the element before or
	// the element after the position.
	function findPositionSide(view, pos, x, y) {
	    let line = LineView.find(view.docView, pos);
	    if (!line)
	        return 1;
	    let off = pos - line.posAtStart;
	    // Line boundaries point into the line
	    if (off == 0)
	        return 1;
	    if (off == line.length)
	        return -1;
	    // Positions on top of an element point at that element
	    let before = line.coordsAt(off, -1);
	    if (before && inside(x, y, before))
	        return -1;
	    let after = line.coordsAt(off, 1);
	    if (after && inside(x, y, after))
	        return 1;
	    // This is probably a line wrap point. Pick before if the point is
	    // beside it.
	    return before && insideY(y, before) ? -1 : 1;
	}
	function queryPos(view, event) {
	    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
	    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
	}
	const BadMouseDetail = browser.ie && browser.ie_version <= 11;
	let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
	function getClickType(event) {
	    if (!BadMouseDetail)
	        return event.detail;
	    let last = lastMouseDown, lastTime = lastMouseDownTime;
	    lastMouseDown = event;
	    lastMouseDownTime = Date.now();
	    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
	        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
	}
	function basicMouseSelection(view, event) {
	    let start = queryPos(view, event), type = getClickType(event);
	    let startSel = view.state.selection;
	    return {
	        update(update) {
	            if (update.docChanged) {
	                start.pos = update.changes.mapPos(start.pos);
	                startSel = startSel.map(update.changes);
	            }
	        },
	        get(event, extend, multiple) {
	            let cur = queryPos(view, event), removed;
	            let range = rangeForClick(view, cur.pos, cur.bias, type);
	            if (start.pos != cur.pos && !extend) {
	                let startRange = rangeForClick(view, start.pos, start.bias, type);
	                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
	                range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
	            }
	            if (extend)
	                return startSel.replaceRange(startSel.main.extend(range.from, range.to));
	            else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
	                return removed;
	            else if (multiple)
	                return startSel.addRange(range);
	            else
	                return EditorSelection.create([range]);
	        }
	    };
	}
	function removeRangeAround(sel, pos) {
	    for (let i = 0; i < sel.ranges.length; i++) {
	        let { from, to } = sel.ranges[i];
	        if (from <= pos && to >= pos)
	            return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
	    }
	    return null;
	}
	handlers.dragstart = (view, event) => {
	    let { selection: { main: range } } = view.state;
	    if (event.target.draggable) {
	        let cView = view.docView.nearest(event.target);
	        if (cView && cView.isWidget) {
	            let from = cView.posAtStart, to = from + cView.length;
	            if (from >= range.to || to <= range.from)
	                range = EditorSelection.range(from, to);
	        }
	    }
	    let { inputState } = view;
	    if (inputState.mouseSelection)
	        inputState.mouseSelection.dragging = true;
	    inputState.draggedContent = range;
	    if (event.dataTransfer) {
	        event.dataTransfer.setData("Text", view.state.sliceDoc(range.from, range.to));
	        event.dataTransfer.effectAllowed = "copyMove";
	    }
	    return false;
	};
	handlers.dragend = view => {
	    view.inputState.draggedContent = null;
	    return false;
	};
	function dropText(view, event, text, direct) {
	    if (!text)
	        return;
	    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
	    let { draggedContent } = view.inputState;
	    let del = direct && draggedContent && dragMovesSelection(view, event)
	        ? { from: draggedContent.from, to: draggedContent.to } : null;
	    let ins = { from: dropPos, insert: text };
	    let changes = view.state.changes(del ? [del, ins] : ins);
	    view.focus();
	    view.dispatch({
	        changes,
	        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
	        userEvent: del ? "move.drop" : "input.drop"
	    });
	    view.inputState.draggedContent = null;
	}
	handlers.drop = (view, event) => {
	    if (!event.dataTransfer)
	        return false;
	    if (view.state.readOnly)
	        return true;
	    let files = event.dataTransfer.files;
	    if (files && files.length) { // For a file drop, read the file's text.
	        let text = Array(files.length), read = 0;
	        let finishFile = () => {
	            if (++read == files.length)
	                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
	        };
	        for (let i = 0; i < files.length; i++) {
	            let reader = new FileReader;
	            reader.onerror = finishFile;
	            reader.onload = () => {
	                if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
	                    text[i] = reader.result;
	                finishFile();
	            };
	            reader.readAsText(files[i]);
	        }
	        return true;
	    }
	    else {
	        let text = event.dataTransfer.getData("Text");
	        if (text) {
	            dropText(view, event, text, true);
	            return true;
	        }
	    }
	    return false;
	};
	handlers.paste = (view, event) => {
	    if (view.state.readOnly)
	        return true;
	    view.observer.flush();
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    if (data) {
	        doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
	        return true;
	    }
	    else {
	        capturePaste(view);
	        return false;
	    }
	};
	function captureCopy(view, text) {
	    // The extra wrapper is somehow necessary on IE/Edge to prevent the
	    // content from being mangled when it is put onto the clipboard
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.value = text;
	    target.focus();
	    target.selectionEnd = text.length;
	    target.selectionStart = 0;
	    setTimeout(() => {
	        target.remove();
	        view.focus();
	    }, 50);
	}
	function copiedRange(state) {
	    let content = [], ranges = [], linewise = false;
	    for (let range of state.selection.ranges)
	        if (!range.empty) {
	            content.push(state.sliceDoc(range.from, range.to));
	            ranges.push(range);
	        }
	    if (!content.length) {
	        // Nothing selected, do a line-wise copy
	        let upto = -1;
	        for (let { from } of state.selection.ranges) {
	            let line = state.doc.lineAt(from);
	            if (line.number > upto) {
	                content.push(line.text);
	                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
	            }
	            upto = line.number;
	        }
	        linewise = true;
	    }
	    return { text: content.join(state.lineBreak), ranges, linewise };
	}
	let lastLinewiseCopy = null;
	handlers.copy = handlers.cut = (view, event) => {
	    let { text, ranges, linewise } = copiedRange(view.state);
	    if (!text && !linewise)
	        return false;
	    lastLinewiseCopy = linewise ? text : null;
	    if (event.type == "cut" && !view.state.readOnly)
	        view.dispatch({
	            changes: ranges,
	            scrollIntoView: true,
	            userEvent: "delete.cut"
	        });
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    if (data) {
	        data.clearData();
	        data.setData("text/plain", text);
	        return true;
	    }
	    else {
	        captureCopy(view, text);
	        return false;
	    }
	};
	const isFocusChange = /*@__PURE__*/Annotation.define();
	function focusChangeTransaction(state, focus) {
	    let effects = [];
	    for (let getEffect of state.facet(focusChangeEffect)) {
	        let effect = getEffect(state, focus);
	        if (effect)
	            effects.push(effect);
	    }
	    return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
	}
	function updateForFocusChange(view) {
	    setTimeout(() => {
	        let focus = view.hasFocus;
	        if (focus != view.inputState.notifiedFocused) {
	            let tr = focusChangeTransaction(view.state, focus);
	            if (tr)
	                view.dispatch(tr);
	            else
	                view.update([]);
	        }
	    }, 10);
	}
	observers.focus = view => {
	    view.inputState.lastFocusTime = Date.now();
	    // When focusing reset the scroll position, move it back to where it was
	    if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
	        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
	        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
	    }
	    updateForFocusChange(view);
	};
	observers.blur = view => {
	    view.observer.clearSelectionRange();
	    updateForFocusChange(view);
	};
	observers.compositionstart = observers.compositionupdate = view => {
	    if (view.inputState.compositionFirstChange == null)
	        view.inputState.compositionFirstChange = true;
	    if (view.inputState.composing < 0) {
	        // FIXME possibly set a timeout to clear it again on Android
	        view.inputState.composing = 0;
	    }
	};
	observers.compositionend = view => {
	    view.inputState.composing = -1;
	    view.inputState.compositionEndedAt = Date.now();
	    view.inputState.compositionPendingKey = true;
	    view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
	    view.inputState.compositionFirstChange = null;
	    if (browser.chrome && browser.android) {
	        // Delay flushing for a bit on Android because it'll often fire a
	        // bunch of contradictory changes in a row at end of compositon
	        view.observer.flushSoon();
	    }
	    else if (view.inputState.compositionPendingChange) {
	        // If we found pending records, schedule a flush.
	        Promise.resolve().then(() => view.observer.flush());
	    }
	    else {
	        // Otherwise, make sure that, if no changes come in soon, the
	        // composition view is cleared.
	        setTimeout(() => {
	            if (view.inputState.composing < 0 && view.docView.hasComposition)
	                view.update([]);
	        }, 50);
	    }
	};
	observers.contextmenu = view => {
	    view.inputState.lastContextMenu = Date.now();
	};
	handlers.beforeinput = (view, event) => {
	    var _a;
	    // Because Chrome Android doesn't fire useful key events, use
	    // beforeinput to detect backspace (and possibly enter and delete,
	    // but those usually don't even seem to fire beforeinput events at
	    // the moment) and fake a key event for it.
	    //
	    // (preventDefault on beforeinput, though supported in the spec,
	    // seems to do nothing at all on Chrome).
	    let pending;
	    if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
	        view.observer.delayAndroidKey(pending.key, pending.keyCode);
	        if (pending.key == "Backspace" || pending.key == "Delete") {
	            let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
	            setTimeout(() => {
	                var _a;
	                // Backspacing near uneditable nodes on Chrome Android sometimes
	                // closes the virtual keyboard. This tries to crudely detect
	                // that and refocus to get it back.
	                if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
	                    view.contentDOM.blur();
	                    view.focus();
	                }
	            }, 100);
	        }
	    }
	    return false;
	};
	const appliedFirefoxHack = /*@__PURE__*/new Set;
	// In Firefox, when cut/copy handlers are added to the document, that
	// somehow avoids a bug where those events aren't fired when the
	// selection is empty. See https://github.com/codemirror/dev/issues/1082
	// and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
	function firefoxCopyCutHack(doc) {
	    if (!appliedFirefoxHack.has(doc)) {
	        appliedFirefoxHack.add(doc);
	        doc.addEventListener("copy", () => { });
	        doc.addEventListener("cut", () => { });
	    }
	}

	const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
	class HeightOracle {
	    constructor(lineWrapping) {
	        this.lineWrapping = lineWrapping;
	        this.doc = Text.empty;
	        this.heightSamples = {};
	        this.lineHeight = 14; // The height of an entire line (line-height)
	        this.charWidth = 7;
	        this.textHeight = 14; // The height of the actual font (font-size)
	        this.lineLength = 30;
	        // Used to track, during updateHeight, if any actual heights changed
	        this.heightChanged = false;
	    }
	    heightForGap(from, to) {
	        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
	        if (this.lineWrapping)
	            lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
	        return this.lineHeight * lines;
	    }
	    heightForLine(length) {
	        if (!this.lineWrapping)
	            return this.lineHeight;
	        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
	        return lines * this.lineHeight;
	    }
	    setDoc(doc) { this.doc = doc; return this; }
	    mustRefreshForWrapping(whiteSpace) {
	        return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
	    }
	    mustRefreshForHeights(lineHeights) {
	        let newHeight = false;
	        for (let i = 0; i < lineHeights.length; i++) {
	            let h = lineHeights[i];
	            if (h < 0) {
	                i++;
	            }
	            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
	                newHeight = true;
	                this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return newHeight;
	    }
	    refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
	        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
	        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
	        this.lineWrapping = lineWrapping;
	        this.lineHeight = lineHeight;
	        this.charWidth = charWidth;
	        this.textHeight = textHeight;
	        this.lineLength = lineLength;
	        if (changed) {
	            this.heightSamples = {};
	            for (let i = 0; i < knownHeights.length; i++) {
	                let h = knownHeights[i];
	                if (h < 0)
	                    i++;
	                else
	                    this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return changed;
	    }
	}
	// This object is used by `updateHeight` to make DOM measurements
	// arrive at the right nides. The `heights` array is a sequence of
	// block heights, starting from position `from`.
	class MeasuredHeights {
	    constructor(from, heights) {
	        this.from = from;
	        this.heights = heights;
	        this.index = 0;
	    }
	    get more() { return this.index < this.heights.length; }
	}
	/**
	Record used to represent information about a block-level element
	in the editor view.
	*/
	class BlockInfo {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The start of the element in the document.
	    */
	    from, 
	    /**
	    The length of the element.
	    */
	    length, 
	    /**
	    The top position of the element (relative to the top of the
	    document).
	    */
	    top, 
	    /**
	    Its height.
	    */
	    height, 
	    /**
	    @internal Weird packed field that holds an array of children
	    for composite blocks, a decoration for block widgets, and a
	    number indicating the amount of widget-create line breaks for
	    text blocks.
	    */
	    _content) {
	        this.from = from;
	        this.length = length;
	        this.top = top;
	        this.height = height;
	        this._content = _content;
	    }
	    /**
	    The type of element this is. When querying lines, this may be
	    an array of all the blocks that make up the line.
	    */
	    get type() {
	        return typeof this._content == "number" ? BlockType.Text :
	            Array.isArray(this._content) ? this._content : this._content.type;
	    }
	    /**
	    The end of the element as a document position.
	    */
	    get to() { return this.from + this.length; }
	    /**
	    The bottom position of the element.
	    */
	    get bottom() { return this.top + this.height; }
	    /**
	    If this is a widget block, this will return the widget
	    associated with it.
	    */
	    get widget() {
	        return this._content instanceof PointDecoration ? this._content.widget : null;
	    }
	    /**
	    If this is a textblock, this holds the number of line breaks
	    that appear in widgets inside the block.
	    */
	    get widgetLineBreaks() {
	        return typeof this._content == "number" ? this._content : 0;
	    }
	    /**
	    @internal
	    */
	    join(other) {
	        let content = (Array.isArray(this._content) ? this._content : [this])
	            .concat(Array.isArray(other._content) ? other._content : [other]);
	        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
	    }
	}
	var QueryType$1 = /*@__PURE__*/(function (QueryType) {
	    QueryType[QueryType["ByPos"] = 0] = "ByPos";
	    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
	    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
	return QueryType})(QueryType$1 || (QueryType$1 = {}));
	const Epsilon = 1e-3;
	class HeightMap {
	    constructor(length, // The number of characters covered
	    height, // Height of this part of the document
	    flags = 2 /* Flag.Outdated */) {
	        this.length = length;
	        this.height = height;
	        this.flags = flags;
	    }
	    get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
	    set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
	    setHeight(oracle, height) {
	        if (this.height != height) {
	            if (Math.abs(this.height - height) > Epsilon)
	                oracle.heightChanged = true;
	            this.height = height;
	        }
	    }
	    // Base case is to replace a leaf node, which simply builds a tree
	    // from the new nodes and returns that (HeightMapBranch and
	    // HeightMapGap override this to actually use from/to)
	    replace(_from, _to, nodes) {
	        return HeightMap.of(nodes);
	    }
	    // Again, these are base cases, and are overridden for branch and gap nodes.
	    decomposeLeft(_to, result) { result.push(this); }
	    decomposeRight(_from, result) { result.push(this); }
	    applyChanges(decorations, oldDoc, oracle, changes) {
	        let me = this, doc = oracle.doc;
	        for (let i = changes.length - 1; i >= 0; i--) {
	            let { fromA, toA, fromB, toB } = changes[i];
	            let start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
	            let end = start.to >= toA ? start : me.lineAt(toA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
	            toB += end.to - toA;
	            toA = end.to;
	            while (i > 0 && start.from <= changes[i - 1].toA) {
	                fromA = changes[i - 1].fromA;
	                fromB = changes[i - 1].fromB;
	                i--;
	                if (fromA < start.from)
	                    start = me.lineAt(fromA, QueryType$1.ByPosNoHeight, oracle, 0, 0);
	            }
	            fromB += start.from - fromA;
	            fromA = start.from;
	            let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
	            me = me.replace(fromA, toA, nodes);
	        }
	        return me.updateHeight(oracle, 0);
	    }
	    static empty() { return new HeightMapText(0, 0); }
	    // nodes uses null values to indicate the position of line breaks.
	    // There are never line breaks at the start or end of the array, or
	    // two line breaks next to each other, and the array isn't allowed
	    // to be empty (same restrictions as return value from the builder).
	    static of(nodes) {
	        if (nodes.length == 1)
	            return nodes[0];
	        let i = 0, j = nodes.length, before = 0, after = 0;
	        for (;;) {
	            if (i == j) {
	                if (before > after * 2) {
	                    let split = nodes[i - 1];
	                    if (split.break)
	                        nodes.splice(--i, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(--i, 1, split.left, split.right);
	                    j += 1 + split.break;
	                    before -= split.size;
	                }
	                else if (after > before * 2) {
	                    let split = nodes[j];
	                    if (split.break)
	                        nodes.splice(j, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(j, 1, split.left, split.right);
	                    j += 2 + split.break;
	                    after -= split.size;
	                }
	                else {
	                    break;
	                }
	            }
	            else if (before < after) {
	                let next = nodes[i++];
	                if (next)
	                    before += next.size;
	            }
	            else {
	                let next = nodes[--j];
	                if (next)
	                    after += next.size;
	            }
	        }
	        let brk = 0;
	        if (nodes[i - 1] == null) {
	            brk = 1;
	            i--;
	        }
	        else if (nodes[i] == null) {
	            brk = 1;
	            j++;
	        }
	        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
	    }
	}
	HeightMap.prototype.size = 1;
	class HeightMapBlock extends HeightMap {
	    constructor(length, height, deco) {
	        super(length, height);
	        this.deco = deco;
	    }
	    blockAt(_height, _oracle, top, offset) {
	        return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
	    }
	    lineAt(_value, _type, oracle, top, offset) {
	        return this.blockAt(0, oracle, top, offset);
	    }
	    forEachLine(from, to, oracle, top, offset, f) {
	        if (from <= offset + this.length && to >= offset)
	            f(this.blockAt(0, oracle, top, offset));
	    }
	    updateHeight(oracle, offset = 0, _force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        this.outdated = false;
	        return this;
	    }
	    toString() { return `block(${this.length})`; }
	}
	class HeightMapText extends HeightMapBlock {
	    constructor(length, height) {
	        super(length, height, null);
	        this.collapsed = 0; // Amount of collapsed content in the line
	        this.widgetHeight = 0; // Maximum inline widget height
	        this.breaks = 0; // Number of widget-introduced line breaks on the line
	    }
	    blockAt(_height, _oracle, top, offset) {
	        return new BlockInfo(offset, this.length, top, this.height, this.breaks);
	    }
	    replace(_from, _to, nodes) {
	        let node = nodes[0];
	        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
	            Math.abs(this.length - node.length) < 10) {
	            if (node instanceof HeightMapGap)
	                node = new HeightMapText(node.length, this.height);
	            else
	                node.height = this.height;
	            if (!this.outdated)
	                node.outdated = false;
	            return node;
	        }
	        else {
	            return HeightMap.of(nodes);
	        }
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        else if (force || this.outdated)
	            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
	                this.breaks * oracle.lineHeight);
	        this.outdated = false;
	        return this;
	    }
	    toString() {
	        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
	    }
	}
	class HeightMapGap extends HeightMap {
	    constructor(length) { super(length, 0); }
	    heightMetrics(oracle, offset) {
	        let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
	        let lines = lastLine - firstLine + 1;
	        let perLine, perChar = 0;
	        if (oracle.lineWrapping) {
	            let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
	            perLine = totalPerLine / lines;
	            if (this.length > lines + 1)
	                perChar = (this.height - totalPerLine) / (this.length - lines - 1);
	        }
	        else {
	            perLine = this.height / lines;
	        }
	        return { firstLine, lastLine, perLine, perChar };
	    }
	    blockAt(height, oracle, top, offset) {
	        let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
	        if (oracle.lineWrapping) {
	            let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
	            let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
	            let lineTop = Math.max(top, height - lineHeight / 2);
	            return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
	        }
	        else {
	            let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
	            let { from, length } = oracle.doc.line(firstLine + line);
	            return new BlockInfo(from, length, top + perLine * line, perLine, 0);
	        }
	    }
	    lineAt(value, type, oracle, top, offset) {
	        if (type == QueryType$1.ByHeight)
	            return this.blockAt(value, oracle, top, offset);
	        if (type == QueryType$1.ByPosNoHeight) {
	            let { from, to } = oracle.doc.lineAt(value);
	            return new BlockInfo(from, to - from, 0, 0, 0);
	        }
	        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
	        let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
	        let linesAbove = line.number - firstLine;
	        let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
	        return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
	    }
	    forEachLine(from, to, oracle, top, offset, f) {
	        from = Math.max(from, offset);
	        to = Math.min(to, offset + this.length);
	        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
	        for (let pos = from, lineTop = top; pos <= to;) {
	            let line = oracle.doc.lineAt(pos);
	            if (pos == from) {
	                let linesAbove = line.number - firstLine;
	                lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
	            }
	            let lineHeight = perLine + perChar * line.length;
	            f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
	            lineTop += lineHeight;
	            pos = line.to + 1;
	        }
	    }
	    replace(from, to, nodes) {
	        let after = this.length - to;
	        if (after > 0) {
	            let last = nodes[nodes.length - 1];
	            if (last instanceof HeightMapGap)
	                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
	            else
	                nodes.push(null, new HeightMapGap(after - 1));
	        }
	        if (from > 0) {
	            let first = nodes[0];
	            if (first instanceof HeightMapGap)
	                nodes[0] = new HeightMapGap(from + first.length);
	            else
	                nodes.unshift(new HeightMapGap(from - 1), null);
	        }
	        return HeightMap.of(nodes);
	    }
	    decomposeLeft(to, result) {
	        result.push(new HeightMapGap(to - 1), null);
	    }
	    decomposeRight(from, result) {
	        result.push(null, new HeightMapGap(this.length - from - 1));
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let end = offset + this.length;
	        if (measured && measured.from <= offset + this.length && measured.more) {
	            // Fill in part of this gap with measured lines. We know there
	            // can't be widgets or collapsed ranges in those lines, because
	            // they would already have been added to the heightmap (gaps
	            // only contain plain text).
	            let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
	            if (measured.from > offset)
	                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
	            while (pos <= end && measured.more) {
	                let len = oracle.doc.lineAt(pos).length;
	                if (nodes.length)
	                    nodes.push(null);
	                let height = measured.heights[measured.index++];
	                if (singleHeight == -1)
	                    singleHeight = height;
	                else if (Math.abs(height - singleHeight) >= Epsilon)
	                    singleHeight = -2;
	                let line = new HeightMapText(len, height);
	                line.outdated = false;
	                nodes.push(line);
	                pos += len + 1;
	            }
	            if (pos <= end)
	                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
	            let result = HeightMap.of(nodes);
	            if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon ||
	                Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon)
	                oracle.heightChanged = true;
	            return result;
	        }
	        else if (force || this.outdated) {
	            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
	            this.outdated = false;
	        }
	        return this;
	    }
	    toString() { return `gap(${this.length})`; }
	}
	class HeightMapBranch extends HeightMap {
	    constructor(left, brk, right) {
	        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
	        this.left = left;
	        this.right = right;
	        this.size = left.size + right.size;
	    }
	    get break() { return this.flags & 1 /* Flag.Break */; }
	    blockAt(height, oracle, top, offset) {
	        let mid = top + this.left.height;
	        return height < mid ? this.left.blockAt(height, oracle, top, offset)
	            : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
	    }
	    lineAt(value, type, oracle, top, offset) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        let left = type == QueryType$1.ByHeight ? value < rightTop : value < rightOffset;
	        let base = left ? this.left.lineAt(value, type, oracle, top, offset)
	            : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
	        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
	            return base;
	        let subQuery = type == QueryType$1.ByPosNoHeight ? QueryType$1.ByPosNoHeight : QueryType$1.ByPos;
	        if (left)
	            return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
	        else
	            return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
	    }
	    forEachLine(from, to, oracle, top, offset, f) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        if (this.break) {
	            if (from < rightOffset)
	                this.left.forEachLine(from, to, oracle, top, offset, f);
	            if (to >= rightOffset)
	                this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
	        }
	        else {
	            let mid = this.lineAt(rightOffset, QueryType$1.ByPos, oracle, top, offset);
	            if (from < mid.from)
	                this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
	            if (mid.to >= from && mid.from <= to)
	                f(mid);
	            if (to > mid.to)
	                this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
	        }
	    }
	    replace(from, to, nodes) {
	        let rightStart = this.left.length + this.break;
	        if (to < rightStart)
	            return this.balanced(this.left.replace(from, to, nodes), this.right);
	        if (from > this.left.length)
	            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
	        let result = [];
	        if (from > 0)
	            this.decomposeLeft(from, result);
	        let left = result.length;
	        for (let node of nodes)
	            result.push(node);
	        if (from > 0)
	            mergeGaps(result, left - 1);
	        if (to < this.length) {
	            let right = result.length;
	            this.decomposeRight(to, result);
	            mergeGaps(result, right);
	        }
	        return HeightMap.of(result);
	    }
	    decomposeLeft(to, result) {
	        let left = this.left.length;
	        if (to <= left)
	            return this.left.decomposeLeft(to, result);
	        result.push(this.left);
	        if (this.break) {
	            left++;
	            if (to >= left)
	                result.push(null);
	        }
	        if (to > left)
	            this.right.decomposeLeft(to - left, result);
	    }
	    decomposeRight(from, result) {
	        let left = this.left.length, right = left + this.break;
	        if (from >= right)
	            return this.right.decomposeRight(from - right, result);
	        if (from < left)
	            this.left.decomposeRight(from, result);
	        if (this.break && from < right)
	            result.push(null);
	        result.push(this.right);
	    }
	    balanced(left, right) {
	        if (left.size > 2 * right.size || right.size > 2 * left.size)
	            return HeightMap.of(this.break ? [left, null, right] : [left, right]);
	        this.left = left;
	        this.right = right;
	        this.height = left.height + right.height;
	        this.outdated = left.outdated || right.outdated;
	        this.size = left.size + right.size;
	        this.length = left.length + this.break + right.length;
	        return this;
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
	        if (measured && measured.from <= offset + left.length && measured.more)
	            rebalance = left = left.updateHeight(oracle, offset, force, measured);
	        else
	            left.updateHeight(oracle, offset, force);
	        if (measured && measured.from <= rightStart + right.length && measured.more)
	            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
	        else
	            right.updateHeight(oracle, rightStart, force);
	        if (rebalance)
	            return this.balanced(left, right);
	        this.height = this.left.height + this.right.height;
	        this.outdated = false;
	        return this;
	    }
	    toString() { return this.left + (this.break ? " " : "-") + this.right; }
	}
	function mergeGaps(nodes, around) {
	    let before, after;
	    if (nodes[around] == null &&
	        (before = nodes[around - 1]) instanceof HeightMapGap &&
	        (after = nodes[around + 1]) instanceof HeightMapGap)
	        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
	}
	const relevantWidgetHeight = 5;
	class NodeBuilder {
	    constructor(pos, oracle) {
	        this.pos = pos;
	        this.oracle = oracle;
	        this.nodes = [];
	        this.lineStart = -1;
	        this.lineEnd = -1;
	        this.covering = null;
	        this.writtenTo = pos;
	    }
	    get isCovered() {
	        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
	    }
	    span(_from, to) {
	        if (this.lineStart > -1) {
	            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
	            if (last instanceof HeightMapText)
	                last.length += end - this.pos;
	            else if (end > this.pos || !this.isCovered)
	                this.nodes.push(new HeightMapText(end - this.pos, -1));
	            this.writtenTo = end;
	            if (to > end) {
	                this.nodes.push(null);
	                this.writtenTo++;
	                this.lineStart = -1;
	            }
	        }
	        this.pos = to;
	    }
	    point(from, to, deco) {
	        if (from < to || deco.heightRelevant) {
	            let height = deco.widget ? deco.widget.estimatedHeight : 0;
	            let breaks = deco.widget ? deco.widget.lineBreaks : 0;
	            if (height < 0)
	                height = this.oracle.lineHeight;
	            let len = to - from;
	            if (deco.block) {
	                this.addBlock(new HeightMapBlock(len, height, deco));
	            }
	            else if (len || breaks || height >= relevantWidgetHeight) {
	                this.addLineDeco(height, breaks, len);
	            }
	        }
	        else if (to > from) {
	            this.span(from, to);
	        }
	        if (this.lineEnd > -1 && this.lineEnd < this.pos)
	            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
	    }
	    enterLine() {
	        if (this.lineStart > -1)
	            return;
	        let { from, to } = this.oracle.doc.lineAt(this.pos);
	        this.lineStart = from;
	        this.lineEnd = to;
	        if (this.writtenTo < from) {
	            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
	                this.nodes.push(this.blankContent(this.writtenTo, from - 1));
	            this.nodes.push(null);
	        }
	        if (this.pos > from)
	            this.nodes.push(new HeightMapText(this.pos - from, -1));
	        this.writtenTo = this.pos;
	    }
	    blankContent(from, to) {
	        let gap = new HeightMapGap(to - from);
	        if (this.oracle.doc.lineAt(from).to == to)
	            gap.flags |= 4 /* Flag.SingleLine */;
	        return gap;
	    }
	    ensureLine() {
	        this.enterLine();
	        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
	        if (last instanceof HeightMapText)
	            return last;
	        let line = new HeightMapText(0, -1);
	        this.nodes.push(line);
	        return line;
	    }
	    addBlock(block) {
	        this.enterLine();
	        let deco = block.deco;
	        if (deco && deco.startSide > 0 && !this.isCovered)
	            this.ensureLine();
	        this.nodes.push(block);
	        this.writtenTo = this.pos = this.pos + block.length;
	        if (deco && deco.endSide > 0)
	            this.covering = block;
	    }
	    addLineDeco(height, breaks, length) {
	        let line = this.ensureLine();
	        line.length += length;
	        line.collapsed += length;
	        line.widgetHeight = Math.max(line.widgetHeight, height);
	        line.breaks += breaks;
	        this.writtenTo = this.pos = this.pos + length;
	    }
	    finish(from) {
	        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
	        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
	            this.nodes.push(new HeightMapText(0, -1));
	        else if (this.writtenTo < this.pos || last == null)
	            this.nodes.push(this.blankContent(this.writtenTo, this.pos));
	        let pos = from;
	        for (let node of this.nodes) {
	            if (node instanceof HeightMapText)
	                node.updateHeight(this.oracle, pos);
	            pos += node ? node.length : 1;
	        }
	        return this.nodes;
	    }
	    // Always called with a region that on both sides either stretches
	    // to a line break or the end of the document.
	    // The returned array uses null to indicate line breaks, but never
	    // starts or ends in a line break, or has multiple line breaks next
	    // to each other.
	    static build(oracle, decorations, from, to) {
	        let builder = new NodeBuilder(from, oracle);
	        RangeSet.spans(decorations, from, to, builder, 0);
	        return builder.finish(from);
	    }
	}
	function heightRelevantDecoChanges(a, b, diff) {
	    let comp = new DecorationComparator;
	    RangeSet.compare(a, b, diff, comp, 0);
	    return comp.changes;
	}
	class DecorationComparator {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange() { }
	    comparePoint(from, to, a, b) {
	        if (from < to || a && a.heightRelevant || b && b.heightRelevant)
	            addRange(from, to, this.changes, 5);
	    }
	}

	function visiblePixelRange(dom, paddingTop) {
	    let rect = dom.getBoundingClientRect();
	    let doc = dom.ownerDocument, win = doc.defaultView || window;
	    let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
	    let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
	    for (let parent = dom.parentNode; parent && parent != doc.body;) {
	        if (parent.nodeType == 1) {
	            let elt = parent;
	            let style = window.getComputedStyle(elt);
	            if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
	                style.overflow != "visible") {
	                let parentRect = elt.getBoundingClientRect();
	                left = Math.max(left, parentRect.left);
	                right = Math.min(right, parentRect.right);
	                top = Math.max(top, parentRect.top);
	                bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
	            }
	            parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
	        }
	        else if (parent.nodeType == 11) { // Shadow root
	            parent = parent.host;
	        }
	        else {
	            break;
	        }
	    }
	    return { left: left - rect.left, right: Math.max(left, right) - rect.left,
	        top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
	}
	function fullPixelRange(dom, paddingTop) {
	    let rect = dom.getBoundingClientRect();
	    return { left: 0, right: rect.right - rect.left,
	        top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
	}
	// Line gaps are placeholder widgets used to hide pieces of overlong
	// lines within the viewport, as a kludge to keep the editor
	// responsive when a ridiculously long line is loaded into it.
	class LineGap {
	    constructor(from, to, size) {
	        this.from = from;
	        this.to = to;
	        this.size = size;
	    }
	    static same(a, b) {
	        if (a.length != b.length)
	            return false;
	        for (let i = 0; i < a.length; i++) {
	            let gA = a[i], gB = b[i];
	            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
	                return false;
	        }
	        return true;
	    }
	    draw(viewState, wrapping) {
	        return Decoration.replace({
	            widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
	        }).range(this.from, this.to);
	    }
	}
	class LineGapWidget extends WidgetType {
	    constructor(size, vertical) {
	        super();
	        this.size = size;
	        this.vertical = vertical;
	    }
	    eq(other) { return other.size == this.size && other.vertical == this.vertical; }
	    toDOM() {
	        let elt = document.createElement("div");
	        if (this.vertical) {
	            elt.style.height = this.size + "px";
	        }
	        else {
	            elt.style.width = this.size + "px";
	            elt.style.height = "2px";
	            elt.style.display = "inline-block";
	        }
	        return elt;
	    }
	    get estimatedHeight() { return this.vertical ? this.size : -1; }
	}
	class ViewState {
	    constructor(state) {
	        this.state = state;
	        // These are contentDOM-local coordinates
	        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
	        this.inView = true;
	        this.paddingTop = 0; // Padding above the document, scaled
	        this.paddingBottom = 0; // Padding below the document, scaled
	        this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
	        this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
	        this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
	        this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
	        this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
	        this.scrolledToBottom = true;
	        // The CSS-transformation scale of the editor (transformed size /
	        // concrete size)
	        this.scaleX = 1;
	        this.scaleY = 1;
	        // The vertical position (document-relative) to which to anchor the
	        // scroll position. -1 means anchor to the end of the document.
	        this.scrollAnchorPos = 0;
	        // The height at the anchor position. Set by the DOM update phase.
	        // -1 means no height available.
	        this.scrollAnchorHeight = -1;
	        // See VP.MaxDOMHeight
	        this.scaler = IdScaler;
	        this.scrollTarget = null;
	        // Briefly set to true when printing, to disable viewport limiting
	        this.printing = false;
	        // Flag set when editor content was redrawn, so that the next
	        // measure stage knows it must read DOM layout
	        this.mustMeasureContent = true;
	        this.defaultTextDirection = Direction.LTR;
	        this.visibleRanges = [];
	        // Cursor 'assoc' is only significant when the cursor is on a line
	        // wrap point, where it must stick to the character that it is
	        // associated with. Since browsers don't provide a reasonable
	        // interface to set or query this, when a selection is set that
	        // might cause this to be significant, this flag is set. The next
	        // measure phase will check whether the cursor is on a line-wrapping
	        // boundary and, if so, reset it to make sure it is positioned in
	        // the right place.
	        this.mustEnforceCursorAssoc = false;
	        let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
	        this.heightOracle = new HeightOracle(guessWrapping);
	        this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
	        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
	        this.viewport = this.getViewport(0, null);
	        this.updateViewportLines();
	        this.updateForViewport();
	        this.lineGaps = this.ensureLineGaps([]);
	        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
	        this.computeVisibleRanges();
	    }
	    updateForViewport() {
	        let viewports = [this.viewport], { main } = this.state.selection;
	        for (let i = 0; i <= 1; i++) {
	            let pos = i ? main.head : main.anchor;
	            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
	                let { from, to } = this.lineBlockAt(pos);
	                viewports.push(new Viewport(from, to));
	            }
	        }
	        this.viewports = viewports.sort((a, b) => a.from - b.from);
	        this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
	            new BigScaler(this.heightOracle, this.heightMap, this.viewports);
	    }
	    updateViewportLines() {
	        this.viewportLines = [];
	        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
	            this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
	        });
	    }
	    update(update, scrollTarget = null) {
	        this.state = update.state;
	        let prevDeco = this.stateDeco;
	        this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
	        let contentChanges = update.changedRanges;
	        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
	        let prevHeight = this.heightMap.height;
	        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
	        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
	        if (this.heightMap.height != prevHeight)
	            update.flags |= 2 /* UpdateFlag.Height */;
	        if (scrollAnchor) {
	            this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
	            this.scrollAnchorHeight = scrollAnchor.top;
	        }
	        else {
	            this.scrollAnchorPos = -1;
	            this.scrollAnchorHeight = this.heightMap.height;
	        }
	        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
	        if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
	            !this.viewportIsAppropriate(viewport))
	            viewport = this.getViewport(0, scrollTarget);
	        let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
	            viewport.from != this.viewport.from || viewport.to != this.viewport.to;
	        this.viewport = viewport;
	        this.updateForViewport();
	        if (updateLines)
	            this.updateViewportLines();
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
	            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
	        update.flags |= this.computeVisibleRanges();
	        if (scrollTarget)
	            this.scrollTarget = scrollTarget;
	        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
	            update.state.selection.main.empty && update.state.selection.main.assoc &&
	            !update.state.facet(nativeSelectionHidden))
	            this.mustEnforceCursorAssoc = true;
	    }
	    measure(view) {
	        let dom = view.contentDOM, style = window.getComputedStyle(dom);
	        let oracle = this.heightOracle;
	        let whiteSpace = style.whiteSpace;
	        this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
	        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
	        let domRect = dom.getBoundingClientRect();
	        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
	        this.contentDOMHeight = domRect.height;
	        this.mustMeasureContent = false;
	        let result = 0, bias = 0;
	        if (domRect.width && domRect.height) {
	            let { scaleX, scaleY } = getScale(dom, domRect);
	            if (this.scaleX != scaleX || this.scaleY != scaleY) {
	                this.scaleX = scaleX;
	                this.scaleY = scaleY;
	                result |= 8 /* UpdateFlag.Geometry */;
	                refresh = measureContent = true;
	            }
	        }
	        // Vertical padding
	        let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
	        let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
	        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
	            this.paddingTop = paddingTop;
	            this.paddingBottom = paddingBottom;
	            result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
	        }
	        if (this.editorWidth != view.scrollDOM.clientWidth) {
	            if (oracle.lineWrapping)
	                measureContent = true;
	            this.editorWidth = view.scrollDOM.clientWidth;
	            result |= 8 /* UpdateFlag.Geometry */;
	        }
	        let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
	        if (this.scrollTop != scrollTop) {
	            this.scrollAnchorHeight = -1;
	            this.scrollTop = scrollTop;
	        }
	        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
	        // Pixel viewport
	        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
	        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
	        this.pixelViewport = pixelViewport;
	        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
	        if (inView != this.inView) {
	            this.inView = inView;
	            if (inView)
	                measureContent = true;
	        }
	        if (!this.inView && !this.scrollTarget)
	            return 0;
	        let contentWidth = domRect.width;
	        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
	            this.contentDOMWidth = domRect.width;
	            this.editorHeight = view.scrollDOM.clientHeight;
	            result |= 8 /* UpdateFlag.Geometry */;
	        }
	        if (measureContent) {
	            let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
	            if (oracle.mustRefreshForHeights(lineHeights))
	                refresh = true;
	            if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
	                let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
	                refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
	                if (refresh) {
	                    view.docView.minWidth = 0;
	                    result |= 8 /* UpdateFlag.Geometry */;
	                }
	            }
	            if (dTop > 0 && dBottom > 0)
	                bias = Math.max(dTop, dBottom);
	            else if (dTop < 0 && dBottom < 0)
	                bias = Math.min(dTop, dBottom);
	            oracle.heightChanged = false;
	            for (let vp of this.viewports) {
	                let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
	                this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
	            }
	            if (oracle.heightChanged)
	                result |= 2 /* UpdateFlag.Height */;
	        }
	        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
	            this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
	                this.scrollTarget.range.head > this.viewport.to);
	        if (viewportChange)
	            this.viewport = this.getViewport(bias, this.scrollTarget);
	        this.updateForViewport();
	        if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
	            this.updateViewportLines();
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
	            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
	        result |= this.computeVisibleRanges();
	        if (this.mustEnforceCursorAssoc) {
	            this.mustEnforceCursorAssoc = false;
	            // This is done in the read stage, because moving the selection
	            // to a line end is going to trigger a layout anyway, so it
	            // can't be a pure write. It should be rare that it does any
	            // writing.
	            view.docView.enforceCursorAssoc();
	        }
	        return result;
	    }
	    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
	    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
	    getViewport(bias, scrollTarget) {
	        // This will divide VP.Margin between the top and the
	        // bottom, depending on the bias (the change in viewport position
	        // since the last update). It'll hold a number between 0 and 1
	        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
	        let map = this.heightMap, oracle = this.heightOracle;
	        let { visibleTop, visibleBottom } = this;
	        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType$1.ByHeight, oracle, 0, 0).to);
	        // If scrollTarget is given, make sure the viewport includes that position
	        if (scrollTarget) {
	            let { head } = scrollTarget.range;
	            if (head < viewport.from || head > viewport.to) {
	                let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
	                let block = map.lineAt(head, QueryType$1.ByPos, oracle, 0, 0), topPos;
	                if (scrollTarget.y == "center")
	                    topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
	                else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
	                    topPos = block.top;
	                else
	                    topPos = block.bottom - viewHeight;
	                viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType$1.ByHeight, oracle, 0, 0).to);
	            }
	        }
	        return viewport;
	    }
	    mapViewport(viewport, changes) {
	        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
	        return new Viewport(this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0).to);
	    }
	    // Checks if a given viewport covers the visible part of the
	    // document and not too much beyond that.
	    viewportIsAppropriate({ from, to }, bias = 0) {
	        if (!this.inView)
	            return true;
	        let { top } = this.heightMap.lineAt(from, QueryType$1.ByPos, this.heightOracle, 0, 0);
	        let { bottom } = this.heightMap.lineAt(to, QueryType$1.ByPos, this.heightOracle, 0, 0);
	        let { visibleTop, visibleBottom } = this;
	        return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
	            (to == this.state.doc.length ||
	                bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
	            (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
	    }
	    mapLineGaps(gaps, changes) {
	        if (!gaps.length || changes.empty)
	            return gaps;
	        let mapped = [];
	        for (let gap of gaps)
	            if (!changes.touchesRange(gap.from, gap.to))
	                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
	        return mapped;
	    }
	    // Computes positions in the viewport where the start or end of a
	    // line should be hidden, trying to reuse existing line gaps when
	    // appropriate to avoid unneccesary redraws.
	    // Uses crude character-counting for the positioning and sizing,
	    // since actual DOM coordinates aren't always available and
	    // predictable. Relies on generous margins (see LG.Margin) to hide
	    // the artifacts this might produce from the user.
	    ensureLineGaps(current, mayMeasure) {
	        let wrapping = this.heightOracle.lineWrapping;
	        let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
	        // The non-wrapping logic won't work at all in predominantly right-to-left text.
	        if (this.defaultTextDirection != Direction.LTR && !wrapping)
	            return [];
	        let gaps = [];
	        let addGap = (from, to, line, structure) => {
	            if (to - from < halfMargin)
	                return;
	            let sel = this.state.selection.main, avoid = [sel.from];
	            if (!sel.empty)
	                avoid.push(sel.to);
	            for (let pos of avoid) {
	                if (pos > from && pos < to) {
	                    addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
	                    addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
	                    return;
	                }
	            }
	            let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
	                Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
	                !avoid.some(pos => gap.from < pos && gap.to > pos));
	            if (!gap) {
	                // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
	                if (to < line.to && mayMeasure && wrapping &&
	                    mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
	                    let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
	                    if (lineStart > from)
	                        to = lineStart;
	                }
	                gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
	            }
	            gaps.push(gap);
	        };
	        for (let line of this.viewportLines) {
	            if (line.length < doubleMargin)
	                continue;
	            let structure = lineStructure(line.from, line.to, this.stateDeco);
	            if (structure.total < doubleMargin)
	                continue;
	            let target = this.scrollTarget ? this.scrollTarget.range.head : null;
	            let viewFrom, viewTo;
	            if (wrapping) {
	                let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
	                let top, bot;
	                if (target != null) {
	                    let targetFrac = findFraction(structure, target);
	                    let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
	                    top = targetFrac - spaceFrac;
	                    bot = targetFrac + spaceFrac;
	                }
	                else {
	                    top = (this.visibleTop - line.top - marginHeight) / line.height;
	                    bot = (this.visibleBottom - line.top + marginHeight) / line.height;
	                }
	                viewFrom = findPosition(structure, top);
	                viewTo = findPosition(structure, bot);
	            }
	            else {
	                let totalWidth = structure.total * this.heightOracle.charWidth;
	                let marginWidth = margin * this.heightOracle.charWidth;
	                let left, right;
	                if (target != null) {
	                    let targetFrac = findFraction(structure, target);
	                    let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
	                    left = targetFrac - spaceFrac;
	                    right = targetFrac + spaceFrac;
	                }
	                else {
	                    left = (this.pixelViewport.left - marginWidth) / totalWidth;
	                    right = (this.pixelViewport.right + marginWidth) / totalWidth;
	                }
	                viewFrom = findPosition(structure, left);
	                viewTo = findPosition(structure, right);
	            }
	            if (viewFrom > line.from)
	                addGap(line.from, viewFrom, line, structure);
	            if (viewTo < line.to)
	                addGap(viewTo, line.to, line, structure);
	        }
	        return gaps;
	    }
	    gapSize(line, from, to, structure) {
	        let fraction = findFraction(structure, to) - findFraction(structure, from);
	        if (this.heightOracle.lineWrapping) {
	            return line.height * fraction;
	        }
	        else {
	            return structure.total * this.heightOracle.charWidth * fraction;
	        }
	    }
	    updateLineGaps(gaps) {
	        if (!LineGap.same(gaps, this.lineGaps)) {
	            this.lineGaps = gaps;
	            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
	        }
	    }
	    computeVisibleRanges() {
	        let deco = this.stateDeco;
	        if (this.lineGaps.length)
	            deco = deco.concat(this.lineGapDeco);
	        let ranges = [];
	        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
	            span(from, to) { ranges.push({ from, to }); },
	            point() { }
	        }, 20);
	        let changed = ranges.length != this.visibleRanges.length ||
	            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
	        this.visibleRanges = ranges;
	        return changed ? 4 /* UpdateFlag.Viewport */ : 0;
	    }
	    lineBlockAt(pos) {
	        return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
	            scaleBlock(this.heightMap.lineAt(pos, QueryType$1.ByPos, this.heightOracle, 0, 0), this.scaler);
	    }
	    lineBlockAtHeight(height) {
	        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType$1.ByHeight, this.heightOracle, 0, 0), this.scaler);
	    }
	    scrollAnchorAt(scrollTop) {
	        let block = this.lineBlockAtHeight(scrollTop + 8);
	        return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
	    }
	    elementAtHeight(height) {
	        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
	    }
	    get docHeight() {
	        return this.scaler.toDOM(this.heightMap.height);
	    }
	    get contentHeight() {
	        return this.docHeight + this.paddingTop + this.paddingBottom;
	    }
	}
	class Viewport {
	    constructor(from, to) {
	        this.from = from;
	        this.to = to;
	    }
	}
	function lineStructure(from, to, stateDeco) {
	    let ranges = [], pos = from, total = 0;
	    RangeSet.spans(stateDeco, from, to, {
	        span() { },
	        point(from, to) {
	            if (from > pos) {
	                ranges.push({ from: pos, to: from });
	                total += from - pos;
	            }
	            pos = to;
	        }
	    }, 20); // We're only interested in collapsed ranges of a significant size
	    if (pos < to) {
	        ranges.push({ from: pos, to });
	        total += to - pos;
	    }
	    return { total, ranges };
	}
	function findPosition({ total, ranges }, ratio) {
	    if (ratio <= 0)
	        return ranges[0].from;
	    if (ratio >= 1)
	        return ranges[ranges.length - 1].to;
	    let dist = Math.floor(total * ratio);
	    for (let i = 0;; i++) {
	        let { from, to } = ranges[i], size = to - from;
	        if (dist <= size)
	            return from + dist;
	        dist -= size;
	    }
	}
	function findFraction(structure, pos) {
	    let counted = 0;
	    for (let { from, to } of structure.ranges) {
	        if (pos <= to) {
	            counted += pos - from;
	            break;
	        }
	        counted += to - from;
	    }
	    return counted / structure.total;
	}
	function find(array, f) {
	    for (let val of array)
	        if (f(val))
	            return val;
	    return undefined;
	}
	// Don't scale when the document height is within the range of what
	// the DOM can handle.
	const IdScaler = {
	    toDOM(n) { return n; },
	    fromDOM(n) { return n; },
	    scale: 1
	};
	// When the height is too big (> VP.MaxDOMHeight), scale down the
	// regions outside the viewports so that the total height is
	// VP.MaxDOMHeight.
	class BigScaler {
	    constructor(oracle, heightMap, viewports) {
	        let vpHeight = 0, base = 0, domBase = 0;
	        this.viewports = viewports.map(({ from, to }) => {
	            let top = heightMap.lineAt(from, QueryType$1.ByPos, oracle, 0, 0).top;
	            let bottom = heightMap.lineAt(to, QueryType$1.ByPos, oracle, 0, 0).bottom;
	            vpHeight += bottom - top;
	            return { from, to, top, bottom, domTop: 0, domBottom: 0 };
	        });
	        this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
	        for (let obj of this.viewports) {
	            obj.domTop = domBase + (obj.top - base) * this.scale;
	            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
	            base = obj.bottom;
	        }
	    }
	    toDOM(n) {
	        for (let i = 0, base = 0, domBase = 0;; i++) {
	            let vp = i < this.viewports.length ? this.viewports[i] : null;
	            if (!vp || n < vp.top)
	                return domBase + (n - base) * this.scale;
	            if (n <= vp.bottom)
	                return vp.domTop + (n - vp.top);
	            base = vp.bottom;
	            domBase = vp.domBottom;
	        }
	    }
	    fromDOM(n) {
	        for (let i = 0, base = 0, domBase = 0;; i++) {
	            let vp = i < this.viewports.length ? this.viewports[i] : null;
	            if (!vp || n < vp.domTop)
	                return base + (n - domBase) / this.scale;
	            if (n <= vp.domBottom)
	                return vp.top + (n - vp.domTop);
	            base = vp.bottom;
	            domBase = vp.domBottom;
	        }
	    }
	}
	function scaleBlock(block, scaler) {
	    if (scaler.scale == 1)
	        return block;
	    let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
	    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
	}

	const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
	const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
	const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
	const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
	function buildTheme(main, spec, scopes) {
	    return new StyleModule(spec, {
	        finish(sel) {
	            return /&/.test(sel) ? sel.replace(/&\w*/, m => {
	                if (m == "&")
	                    return main;
	                if (!scopes || !scopes[m])
	                    throw new RangeError(`Unsupported selector: ${m}`);
	                return scopes[m];
	            }) : main + " " + sel;
	        }
	    });
	}
	const baseTheme$1$2 = /*@__PURE__*/buildTheme("." + baseThemeID, {
	    "&": {
	        position: "relative !important",
	        boxSizing: "border-box",
	        "&.cm-focused": {
	            // Provide a simple default outline to make sure a focused
	            // editor is visually distinct. Can't leave the default behavior
	            // because that will apply to the content element, which is
	            // inside the scrollable container and doesn't include the
	            // gutters. We also can't use an 'auto' outline, since those
	            // are, for some reason, drawn behind the element content, which
	            // will cause things like the active line background to cover
	            // the outline (#297).
	            outline: "1px dotted #212121"
	        },
	        display: "flex !important",
	        flexDirection: "column"
	    },
	    ".cm-scroller": {
	        display: "flex !important",
	        alignItems: "flex-start !important",
	        fontFamily: "monospace",
	        lineHeight: 1.4,
	        height: "100%",
	        overflowX: "auto",
	        position: "relative",
	        zIndex: 0
	    },
	    ".cm-content": {
	        margin: 0,
	        flexGrow: 2,
	        flexShrink: 0,
	        display: "block",
	        whiteSpace: "pre",
	        wordWrap: "normal", // https://github.com/codemirror/dev/issues/456
	        boxSizing: "border-box",
	        minHeight: "100%",
	        padding: "4px 0",
	        outline: "none",
	        "&[contenteditable=true]": {
	            WebkitUserModify: "read-write-plaintext-only",
	        }
	    },
	    ".cm-lineWrapping": {
	        whiteSpace_fallback: "pre-wrap", // For IE
	        whiteSpace: "break-spaces",
	        wordBreak: "break-word", // For Safari, which doesn't support overflow-wrap: anywhere
	        overflowWrap: "anywhere",
	        flexShrink: 1
	    },
	    "&light .cm-content": { caretColor: "black" },
	    "&dark .cm-content": { caretColor: "white" },
	    ".cm-line": {
	        display: "block",
	        padding: "0 2px 0 6px"
	    },
	    ".cm-layer": {
	        position: "absolute",
	        left: 0,
	        top: 0,
	        contain: "size style",
	        "& > *": {
	            position: "absolute"
	        }
	    },
	    "&light .cm-selectionBackground": {
	        background: "#d9d9d9"
	    },
	    "&dark .cm-selectionBackground": {
	        background: "#222"
	    },
	    "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
	        background: "#d7d4f0"
	    },
	    "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
	        background: "#233"
	    },
	    ".cm-cursorLayer": {
	        pointerEvents: "none"
	    },
	    "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
	        animation: "steps(1) cm-blink 1.2s infinite"
	    },
	    // Two animations defined so that we can switch between them to
	    // restart the animation without forcing another style
	    // recomputation.
	    "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
	    "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
	    ".cm-cursor, .cm-dropCursor": {
	        borderLeft: "1.2px solid black",
	        marginLeft: "-0.6px",
	        pointerEvents: "none",
	    },
	    ".cm-cursor": {
	        display: "none"
	    },
	    "&dark .cm-cursor": {
	        borderLeftColor: "#444"
	    },
	    ".cm-dropCursor": {
	        position: "absolute"
	    },
	    "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
	        display: "block"
	    },
	    ".cm-iso": {
	        unicodeBidi: "isolate"
	    },
	    ".cm-announced": {
	        position: "fixed",
	        top: "-10000px"
	    },
	    "@media print": {
	        ".cm-announced": { display: "none" }
	    },
	    "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
	    "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
	    "&light .cm-specialChar": { color: "red" },
	    "&dark .cm-specialChar": { color: "#f78" },
	    ".cm-gutters": {
	        flexShrink: 0,
	        display: "flex",
	        height: "100%",
	        boxSizing: "border-box",
	        insetInlineStart: 0,
	        zIndex: 200
	    },
	    "&light .cm-gutters": {
	        backgroundColor: "#f5f5f5",
	        color: "#6c6c6c",
	        borderRight: "1px solid #ddd"
	    },
	    "&dark .cm-gutters": {
	        backgroundColor: "#333338",
	        color: "#ccc"
	    },
	    ".cm-gutter": {
	        display: "flex !important", // Necessary -- prevents margin collapsing
	        flexDirection: "column",
	        flexShrink: 0,
	        boxSizing: "border-box",
	        minHeight: "100%",
	        overflow: "hidden"
	    },
	    ".cm-gutterElement": {
	        boxSizing: "border-box"
	    },
	    ".cm-lineNumbers .cm-gutterElement": {
	        padding: "0 3px 0 5px",
	        minWidth: "20px",
	        textAlign: "right",
	        whiteSpace: "nowrap"
	    },
	    "&light .cm-activeLineGutter": {
	        backgroundColor: "#e2f2ff"
	    },
	    "&dark .cm-activeLineGutter": {
	        backgroundColor: "#222227"
	    },
	    ".cm-panels": {
	        boxSizing: "border-box",
	        position: "sticky",
	        left: 0,
	        right: 0
	    },
	    "&light .cm-panels": {
	        backgroundColor: "#f5f5f5",
	        color: "black"
	    },
	    "&light .cm-panels-top": {
	        borderBottom: "1px solid #ddd"
	    },
	    "&light .cm-panels-bottom": {
	        borderTop: "1px solid #ddd"
	    },
	    "&dark .cm-panels": {
	        backgroundColor: "#333338",
	        color: "white"
	    },
	    ".cm-tab": {
	        display: "inline-block",
	        overflow: "hidden",
	        verticalAlign: "bottom"
	    },
	    ".cm-widgetBuffer": {
	        verticalAlign: "text-top",
	        height: "1em",
	        width: 0,
	        display: "inline"
	    },
	    ".cm-placeholder": {
	        color: "#888",
	        display: "inline-block",
	        verticalAlign: "top",
	    },
	    ".cm-highlightSpace:before": {
	        content: "attr(data-display)",
	        position: "absolute",
	        pointerEvents: "none",
	        color: "#888"
	    },
	    ".cm-highlightTab": {
	        backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
	        backgroundSize: "auto 100%",
	        backgroundPosition: "right 90%",
	        backgroundRepeat: "no-repeat"
	    },
	    ".cm-trailingSpace": {
	        backgroundColor: "#ff332255"
	    },
	    ".cm-button": {
	        verticalAlign: "middle",
	        color: "inherit",
	        fontSize: "70%",
	        padding: ".2em 1em",
	        borderRadius: "1px"
	    },
	    "&light .cm-button": {
	        backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
	        border: "1px solid #888",
	        "&:active": {
	            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
	        }
	    },
	    "&dark .cm-button": {
	        backgroundImage: "linear-gradient(#393939, #111)",
	        border: "1px solid #888",
	        "&:active": {
	            backgroundImage: "linear-gradient(#111, #333)"
	        }
	    },
	    ".cm-textfield": {
	        verticalAlign: "middle",
	        color: "inherit",
	        fontSize: "70%",
	        border: "1px solid silver",
	        padding: ".2em .5em"
	    },
	    "&light .cm-textfield": {
	        backgroundColor: "white"
	    },
	    "&dark .cm-textfield": {
	        border: "1px solid #555",
	        backgroundColor: "inherit"
	    }
	}, lightDarkIDs);

	const LineBreakPlaceholder = "\uffff";
	class DOMReader {
	    constructor(points, state) {
	        this.points = points;
	        this.text = "";
	        this.lineSeparator = state.facet(EditorState.lineSeparator);
	    }
	    append(text) {
	        this.text += text;
	    }
	    lineBreak() {
	        this.text += LineBreakPlaceholder;
	    }
	    readRange(start, end) {
	        if (!start)
	            return this;
	        let parent = start.parentNode;
	        for (let cur = start;;) {
	            this.findPointBefore(parent, cur);
	            let oldLen = this.text.length;
	            this.readNode(cur);
	            let next = cur.nextSibling;
	            if (next == end)
	                break;
	            let view = ContentView.get(cur), nextView = ContentView.get(next);
	            if (view && nextView ? view.breakAfter :
	                (view ? view.breakAfter : isBlockElement(cur)) ||
	                    (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
	                this.lineBreak();
	            cur = next;
	        }
	        this.findPointBefore(parent, end);
	        return this;
	    }
	    readTextNode(node) {
	        let text = node.nodeValue;
	        for (let point of this.points)
	            if (point.node == node)
	                point.pos = this.text.length + Math.min(point.offset, text.length);
	        for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
	            let nextBreak = -1, breakSize = 1, m;
	            if (this.lineSeparator) {
	                nextBreak = text.indexOf(this.lineSeparator, off);
	                breakSize = this.lineSeparator.length;
	            }
	            else if (m = re.exec(text)) {
	                nextBreak = m.index;
	                breakSize = m[0].length;
	            }
	            this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
	            if (nextBreak < 0)
	                break;
	            this.lineBreak();
	            if (breakSize > 1)
	                for (let point of this.points)
	                    if (point.node == node && point.pos > this.text.length)
	                        point.pos -= breakSize - 1;
	            off = nextBreak + breakSize;
	        }
	    }
	    readNode(node) {
	        if (node.cmIgnore)
	            return;
	        let view = ContentView.get(node);
	        let fromView = view && view.overrideDOMText;
	        if (fromView != null) {
	            this.findPointInside(node, fromView.length);
	            for (let i = fromView.iter(); !i.next().done;) {
	                if (i.lineBreak)
	                    this.lineBreak();
	                else
	                    this.append(i.value);
	            }
	        }
	        else if (node.nodeType == 3) {
	            this.readTextNode(node);
	        }
	        else if (node.nodeName == "BR") {
	            if (node.nextSibling)
	                this.lineBreak();
	        }
	        else if (node.nodeType == 1) {
	            this.readRange(node.firstChild, null);
	        }
	    }
	    findPointBefore(node, next) {
	        for (let point of this.points)
	            if (point.node == node && node.childNodes[point.offset] == next)
	                point.pos = this.text.length;
	    }
	    findPointInside(node, length) {
	        for (let point of this.points)
	            if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
	                point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
	    }
	}
	function isAtEnd(parent, node, offset) {
	    for (;;) {
	        if (!node || offset < maxOffset(node))
	            return false;
	        if (node == parent)
	            return true;
	        offset = domIndex(node) + 1;
	        node = node.parentNode;
	    }
	}
	function isBlockElement(node) {
	    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
	}
	class DOMPoint {
	    constructor(node, offset) {
	        this.node = node;
	        this.offset = offset;
	        this.pos = -1;
	    }
	}

	class DOMChange {
	    constructor(view, start, end, typeOver) {
	        this.typeOver = typeOver;
	        this.bounds = null;
	        this.text = "";
	        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
	        if (view.state.readOnly && start > -1) {
	            // Ignore changes when the editor is read-only
	            this.newSel = null;
	        }
	        else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
	            let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
	            let reader = new DOMReader(selPoints, view.state);
	            reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
	            this.text = reader.text;
	            this.newSel = selectionFromPoints(selPoints, this.bounds.from);
	        }
	        else {
	            let domSel = view.observer.selectionRange;
	            let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
	                !contains(view.contentDOM, domSel.focusNode)
	                ? view.state.selection.main.head
	                : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
	            let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
	                !contains(view.contentDOM, domSel.anchorNode)
	                ? view.state.selection.main.anchor
	                : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
	            // iOS will refuse to select the block gaps when doing select-all
	            let vp = view.viewport;
	            if (browser.ios && view.state.selection.main.empty && head != anchor &&
	                (vp.from > 0 || vp.to < view.state.doc.length)) {
	                let offFrom = vp.from - Math.min(head, anchor), offTo = vp.to - Math.max(head, anchor);
	                if ((offFrom == 0 || offFrom == 1) && (offTo == 0 || offTo == -1)) {
	                    head = 0;
	                    anchor = view.state.doc.length;
	                }
	            }
	            this.newSel = EditorSelection.single(anchor, head);
	        }
	    }
	}
	function applyDOMChange(view, domChange) {
	    let change;
	    let { newSel } = domChange, sel = view.state.selection.main;
	    let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
	    if (domChange.bounds) {
	        let { from, to } = domChange.bounds;
	        let preferredPos = sel.from, preferredSide = null;
	        // Prefer anchoring to end when Backspace is pressed (or, on
	        // Android, when something was deleted)
	        if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
	            preferredPos = sel.to;
	            preferredSide = "end";
	        }
	        let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
	        if (diff) {
	            // Chrome inserts two newlines when pressing shift-enter at the
	            // end of a line. DomChange drops one of those.
	            if (browser.chrome && lastKey == 13 &&
	                diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
	                diff.toB--;
	            change = { from: from + diff.from, to: from + diff.toA,
	                insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
	        }
	    }
	    else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
	        newSel = null;
	    }
	    if (!change && !newSel)
	        return false;
	    if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
	        // Heuristic to notice typing over a selected character
	        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
	    }
	    else if (change && change.from >= sel.from && change.to <= sel.to &&
	        (change.from != sel.from || change.to != sel.to) &&
	        (sel.to - sel.from) - (change.to - change.from) <= 4) {
	        // If the change is inside the selection and covers most of it,
	        // assume it is a selection replace (with identical characters at
	        // the start/end not included in the diff)
	        change = {
	            from: sel.from, to: sel.to,
	            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
	        };
	    }
	    else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
	        /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
	        // Detect insert-period-on-double-space Mac and Android behavior,
	        // and transform it into a regular space insert.
	        if (newSel && change.insert.length == 2)
	            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
	        change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
	    }
	    else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
	        change.insert.toString() == "\n " && view.lineWrapping) {
	        // In Chrome, if you insert a space at the start of a wrapped
	        // line, it will actually insert a newline and a space, causing a
	        // bogus new line to be created in CodeMirror (#968)
	        if (newSel)
	            newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
	        change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
	    }
	    if (change) {
	        if (browser.ios && view.inputState.flushIOSKey())
	            return true;
	        // Android browsers don't fire reasonable key events for enter,
	        // backspace, or delete. So this detects changes that look like
	        // they're caused by those keys, and reinterprets them as key
	        // events. (Some of these keys are also handled by beforeinput
	        // events and the pendingAndroidKey mechanism, but that's not
	        // reliable in all situations.)
	        if (browser.android &&
	            ((change.from == sel.from && change.to == sel.to &&
	                change.insert.length == 1 && change.insert.lines == 2 &&
	                dispatchKey(view.contentDOM, "Enter", 13)) ||
	                ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
	                    lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
	                    dispatchKey(view.contentDOM, "Backspace", 8)) ||
	                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
	                    dispatchKey(view.contentDOM, "Delete", 46))))
	            return true;
	        let text = change.insert.toString();
	        if (view.inputState.composing >= 0)
	            view.inputState.composing++;
	        let defaultTr;
	        let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
	        if (!view.state.facet(inputHandler$1).some(h => h(view, change.from, change.to, text, defaultInsert)))
	            view.dispatch(defaultInsert());
	        return true;
	    }
	    else if (newSel && !newSel.main.eq(sel)) {
	        let scrollIntoView = false, userEvent = "select";
	        if (view.inputState.lastSelectionTime > Date.now() - 50) {
	            if (view.inputState.lastSelectionOrigin == "select")
	                scrollIntoView = true;
	            userEvent = view.inputState.lastSelectionOrigin;
	        }
	        view.dispatch({ selection: newSel, scrollIntoView, userEvent });
	        return true;
	    }
	    else {
	        return false;
	    }
	}
	function applyDefaultInsert(view, change, newSel) {
	    let tr, startState = view.state, sel = startState.selection.main;
	    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
	        (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
	        view.inputState.composing < 0) {
	        let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
	        let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
	        tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
	    }
	    else {
	        let changes = startState.changes(change);
	        let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
	        // Try to apply a composition change to all cursors
	        if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
	            change.to <= sel.to && change.to >= sel.to - 10) {
	            let replaced = view.state.sliceDoc(change.from, change.to);
	            let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
	            if (composition) {
	                let dLen = change.insert.length - (change.to - change.from);
	                compositionRange = { from: composition.from, to: composition.to - dLen };
	            }
	            else {
	                compositionRange = view.state.doc.lineAt(sel.head);
	            }
	            let offset = sel.to - change.to, size = sel.to - sel.from;
	            tr = startState.changeByRange(range => {
	                if (range.from == sel.from && range.to == sel.to)
	                    return { changes, range: mainSel || range.map(changes) };
	                let to = range.to - offset, from = to - replaced.length;
	                if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
	                    // Unfortunately, there's no way to make multiple
	                    // changes in the same node work without aborting
	                    // composition, so cursors in the composition range are
	                    // ignored.
	                    range.to >= compositionRange.from && range.from <= compositionRange.to)
	                    return { range };
	                let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
	                return {
	                    changes: rangeChanges,
	                    range: !mainSel ? range.map(rangeChanges) :
	                        EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
	                };
	            });
	        }
	        else {
	            tr = {
	                changes,
	                selection: mainSel && startState.selection.replaceRange(mainSel)
	            };
	        }
	    }
	    let userEvent = "input.type";
	    if (view.composing ||
	        view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
	        view.inputState.compositionPendingChange = false;
	        userEvent += ".compose";
	        if (view.inputState.compositionFirstChange) {
	            userEvent += ".start";
	            view.inputState.compositionFirstChange = false;
	        }
	    }
	    return startState.update(tr, { userEvent, scrollIntoView: true });
	}
	function findDiff(a, b, preferredPos, preferredSide) {
	    let minLen = Math.min(a.length, b.length);
	    let from = 0;
	    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
	        from++;
	    if (from == minLen && a.length == b.length)
	        return null;
	    let toA = a.length, toB = b.length;
	    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
	        toA--;
	        toB--;
	    }
	    if (preferredSide == "end") {
	        let adjust = Math.max(0, from - Math.min(toA, toB));
	        preferredPos -= toA + adjust - from;
	    }
	    if (toA < from && a.length < b.length) {
	        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
	        from -= move;
	        toB = from + (toB - toA);
	        toA = from;
	    }
	    else if (toB < from) {
	        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
	        from -= move;
	        toA = from + (toA - toB);
	        toB = from;
	    }
	    return { from, toA, toB };
	}
	function selectionPoints(view) {
	    let result = [];
	    if (view.root.activeElement != view.contentDOM)
	        return result;
	    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
	    if (anchorNode) {
	        result.push(new DOMPoint(anchorNode, anchorOffset));
	        if (focusNode != anchorNode || focusOffset != anchorOffset)
	            result.push(new DOMPoint(focusNode, focusOffset));
	    }
	    return result;
	}
	function selectionFromPoints(points, base) {
	    if (points.length == 0)
	        return null;
	    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
	    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
	}

	const observeOptions = {
	    childList: true,
	    characterData: true,
	    subtree: true,
	    attributes: true,
	    characterDataOldValue: true
	};
	// IE11 has very broken mutation observers, so we also listen to
	// DOMCharacterDataModified there
	const useCharData = browser.ie && browser.ie_version <= 11;
	class DOMObserver {
	    constructor(view) {
	        this.view = view;
	        this.active = false;
	        // The known selection. Kept in our own object, as opposed to just
	        // directly accessing the selection because:
	        //  - Safari doesn't report the right selection in shadow DOM
	        //  - Reading from the selection forces a DOM layout
	        //  - This way, we can ignore selectionchange events if we have
	        //    already seen the 'new' selection
	        this.selectionRange = new DOMSelectionState;
	        // Set when a selection change is detected, cleared on flush
	        this.selectionChanged = false;
	        this.delayedFlush = -1;
	        this.resizeTimeout = -1;
	        this.queue = [];
	        this.delayedAndroidKey = null;
	        this.flushingAndroidKey = -1;
	        this.lastChange = 0;
	        this.scrollTargets = [];
	        this.intersection = null;
	        this.resizeScroll = null;
	        this.intersecting = false;
	        this.gapIntersection = null;
	        this.gaps = [];
	        // Timeout for scheduling check of the parents that need scroll handlers
	        this.parentCheck = -1;
	        this.dom = view.contentDOM;
	        this.observer = new MutationObserver(mutations => {
	            for (let mut of mutations)
	                this.queue.push(mut);
	            // IE11 will sometimes (on typing over a selection or
	            // backspacing out a single character text node) call the
	            // observer callback before actually updating the DOM.
	            //
	            // Unrelatedly, iOS Safari will, when ending a composition,
	            // sometimes first clear it, deliver the mutations, and then
	            // reinsert the finished text. CodeMirror's handling of the
	            // deletion will prevent the reinsertion from happening,
	            // breaking composition.
	            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
	                mutations.some(m => m.type == "childList" && m.removedNodes.length ||
	                    m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
	                this.flushSoon();
	            else
	                this.flush();
	        });
	        if (useCharData)
	            this.onCharData = (event) => {
	                this.queue.push({ target: event.target,
	                    type: "characterData",
	                    oldValue: event.prevValue });
	                this.flushSoon();
	            };
	        this.onSelectionChange = this.onSelectionChange.bind(this);
	        this.onResize = this.onResize.bind(this);
	        this.onPrint = this.onPrint.bind(this);
	        this.onScroll = this.onScroll.bind(this);
	        if (typeof ResizeObserver == "function") {
	            this.resizeScroll = new ResizeObserver(() => {
	                var _a;
	                if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
	                    this.onResize();
	            });
	            this.resizeScroll.observe(view.scrollDOM);
	        }
	        this.addWindowListeners(this.win = view.win);
	        this.start();
	        if (typeof IntersectionObserver == "function") {
	            this.intersection = new IntersectionObserver(entries => {
	                if (this.parentCheck < 0)
	                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
	                if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
	                    this.intersecting = !this.intersecting;
	                    if (this.intersecting != this.view.inView)
	                        this.onScrollChanged(document.createEvent("Event"));
	                }
	            }, { threshold: [0, .001] });
	            this.intersection.observe(this.dom);
	            this.gapIntersection = new IntersectionObserver(entries => {
	                if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
	                    this.onScrollChanged(document.createEvent("Event"));
	            }, {});
	        }
	        this.listenForScroll();
	        this.readSelectionRange();
	    }
	    onScrollChanged(e) {
	        this.view.inputState.runHandlers("scroll", e);
	        if (this.intersecting)
	            this.view.measure();
	    }
	    onScroll(e) {
	        if (this.intersecting)
	            this.flush(false);
	        this.onScrollChanged(e);
	    }
	    onResize() {
	        if (this.resizeTimeout < 0)
	            this.resizeTimeout = setTimeout(() => {
	                this.resizeTimeout = -1;
	                this.view.requestMeasure();
	            }, 50);
	    }
	    onPrint() {
	        this.view.viewState.printing = true;
	        this.view.measure();
	        setTimeout(() => {
	            this.view.viewState.printing = false;
	            this.view.requestMeasure();
	        }, 500);
	    }
	    updateGaps(gaps) {
	        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
	            this.gapIntersection.disconnect();
	            for (let gap of gaps)
	                this.gapIntersection.observe(gap);
	            this.gaps = gaps;
	        }
	    }
	    onSelectionChange(event) {
	        let wasChanged = this.selectionChanged;
	        if (!this.readSelectionRange() || this.delayedAndroidKey)
	            return;
	        let { view } = this, sel = this.selectionRange;
	        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
	            return;
	        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
	        if (context && context.ignoreEvent(event)) {
	            if (!wasChanged)
	                this.selectionChanged = false;
	            return;
	        }
	        // Deletions on IE11 fire their events in the wrong order, giving
	        // us a selection change event before the DOM changes are
	        // reported.
	        // Chrome Android has a similar issue when backspacing out a
	        // selection (#645).
	        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
	            // (Selection.isCollapsed isn't reliable on IE)
	            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
	            this.flushSoon();
	        else
	            this.flush(false);
	    }
	    readSelectionRange() {
	        let { view } = this;
	        // The Selection object is broken in shadow roots in Safari. See
	        // https://github.com/codemirror/dev/issues/414
	        let range = browser.safari && view.root.nodeType == 11 &&
	            deepActiveElement(this.dom.ownerDocument) == this.dom &&
	            safariSelectionRangeHack(this.view) || getSelection(view.root);
	        if (!range || this.selectionRange.eq(range))
	            return false;
	        let local = hasSelection(this.dom, range);
	        // Detect the situation where the browser has, on focus, moved the
	        // selection to the start of the content element. Reset it to the
	        // position from the editor state.
	        if (local && !this.selectionChanged &&
	            view.inputState.lastFocusTime > Date.now() - 200 &&
	            view.inputState.lastTouchTime < Date.now() - 300 &&
	            atElementStart(this.dom, range)) {
	            this.view.inputState.lastFocusTime = 0;
	            view.docView.updateSelection();
	            return false;
	        }
	        this.selectionRange.setRange(range);
	        if (local)
	            this.selectionChanged = true;
	        return true;
	    }
	    setSelectionRange(anchor, head) {
	        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
	        this.selectionChanged = false;
	    }
	    clearSelectionRange() {
	        this.selectionRange.set(null, 0, null, 0);
	    }
	    listenForScroll() {
	        this.parentCheck = -1;
	        let i = 0, changed = null;
	        for (let dom = this.dom; dom;) {
	            if (dom.nodeType == 1) {
	                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
	                    i++;
	                else if (!changed)
	                    changed = this.scrollTargets.slice(0, i);
	                if (changed)
	                    changed.push(dom);
	                dom = dom.assignedSlot || dom.parentNode;
	            }
	            else if (dom.nodeType == 11) { // Shadow root
	                dom = dom.host;
	            }
	            else {
	                break;
	            }
	        }
	        if (i < this.scrollTargets.length && !changed)
	            changed = this.scrollTargets.slice(0, i);
	        if (changed) {
	            for (let dom of this.scrollTargets)
	                dom.removeEventListener("scroll", this.onScroll);
	            for (let dom of this.scrollTargets = changed)
	                dom.addEventListener("scroll", this.onScroll);
	        }
	    }
	    ignore(f) {
	        if (!this.active)
	            return f();
	        try {
	            this.stop();
	            return f();
	        }
	        finally {
	            this.start();
	            this.clear();
	        }
	    }
	    start() {
	        if (this.active)
	            return;
	        this.observer.observe(this.dom, observeOptions);
	        if (useCharData)
	            this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
	        this.active = true;
	    }
	    stop() {
	        if (!this.active)
	            return;
	        this.active = false;
	        this.observer.disconnect();
	        if (useCharData)
	            this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
	    }
	    // Throw away any pending changes
	    clear() {
	        this.processRecords();
	        this.queue.length = 0;
	        this.selectionChanged = false;
	    }
	    // Chrome Android, especially in combination with GBoard, not only
	    // doesn't reliably fire regular key events, but also often
	    // surrounds the effect of enter or backspace with a bunch of
	    // composition events that, when interrupted, cause text duplication
	    // or other kinds of corruption. This hack makes the editor back off
	    // from handling DOM changes for a moment when such a key is
	    // detected (via beforeinput or keydown), and then tries to flush
	    // them or, if that has no effect, dispatches the given key.
	    delayAndroidKey(key, keyCode) {
	        var _a;
	        if (!this.delayedAndroidKey) {
	            let flush = () => {
	                let key = this.delayedAndroidKey;
	                if (key) {
	                    this.clearDelayedAndroidKey();
	                    this.view.inputState.lastKeyCode = key.keyCode;
	                    this.view.inputState.lastKeyTime = Date.now();
	                    let flushed = this.flush();
	                    if (!flushed && key.force)
	                        dispatchKey(this.dom, key.key, key.keyCode);
	                }
	            };
	            this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
	        }
	        // Since backspace beforeinput is sometimes signalled spuriously,
	        // Enter always takes precedence.
	        if (!this.delayedAndroidKey || key == "Enter")
	            this.delayedAndroidKey = {
	                key, keyCode,
	                // Only run the key handler when no changes are detected if
	                // this isn't coming right after another change, in which case
	                // it is probably part of a weird chain of updates, and should
	                // be ignored if it returns the DOM to its previous state.
	                force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
	            };
	    }
	    clearDelayedAndroidKey() {
	        this.win.cancelAnimationFrame(this.flushingAndroidKey);
	        this.delayedAndroidKey = null;
	        this.flushingAndroidKey = -1;
	    }
	    flushSoon() {
	        if (this.delayedFlush < 0)
	            this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
	    }
	    forceFlush() {
	        if (this.delayedFlush >= 0) {
	            this.view.win.cancelAnimationFrame(this.delayedFlush);
	            this.delayedFlush = -1;
	        }
	        this.flush();
	    }
	    pendingRecords() {
	        for (let mut of this.observer.takeRecords())
	            this.queue.push(mut);
	        return this.queue;
	    }
	    processRecords() {
	        let records = this.pendingRecords();
	        if (records.length)
	            this.queue = [];
	        let from = -1, to = -1, typeOver = false;
	        for (let record of records) {
	            let range = this.readMutation(record);
	            if (!range)
	                continue;
	            if (range.typeOver)
	                typeOver = true;
	            if (from == -1) {
	                ({ from, to } = range);
	            }
	            else {
	                from = Math.min(range.from, from);
	                to = Math.max(range.to, to);
	            }
	        }
	        return { from, to, typeOver };
	    }
	    readChange() {
	        let { from, to, typeOver } = this.processRecords();
	        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
	        if (from < 0 && !newSel)
	            return null;
	        if (from > -1)
	            this.lastChange = Date.now();
	        this.view.inputState.lastFocusTime = 0;
	        this.selectionChanged = false;
	        let change = new DOMChange(this.view, from, to, typeOver);
	        this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
	        return change;
	    }
	    // Apply pending changes, if any
	    flush(readSelection = true) {
	        // Completely hold off flushing when pending keys are set—the code
	        // managing those will make sure processRecords is called and the
	        // view is resynchronized after
	        if (this.delayedFlush >= 0 || this.delayedAndroidKey)
	            return false;
	        if (readSelection)
	            this.readSelectionRange();
	        let domChange = this.readChange();
	        if (!domChange) {
	            this.view.requestMeasure();
	            return false;
	        }
	        let startState = this.view.state;
	        let handled = applyDOMChange(this.view, domChange);
	        // The view wasn't updated
	        if (this.view.state == startState)
	            this.view.update([]);
	        return handled;
	    }
	    readMutation(rec) {
	        let cView = this.view.docView.nearest(rec.target);
	        if (!cView || cView.ignoreMutation(rec))
	            return null;
	        cView.markDirty(rec.type == "attributes");
	        if (rec.type == "attributes")
	            cView.flags |= 4 /* ViewFlag.AttrsDirty */;
	        if (rec.type == "childList") {
	            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
	            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
	            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
	                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
	        }
	        else if (rec.type == "characterData") {
	            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
	        }
	        else {
	            return null;
	        }
	    }
	    setWindow(win) {
	        if (win != this.win) {
	            this.removeWindowListeners(this.win);
	            this.win = win;
	            this.addWindowListeners(this.win);
	        }
	    }
	    addWindowListeners(win) {
	        win.addEventListener("resize", this.onResize);
	        win.addEventListener("beforeprint", this.onPrint);
	        win.addEventListener("scroll", this.onScroll);
	        win.document.addEventListener("selectionchange", this.onSelectionChange);
	    }
	    removeWindowListeners(win) {
	        win.removeEventListener("scroll", this.onScroll);
	        win.removeEventListener("resize", this.onResize);
	        win.removeEventListener("beforeprint", this.onPrint);
	        win.document.removeEventListener("selectionchange", this.onSelectionChange);
	    }
	    destroy() {
	        var _a, _b, _c;
	        this.stop();
	        (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
	        (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
	        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
	        for (let dom of this.scrollTargets)
	            dom.removeEventListener("scroll", this.onScroll);
	        this.removeWindowListeners(this.win);
	        clearTimeout(this.parentCheck);
	        clearTimeout(this.resizeTimeout);
	        this.win.cancelAnimationFrame(this.delayedFlush);
	        this.win.cancelAnimationFrame(this.flushingAndroidKey);
	    }
	}
	function findChild(cView, dom, dir) {
	    while (dom) {
	        let curView = ContentView.get(dom);
	        if (curView && curView.parent == cView)
	            return curView;
	        let parent = dom.parentNode;
	        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
	    }
	    return null;
	}
	// Used to work around a Safari Selection/shadow DOM bug (#414)
	function safariSelectionRangeHack(view) {
	    let found = null;
	    // Because Safari (at least in 2018-2021) doesn't provide regular
	    // access to the selection inside a shadowroot, we have to perform a
	    // ridiculous hack to get at it—using `execCommand` to trigger a
	    // `beforeInput` event so that we can read the target range from the
	    // event.
	    function read(event) {
	        event.preventDefault();
	        event.stopImmediatePropagation();
	        found = event.getTargetRanges()[0];
	    }
	    view.contentDOM.addEventListener("beforeinput", read, true);
	    view.dom.ownerDocument.execCommand("indent");
	    view.contentDOM.removeEventListener("beforeinput", read, true);
	    if (!found)
	        return null;
	    let anchorNode = found.startContainer, anchorOffset = found.startOffset;
	    let focusNode = found.endContainer, focusOffset = found.endOffset;
	    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
	    // Since such a range doesn't distinguish between anchor and head,
	    // use a heuristic that flips it around if its end matches the
	    // current anchor.
	    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
	        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
	    return { anchorNode, anchorOffset, focusNode, focusOffset };
	}

	// The editor's update state machine looks something like this:
	//
	//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
	//                                         ↑      ↓
	//                                         Updating (measure)
	//
	// The difference between 'Idle' and 'Idle (unchecked)' lies in
	// whether a layout check has been scheduled. A regular update through
	// the `update` method updates the DOM in a write-only fashion, and
	// relies on a check (scheduled with `requestAnimationFrame`) to make
	// sure everything is where it should be and the viewport covers the
	// visible code. That check continues to measure and then optionally
	// update until it reaches a coherent state.
	/**
	An editor view represents the editor's user interface. It holds
	the editable DOM surface, and possibly other elements such as the
	line number gutter. It handles events and dispatches state
	transactions for editing actions.
	*/
	class EditorView {
	    /**
	    The current editor state.
	    */
	    get state() { return this.viewState.state; }
	    /**
	    To be able to display large documents without consuming too much
	    memory or overloading the browser, CodeMirror only draws the
	    code that is visible (plus a margin around it) to the DOM. This
	    property tells you the extent of the current drawn viewport, in
	    document positions.
	    */
	    get viewport() { return this.viewState.viewport; }
	    /**
	    When there are, for example, large collapsed ranges in the
	    viewport, its size can be a lot bigger than the actual visible
	    content. Thus, if you are doing something like styling the
	    content in the viewport, it is preferable to only do so for
	    these ranges, which are the subset of the viewport that is
	    actually drawn.
	    */
	    get visibleRanges() { return this.viewState.visibleRanges; }
	    /**
	    Returns false when the editor is entirely scrolled out of view
	    or otherwise hidden.
	    */
	    get inView() { return this.viewState.inView; }
	    /**
	    Indicates whether the user is currently composing text via
	    [IME](https://en.wikipedia.org/wiki/Input_method), and at least
	    one change has been made in the current composition.
	    */
	    get composing() { return this.inputState.composing > 0; }
	    /**
	    Indicates whether the user is currently in composing state. Note
	    that on some platforms, like Android, this will be the case a
	    lot, since just putting the cursor on a word starts a
	    composition there.
	    */
	    get compositionStarted() { return this.inputState.composing >= 0; }
	    /**
	    The document or shadow root that the view lives in.
	    */
	    get root() { return this._root; }
	    /**
	    @internal
	    */
	    get win() { return this.dom.ownerDocument.defaultView || window; }
	    /**
	    Construct a new view. You'll want to either provide a `parent`
	    option, or put `view.dom` into your document after creating a
	    view, so that the user can see the editor.
	    */
	    constructor(config = {}) {
	        this.plugins = [];
	        this.pluginMap = new Map;
	        this.editorAttrs = {};
	        this.contentAttrs = {};
	        this.bidiCache = [];
	        this.destroyed = false;
	        /**
	        @internal
	        */
	        this.updateState = 2 /* UpdateState.Updating */;
	        /**
	        @internal
	        */
	        this.measureScheduled = -1;
	        /**
	        @internal
	        */
	        this.measureRequests = [];
	        this.contentDOM = document.createElement("div");
	        this.scrollDOM = document.createElement("div");
	        this.scrollDOM.tabIndex = -1;
	        this.scrollDOM.className = "cm-scroller";
	        this.scrollDOM.appendChild(this.contentDOM);
	        this.announceDOM = document.createElement("div");
	        this.announceDOM.className = "cm-announced";
	        this.announceDOM.setAttribute("aria-live", "polite");
	        this.dom = document.createElement("div");
	        this.dom.appendChild(this.announceDOM);
	        this.dom.appendChild(this.scrollDOM);
	        if (config.parent)
	            config.parent.appendChild(this.dom);
	        let { dispatch } = config;
	        this.dispatchTransactions = config.dispatchTransactions ||
	            (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
	            ((trs) => this.update(trs));
	        this.dispatch = this.dispatch.bind(this);
	        this._root = (config.root || getRoot(config.parent) || document);
	        this.viewState = new ViewState(config.state || EditorState.create(config));
	        if (config.scrollTo && config.scrollTo.is(scrollIntoView))
	            this.viewState.scrollTarget = config.scrollTo.value.clip(this.viewState.state);
	        this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
	        for (let plugin of this.plugins)
	            plugin.update(this);
	        this.observer = new DOMObserver(this);
	        this.inputState = new InputState(this);
	        this.inputState.ensureHandlers(this.plugins);
	        this.docView = new DocView(this);
	        this.mountStyles();
	        this.updateAttrs();
	        this.updateState = 0 /* UpdateState.Idle */;
	        this.requestMeasure();
	    }
	    dispatch(...input) {
	        let trs = input.length == 1 && input[0] instanceof Transaction ? input
	            : input.length == 1 && Array.isArray(input[0]) ? input[0]
	                : [this.state.update(...input)];
	        this.dispatchTransactions(trs, this);
	    }
	    /**
	    Update the view for the given array of transactions. This will
	    update the visible document and selection to match the state
	    produced by the transactions, and notify view plugins of the
	    change. You should usually call
	    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
	    as a primitive.
	    */
	    update(transactions) {
	        if (this.updateState != 0 /* UpdateState.Idle */)
	            throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
	        let redrawn = false, attrsChanged = false, update;
	        let state = this.state;
	        for (let tr of transactions) {
	            if (tr.startState != state)
	                throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
	            state = tr.state;
	        }
	        if (this.destroyed) {
	            this.viewState.state = state;
	            return;
	        }
	        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
	        if (transactions.some(tr => tr.annotation(isFocusChange))) {
	            this.inputState.notifiedFocused = focus;
	            // If a focus-change transaction is being dispatched, set this update flag.
	            focusFlag = 1 /* UpdateFlag.Focus */;
	        }
	        else if (focus != this.inputState.notifiedFocused) {
	            this.inputState.notifiedFocused = focus;
	            // Schedule a separate focus transaction if necessary, otherwise
	            // add a flag to this update
	            dispatchFocus = focusChangeTransaction(state, focus);
	            if (!dispatchFocus)
	                focusFlag = 1 /* UpdateFlag.Focus */;
	        }
	        // If there was a pending DOM change, eagerly read it and try to
	        // apply it after the given transactions.
	        let pendingKey = this.observer.delayedAndroidKey, domChange = null;
	        if (pendingKey) {
	            this.observer.clearDelayedAndroidKey();
	            domChange = this.observer.readChange();
	            // Only try to apply DOM changes if the transactions didn't
	            // change the doc or selection.
	            if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
	                domChange = null;
	        }
	        else {
	            this.observer.clear();
	        }
	        // When the phrases change, redraw the editor
	        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
	            return this.setState(state);
	        update = ViewUpdate.create(this, state, transactions);
	        update.flags |= focusFlag;
	        let scrollTarget = this.viewState.scrollTarget;
	        try {
	            this.updateState = 2 /* UpdateState.Updating */;
	            for (let tr of transactions) {
	                if (scrollTarget)
	                    scrollTarget = scrollTarget.map(tr.changes);
	                if (tr.scrollIntoView) {
	                    let { main } = tr.state.selection;
	                    scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
	                }
	                for (let e of tr.effects)
	                    if (e.is(scrollIntoView))
	                        scrollTarget = e.value.clip(this.state);
	            }
	            this.viewState.update(update, scrollTarget);
	            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
	            if (!update.empty) {
	                this.updatePlugins(update);
	                this.inputState.update(update);
	            }
	            redrawn = this.docView.update(update);
	            if (this.state.facet(styleModule) != this.styleModules)
	                this.mountStyles();
	            attrsChanged = this.updateAttrs();
	            this.showAnnouncements(transactions);
	            this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
	        }
	        finally {
	            this.updateState = 0 /* UpdateState.Idle */;
	        }
	        if (update.startState.facet(theme) != update.state.facet(theme))
	            this.viewState.mustMeasureContent = true;
	        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
	            this.requestMeasure();
	        if (!update.empty)
	            for (let listener of this.state.facet(updateListener)) {
	                try {
	                    listener(update);
	                }
	                catch (e) {
	                    logException(this.state, e, "update listener");
	                }
	            }
	        if (dispatchFocus || domChange)
	            Promise.resolve().then(() => {
	                if (dispatchFocus && this.state == dispatchFocus.startState)
	                    this.dispatch(dispatchFocus);
	                if (domChange) {
	                    if (!applyDOMChange(this, domChange) && pendingKey.force)
	                        dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
	                }
	            });
	    }
	    /**
	    Reset the view to the given state. (This will cause the entire
	    document to be redrawn and all view plugins to be reinitialized,
	    so you should probably only use it when the new state isn't
	    derived from the old state. Otherwise, use
	    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
	    */
	    setState(newState) {
	        if (this.updateState != 0 /* UpdateState.Idle */)
	            throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
	        if (this.destroyed) {
	            this.viewState.state = newState;
	            return;
	        }
	        this.updateState = 2 /* UpdateState.Updating */;
	        let hadFocus = this.hasFocus;
	        try {
	            for (let plugin of this.plugins)
	                plugin.destroy(this);
	            this.viewState = new ViewState(newState);
	            this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
	            this.pluginMap.clear();
	            for (let plugin of this.plugins)
	                plugin.update(this);
	            this.docView.destroy();
	            this.docView = new DocView(this);
	            this.inputState.ensureHandlers(this.plugins);
	            this.mountStyles();
	            this.updateAttrs();
	            this.bidiCache = [];
	        }
	        finally {
	            this.updateState = 0 /* UpdateState.Idle */;
	        }
	        if (hadFocus)
	            this.focus();
	        this.requestMeasure();
	    }
	    updatePlugins(update) {
	        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
	        if (prevSpecs != specs) {
	            let newPlugins = [];
	            for (let spec of specs) {
	                let found = prevSpecs.indexOf(spec);
	                if (found < 0) {
	                    newPlugins.push(new PluginInstance(spec));
	                }
	                else {
	                    let plugin = this.plugins[found];
	                    plugin.mustUpdate = update;
	                    newPlugins.push(plugin);
	                }
	            }
	            for (let plugin of this.plugins)
	                if (plugin.mustUpdate != update)
	                    plugin.destroy(this);
	            this.plugins = newPlugins;
	            this.pluginMap.clear();
	        }
	        else {
	            for (let p of this.plugins)
	                p.mustUpdate = update;
	        }
	        for (let i = 0; i < this.plugins.length; i++)
	            this.plugins[i].update(this);
	        if (prevSpecs != specs)
	            this.inputState.ensureHandlers(this.plugins);
	    }
	    /**
	    @internal
	    */
	    measure(flush = true) {
	        if (this.destroyed)
	            return;
	        if (this.measureScheduled > -1)
	            this.win.cancelAnimationFrame(this.measureScheduled);
	        if (this.observer.delayedAndroidKey) {
	            this.measureScheduled = -1;
	            this.requestMeasure();
	            return;
	        }
	        this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
	        if (flush)
	            this.observer.forceFlush();
	        let updated = null;
	        let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
	        let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
	        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
	            scrollAnchorHeight = -1;
	        this.viewState.scrollAnchorHeight = -1;
	        try {
	            for (let i = 0;; i++) {
	                if (scrollAnchorHeight < 0) {
	                    if (isScrolledToBottom(sDOM)) {
	                        scrollAnchorPos = -1;
	                        scrollAnchorHeight = this.viewState.heightMap.height;
	                    }
	                    else {
	                        let block = this.viewState.scrollAnchorAt(scrollTop);
	                        scrollAnchorPos = block.from;
	                        scrollAnchorHeight = block.top;
	                    }
	                }
	                this.updateState = 1 /* UpdateState.Measuring */;
	                let changed = this.viewState.measure(this);
	                if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
	                    break;
	                if (i > 5) {
	                    console.warn(this.measureRequests.length
	                        ? "Measure loop restarted more than 5 times"
	                        : "Viewport failed to stabilize");
	                    break;
	                }
	                let measuring = [];
	                // Only run measure requests in this cycle when the viewport didn't change
	                if (!(changed & 4 /* UpdateFlag.Viewport */))
	                    [this.measureRequests, measuring] = [measuring, this.measureRequests];
	                let measured = measuring.map(m => {
	                    try {
	                        return m.read(this);
	                    }
	                    catch (e) {
	                        logException(this.state, e);
	                        return BadMeasure;
	                    }
	                });
	                let update = ViewUpdate.create(this, this.state, []), redrawn = false;
	                update.flags |= changed;
	                if (!updated)
	                    updated = update;
	                else
	                    updated.flags |= changed;
	                this.updateState = 2 /* UpdateState.Updating */;
	                if (!update.empty) {
	                    this.updatePlugins(update);
	                    this.inputState.update(update);
	                    this.updateAttrs();
	                    redrawn = this.docView.update(update);
	                }
	                for (let i = 0; i < measuring.length; i++)
	                    if (measured[i] != BadMeasure) {
	                        try {
	                            let m = measuring[i];
	                            if (m.write)
	                                m.write(measured[i], this);
	                        }
	                        catch (e) {
	                            logException(this.state, e);
	                        }
	                    }
	                if (redrawn)
	                    this.docView.updateSelection(true);
	                if (!update.viewportChanged && this.measureRequests.length == 0) {
	                    if (this.viewState.editorHeight) {
	                        if (this.viewState.scrollTarget) {
	                            this.docView.scrollIntoView(this.viewState.scrollTarget);
	                            this.viewState.scrollTarget = null;
	                            scrollAnchorHeight = -1;
	                            continue;
	                        }
	                        else {
	                            let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
	                                this.viewState.lineBlockAt(scrollAnchorPos).top;
	                            let diff = newAnchorHeight - scrollAnchorHeight;
	                            if (diff > 1 || diff < -1) {
	                                scrollTop = scrollTop + diff;
	                                sDOM.scrollTop = scrollTop / this.scaleY;
	                                scrollAnchorHeight = -1;
	                                continue;
	                            }
	                        }
	                    }
	                    break;
	                }
	            }
	        }
	        finally {
	            this.updateState = 0 /* UpdateState.Idle */;
	            this.measureScheduled = -1;
	        }
	        if (updated && !updated.empty)
	            for (let listener of this.state.facet(updateListener))
	                listener(updated);
	    }
	    /**
	    Get the CSS classes for the currently active editor themes.
	    */
	    get themeClasses() {
	        return baseThemeID + " " +
	            (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
	            this.state.facet(theme);
	    }
	    updateAttrs() {
	        let editorAttrs = attrsFromFacet(this, editorAttributes, {
	            class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
	        });
	        let contentAttrs = {
	            spellcheck: "false",
	            autocorrect: "off",
	            autocapitalize: "off",
	            translate: "no",
	            contenteditable: !this.state.facet(editable) ? "false" : "true",
	            class: "cm-content",
	            style: `${browser.tabSize}: ${this.state.tabSize}`,
	            role: "textbox",
	            "aria-multiline": "true"
	        };
	        if (this.state.readOnly)
	            contentAttrs["aria-readonly"] = "true";
	        attrsFromFacet(this, contentAttributes, contentAttrs);
	        let changed = this.observer.ignore(() => {
	            let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
	            let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
	            return changedContent || changedEditor;
	        });
	        this.editorAttrs = editorAttrs;
	        this.contentAttrs = contentAttrs;
	        return changed;
	    }
	    showAnnouncements(trs) {
	        let first = true;
	        for (let tr of trs)
	            for (let effect of tr.effects)
	                if (effect.is(EditorView.announce)) {
	                    if (first)
	                        this.announceDOM.textContent = "";
	                    first = false;
	                    let div = this.announceDOM.appendChild(document.createElement("div"));
	                    div.textContent = effect.value;
	                }
	    }
	    mountStyles() {
	        this.styleModules = this.state.facet(styleModule);
	        let nonce = this.state.facet(EditorView.cspNonce);
	        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$2).reverse(), nonce ? { nonce } : undefined);
	    }
	    readMeasured() {
	        if (this.updateState == 2 /* UpdateState.Updating */)
	            throw new Error("Reading the editor layout isn't allowed during an update");
	        if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
	            this.measure(false);
	    }
	    /**
	    Schedule a layout measurement, optionally providing callbacks to
	    do custom DOM measuring followed by a DOM write phase. Using
	    this is preferable reading DOM layout directly from, for
	    example, an event handler, because it'll make sure measuring and
	    drawing done by other components is synchronized, avoiding
	    unnecessary DOM layout computations.
	    */
	    requestMeasure(request) {
	        if (this.measureScheduled < 0)
	            this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
	        if (request) {
	            if (this.measureRequests.indexOf(request) > -1)
	                return;
	            if (request.key != null)
	                for (let i = 0; i < this.measureRequests.length; i++) {
	                    if (this.measureRequests[i].key === request.key) {
	                        this.measureRequests[i] = request;
	                        return;
	                    }
	                }
	            this.measureRequests.push(request);
	        }
	    }
	    /**
	    Get the value of a specific plugin, if present. Note that
	    plugins that crash can be dropped from a view, so even when you
	    know you registered a given plugin, it is recommended to check
	    the return value of this method.
	    */
	    plugin(plugin) {
	        let known = this.pluginMap.get(plugin);
	        if (known === undefined || known && known.spec != plugin)
	            this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
	        return known && known.update(this).value;
	    }
	    /**
	    The top position of the document, in screen coordinates. This
	    may be negative when the editor is scrolled down. Points
	    directly to the top of the first line, not above the padding.
	    */
	    get documentTop() {
	        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
	    }
	    /**
	    Reports the padding above and below the document.
	    */
	    get documentPadding() {
	        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
	    }
	    /**
	    If the editor is transformed with CSS, this provides the scale
	    along the X axis. Otherwise, it will just be 1. Note that
	    transforms other than translation and scaling are not supported.
	    */
	    get scaleX() { return this.viewState.scaleX; }
	    /**
	    Provide the CSS transformed scale along the Y axis.
	    */
	    get scaleY() { return this.viewState.scaleY; }
	    /**
	    Find the text line or block widget at the given vertical
	    position (which is interpreted as relative to the [top of the
	    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
	    */
	    elementAtHeight(height) {
	        this.readMeasured();
	        return this.viewState.elementAtHeight(height);
	    }
	    /**
	    Find the line block (see
	    [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
	    height, again interpreted relative to the [top of the
	    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
	    */
	    lineBlockAtHeight(height) {
	        this.readMeasured();
	        return this.viewState.lineBlockAtHeight(height);
	    }
	    /**
	    Get the extent and vertical position of all [line
	    blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
	    are relative to the [top of the
	    document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
	    */
	    get viewportLineBlocks() {
	        return this.viewState.viewportLines;
	    }
	    /**
	    Find the line block around the given document position. A line
	    block is a range delimited on both sides by either a
	    non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
	    start/end of the document. It will usually just hold a line of
	    text, but may be broken into multiple textblocks by block
	    widgets.
	    */
	    lineBlockAt(pos) {
	        return this.viewState.lineBlockAt(pos);
	    }
	    /**
	    The editor's total content height.
	    */
	    get contentHeight() {
	        return this.viewState.contentHeight;
	    }
	    /**
	    Move a cursor position by [grapheme
	    cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
	    the motion is away from the line start, or towards it. In
	    bidirectional text, the line is traversed in visual order, using
	    the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
	    When the start position was the last one on the line, the
	    returned position will be across the line break. If there is no
	    further line, the original position is returned.
	    
	    By default, this method moves over a single cluster. The
	    optional `by` argument can be used to move across more. It will
	    be called with the first cluster as argument, and should return
	    a predicate that determines, for each subsequent cluster,
	    whether it should also be moved over.
	    */
	    moveByChar(start, forward, by) {
	        return skipAtoms(this, start, moveByChar(this, start, forward, by));
	    }
	    /**
	    Move a cursor position across the next group of either
	    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
	    non-whitespace characters.
	    */
	    moveByGroup(start, forward) {
	        return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
	    }
	    /**
	    Get the cursor position visually at the start or end of a line.
	    Note that this may differ from the _logical_ position at its
	    start or end (which is simply at `line.from`/`line.to`) if text
	    at the start or end goes against the line's base text direction.
	    */
	    visualLineSide(line, end) {
	        let order = this.bidiSpans(line), dir = this.textDirectionAt(line.from);
	        let span = order[end ? order.length - 1 : 0];
	        return EditorSelection.cursor(span.side(end, dir) + line.from, span.forward(!end, dir) ? 1 : -1);
	    }
	    /**
	    Move to the next line boundary in the given direction. If
	    `includeWrap` is true, line wrapping is on, and there is a
	    further wrap point on the current line, the wrap point will be
	    returned. Otherwise this function will return the start or end
	    of the line.
	    */
	    moveToLineBoundary(start, forward, includeWrap = true) {
	        return moveToLineBoundary(this, start, forward, includeWrap);
	    }
	    /**
	    Move a cursor position vertically. When `distance` isn't given,
	    it defaults to moving to the next line (including wrapped
	    lines). Otherwise, `distance` should provide a positive distance
	    in pixels.
	    
	    When `start` has a
	    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
	    motion will use that as a target horizontal position. Otherwise,
	    the cursor's own horizontal position is used. The returned
	    cursor will have its goal column set to whichever column was
	    used.
	    */
	    moveVertically(start, forward, distance) {
	        return skipAtoms(this, start, moveVertically(this, start, forward, distance));
	    }
	    /**
	    Find the DOM parent node and offset (child offset if `node` is
	    an element, character offset when it is a text node) at the
	    given document position.
	    
	    Note that for positions that aren't currently in
	    `visibleRanges`, the resulting DOM position isn't necessarily
	    meaningful (it may just point before or after a placeholder
	    element).
	    */
	    domAtPos(pos) {
	        return this.docView.domAtPos(pos);
	    }
	    /**
	    Find the document position at the given DOM node. Can be useful
	    for associating positions with DOM events. Will raise an error
	    when `node` isn't part of the editor content.
	    */
	    posAtDOM(node, offset = 0) {
	        return this.docView.posFromDOM(node, offset);
	    }
	    posAtCoords(coords, precise = true) {
	        this.readMeasured();
	        return posAtCoords(this, coords, precise);
	    }
	    /**
	    Get the screen coordinates at the given document position.
	    `side` determines whether the coordinates are based on the
	    element before (-1) or after (1) the position (if no element is
	    available on the given side, the method will transparently use
	    another strategy to get reasonable coordinates).
	    */
	    coordsAtPos(pos, side = 1) {
	        this.readMeasured();
	        let rect = this.docView.coordsAt(pos, side);
	        if (!rect || rect.left == rect.right)
	            return rect;
	        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
	        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
	        return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
	    }
	    /**
	    Return the rectangle around a given character. If `pos` does not
	    point in front of a character that is in the viewport and
	    rendered (i.e. not replaced, not a line break), this will return
	    null. For space characters that are a line wrap point, this will
	    return the position before the line break.
	    */
	    coordsForChar(pos) {
	        this.readMeasured();
	        return this.docView.coordsForChar(pos);
	    }
	    /**
	    The default width of a character in the editor. May not
	    accurately reflect the width of all characters (given variable
	    width fonts or styling of invididual ranges).
	    */
	    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
	    /**
	    The default height of a line in the editor. May not be accurate
	    for all lines.
	    */
	    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
	    /**
	    The text direction
	    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
	    CSS property) of the editor's content element.
	    */
	    get textDirection() { return this.viewState.defaultTextDirection; }
	    /**
	    Find the text direction of the block at the given position, as
	    assigned by CSS. If
	    [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
	    isn't enabled, or the given position is outside of the viewport,
	    this will always return the same as
	    [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
	    this may trigger a DOM layout.
	    */
	    textDirectionAt(pos) {
	        let perLine = this.state.facet(perLineTextDirection);
	        if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
	            return this.textDirection;
	        this.readMeasured();
	        return this.docView.textDirectionAt(pos);
	    }
	    /**
	    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
	    (as determined by the
	    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
	    CSS property of its content element).
	    */
	    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
	    /**
	    Returns the bidirectional text structure of the given line
	    (which should be in the current document) as an array of span
	    objects. The order of these spans matches the [text
	    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
	    left-to-right, the leftmost spans come first, otherwise the
	    rightmost spans come first.
	    */
	    bidiSpans(line) {
	        if (line.length > MaxBidiLine)
	            return trivialOrder(line.length);
	        let dir = this.textDirectionAt(line.from), isolates;
	        for (let entry of this.bidiCache) {
	            if (entry.from == line.from && entry.dir == dir &&
	                (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line))))
	                return entry.order;
	        }
	        if (!isolates)
	            isolates = getIsolatedRanges(this, line);
	        let order = computeOrder(line.text, dir, isolates);
	        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
	        return order;
	    }
	    /**
	    Check whether the editor has focus.
	    */
	    get hasFocus() {
	        var _a;
	        // Safari return false for hasFocus when the context menu is open
	        // or closing, which leads us to ignore selection changes from the
	        // context menu because it looks like the editor isn't focused.
	        // This kludges around that.
	        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
	            this.root.activeElement == this.contentDOM;
	    }
	    /**
	    Put focus on the editor.
	    */
	    focus() {
	        this.observer.ignore(() => {
	            focusPreventScroll(this.contentDOM);
	            this.docView.updateSelection();
	        });
	    }
	    /**
	    Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
	    necessary when moving the editor's existing DOM to a new window or shadow root.
	    */
	    setRoot(root) {
	        if (this._root != root) {
	            this._root = root;
	            this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
	            this.mountStyles();
	        }
	    }
	    /**
	    Clean up this editor view, removing its element from the
	    document, unregistering event handlers, and notifying
	    plugins. The view instance can no longer be used after
	    calling this.
	    */
	    destroy() {
	        for (let plugin of this.plugins)
	            plugin.destroy(this);
	        this.plugins = [];
	        this.inputState.destroy();
	        this.docView.destroy();
	        this.dom.remove();
	        this.observer.destroy();
	        if (this.measureScheduled > -1)
	            this.win.cancelAnimationFrame(this.measureScheduled);
	        this.destroyed = true;
	    }
	    /**
	    Returns an effect that can be
	    [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
	    cause it to scroll the given position or range into view.
	    */
	    static scrollIntoView(pos, options = {}) {
	        return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
	    }
	    /**
	    Return an effect that resets the editor to its current (at the
	    time this method was called) scroll position. Note that this
	    only affects the editor's own scrollable element, not parents.
	    See also
	    [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
	    
	    The effect should be used with a document identical to the one
	    it was created for. Failing to do so is not an error, but may
	    not scroll to the expected position. You can
	    [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
	    */
	    scrollSnapshot() {
	        let { scrollTop, scrollLeft } = this.scrollDOM;
	        let ref = this.viewState.scrollAnchorAt(scrollTop);
	        return scrollIntoView.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
	    }
	    /**
	    Returns an extension that can be used to add DOM event handlers.
	    The value should be an object mapping event names to handler
	    functions. For any given event, such functions are ordered by
	    extension precedence, and the first handler to return true will
	    be assumed to have handled that event, and no other handlers or
	    built-in behavior will be activated for it. These are registered
	    on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
	    for `scroll` handlers, which will be called any time the
	    editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
	    its parent nodes is scrolled.
	    */
	    static domEventHandlers(handlers) {
	        return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
	    }
	    /**
	    Create an extension that registers DOM event observers. Contrary
	    to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
	    observers can't be prevented from running by a higher-precedence
	    handler returning true. They also don't prevent other handlers
	    and observers from running when they return true, and should not
	    call `preventDefault`.
	    */
	    static domEventObservers(observers) {
	        return ViewPlugin.define(() => ({}), { eventObservers: observers });
	    }
	    /**
	    Create a theme extension. The first argument can be a
	    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
	    style spec providing the styles for the theme. These will be
	    prefixed with a generated class for the style.
	    
	    Because the selectors will be prefixed with a scope class, rule
	    that directly match the editor's [wrapper
	    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
	    added—need to be explicitly differentiated by adding an `&` to
	    the selector for that element—for example
	    `&.cm-focused`.
	    
	    When `dark` is set to true, the theme will be marked as dark,
	    which will cause the `&dark` rules from [base
	    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
	    `&light` when a light theme is active).
	    */
	    static theme(spec, options) {
	        let prefix = StyleModule.newName();
	        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
	        if (options && options.dark)
	            result.push(darkTheme.of(true));
	        return result;
	    }
	    /**
	    Create an extension that adds styles to the base theme. Like
	    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
	    place of the editor wrapper element when directly targeting
	    that. You can also use `&dark` or `&light` instead to only
	    target editors with a dark or light theme.
	    */
	    static baseTheme(spec) {
	        return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
	    }
	    /**
	    Retrieve an editor view instance from the view's DOM
	    representation.
	    */
	    static findFromDOM(dom) {
	        var _a;
	        let content = dom.querySelector(".cm-content");
	        let cView = content && ContentView.get(content) || ContentView.get(dom);
	        return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
	    }
	}
	/**
	Facet to add a [style
	module](https://github.com/marijnh/style-mod#documentation) to
	an editor view. The view will ensure that the module is
	mounted in its [document
	root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
	*/
	EditorView.styleModule = styleModule;
	/**
	An input handler can override the way changes to the editable
	DOM content are handled. Handlers are passed the document
	positions between which the change was found, and the new
	content. When one returns true, no further input handlers are
	called and the default behavior is prevented.

	The `insert` argument can be used to get the default transaction
	that would be applied for this input. This can be useful when
	dispatching the custom behavior as a separate transaction.
	*/
	EditorView.inputHandler = inputHandler$1;
	/**
	This facet can be used to provide functions that create effects
	to be dispatched when the editor's focus state changes.
	*/
	EditorView.focusChangeEffect = focusChangeEffect;
	/**
	By default, the editor assumes all its content has the same
	[text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
	value to make it read the text direction of every (rendered)
	line separately.
	*/
	EditorView.perLineTextDirection = perLineTextDirection;
	/**
	Allows you to provide a function that should be called when the
	library catches an exception from an extension (mostly from view
	plugins, but may be used by other extensions to route exceptions
	from user-code-provided callbacks). This is mostly useful for
	debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
	*/
	EditorView.exceptionSink = exceptionSink;
	/**
	A facet that can be used to register a function to be called
	every time the view updates.
	*/
	EditorView.updateListener = updateListener;
	/**
	Facet that controls whether the editor content DOM is editable.
	When its highest-precedence value is `false`, the element will
	not have its `contenteditable` attribute set. (Note that this
	doesn't affect API calls that change the editor content, even
	when those are bound to keys or buttons. See the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
	*/
	EditorView.editable = editable;
	/**
	Allows you to influence the way mouse selection happens. The
	functions in this facet will be called for a `mousedown` event
	on the editor, and can return an object that overrides the way a
	selection is computed from that mouse click or drag.
	*/
	EditorView.mouseSelectionStyle = mouseSelectionStyle;
	/**
	Facet used to configure whether a given selection drag event
	should move or copy the selection. The given predicate will be
	called with the `mousedown` event, and can return `true` when
	the drag should move the content.
	*/
	EditorView.dragMovesSelection = dragMovesSelection$1;
	/**
	Facet used to configure whether a given selecting click adds a
	new range to the existing selection or replaces it entirely. The
	default behavior is to check `event.metaKey` on macOS, and
	`event.ctrlKey` elsewhere.
	*/
	EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
	/**
	A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
	are shown in the view. Decorations can be provided in two
	ways—directly, or via a function that takes an editor view.

	Only decoration sets provided directly are allowed to influence
	the editor's vertical layout structure. The ones provided as
	functions are called _after_ the new viewport has been computed,
	and thus **must not** introduce block widgets or replacing
	decorations that cover line breaks.

	If you want decorated ranges to behave like atomic units for
	cursor motion and deletion purposes, also provide the range set
	containing the decorations to
	[`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
	*/
	EditorView.decorations = decorations;
	/**
	Facet that works much like
	[`decorations`](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), but puts its
	inputs at the very bottom of the precedence stack, meaning mark
	decorations provided here will only be split by other, partially
	overlapping \`outerDecorations\` ranges, and wrap around all
	regular decorations. Use this for mark elements that should, as
	much as possible, remain in one piece.
	*/
	EditorView.outerDecorations = outerDecorations;
	/**
	Used to provide ranges that should be treated as atoms as far as
	cursor motion is concerned. This causes methods like
	[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
	[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
	commands built on top of them) to skip across such regions when
	a selection endpoint would enter them. This does _not_ prevent
	direct programmatic [selection
	updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
	regions.
	*/
	EditorView.atomicRanges = atomicRanges;
	/**
	When range decorations add a `unicode-bidi: isolate` style, they
	should also include a
	[`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
	in their decoration spec, and be exposed through this facet, so
	that the editor can compute the proper text order. (Other values
	for `unicode-bidi`, except of course `normal`, are not
	supported.)
	*/
	EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
	/**
	Facet that allows extensions to provide additional scroll
	margins (space around the sides of the scrolling element that
	should be considered invisible). This can be useful when the
	plugin introduces elements that cover part of that element (for
	example a horizontally fixed gutter).
	*/
	EditorView.scrollMargins = scrollMargins;
	/**
	This facet records whether a dark theme is active. The extension
	returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
	includes an instance of this when the `dark` option is set to
	true.
	*/
	EditorView.darkTheme = darkTheme;
	/**
	Provides a Content Security Policy nonce to use when creating
	the style sheets for the editor. Holds the empty string when no
	nonce has been provided.
	*/
	EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
	/**
	Facet that provides additional DOM attributes for the editor's
	editable DOM element.
	*/
	EditorView.contentAttributes = contentAttributes;
	/**
	Facet that provides DOM attributes for the editor's outer
	element.
	*/
	EditorView.editorAttributes = editorAttributes;
	/**
	An extension that enables line wrapping in the editor (by
	setting CSS `white-space` to `pre-wrap` in the content).
	*/
	EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
	/**
	State effect used to include screen reader announcements in a
	transaction. These will be added to the DOM in a visually hidden
	element with `aria-live="polite"` set, and should be used to
	describe effects that are visually obvious but may not be
	noticed by screen reader users (such as moving to the next
	search match).
	*/
	EditorView.announce = /*@__PURE__*/StateEffect.define();
	// Maximum line length for which we compute accurate bidi info
	const MaxBidiLine = 4096;
	const BadMeasure = {};
	class CachedOrder {
	    constructor(from, to, dir, isolates, fresh, order) {
	        this.from = from;
	        this.to = to;
	        this.dir = dir;
	        this.isolates = isolates;
	        this.fresh = fresh;
	        this.order = order;
	    }
	    static update(cache, changes) {
	        if (changes.empty && !cache.some(c => c.fresh))
	            return cache;
	        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
	        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
	            let entry = cache[i];
	            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
	                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
	        }
	        return result;
	    }
	}
	function attrsFromFacet(view, facet, base) {
	    for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
	        let source = sources[i], value = typeof source == "function" ? source(view) : source;
	        if (value)
	            combineAttrs(value, base);
	    }
	    return base;
	}

	const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
	function normalizeKeyName(name, platform) {
	    const parts = name.split(/-(?!$)/);
	    let result = parts[parts.length - 1];
	    if (result == "Space")
	        result = " ";
	    let alt, ctrl, shift, meta;
	    for (let i = 0; i < parts.length - 1; ++i) {
	        const mod = parts[i];
	        if (/^(cmd|meta|m)$/i.test(mod))
	            meta = true;
	        else if (/^a(lt)?$/i.test(mod))
	            alt = true;
	        else if (/^(c|ctrl|control)$/i.test(mod))
	            ctrl = true;
	        else if (/^s(hift)?$/i.test(mod))
	            shift = true;
	        else if (/^mod$/i.test(mod)) {
	            if (platform == "mac")
	                meta = true;
	            else
	                ctrl = true;
	        }
	        else
	            throw new Error("Unrecognized modifier name: " + mod);
	    }
	    if (alt)
	        result = "Alt-" + result;
	    if (ctrl)
	        result = "Ctrl-" + result;
	    if (meta)
	        result = "Meta-" + result;
	    if (shift)
	        result = "Shift-" + result;
	    return result;
	}
	function modifiers(name, event, shift) {
	    if (event.altKey)
	        name = "Alt-" + name;
	    if (event.ctrlKey)
	        name = "Ctrl-" + name;
	    if (event.metaKey)
	        name = "Meta-" + name;
	    if (shift !== false && event.shiftKey)
	        name = "Shift-" + name;
	    return name;
	}
	const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
	    keydown(event, view) {
	        return runHandlers(getKeymap(view.state), event, view, "editor");
	    }
	}));
	/**
	Facet used for registering keymaps.

	You can add multiple keymaps to an editor. Their priorities
	determine their precedence (the ones specified early or with high
	priority get checked first). When a handler has returned `true`
	for a given key, no further handlers are called.
	*/
	const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
	const Keymaps = /*@__PURE__*/new WeakMap();
	// This is hidden behind an indirection, rather than directly computed
	// by the facet, to keep internal types out of the facet's type.
	function getKeymap(state) {
	    let bindings = state.facet(keymap);
	    let map = Keymaps.get(bindings);
	    if (!map)
	        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
	    return map;
	}
	/**
	Run the key handlers registered for a given scope. The event
	object should be a `"keydown"` event. Returns true if any of the
	handlers handled it.
	*/
	function runScopeHandlers(view, event, scope) {
	    return runHandlers(getKeymap(view.state), event, view, scope);
	}
	let storedPrefix = null;
	const PrefixTimeout = 4000;
	function buildKeymap(bindings, platform = currentPlatform) {
	    let bound = Object.create(null);
	    let isPrefix = Object.create(null);
	    let checkPrefix = (name, is) => {
	        let current = isPrefix[name];
	        if (current == null)
	            isPrefix[name] = is;
	        else if (current != is)
	            throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
	    };
	    let add = (scope, key, command, preventDefault, stopPropagation) => {
	        var _a, _b;
	        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
	        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
	        for (let i = 1; i < parts.length; i++) {
	            let prefix = parts.slice(0, i).join(" ");
	            checkPrefix(prefix, true);
	            if (!scopeObj[prefix])
	                scopeObj[prefix] = {
	                    preventDefault: true,
	                    stopPropagation: false,
	                    run: [(view) => {
	                            let ourObj = storedPrefix = { view, prefix, scope };
	                            setTimeout(() => { if (storedPrefix == ourObj)
	                                storedPrefix = null; }, PrefixTimeout);
	                            return true;
	                        }]
	                };
	        }
	        let full = parts.join(" ");
	        checkPrefix(full, false);
	        let binding = scopeObj[full] || (scopeObj[full] = {
	            preventDefault: false,
	            stopPropagation: false,
	            run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
	        });
	        if (command)
	            binding.run.push(command);
	        if (preventDefault)
	            binding.preventDefault = true;
	        if (stopPropagation)
	            binding.stopPropagation = true;
	    };
	    for (let b of bindings) {
	        let scopes = b.scope ? b.scope.split(" ") : ["editor"];
	        if (b.any)
	            for (let scope of scopes) {
	                let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
	                if (!scopeObj._any)
	                    scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
	                for (let key in scopeObj)
	                    scopeObj[key].run.push(b.any);
	            }
	        let name = b[platform] || b.key;
	        if (!name)
	            continue;
	        for (let scope of scopes) {
	            add(scope, name, b.run, b.preventDefault, b.stopPropagation);
	            if (b.shift)
	                add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
	        }
	    }
	    return bound;
	}
	function runHandlers(map, event, view, scope) {
	    let name = keyName(event);
	    let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
	    let prefix = "", handled = false, prevented = false, stopPropagation = false;
	    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
	        prefix = storedPrefix.prefix + " ";
	        if (modifierCodes.indexOf(event.keyCode) < 0) {
	            prevented = true;
	            storedPrefix = null;
	        }
	    }
	    let ran = new Set;
	    let runFor = (binding) => {
	        if (binding) {
	            for (let cmd of binding.run)
	                if (!ran.has(cmd)) {
	                    ran.add(cmd);
	                    if (cmd(view, event)) {
	                        if (binding.stopPropagation)
	                            stopPropagation = true;
	                        return true;
	                    }
	                }
	            if (binding.preventDefault) {
	                if (binding.stopPropagation)
	                    stopPropagation = true;
	                prevented = true;
	            }
	        }
	        return false;
	    };
	    let scopeObj = map[scope], baseName, shiftName;
	    if (scopeObj) {
	        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
	            handled = true;
	        }
	        else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
	            // Ctrl-Alt may be used for AltGr on Windows
	            !(browser.windows && event.ctrlKey && event.altKey) &&
	            (baseName = base[event.keyCode]) && baseName != name) {
	            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
	                handled = true;
	            }
	            else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
	                runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
	                handled = true;
	            }
	        }
	        else if (isChar && event.shiftKey &&
	            runFor(scopeObj[prefix + modifiers(name, event, true)])) {
	            handled = true;
	        }
	        if (!handled && runFor(scopeObj._any))
	            handled = true;
	    }
	    if (prevented)
	        handled = true;
	    if (handled && stopPropagation)
	        event.stopPropagation();
	    return handled;
	}

	/**
	Implementation of [`LayerMarker`](https://codemirror.net/6/docs/ref/#view.LayerMarker) that creates
	a rectangle at a given set of coordinates.
	*/
	class RectangleMarker {
	    /**
	    Create a marker with the given class and dimensions. If `width`
	    is null, the DOM element will get no width style.
	    */
	    constructor(className, 
	    /**
	    The left position of the marker (in pixels, document-relative).
	    */
	    left, 
	    /**
	    The top position of the marker.
	    */
	    top, 
	    /**
	    The width of the marker, or null if it shouldn't get a width assigned.
	    */
	    width, 
	    /**
	    The height of the marker.
	    */
	    height) {
	        this.className = className;
	        this.left = left;
	        this.top = top;
	        this.width = width;
	        this.height = height;
	    }
	    draw() {
	        let elt = document.createElement("div");
	        elt.className = this.className;
	        this.adjust(elt);
	        return elt;
	    }
	    update(elt, prev) {
	        if (prev.className != this.className)
	            return false;
	        this.adjust(elt);
	        return true;
	    }
	    adjust(elt) {
	        elt.style.left = this.left + "px";
	        elt.style.top = this.top + "px";
	        if (this.width != null)
	            elt.style.width = this.width + "px";
	        elt.style.height = this.height + "px";
	    }
	    eq(p) {
	        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
	            this.className == p.className;
	    }
	    /**
	    Create a set of rectangles for the given selection range,
	    assigning them theclass`className`. Will create a single
	    rectangle for empty ranges, and a set of selection-style
	    rectangles covering the range's content (in a bidi-aware
	    way) for non-empty ones.
	    */
	    static forRange(view, className, range) {
	        if (range.empty) {
	            let pos = view.coordsAtPos(range.head, range.assoc || 1);
	            if (!pos)
	                return [];
	            let base = getBase(view);
	            return [new RectangleMarker(className, pos.left - base.left, pos.top - base.top, null, pos.bottom - pos.top)];
	        }
	        else {
	            return rectanglesForRange(view, className, range);
	        }
	    }
	}
	function getBase(view) {
	    let rect = view.scrollDOM.getBoundingClientRect();
	    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
	    return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
	}
	function wrappedLine(view, pos, inside) {
	    let range = EditorSelection.cursor(pos);
	    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
	        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
	        type: BlockType.Text };
	}
	function rectanglesForRange(view, className, range) {
	    if (range.to <= view.viewport.from || range.from >= view.viewport.to)
	        return [];
	    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
	    let ltr = view.textDirection == Direction.LTR;
	    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
	    let lineElt = content.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
	    let leftSide = contentRect.left +
	        (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
	    let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
	    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
	    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
	    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
	    if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
	        visualStart = wrappedLine(view, from, visualStart);
	    if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
	        visualEnd = wrappedLine(view, to, visualEnd);
	    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
	        return pieces(drawForLine(range.from, range.to, visualStart));
	    }
	    else {
	        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
	        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
	        let between = [];
	        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) ||
	            startBlock.widgetLineBreaks > 1 && top.bottom + view.defaultLineHeight / 2 < bottom.top)
	            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
	        else if (top.bottom < bottom.top && view.elementAtHeight((top.bottom + bottom.top) / 2).type == BlockType.Text)
	            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
	        return pieces(top).concat(between).concat(pieces(bottom));
	    }
	    function piece(left, top, right, bottom) {
	        return new RectangleMarker(className, left - base.left, top - base.top - 0.01 /* C.Epsilon */, right - left, bottom - top + 0.01 /* C.Epsilon */);
	    }
	    function pieces({ top, bottom, horizontal }) {
	        let pieces = [];
	        for (let i = 0; i < horizontal.length; i += 2)
	            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
	        return pieces;
	    }
	    // Gets passed from/to in line-local positions
	    function drawForLine(from, to, line) {
	        let top = 1e9, bottom = -1e9, horizontal = [];
	        function addSpan(from, fromOpen, to, toOpen, dir) {
	            // Passing 2/-2 is a kludge to force the view to return
	            // coordinates on the proper side of block widgets, since
	            // normalizing the side there, though appropriate for most
	            // coordsAtPos queries, would break selection drawing.
	            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
	            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
	            if (!fromCoords || !toCoords)
	                return;
	            top = Math.min(fromCoords.top, toCoords.top, top);
	            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
	            if (dir == Direction.LTR)
	                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
	            else
	                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
	        }
	        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
	        // Split the range by visible range and document line
	        for (let r of view.visibleRanges)
	            if (r.to > start && r.from < end) {
	                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
	                    let docLine = view.state.doc.lineAt(pos);
	                    for (let span of view.bidiSpans(docLine)) {
	                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
	                        if (spanFrom >= endPos)
	                            break;
	                        if (spanTo > pos)
	                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
	                    }
	                    pos = docLine.to + 1;
	                    if (pos >= endPos)
	                        break;
	                }
	            }
	        if (horizontal.length == 0)
	            addSpan(start, from == null, end, to == null, view.textDirection);
	        return { top, bottom, horizontal };
	    }
	    function drawForWidget(block, top) {
	        let y = contentRect.top + (top ? block.top : block.bottom);
	        return { top: y, bottom: y, horizontal: [] };
	    }
	}
	function sameMarker(a, b) {
	    return a.constructor == b.constructor && a.eq(b);
	}
	class LayerView {
	    constructor(view, layer) {
	        this.view = view;
	        this.layer = layer;
	        this.drawn = [];
	        this.scaleX = 1;
	        this.scaleY = 1;
	        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
	        this.dom = view.scrollDOM.appendChild(document.createElement("div"));
	        this.dom.classList.add("cm-layer");
	        if (layer.above)
	            this.dom.classList.add("cm-layer-above");
	        if (layer.class)
	            this.dom.classList.add(layer.class);
	        this.scale();
	        this.dom.setAttribute("aria-hidden", "true");
	        this.setOrder(view.state);
	        view.requestMeasure(this.measureReq);
	        if (layer.mount)
	            layer.mount(this.dom, view);
	    }
	    update(update) {
	        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
	            this.setOrder(update.state);
	        if (this.layer.update(update, this.dom) || update.geometryChanged) {
	            this.scale();
	            update.view.requestMeasure(this.measureReq);
	        }
	    }
	    setOrder(state) {
	        let pos = 0, order = state.facet(layerOrder);
	        while (pos < order.length && order[pos] != this.layer)
	            pos++;
	        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos);
	    }
	    measure() {
	        return this.layer.markers(this.view);
	    }
	    scale() {
	        let { scaleX, scaleY } = this.view;
	        if (scaleX != this.scaleX || scaleY != this.scaleY) {
	            this.scaleX = scaleX;
	            this.scaleY = scaleY;
	            this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
	        }
	    }
	    draw(markers) {
	        if (markers.length != this.drawn.length || markers.some((p, i) => !sameMarker(p, this.drawn[i]))) {
	            let old = this.dom.firstChild, oldI = 0;
	            for (let marker of markers) {
	                if (marker.update && old && marker.constructor && this.drawn[oldI].constructor &&
	                    marker.update(old, this.drawn[oldI])) {
	                    old = old.nextSibling;
	                    oldI++;
	                }
	                else {
	                    this.dom.insertBefore(marker.draw(), old);
	                }
	            }
	            while (old) {
	                let next = old.nextSibling;
	                old.remove();
	                old = next;
	            }
	            this.drawn = markers;
	        }
	    }
	    destroy() {
	        if (this.layer.destroy)
	            this.layer.destroy(this.dom, this.view);
	        this.dom.remove();
	    }
	}
	const layerOrder = /*@__PURE__*/Facet.define();
	/**
	Define a layer.
	*/
	function layer(config) {
	    return [
	        ViewPlugin.define(v => new LayerView(v, config)),
	        layerOrder.of(config)
	    ];
	}

	const CanHidePrimary = !browser.ios; // FIXME test IE
	const selectionConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            cursorBlinkRate: 1200,
	            drawRangeCursor: true
	        }, {
	            cursorBlinkRate: (a, b) => Math.min(a, b),
	            drawRangeCursor: (a, b) => a || b
	        });
	    }
	});
	/**
	Returns an extension that hides the browser's native selection and
	cursor, replacing the selection with a background behind the text
	(with the `cm-selectionBackground` class), and the
	cursors with elements overlaid over the code (using
	`cm-cursor-primary` and `cm-cursor-secondary`).

	This allows the editor to display secondary selection ranges, and
	tends to produce a type of selection more in line with that users
	expect in a text editor (the native selection styling will often
	leave gaps between lines and won't fill the horizontal space after
	a line when the selection continues past it).

	It does have a performance cost, in that it requires an extra DOM
	layout cycle for many updates (the selection is drawn based on DOM
	layout information that's only available after laying out the
	content).
	*/
	function drawSelection(config = {}) {
	    return [
	        selectionConfig.of(config),
	        cursorLayer,
	        selectionLayer,
	        hideNativeSelection,
	        nativeSelectionHidden.of(true)
	    ];
	}
	function configChanged(update) {
	    return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
	}
	const cursorLayer = /*@__PURE__*/layer({
	    above: true,
	    markers(view) {
	        let { state } = view, conf = state.facet(selectionConfig);
	        let cursors = [];
	        for (let r of state.selection.ranges) {
	            let prim = r == state.selection.main;
	            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
	                let className = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
	                let cursor = r.empty ? r : EditorSelection.cursor(r.head, r.head > r.anchor ? -1 : 1);
	                for (let piece of RectangleMarker.forRange(view, className, cursor))
	                    cursors.push(piece);
	            }
	        }
	        return cursors;
	    },
	    update(update, dom) {
	        if (update.transactions.some(tr => tr.selection))
	            dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
	        let confChange = configChanged(update);
	        if (confChange)
	            setBlinkRate(update.state, dom);
	        return update.docChanged || update.selectionSet || confChange;
	    },
	    mount(dom, view) {
	        setBlinkRate(view.state, dom);
	    },
	    class: "cm-cursorLayer"
	});
	function setBlinkRate(state, dom) {
	    dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
	}
	const selectionLayer = /*@__PURE__*/layer({
	    above: false,
	    markers(view) {
	        return view.state.selection.ranges.map(r => r.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r))
	            .reduce((a, b) => a.concat(b));
	    },
	    update(update, dom) {
	        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
	    },
	    class: "cm-selectionLayer"
	});
	const themeSpec = {
	    ".cm-line": {
	        "& ::selection": { backgroundColor: "transparent !important" },
	        "&::selection": { backgroundColor: "transparent !important" }
	    }
	};
	if (CanHidePrimary) {
	    themeSpec[".cm-line"].caretColor = "transparent !important";
	    themeSpec[".cm-content"] = { caretColor: "transparent !important" };
	}
	const hideNativeSelection = /*@__PURE__*/Prec.highest(/*@__PURE__*/EditorView.theme(themeSpec));

	const setDropCursorPos = /*@__PURE__*/StateEffect.define({
	    map(pos, mapping) { return pos == null ? null : mapping.mapPos(pos); }
	});
	const dropCursorPos = /*@__PURE__*/StateField.define({
	    create() { return null; },
	    update(pos, tr) {
	        if (pos != null)
	            pos = tr.changes.mapPos(pos);
	        return tr.effects.reduce((pos, e) => e.is(setDropCursorPos) ? e.value : pos, pos);
	    }
	});
	const drawDropCursor = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.cursor = null;
	        this.measureReq = { read: this.readPos.bind(this), write: this.drawCursor.bind(this) };
	    }
	    update(update) {
	        var _a;
	        let cursorPos = update.state.field(dropCursorPos);
	        if (cursorPos == null) {
	            if (this.cursor != null) {
	                (_a = this.cursor) === null || _a === void 0 ? void 0 : _a.remove();
	                this.cursor = null;
	            }
	        }
	        else {
	            if (!this.cursor) {
	                this.cursor = this.view.scrollDOM.appendChild(document.createElement("div"));
	                this.cursor.className = "cm-dropCursor";
	            }
	            if (update.startState.field(dropCursorPos) != cursorPos || update.docChanged || update.geometryChanged)
	                this.view.requestMeasure(this.measureReq);
	        }
	    }
	    readPos() {
	        let { view } = this;
	        let pos = view.state.field(dropCursorPos);
	        let rect = pos != null && view.coordsAtPos(pos);
	        if (!rect)
	            return null;
	        let outer = view.scrollDOM.getBoundingClientRect();
	        return {
	            left: rect.left - outer.left + view.scrollDOM.scrollLeft * view.scaleX,
	            top: rect.top - outer.top + view.scrollDOM.scrollTop * view.scaleY,
	            height: rect.bottom - rect.top
	        };
	    }
	    drawCursor(pos) {
	        if (this.cursor) {
	            let { scaleX, scaleY } = this.view;
	            if (pos) {
	                this.cursor.style.left = pos.left / scaleX + "px";
	                this.cursor.style.top = pos.top / scaleY + "px";
	                this.cursor.style.height = pos.height / scaleY + "px";
	            }
	            else {
	                this.cursor.style.left = "-100000px";
	            }
	        }
	    }
	    destroy() {
	        if (this.cursor)
	            this.cursor.remove();
	    }
	    setDropPos(pos) {
	        if (this.view.state.field(dropCursorPos) != pos)
	            this.view.dispatch({ effects: setDropCursorPos.of(pos) });
	    }
	}, {
	    eventObservers: {
	        dragover(event) {
	            this.setDropPos(this.view.posAtCoords({ x: event.clientX, y: event.clientY }));
	        },
	        dragleave(event) {
	            if (event.target == this.view.contentDOM || !this.view.contentDOM.contains(event.relatedTarget))
	                this.setDropPos(null);
	        },
	        dragend() {
	            this.setDropPos(null);
	        },
	        drop() {
	            this.setDropPos(null);
	        }
	    }
	});
	/**
	Draws a cursor at the current drop position when something is
	dragged over the editor.
	*/
	function dropCursor() {
	    return [dropCursorPos, drawDropCursor];
	}

	function iterMatches(doc, re, from, to, f) {
	    re.lastIndex = 0;
	    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
	        if (!cursor.lineBreak)
	            while (m = re.exec(cursor.value))
	                f(pos + m.index, m);
	    }
	}
	function matchRanges(view, maxLength) {
	    let visible = view.visibleRanges;
	    if (visible.length == 1 && visible[0].from == view.viewport.from &&
	        visible[0].to == view.viewport.to)
	        return visible;
	    let result = [];
	    for (let { from, to } of visible) {
	        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
	        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
	        if (result.length && result[result.length - 1].to >= from)
	            result[result.length - 1].to = to;
	        else
	            result.push({ from, to });
	    }
	    return result;
	}
	/**
	Helper class used to make it easier to maintain decorations on
	visible code that matches a given regular expression. To be used
	in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
	represent a matching configuration.
	*/
	class MatchDecorator {
	    /**
	    Create a decorator.
	    */
	    constructor(config) {
	        const { regexp, decoration, decorate, boundary, maxLength = 1000 } = config;
	        if (!regexp.global)
	            throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
	        this.regexp = regexp;
	        if (decorate) {
	            this.addMatch = (match, view, from, add) => decorate(add, from, from + match[0].length, match, view);
	        }
	        else if (typeof decoration == "function") {
	            this.addMatch = (match, view, from, add) => {
	                let deco = decoration(match, view, from);
	                if (deco)
	                    add(from, from + match[0].length, deco);
	            };
	        }
	        else if (decoration) {
	            this.addMatch = (match, _view, from, add) => add(from, from + match[0].length, decoration);
	        }
	        else {
	            throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
	        }
	        this.boundary = boundary;
	        this.maxLength = maxLength;
	    }
	    /**
	    Compute the full set of decorations for matches in the given
	    view's viewport. You'll want to call this when initializing your
	    plugin.
	    */
	    createDeco(view) {
	        let build = new RangeSetBuilder(), add = build.add.bind(build);
	        for (let { from, to } of matchRanges(view, this.maxLength))
	            iterMatches(view.state.doc, this.regexp, from, to, (from, m) => this.addMatch(m, view, from, add));
	        return build.finish();
	    }
	    /**
	    Update a set of decorations for a view update. `deco` _must_ be
	    the set of decorations produced by _this_ `MatchDecorator` for
	    the view state before the update.
	    */
	    updateDeco(update, deco) {
	        let changeFrom = 1e9, changeTo = -1;
	        if (update.docChanged)
	            update.changes.iterChanges((_f, _t, from, to) => {
	                if (to > update.view.viewport.from && from < update.view.viewport.to) {
	                    changeFrom = Math.min(from, changeFrom);
	                    changeTo = Math.max(to, changeTo);
	                }
	            });
	        if (update.viewportChanged || changeTo - changeFrom > 1000)
	            return this.createDeco(update.view);
	        if (changeTo > -1)
	            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
	        return deco;
	    }
	    updateRange(view, deco, updateFrom, updateTo) {
	        for (let r of view.visibleRanges) {
	            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
	            if (to > from) {
	                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
	                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
	                if (this.boundary) {
	                    for (; from > fromLine.from; from--)
	                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
	                            start = from;
	                            break;
	                        }
	                    for (; to < toLine.to; to++)
	                        if (this.boundary.test(toLine.text[to - toLine.from])) {
	                            end = to;
	                            break;
	                        }
	                }
	                let ranges = [], m;
	                let add = (from, to, deco) => ranges.push(deco.range(from, to));
	                if (fromLine == toLine) {
	                    this.regexp.lastIndex = start - fromLine.from;
	                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from)
	                        this.addMatch(m, view, m.index + fromLine.from, add);
	                }
	                else {
	                    iterMatches(view.state.doc, this.regexp, start, end, (from, m) => this.addMatch(m, view, from, add));
	                }
	                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
	            }
	        }
	        return deco;
	    }
	}

	const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
	const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\u202d\u202e\u2066\u2067\u2069\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
	const Names = {
	    0: "null",
	    7: "bell",
	    8: "backspace",
	    10: "newline",
	    11: "vertical tab",
	    13: "carriage return",
	    27: "escape",
	    8203: "zero width space",
	    8204: "zero width non-joiner",
	    8205: "zero width joiner",
	    8206: "left-to-right mark",
	    8207: "right-to-left mark",
	    8232: "line separator",
	    8237: "left-to-right override",
	    8238: "right-to-left override",
	    8294: "left-to-right isolate",
	    8295: "right-to-left isolate",
	    8297: "pop directional isolate",
	    8233: "paragraph separator",
	    65279: "zero width no-break space",
	    65532: "object replacement"
	};
	let _supportsTabSize = null;
	function supportsTabSize() {
	    var _a;
	    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
	        let styles = document.body.style;
	        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
	    }
	    return _supportsTabSize || false;
	}
	const specialCharConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        let config = combineConfig(configs, {
	            render: null,
	            specialChars: Specials,
	            addSpecialChars: null
	        });
	        if (config.replaceTabs = !supportsTabSize())
	            config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
	        if (config.addSpecialChars)
	            config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
	        return config;
	    }
	});
	/**
	Returns an extension that installs highlighting of special
	characters.
	*/
	function highlightSpecialChars(
	/**
	Configuration options.
	*/
	config = {}) {
	    return [specialCharConfig.of(config), specialCharPlugin()];
	}
	let _plugin = null;
	function specialCharPlugin() {
	    return _plugin || (_plugin = ViewPlugin.fromClass(class {
	        constructor(view) {
	            this.view = view;
	            this.decorations = Decoration.none;
	            this.decorationCache = Object.create(null);
	            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
	            this.decorations = this.decorator.createDeco(view);
	        }
	        makeDecorator(conf) {
	            return new MatchDecorator({
	                regexp: conf.specialChars,
	                decoration: (m, view, pos) => {
	                    let { doc } = view.state;
	                    let code = codePointAt(m[0], 0);
	                    if (code == 9) {
	                        let line = doc.lineAt(pos);
	                        let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
	                        return Decoration.replace({
	                            widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth / this.view.scaleX)
	                        });
	                    }
	                    return this.decorationCache[code] ||
	                        (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
	                },
	                boundary: conf.replaceTabs ? undefined : /[^]/
	            });
	        }
	        update(update) {
	            let conf = update.state.facet(specialCharConfig);
	            if (update.startState.facet(specialCharConfig) != conf) {
	                this.decorator = this.makeDecorator(conf);
	                this.decorations = this.decorator.createDeco(update.view);
	            }
	            else {
	                this.decorations = this.decorator.updateDeco(update, this.decorations);
	            }
	        }
	    }, {
	        decorations: v => v.decorations
	    }));
	}
	const DefaultPlaceholder = "\u2022";
	// Assigns placeholder characters from the Control Pictures block to
	// ASCII control characters
	function placeholder$1(code) {
	    if (code >= 32)
	        return DefaultPlaceholder;
	    if (code == 10)
	        return "\u2424";
	    return String.fromCharCode(9216 + code);
	}
	class SpecialCharWidget extends WidgetType {
	    constructor(options, code) {
	        super();
	        this.options = options;
	        this.code = code;
	    }
	    eq(other) { return other.code == this.code; }
	    toDOM(view) {
	        let ph = placeholder$1(this.code);
	        let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
	        let custom = this.options.render && this.options.render(this.code, desc, ph);
	        if (custom)
	            return custom;
	        let span = document.createElement("span");
	        span.textContent = ph;
	        span.title = desc;
	        span.setAttribute("aria-label", desc);
	        span.className = "cm-specialChar";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}
	class TabWidget extends WidgetType {
	    constructor(width) {
	        super();
	        this.width = width;
	    }
	    eq(other) { return other.width == this.width; }
	    toDOM() {
	        let span = document.createElement("span");
	        span.textContent = "\t";
	        span.className = "cm-tab";
	        span.style.width = this.width + "px";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}

	/**
	Mark lines that have a cursor on them with the `"cm-activeLine"`
	DOM class.
	*/
	function highlightActiveLine() {
	    return activeLineHighlighter;
	}
	const lineDeco = /*@__PURE__*/Decoration.line({ class: "cm-activeLine" });
	const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.docChanged || update.selectionSet)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let lastLineStart = -1, deco = [];
	        for (let r of view.state.selection.ranges) {
	            let line = view.lineBlockAt(r.head);
	            if (line.from > lastLineStart) {
	                deco.push(lineDeco.range(line.from));
	                lastLineStart = line.from;
	            }
	        }
	        return Decoration.set(deco);
	    }
	}, {
	    decorations: v => v.decorations
	});

	// Don't compute precise column positions for line offsets above this
	// (since it could get expensive). Assume offset==column for them.
	const MaxOff = 2000;
	function rectangleFor(state, a, b) {
	    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
	    let ranges = [];
	    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
	        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
	        for (let i = startLine; i <= endLine; i++) {
	            let line = state.doc.line(i);
	            if (line.length <= endOff)
	                ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
	        }
	    }
	    else {
	        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
	        for (let i = startLine; i <= endLine; i++) {
	            let line = state.doc.line(i);
	            let start = findColumn(line.text, startCol, state.tabSize, true);
	            if (start < 0) {
	                ranges.push(EditorSelection.cursor(line.to));
	            }
	            else {
	                let end = findColumn(line.text, endCol, state.tabSize);
	                ranges.push(EditorSelection.range(line.from + start, line.from + end));
	            }
	        }
	    }
	    return ranges;
	}
	function absoluteColumn(view, x) {
	    let ref = view.coordsAtPos(view.viewport.from);
	    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
	}
	function getPos(view, event) {
	    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
	    let line = view.state.doc.lineAt(offset), off = offset - line.from;
	    let col = off > MaxOff ? -1
	        : off == line.length ? absoluteColumn(view, event.clientX)
	            : countColumn(line.text, view.state.tabSize, offset - line.from);
	    return { line: line.number, col, off };
	}
	function rectangleSelectionStyle(view, event) {
	    let start = getPos(view, event), startSel = view.state.selection;
	    if (!start)
	        return null;
	    return {
	        update(update) {
	            if (update.docChanged) {
	                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
	                let newLine = update.state.doc.lineAt(newStart);
	                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
	                startSel = startSel.map(update.changes);
	            }
	        },
	        get(event, _extend, multiple) {
	            let cur = getPos(view, event);
	            if (!cur)
	                return startSel;
	            let ranges = rectangleFor(view.state, start, cur);
	            if (!ranges.length)
	                return startSel;
	            if (multiple)
	                return EditorSelection.create(ranges.concat(startSel.ranges));
	            else
	                return EditorSelection.create(ranges);
	        }
	    };
	}
	/**
	Create an extension that enables rectangular selections. By
	default, it will react to left mouse drag with the Alt key held
	down. When such a selection occurs, the text within the rectangle
	that was dragged over will be selected, as one selection
	[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
	*/
	function rectangularSelection(options) {
	    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
	    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
	}
	const keys = {
	    Alt: [18, e => !!e.altKey],
	    Control: [17, e => !!e.ctrlKey],
	    Shift: [16, e => !!e.shiftKey],
	    Meta: [91, e => !!e.metaKey]
	};
	const showCrosshair = { style: "cursor: crosshair" };
	/**
	Returns an extension that turns the pointer cursor into a
	crosshair when a given modifier key, defaulting to Alt, is held
	down. Can serve as a visual hint that rectangular selection is
	going to happen when paired with
	[`rectangularSelection`](https://codemirror.net/6/docs/ref/#view.rectangularSelection).
	*/
	function crosshairCursor(options = {}) {
	    let [code, getter] = keys[options.key || "Alt"];
	    let plugin = ViewPlugin.fromClass(class {
	        constructor(view) {
	            this.view = view;
	            this.isDown = false;
	        }
	        set(isDown) {
	            if (this.isDown != isDown) {
	                this.isDown = isDown;
	                this.view.update([]);
	            }
	        }
	    }, {
	        eventObservers: {
	            keydown(e) {
	                this.set(e.keyCode == code || getter(e));
	            },
	            keyup(e) {
	                if (e.keyCode == code || !getter(e))
	                    this.set(false);
	            },
	            mousemove(e) {
	                this.set(getter(e));
	            }
	        }
	    });
	    return [
	        plugin,
	        EditorView.contentAttributes.of(view => { var _a; return ((_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.isDown) ? showCrosshair : null; })
	    ];
	}

	const panelConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        let topContainer, bottomContainer;
	        for (let c of configs) {
	            topContainer = topContainer || c.topContainer;
	            bottomContainer = bottomContainer || c.bottomContainer;
	        }
	        return { topContainer, bottomContainer };
	    }
	});
	/**
	Get the active panel created by the given constructor, if any.
	This can be useful when you need access to your panels' DOM
	structure.
	*/
	function getPanel(view, panel) {
	    let plugin = view.plugin(panelPlugin);
	    let index = plugin ? plugin.specs.indexOf(panel) : -1;
	    return index > -1 ? plugin.panels[index] : null;
	}
	const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.input = view.state.facet(showPanel);
	        this.specs = this.input.filter(s => s);
	        this.panels = this.specs.map(spec => spec(view));
	        let conf = view.state.facet(panelConfig);
	        this.top = new PanelGroup(view, true, conf.topContainer);
	        this.bottom = new PanelGroup(view, false, conf.bottomContainer);
	        this.top.sync(this.panels.filter(p => p.top));
	        this.bottom.sync(this.panels.filter(p => !p.top));
	        for (let p of this.panels) {
	            p.dom.classList.add("cm-panel");
	            if (p.mount)
	                p.mount();
	        }
	    }
	    update(update) {
	        let conf = update.state.facet(panelConfig);
	        if (this.top.container != conf.topContainer) {
	            this.top.sync([]);
	            this.top = new PanelGroup(update.view, true, conf.topContainer);
	        }
	        if (this.bottom.container != conf.bottomContainer) {
	            this.bottom.sync([]);
	            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
	        }
	        this.top.syncClasses();
	        this.bottom.syncClasses();
	        let input = update.state.facet(showPanel);
	        if (input != this.input) {
	            let specs = input.filter(x => x);
	            let panels = [], top = [], bottom = [], mount = [];
	            for (let spec of specs) {
	                let known = this.specs.indexOf(spec), panel;
	                if (known < 0) {
	                    panel = spec(update.view);
	                    mount.push(panel);
	                }
	                else {
	                    panel = this.panels[known];
	                    if (panel.update)
	                        panel.update(update);
	                }
	                panels.push(panel);
	                (panel.top ? top : bottom).push(panel);
	            }
	            this.specs = specs;
	            this.panels = panels;
	            this.top.sync(top);
	            this.bottom.sync(bottom);
	            for (let p of mount) {
	                p.dom.classList.add("cm-panel");
	                if (p.mount)
	                    p.mount();
	            }
	        }
	        else {
	            for (let p of this.panels)
	                if (p.update)
	                    p.update(update);
	        }
	    }
	    destroy() {
	        this.top.sync([]);
	        this.bottom.sync([]);
	    }
	}, {
	    provide: plugin => EditorView.scrollMargins.of(view => {
	        let value = view.plugin(plugin);
	        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
	    })
	});
	class PanelGroup {
	    constructor(view, top, container) {
	        this.view = view;
	        this.top = top;
	        this.container = container;
	        this.dom = undefined;
	        this.classes = "";
	        this.panels = [];
	        this.syncClasses();
	    }
	    sync(panels) {
	        for (let p of this.panels)
	            if (p.destroy && panels.indexOf(p) < 0)
	                p.destroy();
	        this.panels = panels;
	        this.syncDOM();
	    }
	    syncDOM() {
	        if (this.panels.length == 0) {
	            if (this.dom) {
	                this.dom.remove();
	                this.dom = undefined;
	            }
	            return;
	        }
	        if (!this.dom) {
	            this.dom = document.createElement("div");
	            this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
	            this.dom.style[this.top ? "top" : "bottom"] = "0";
	            let parent = this.container || this.view.dom;
	            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
	        }
	        let curDOM = this.dom.firstChild;
	        for (let panel of this.panels) {
	            if (panel.dom.parentNode == this.dom) {
	                while (curDOM != panel.dom)
	                    curDOM = rm(curDOM);
	                curDOM = curDOM.nextSibling;
	            }
	            else {
	                this.dom.insertBefore(panel.dom, curDOM);
	            }
	        }
	        while (curDOM)
	            curDOM = rm(curDOM);
	    }
	    scrollMargin() {
	        return !this.dom || this.container ? 0
	            : Math.max(0, this.top ?
	                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
	                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
	    }
	    syncClasses() {
	        if (!this.container || this.classes == this.view.themeClasses)
	            return;
	        for (let cls of this.classes.split(" "))
	            if (cls)
	                this.container.classList.remove(cls);
	        for (let cls of (this.classes = this.view.themeClasses).split(" "))
	            if (cls)
	                this.container.classList.add(cls);
	    }
	}
	function rm(node) {
	    let next = node.nextSibling;
	    node.remove();
	    return next;
	}
	/**
	Opening a panel is done by providing a constructor function for
	the panel through this facet. (The panel is closed again when its
	constructor is no longer provided.) Values of `null` are ignored.
	*/
	const showPanel = /*@__PURE__*/Facet.define({
	    enables: panelPlugin
	});

	/**
	A gutter marker represents a bit of information attached to a line
	in a specific gutter. Your own custom markers have to extend this
	class.
	*/
	class GutterMarker extends RangeValue {
	    /**
	    @internal
	    */
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other);
	    }
	    /**
	    Compare this marker to another marker of the same type.
	    */
	    eq(other) { return false; }
	    /**
	    Called if the marker has a `toDOM` method and its representation
	    was removed from a gutter.
	    */
	    destroy(dom) { }
	}
	GutterMarker.prototype.elementClass = "";
	GutterMarker.prototype.toDOM = undefined;
	GutterMarker.prototype.mapMode = MapMode.TrackBefore;
	GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
	GutterMarker.prototype.point = true;
	/**
	Facet used to add a class to all gutter elements for a given line.
	Markers given to this facet should _only_ define an
	[`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
	[`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
	in all gutters for the line).
	*/
	const gutterLineClass = /*@__PURE__*/Facet.define();
	const defaults$1 = {
	    class: "",
	    renderEmptyElements: false,
	    elementStyle: "",
	    markers: () => RangeSet.empty,
	    lineMarker: () => null,
	    widgetMarker: () => null,
	    lineMarkerChange: null,
	    initialSpacer: null,
	    updateSpacer: null,
	    domEventHandlers: {}
	};
	const activeGutters = /*@__PURE__*/Facet.define();
	/**
	Define an editor gutter. The order in which the gutters appear is
	determined by their extension priority.
	*/
	function gutter(config) {
	    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
	}
	const unfixGutters = /*@__PURE__*/Facet.define({
	    combine: values => values.some(x => x)
	});
	/**
	The gutter-drawing plugin is automatically enabled when you add a
	gutter, but you can use this function to explicitly configure it.

	Unless `fixed` is explicitly set to `false`, the gutters are
	fixed, meaning they don't scroll along with the content
	horizontally (except on Internet Explorer, which doesn't support
	CSS [`position:
	sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
	*/
	function gutters(config) {
	    let result = [
	        gutterView,
	    ];
	    if (config && config.fixed === false)
	        result.push(unfixGutters.of(true));
	    return result;
	}
	const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.prevViewport = view.viewport;
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-gutters";
	        this.dom.setAttribute("aria-hidden", "true");
	        this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
	        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
	        for (let gutter of this.gutters)
	            this.dom.appendChild(gutter.dom);
	        this.fixed = !view.state.facet(unfixGutters);
	        if (this.fixed) {
	            // FIXME IE11 fallback, which doesn't support position: sticky,
	            // by using position: relative + event handlers that realign the
	            // gutter (or just force fixed=false on IE11?)
	            this.dom.style.position = "sticky";
	        }
	        this.syncGutters(false);
	        view.scrollDOM.insertBefore(this.dom, view.contentDOM);
	    }
	    update(update) {
	        if (this.updateGutters(update)) {
	            // Detach during sync when the viewport changed significantly
	            // (such as during scrolling), since for large updates that is
	            // faster.
	            let vpA = this.prevViewport, vpB = update.view.viewport;
	            let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
	            this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
	        }
	        if (update.geometryChanged)
	            this.dom.style.minHeight = this.view.contentHeight + "px";
	        if (this.view.state.facet(unfixGutters) != !this.fixed) {
	            this.fixed = !this.fixed;
	            this.dom.style.position = this.fixed ? "sticky" : "";
	        }
	        this.prevViewport = update.view.viewport;
	    }
	    syncGutters(detach) {
	        let after = this.dom.nextSibling;
	        if (detach)
	            this.dom.remove();
	        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
	        let classSet = [];
	        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
	        for (let line of this.view.viewportLineBlocks) {
	            if (classSet.length)
	                classSet = [];
	            if (Array.isArray(line.type)) {
	                let first = true;
	                for (let b of line.type) {
	                    if (b.type == BlockType.Text && first) {
	                        advanceCursor(lineClasses, classSet, b.from);
	                        for (let cx of contexts)
	                            cx.line(this.view, b, classSet);
	                        first = false;
	                    }
	                    else if (b.widget) {
	                        for (let cx of contexts)
	                            cx.widget(this.view, b);
	                    }
	                }
	            }
	            else if (line.type == BlockType.Text) {
	                advanceCursor(lineClasses, classSet, line.from);
	                for (let cx of contexts)
	                    cx.line(this.view, line, classSet);
	            }
	            else if (line.widget) {
	                for (let cx of contexts)
	                    cx.widget(this.view, line);
	            }
	        }
	        for (let cx of contexts)
	            cx.finish();
	        if (detach)
	            this.view.scrollDOM.insertBefore(this.dom, after);
	    }
	    updateGutters(update) {
	        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
	        let change = update.docChanged || update.heightChanged || update.viewportChanged ||
	            !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
	        if (prev == cur) {
	            for (let gutter of this.gutters)
	                if (gutter.update(update))
	                    change = true;
	        }
	        else {
	            change = true;
	            let gutters = [];
	            for (let conf of cur) {
	                let known = prev.indexOf(conf);
	                if (known < 0) {
	                    gutters.push(new SingleGutterView(this.view, conf));
	                }
	                else {
	                    this.gutters[known].update(update);
	                    gutters.push(this.gutters[known]);
	                }
	            }
	            for (let g of this.gutters) {
	                g.dom.remove();
	                if (gutters.indexOf(g) < 0)
	                    g.destroy();
	            }
	            for (let g of gutters)
	                this.dom.appendChild(g.dom);
	            this.gutters = gutters;
	        }
	        return change;
	    }
	    destroy() {
	        for (let view of this.gutters)
	            view.destroy();
	        this.dom.remove();
	    }
	}, {
	    provide: plugin => EditorView.scrollMargins.of(view => {
	        let value = view.plugin(plugin);
	        if (!value || value.gutters.length == 0 || !value.fixed)
	            return null;
	        return view.textDirection == Direction.LTR
	            ? { left: value.dom.offsetWidth * view.scaleX }
	            : { right: value.dom.offsetWidth * view.scaleX };
	    })
	});
	function asArray(val) { return (Array.isArray(val) ? val : [val]); }
	function advanceCursor(cursor, collect, pos) {
	    while (cursor.value && cursor.from <= pos) {
	        if (cursor.from == pos)
	            collect.push(cursor.value);
	        cursor.next();
	    }
	}
	class UpdateContext {
	    constructor(gutter, viewport, height) {
	        this.gutter = gutter;
	        this.height = height;
	        this.i = 0;
	        this.cursor = RangeSet.iter(gutter.markers, viewport.from);
	    }
	    addElement(view, block, markers) {
	        let { gutter } = this, above = (block.top - this.height) / view.scaleY, height = block.height / view.scaleY;
	        if (this.i == gutter.elements.length) {
	            let newElt = new GutterElement(view, height, above, markers);
	            gutter.elements.push(newElt);
	            gutter.dom.appendChild(newElt.dom);
	        }
	        else {
	            gutter.elements[this.i].update(view, height, above, markers);
	        }
	        this.height = block.bottom;
	        this.i++;
	    }
	    line(view, line, extraMarkers) {
	        let localMarkers = [];
	        advanceCursor(this.cursor, localMarkers, line.from);
	        if (extraMarkers.length)
	            localMarkers = localMarkers.concat(extraMarkers);
	        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
	        if (forLine)
	            localMarkers.unshift(forLine);
	        let gutter = this.gutter;
	        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
	            return;
	        this.addElement(view, line, localMarkers);
	    }
	    widget(view, block) {
	        let marker = this.gutter.config.widgetMarker(view, block.widget, block);
	        if (marker)
	            this.addElement(view, block, [marker]);
	    }
	    finish() {
	        let gutter = this.gutter;
	        while (gutter.elements.length > this.i) {
	            let last = gutter.elements.pop();
	            gutter.dom.removeChild(last.dom);
	            last.destroy();
	        }
	    }
	}
	class SingleGutterView {
	    constructor(view, config) {
	        this.view = view;
	        this.config = config;
	        this.elements = [];
	        this.spacer = null;
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
	        for (let prop in config.domEventHandlers) {
	            this.dom.addEventListener(prop, (event) => {
	                let target = event.target, y;
	                if (target != this.dom && this.dom.contains(target)) {
	                    while (target.parentNode != this.dom)
	                        target = target.parentNode;
	                    let rect = target.getBoundingClientRect();
	                    y = (rect.top + rect.bottom) / 2;
	                }
	                else {
	                    y = event.clientY;
	                }
	                let line = view.lineBlockAtHeight(y - view.documentTop);
	                if (config.domEventHandlers[prop](view, line, event))
	                    event.preventDefault();
	            });
	        }
	        this.markers = asArray(config.markers(view));
	        if (config.initialSpacer) {
	            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
	            this.dom.appendChild(this.spacer.dom);
	            this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
	        }
	    }
	    update(update) {
	        let prevMarkers = this.markers;
	        this.markers = asArray(this.config.markers(update.view));
	        if (this.spacer && this.config.updateSpacer) {
	            let updated = this.config.updateSpacer(this.spacer.markers[0], update);
	            if (updated != this.spacer.markers[0])
	                this.spacer.update(update.view, 0, 0, [updated]);
	        }
	        let vp = update.view.viewport;
	        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
	            (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
	    }
	    destroy() {
	        for (let elt of this.elements)
	            elt.destroy();
	    }
	}
	class GutterElement {
	    constructor(view, height, above, markers) {
	        this.height = -1;
	        this.above = 0;
	        this.markers = [];
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-gutterElement";
	        this.update(view, height, above, markers);
	    }
	    update(view, height, above, markers) {
	        if (this.height != height) {
	            this.height = height;
	            this.dom.style.height = height + "px";
	        }
	        if (this.above != above)
	            this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
	        if (!sameMarkers(this.markers, markers))
	            this.setMarkers(view, markers);
	    }
	    setMarkers(view, markers) {
	        let cls = "cm-gutterElement", domPos = this.dom.firstChild;
	        for (let iNew = 0, iOld = 0;;) {
	            let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
	            if (marker) {
	                let c = marker.elementClass;
	                if (c)
	                    cls += " " + c;
	                for (let i = iOld; i < this.markers.length; i++)
	                    if (this.markers[i].compare(marker)) {
	                        skipTo = i;
	                        matched = true;
	                        break;
	                    }
	            }
	            else {
	                skipTo = this.markers.length;
	            }
	            while (iOld < skipTo) {
	                let next = this.markers[iOld++];
	                if (next.toDOM) {
	                    next.destroy(domPos);
	                    let after = domPos.nextSibling;
	                    domPos.remove();
	                    domPos = after;
	                }
	            }
	            if (!marker)
	                break;
	            if (marker.toDOM) {
	                if (matched)
	                    domPos = domPos.nextSibling;
	                else
	                    this.dom.insertBefore(marker.toDOM(view), domPos);
	            }
	            if (matched)
	                iOld++;
	        }
	        this.dom.className = cls;
	        this.markers = markers;
	    }
	    destroy() {
	        this.setMarkers(null, []); // First argument not used unless creating markers
	    }
	}
	function sameMarkers(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!a[i].compare(b[i]))
	            return false;
	    return true;
	}
	/**
	Facet used to provide markers to the line number gutter.
	*/
	const lineNumberMarkers = /*@__PURE__*/Facet.define();
	const lineNumberConfig = /*@__PURE__*/Facet.define({
	    combine(values) {
	        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
	            domEventHandlers(a, b) {
	                let result = Object.assign({}, a);
	                for (let event in b) {
	                    let exists = result[event], add = b[event];
	                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
	                }
	                return result;
	            }
	        });
	    }
	});
	class NumberMarker extends GutterMarker {
	    constructor(number) {
	        super();
	        this.number = number;
	    }
	    eq(other) { return this.number == other.number; }
	    toDOM() { return document.createTextNode(this.number); }
	}
	function formatNumber(view, number) {
	    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
	}
	const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
	    class: "cm-lineNumbers",
	    renderEmptyElements: false,
	    markers(view) { return view.state.facet(lineNumberMarkers); },
	    lineMarker(view, line, others) {
	        if (others.some(m => m.toDOM))
	            return null;
	        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
	    },
	    widgetMarker: () => null,
	    lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
	    initialSpacer(view) {
	        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
	    },
	    updateSpacer(spacer, update) {
	        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
	        return max == spacer.number ? spacer : new NumberMarker(max);
	    },
	    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
	}));
	/**
	Create a line number gutter extension.
	*/
	function lineNumbers(config = {}) {
	    return [
	        lineNumberConfig.of(config),
	        gutters(),
	        lineNumberGutter
	    ];
	}
	function maxLineNumber(lines) {
	    let last = 9;
	    while (last < lines)
	        last = last * 10 + 9;
	    return last;
	}
	const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
	    constructor() {
	        super(...arguments);
	        this.elementClass = "cm-activeLineGutter";
	    }
	};
	const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
	    let marks = [], last = -1;
	    for (let range of state.selection.ranges) {
	        let linePos = state.doc.lineAt(range.head).from;
	        if (linePos > last) {
	            last = linePos;
	            marks.push(activeLineGutterMarker.range(linePos));
	        }
	    }
	    return RangeSet.of(marks);
	});
	/**
	Returns an extension that adds a `cm-activeLineGutter` class to
	all gutter elements on the [active
	line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
	*/
	function highlightActiveLineGutter() {
	    return activeLineGutterHighlighter;
	}

	/**
	The default maximum length of a `TreeBuffer` node.
	*/
	const DefaultBufferLength = 1024;
	let nextPropID = 0;
	class Range {
	    constructor(from, to) {
	        this.from = from;
	        this.to = to;
	    }
	}
	/**
	Each [node type](#common.NodeType) or [individual tree](#common.Tree)
	can have metadata associated with it in props. Instances of this
	class represent prop names.
	*/
	class NodeProp {
	    /**
	    Create a new node prop type.
	    */
	    constructor(config = {}) {
	        this.id = nextPropID++;
	        this.perNode = !!config.perNode;
	        this.deserialize = config.deserialize || (() => {
	            throw new Error("This node type doesn't define a deserialize function");
	        });
	    }
	    /**
	    This is meant to be used with
	    [`NodeSet.extend`](#common.NodeSet.extend) or
	    [`LRParser.configure`](#lr.ParserConfig.props) to compute
	    prop values for each node type in the set. Takes a [match
	    object](#common.NodeType^match) or function that returns undefined
	    if the node type doesn't get this prop, and the prop's value if
	    it does.
	    */
	    add(match) {
	        if (this.perNode)
	            throw new RangeError("Can't add per-node props to node types");
	        if (typeof match != "function")
	            match = NodeType.match(match);
	        return (type) => {
	            let result = match(type);
	            return result === undefined ? null : [this, result];
	        };
	    }
	}
	/**
	Prop that is used to describe matching delimiters. For opening
	delimiters, this holds an array of node names (written as a
	space-separated string when declaring this prop in a grammar)
	for the node types of closing delimiters that match it.
	*/
	NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
	attached to closing delimiters, holding an array of node names
	of types of matching opening delimiters.
	*/
	NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	Used to assign node types to groups (for example, all node
	types that represent an expression could be tagged with an
	`"Expression"` group).
	*/
	NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
	/**
	Attached to nodes to indicate these should be
	[displayed](https://codemirror.net/docs/ref/#language.syntaxTree)
	in a bidirectional text isolate, so that direction-neutral
	characters on their sides don't incorrectly get associated with
	surrounding text. You'll generally want to set this for nodes
	that contain arbitrary text, like strings and comments, and for
	nodes that appear _inside_ arbitrary text, like HTML tags. When
	not given a value, in a grammar declaration, defaults to
	`"auto"`.
	*/
	NodeProp.isolate = new NodeProp({ deserialize: value => {
	        if (value && value != "rtl" && value != "ltr" && value != "auto")
	            throw new RangeError("Invalid value for isolate: " + value);
	        return value || "auto";
	    } });
	/**
	The hash of the [context](#lr.ContextTracker.constructor)
	that the node was parsed in, if any. Used to limit reuse of
	contextual nodes.
	*/
	NodeProp.contextHash = new NodeProp({ perNode: true });
	/**
	The distance beyond the end of the node that the tokenizer
	looked ahead for any of the tokens inside the node. (The LR
	parser only stores this when it is larger than 25, for
	efficiency reasons.)
	*/
	NodeProp.lookAhead = new NodeProp({ perNode: true });
	/**
	This per-node prop is used to replace a given node, or part of a
	node, with another tree. This is useful to include trees from
	different languages in mixed-language parsers.
	*/
	NodeProp.mounted = new NodeProp({ perNode: true });
	/**
	A mounted tree, which can be [stored](#common.NodeProp^mounted) on
	a tree node to indicate that parts of its content are
	represented by another tree.
	*/
	class MountedTree {
	    constructor(
	    /**
	    The inner tree.
	    */
	    tree, 
	    /**
	    If this is null, this tree replaces the entire node (it will
	    be included in the regular iteration instead of its host
	    node). If not, only the given ranges are considered to be
	    covered by this tree. This is used for trees that are mixed in
	    a way that isn't strictly hierarchical. Such mounted trees are
	    only entered by [`resolveInner`](#common.Tree.resolveInner)
	    and [`enter`](#common.SyntaxNode.enter).
	    */
	    overlay, 
	    /**
	    The parser used to create this subtree.
	    */
	    parser) {
	        this.tree = tree;
	        this.overlay = overlay;
	        this.parser = parser;
	    }
	    /**
	    @internal
	    */
	    static get(tree) {
	        return tree && tree.props && tree.props[NodeProp.mounted.id];
	    }
	}
	const noProps = Object.create(null);
	/**
	Each node in a syntax tree has a node type associated with it.
	*/
	class NodeType {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The name of the node type. Not necessarily unique, but if the
	    grammar was written properly, different node types with the
	    same name within a node set should play the same semantic
	    role.
	    */
	    name, 
	    /**
	    @internal
	    */
	    props, 
	    /**
	    The id of this node in its set. Corresponds to the term ids
	    used in the parser.
	    */
	    id, 
	    /**
	    @internal
	    */
	    flags = 0) {
	        this.name = name;
	        this.props = props;
	        this.id = id;
	        this.flags = flags;
	    }
	    /**
	    Define a node type.
	    */
	    static define(spec) {
	        let props = spec.props && spec.props.length ? Object.create(null) : noProps;
	        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
	            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
	        let type = new NodeType(spec.name || "", props, spec.id, flags);
	        if (spec.props)
	            for (let src of spec.props) {
	                if (!Array.isArray(src))
	                    src = src(type);
	                if (src) {
	                    if (src[0].perNode)
	                        throw new RangeError("Can't store a per-node prop on a node type");
	                    props[src[0].id] = src[1];
	                }
	            }
	        return type;
	    }
	    /**
	    Retrieves a node prop for this type. Will return `undefined` if
	    the prop isn't present on this node.
	    */
	    prop(prop) { return this.props[prop.id]; }
	    /**
	    True when this is the top node of a grammar.
	    */
	    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
	    /**
	    True when this node is produced by a skip rule.
	    */
	    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
	    /**
	    Indicates whether this is an error node.
	    */
	    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
	    /**
	    When true, this node type doesn't correspond to a user-declared
	    named node, for example because it is used to cache repetition.
	    */
	    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
	    /**
	    Returns true when this node's name or one of its
	    [groups](#common.NodeProp^group) matches the given string.
	    */
	    is(name) {
	        if (typeof name == 'string') {
	            if (this.name == name)
	                return true;
	            let group = this.prop(NodeProp.group);
	            return group ? group.indexOf(name) > -1 : false;
	        }
	        return this.id == name;
	    }
	    /**
	    Create a function from node types to arbitrary values by
	    specifying an object whose property names are node or
	    [group](#common.NodeProp^group) names. Often useful with
	    [`NodeProp.add`](#common.NodeProp.add). You can put multiple
	    names, separated by spaces, in a single property name to map
	    multiple node names to a single value.
	    */
	    static match(map) {
	        let direct = Object.create(null);
	        for (let prop in map)
	            for (let name of prop.split(" "))
	                direct[name] = map[prop];
	        return (node) => {
	            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
	                let found = direct[i < 0 ? node.name : groups[i]];
	                if (found)
	                    return found;
	            }
	        };
	    }
	}
	/**
	An empty dummy node type to use when no actual type is available.
	*/
	NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
	/**
	A node set holds a collection of node types. It is used to
	compactly represent trees by storing their type ids, rather than a
	full pointer to the type object, in a numeric array. Each parser
	[has](#lr.LRParser.nodeSet) a node set, and [tree
	buffers](#common.TreeBuffer) can only store collections of nodes
	from the same set. A set can have a maximum of 2**16 (65536) node
	types in it, so that the ids fit into 16-bit typed array slots.
	*/
	class NodeSet {
	    /**
	    Create a set with the given types. The `id` property of each
	    type should correspond to its position within the array.
	    */
	    constructor(
	    /**
	    The node types in this set, by id.
	    */
	    types) {
	        this.types = types;
	        for (let i = 0; i < types.length; i++)
	            if (types[i].id != i)
	                throw new RangeError("Node type ids should correspond to array positions when creating a node set");
	    }
	    /**
	    Create a copy of this set with some node properties added. The
	    arguments to this method can be created with
	    [`NodeProp.add`](#common.NodeProp.add).
	    */
	    extend(...props) {
	        let newTypes = [];
	        for (let type of this.types) {
	            let newProps = null;
	            for (let source of props) {
	                let add = source(type);
	                if (add) {
	                    if (!newProps)
	                        newProps = Object.assign({}, type.props);
	                    newProps[add[0].id] = add[1];
	                }
	            }
	            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
	        }
	        return new NodeSet(newTypes);
	    }
	}
	const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
	/**
	Options that control iteration. Can be combined with the `|`
	operator to enable multiple ones.
	*/
	var IterMode;
	(function (IterMode) {
	    /**
	    When enabled, iteration will only visit [`Tree`](#common.Tree)
	    objects, not nodes packed into
	    [`TreeBuffer`](#common.TreeBuffer)s.
	    */
	    IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
	    /**
	    Enable this to make iteration include anonymous nodes (such as
	    the nodes that wrap repeated grammar constructs into a balanced
	    tree).
	    */
	    IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
	    /**
	    By default, regular [mounted](#common.NodeProp^mounted) nodes
	    replace their base node in iteration. Enable this to ignore them
	    instead.
	    */
	    IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
	    /**
	    This option only applies in
	    [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
	    library to not enter mounted overlays if one covers the given
	    position.
	    */
	    IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
	})(IterMode || (IterMode = {}));
	/**
	A piece of syntax tree. There are two ways to approach these
	trees: the way they are actually stored in memory, and the
	convenient way.

	Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
	objects. By packing detail information into `TreeBuffer` leaf
	nodes, the representation is made a lot more memory-efficient.

	However, when you want to actually work with tree nodes, this
	representation is very awkward, so most client code will want to
	use the [`TreeCursor`](#common.TreeCursor) or
	[`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
	a view on some part of this data structure, and can be used to
	move around to adjacent nodes.
	*/
	class Tree {
	    /**
	    Construct a new tree. See also [`Tree.build`](#common.Tree^build).
	    */
	    constructor(
	    /**
	    The type of the top node.
	    */
	    type, 
	    /**
	    This node's child nodes.
	    */
	    children, 
	    /**
	    The positions (offsets relative to the start of this tree) of
	    the children.
	    */
	    positions, 
	    /**
	    The total length of this tree
	    */
	    length, 
	    /**
	    Per-node [node props](#common.NodeProp) to associate with this node.
	    */
	    props) {
	        this.type = type;
	        this.children = children;
	        this.positions = positions;
	        this.length = length;
	        /**
	        @internal
	        */
	        this.props = null;
	        if (props && props.length) {
	            this.props = Object.create(null);
	            for (let [prop, value] of props)
	                this.props[typeof prop == "number" ? prop : prop.id] = value;
	        }
	    }
	    /**
	    @internal
	    */
	    toString() {
	        let mounted = MountedTree.get(this);
	        if (mounted && !mounted.overlay)
	            return mounted.tree.toString();
	        let children = "";
	        for (let ch of this.children) {
	            let str = ch.toString();
	            if (str) {
	                if (children)
	                    children += ",";
	                children += str;
	            }
	        }
	        return !this.type.name ? children :
	            (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
	                (children.length ? "(" + children + ")" : "");
	    }
	    /**
	    Get a [tree cursor](#common.TreeCursor) positioned at the top of
	    the tree. Mode can be used to [control](#common.IterMode) which
	    nodes the cursor visits.
	    */
	    cursor(mode = 0) {
	        return new TreeCursor(this.topNode, mode);
	    }
	    /**
	    Get a [tree cursor](#common.TreeCursor) pointing into this tree
	    at the given position and side (see
	    [`moveTo`](#common.TreeCursor.moveTo).
	    */
	    cursorAt(pos, side = 0, mode = 0) {
	        let scope = CachedNode.get(this) || this.topNode;
	        let cursor = new TreeCursor(scope);
	        cursor.moveTo(pos, side);
	        CachedNode.set(this, cursor._tree);
	        return cursor;
	    }
	    /**
	    Get a [syntax node](#common.SyntaxNode) object for the top of the
	    tree.
	    */
	    get topNode() {
	        return new TreeNode(this, 0, 0, null);
	    }
	    /**
	    Get the [syntax node](#common.SyntaxNode) at the given position.
	    If `side` is -1, this will move into nodes that end at the
	    position. If 1, it'll move into nodes that start at the
	    position. With 0, it'll only enter nodes that cover the position
	    from both sides.
	    
	    Note that this will not enter
	    [overlays](#common.MountedTree.overlay), and you often want
	    [`resolveInner`](#common.Tree.resolveInner) instead.
	    */
	    resolve(pos, side = 0) {
	        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
	        CachedNode.set(this, node);
	        return node;
	    }
	    /**
	    Like [`resolve`](#common.Tree.resolve), but will enter
	    [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
	    pointing into the innermost overlaid tree at the given position
	    (with parent links going through all parent structure, including
	    the host trees).
	    */
	    resolveInner(pos, side = 0) {
	        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
	        CachedInnerNode.set(this, node);
	        return node;
	    }
	    /**
	    In some situations, it can be useful to iterate through all
	    nodes around a position, including those in overlays that don't
	    directly cover the position. This method gives you an iterator
	    that will produce all nodes, from small to big, around the given
	    position.
	    */
	    resolveStack(pos, side = 0) {
	        return stackIterator(this, pos, side);
	    }
	    /**
	    Iterate over the tree and its children, calling `enter` for any
	    node that touches the `from`/`to` region (if given) before
	    running over such a node's children, and `leave` (if given) when
	    leaving the node. When `enter` returns `false`, that node will
	    not have its children iterated over (or `leave` called).
	    */
	    iterate(spec) {
	        let { enter, leave, from = 0, to = this.length } = spec;
	        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
	        for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
	            let entered = false;
	            if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
	                if (c.firstChild())
	                    continue;
	                entered = true;
	            }
	            for (;;) {
	                if (entered && leave && (anon || !c.type.isAnonymous))
	                    leave(c);
	                if (c.nextSibling())
	                    break;
	                if (!c.parent())
	                    return;
	                entered = true;
	            }
	        }
	    }
	    /**
	    Get the value of the given [node prop](#common.NodeProp) for this
	    node. Works with both per-node and per-type props.
	    */
	    prop(prop) {
	        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
	    }
	    /**
	    Returns the node's [per-node props](#common.NodeProp.perNode) in a
	    format that can be passed to the [`Tree`](#common.Tree)
	    constructor.
	    */
	    get propValues() {
	        let result = [];
	        if (this.props)
	            for (let id in this.props)
	                result.push([+id, this.props[id]]);
	        return result;
	    }
	    /**
	    Balance the direct children of this tree, producing a copy of
	    which may have children grouped into subtrees with type
	    [`NodeType.none`](#common.NodeType^none).
	    */
	    balance(config = {}) {
	        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
	            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
	    }
	    /**
	    Build a tree from a postfix-ordered buffer of node information,
	    or a cursor over such a buffer.
	    */
	    static build(data) { return buildTree(data); }
	}
	/**
	The empty tree
	*/
	Tree.empty = new Tree(NodeType.none, [], [], 0);
	class FlatBufferCursor {
	    constructor(buffer, index) {
	        this.buffer = buffer;
	        this.index = index;
	    }
	    get id() { return this.buffer[this.index - 4]; }
	    get start() { return this.buffer[this.index - 3]; }
	    get end() { return this.buffer[this.index - 2]; }
	    get size() { return this.buffer[this.index - 1]; }
	    get pos() { return this.index; }
	    next() { this.index -= 4; }
	    fork() { return new FlatBufferCursor(this.buffer, this.index); }
	}
	/**
	Tree buffers contain (type, start, end, endIndex) quads for each
	node. In such a buffer, nodes are stored in prefix order (parents
	before children, with the endIndex of the parent indicating which
	children belong to it).
	*/
	class TreeBuffer {
	    /**
	    Create a tree buffer.
	    */
	    constructor(
	    /**
	    The buffer's content.
	    */
	    buffer, 
	    /**
	    The total length of the group of nodes in the buffer.
	    */
	    length, 
	    /**
	    The node set used in this buffer.
	    */
	    set) {
	        this.buffer = buffer;
	        this.length = length;
	        this.set = set;
	    }
	    /**
	    @internal
	    */
	    get type() { return NodeType.none; }
	    /**
	    @internal
	    */
	    toString() {
	        let result = [];
	        for (let index = 0; index < this.buffer.length;) {
	            result.push(this.childString(index));
	            index = this.buffer[index + 3];
	        }
	        return result.join(",");
	    }
	    /**
	    @internal
	    */
	    childString(index) {
	        let id = this.buffer[index], endIndex = this.buffer[index + 3];
	        let type = this.set.types[id], result = type.name;
	        if (/\W/.test(result) && !type.isError)
	            result = JSON.stringify(result);
	        index += 4;
	        if (endIndex == index)
	            return result;
	        let children = [];
	        while (index < endIndex) {
	            children.push(this.childString(index));
	            index = this.buffer[index + 3];
	        }
	        return result + "(" + children.join(",") + ")";
	    }
	    /**
	    @internal
	    */
	    findChild(startIndex, endIndex, dir, pos, side) {
	        let { buffer } = this, pick = -1;
	        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
	            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
	                pick = i;
	                if (dir > 0)
	                    break;
	            }
	        }
	        return pick;
	    }
	    /**
	    @internal
	    */
	    slice(startI, endI, from) {
	        let b = this.buffer;
	        let copy = new Uint16Array(endI - startI), len = 0;
	        for (let i = startI, j = 0; i < endI;) {
	            copy[j++] = b[i++];
	            copy[j++] = b[i++] - from;
	            let to = copy[j++] = b[i++] - from;
	            copy[j++] = b[i++] - startI;
	            len = Math.max(len, to);
	        }
	        return new TreeBuffer(copy, len, this.set);
	    }
	}
	function checkSide(side, pos, from, to) {
	    switch (side) {
	        case -2 /* Side.Before */: return from < pos;
	        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
	        case 0 /* Side.Around */: return from < pos && to > pos;
	        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
	        case 2 /* Side.After */: return to > pos;
	        case 4 /* Side.DontCare */: return true;
	    }
	}
	function resolveNode(node, pos, side, overlays) {
	    var _a;
	    // Move up to a node that actually holds the position, if possible
	    while (node.from == node.to ||
	        (side < 1 ? node.from >= pos : node.from > pos) ||
	        (side > -1 ? node.to <= pos : node.to < pos)) {
	        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
	        if (!parent)
	            return node;
	        node = parent;
	    }
	    let mode = overlays ? 0 : IterMode.IgnoreOverlays;
	    // Must go up out of overlays when those do not overlap with pos
	    if (overlays)
	        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
	            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
	                node = parent;
	        }
	    for (;;) {
	        let inner = node.enter(pos, side, mode);
	        if (!inner)
	            return node;
	        node = inner;
	    }
	}
	class BaseNode {
	    cursor(mode = 0) { return new TreeCursor(this, mode); }
	    getChild(type, before = null, after = null) {
	        let r = getChildren(this, type, before, after);
	        return r.length ? r[0] : null;
	    }
	    getChildren(type, before = null, after = null) {
	        return getChildren(this, type, before, after);
	    }
	    resolve(pos, side = 0) {
	        return resolveNode(this, pos, side, false);
	    }
	    resolveInner(pos, side = 0) {
	        return resolveNode(this, pos, side, true);
	    }
	    matchContext(context) {
	        return matchNodeContext(this, context);
	    }
	    enterUnfinishedNodesBefore(pos) {
	        let scan = this.childBefore(pos), node = this;
	        while (scan) {
	            let last = scan.lastChild;
	            if (!last || last.to != scan.to)
	                break;
	            if (last.type.isError && last.from == last.to) {
	                node = scan;
	                scan = last.prevSibling;
	            }
	            else {
	                scan = last;
	            }
	        }
	        return node;
	    }
	    get node() { return this; }
	    get next() { return this.parent; }
	}
	class TreeNode extends BaseNode {
	    constructor(_tree, from, 
	    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
	    index, _parent) {
	        super();
	        this._tree = _tree;
	        this.from = from;
	        this.index = index;
	        this._parent = _parent;
	    }
	    get type() { return this._tree.type; }
	    get name() { return this._tree.type.name; }
	    get to() { return this.from + this._tree.length; }
	    nextChild(i, dir, pos, side, mode = 0) {
	        for (let parent = this;;) {
	            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
	                let next = children[i], start = positions[i] + parent.from;
	                if (!checkSide(side, pos, start, start + next.length))
	                    continue;
	                if (next instanceof TreeBuffer) {
	                    if (mode & IterMode.ExcludeBuffers)
	                        continue;
	                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
	                    if (index > -1)
	                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);
	                }
	                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
	                    let mounted;
	                    if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
	                        return new TreeNode(mounted.tree, start, i, parent);
	                    let inner = new TreeNode(next, start, i, parent);
	                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
	                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
	                }
	            }
	            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
	                return null;
	            if (parent.index >= 0)
	                i = parent.index + dir;
	            else
	                i = dir < 0 ? -1 : parent._parent._tree.children.length;
	            parent = parent._parent;
	            if (!parent)
	                return null;
	        }
	    }
	    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
	    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
	    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
	    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
	    enter(pos, side, mode = 0) {
	        let mounted;
	        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
	            let rPos = pos - this.from;
	            for (let { from, to } of mounted.overlay) {
	                if ((side > 0 ? from <= rPos : from < rPos) &&
	                    (side < 0 ? to >= rPos : to > rPos))
	                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
	            }
	        }
	        return this.nextChild(0, 1, pos, side, mode);
	    }
	    nextSignificantParent() {
	        let val = this;
	        while (val.type.isAnonymous && val._parent)
	            val = val._parent;
	        return val;
	    }
	    get parent() {
	        return this._parent ? this._parent.nextSignificantParent() : null;
	    }
	    get nextSibling() {
	        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
	    }
	    get prevSibling() {
	        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
	    }
	    get tree() { return this._tree; }
	    toTree() { return this._tree; }
	    /**
	    @internal
	    */
	    toString() { return this._tree.toString(); }
	}
	function getChildren(node, type, before, after) {
	    let cur = node.cursor(), result = [];
	    if (!cur.firstChild())
	        return result;
	    if (before != null)
	        for (let found = false; !found;) {
	            found = cur.type.is(before);
	            if (!cur.nextSibling())
	                return result;
	        }
	    for (;;) {
	        if (after != null && cur.type.is(after))
	            return result;
	        if (cur.type.is(type))
	            result.push(cur.node);
	        if (!cur.nextSibling())
	            return after == null ? result : [];
	    }
	}
	function matchNodeContext(node, context, i = context.length - 1) {
	    for (let p = node.parent; i >= 0; p = p.parent) {
	        if (!p)
	            return false;
	        if (!p.type.isAnonymous) {
	            if (context[i] && context[i] != p.name)
	                return false;
	            i--;
	        }
	    }
	    return true;
	}
	class BufferContext {
	    constructor(parent, buffer, index, start) {
	        this.parent = parent;
	        this.buffer = buffer;
	        this.index = index;
	        this.start = start;
	    }
	}
	class BufferNode extends BaseNode {
	    get name() { return this.type.name; }
	    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
	    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
	    constructor(context, _parent, index) {
	        super();
	        this.context = context;
	        this._parent = _parent;
	        this.index = index;
	        this.type = context.buffer.set.types[context.buffer.buffer[index]];
	    }
	    child(dir, pos, side) {
	        let { buffer } = this.context;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
	        return index < 0 ? null : new BufferNode(this.context, this, index);
	    }
	    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
	    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
	    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
	    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
	    enter(pos, side, mode = 0) {
	        if (mode & IterMode.ExcludeBuffers)
	            return null;
	        let { buffer } = this.context;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
	        return index < 0 ? null : new BufferNode(this.context, this, index);
	    }
	    get parent() {
	        return this._parent || this.context.parent.nextSignificantParent();
	    }
	    externalSibling(dir) {
	        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
	    }
	    get nextSibling() {
	        let { buffer } = this.context;
	        let after = buffer.buffer[this.index + 3];
	        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
	            return new BufferNode(this.context, this._parent, after);
	        return this.externalSibling(1);
	    }
	    get prevSibling() {
	        let { buffer } = this.context;
	        let parentStart = this._parent ? this._parent.index + 4 : 0;
	        if (this.index == parentStart)
	            return this.externalSibling(-1);
	        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
	    }
	    get tree() { return null; }
	    toTree() {
	        let children = [], positions = [];
	        let { buffer } = this.context;
	        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
	        if (endI > startI) {
	            let from = buffer.buffer[this.index + 1];
	            children.push(buffer.slice(startI, endI, from));
	            positions.push(0);
	        }
	        return new Tree(this.type, children, positions, this.to - this.from);
	    }
	    /**
	    @internal
	    */
	    toString() { return this.context.buffer.childString(this.index); }
	}
	function iterStack(heads) {
	    if (!heads.length)
	        return null;
	    let pick = 0, picked = heads[0];
	    for (let i = 1; i < heads.length; i++) {
	        let node = heads[i];
	        if (node.from > picked.from || node.to < picked.to) {
	            picked = node;
	            pick = i;
	        }
	    }
	    let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
	    let newHeads = heads.slice();
	    if (next)
	        newHeads[pick] = next;
	    else
	        newHeads.splice(pick, 1);
	    return new StackIterator(newHeads, picked);
	}
	class StackIterator {
	    constructor(heads, node) {
	        this.heads = heads;
	        this.node = node;
	    }
	    get next() { return iterStack(this.heads); }
	}
	function stackIterator(tree, pos, side) {
	    let inner = tree.resolveInner(pos, side), layers = null;
	    for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
	        if (scan.index < 0) { // This is an overlay root
	            let parent = scan.parent;
	            (layers || (layers = [inner])).push(parent.resolve(pos, side));
	            scan = parent;
	        }
	        else {
	            let mount = MountedTree.get(scan.tree);
	            // Relevant overlay branching off
	            if (mount && mount.overlay && mount.overlay[0].from <= pos && mount.overlay[mount.overlay.length - 1].to >= pos) {
	                let root = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
	                (layers || (layers = [inner])).push(resolveNode(root, pos, side, false));
	            }
	        }
	    }
	    return layers ? iterStack(layers) : inner;
	}
	/**
	A tree cursor object focuses on a given node in a syntax tree, and
	allows you to move to adjacent nodes.
	*/
	class TreeCursor {
	    /**
	    Shorthand for `.type.name`.
	    */
	    get name() { return this.type.name; }
	    /**
	    @internal
	    */
	    constructor(node, 
	    /**
	    @internal
	    */
	    mode = 0) {
	        this.mode = mode;
	        /**
	        @internal
	        */
	        this.buffer = null;
	        this.stack = [];
	        /**
	        @internal
	        */
	        this.index = 0;
	        this.bufferNode = null;
	        if (node instanceof TreeNode) {
	            this.yieldNode(node);
	        }
	        else {
	            this._tree = node.context.parent;
	            this.buffer = node.context;
	            for (let n = node._parent; n; n = n._parent)
	                this.stack.unshift(n.index);
	            this.bufferNode = node;
	            this.yieldBuf(node.index);
	        }
	    }
	    yieldNode(node) {
	        if (!node)
	            return false;
	        this._tree = node;
	        this.type = node.type;
	        this.from = node.from;
	        this.to = node.to;
	        return true;
	    }
	    yieldBuf(index, type) {
	        this.index = index;
	        let { start, buffer } = this.buffer;
	        this.type = type || buffer.set.types[buffer.buffer[index]];
	        this.from = start + buffer.buffer[index + 1];
	        this.to = start + buffer.buffer[index + 2];
	        return true;
	    }
	    /**
	    @internal
	    */
	    yield(node) {
	        if (!node)
	            return false;
	        if (node instanceof TreeNode) {
	            this.buffer = null;
	            return this.yieldNode(node);
	        }
	        this.buffer = node.context;
	        return this.yieldBuf(node.index, node.type);
	    }
	    /**
	    @internal
	    */
	    toString() {
	        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
	    }
	    /**
	    @internal
	    */
	    enterChild(dir, pos, side) {
	        if (!this.buffer)
	            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
	        let { buffer } = this.buffer;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
	        if (index < 0)
	            return false;
	        this.stack.push(this.index);
	        return this.yieldBuf(index);
	    }
	    /**
	    Move the cursor to this node's first child. When this returns
	    false, the node has no child, and the cursor has not been moved.
	    */
	    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
	    /**
	    Move the cursor to this node's last child.
	    */
	    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
	    /**
	    Move the cursor to the first child that ends after `pos`.
	    */
	    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
	    /**
	    Move to the last child that starts before `pos`.
	    */
	    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
	    /**
	    Move the cursor to the child around `pos`. If side is -1 the
	    child may end at that position, when 1 it may start there. This
	    will also enter [overlaid](#common.MountedTree.overlay)
	    [mounted](#common.NodeProp^mounted) trees unless `overlays` is
	    set to false.
	    */
	    enter(pos, side, mode = this.mode) {
	        if (!this.buffer)
	            return this.yield(this._tree.enter(pos, side, mode));
	        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
	    }
	    /**
	    Move to the node's parent node, if this isn't the top node.
	    */
	    parent() {
	        if (!this.buffer)
	            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
	        if (this.stack.length)
	            return this.yieldBuf(this.stack.pop());
	        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
	        this.buffer = null;
	        return this.yieldNode(parent);
	    }
	    /**
	    @internal
	    */
	    sibling(dir) {
	        if (!this.buffer)
	            return !this._tree._parent ? false
	                : this.yield(this._tree.index < 0 ? null
	                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
	        let { buffer } = this.buffer, d = this.stack.length - 1;
	        if (dir < 0) {
	            let parentStart = d < 0 ? 0 : this.stack[d] + 4;
	            if (this.index != parentStart)
	                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
	        }
	        else {
	            let after = buffer.buffer[this.index + 3];
	            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
	                return this.yieldBuf(after);
	        }
	        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
	    }
	    /**
	    Move to this node's next sibling, if any.
	    */
	    nextSibling() { return this.sibling(1); }
	    /**
	    Move to this node's previous sibling, if any.
	    */
	    prevSibling() { return this.sibling(-1); }
	    atLastNode(dir) {
	        let index, parent, { buffer } = this;
	        if (buffer) {
	            if (dir > 0) {
	                if (this.index < buffer.buffer.buffer.length)
	                    return false;
	            }
	            else {
	                for (let i = 0; i < this.index; i++)
	                    if (buffer.buffer.buffer[i + 3] < this.index)
	                        return false;
	            }
	            ({ index, parent } = buffer);
	        }
	        else {
	            ({ index, _parent: parent } = this._tree);
	        }
	        for (; parent; { index, _parent: parent } = parent) {
	            if (index > -1)
	                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
	                    let child = parent._tree.children[i];
	                    if ((this.mode & IterMode.IncludeAnonymous) ||
	                        child instanceof TreeBuffer ||
	                        !child.type.isAnonymous ||
	                        hasChild(child))
	                        return false;
	                }
	        }
	        return true;
	    }
	    move(dir, enter) {
	        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
	            return true;
	        for (;;) {
	            if (this.sibling(dir))
	                return true;
	            if (this.atLastNode(dir) || !this.parent())
	                return false;
	        }
	    }
	    /**
	    Move to the next node in a
	    [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
	    traversal, going from a node to its first child or, if the
	    current node is empty or `enter` is false, its next sibling or
	    the next sibling of the first parent node that has one.
	    */
	    next(enter = true) { return this.move(1, enter); }
	    /**
	    Move to the next node in a last-to-first pre-order traveral. A
	    node is followed by its last child or, if it has none, its
	    previous sibling or the previous sibling of the first parent
	    node that has one.
	    */
	    prev(enter = true) { return this.move(-1, enter); }
	    /**
	    Move the cursor to the innermost node that covers `pos`. If
	    `side` is -1, it will enter nodes that end at `pos`. If it is 1,
	    it will enter nodes that start at `pos`.
	    */
	    moveTo(pos, side = 0) {
	        // Move up to a node that actually holds the position, if possible
	        while (this.from == this.to ||
	            (side < 1 ? this.from >= pos : this.from > pos) ||
	            (side > -1 ? this.to <= pos : this.to < pos))
	            if (!this.parent())
	                break;
	        // Then scan down into child nodes as far as possible
	        while (this.enterChild(1, pos, side)) { }
	        return this;
	    }
	    /**
	    Get a [syntax node](#common.SyntaxNode) at the cursor's current
	    position.
	    */
	    get node() {
	        if (!this.buffer)
	            return this._tree;
	        let cache = this.bufferNode, result = null, depth = 0;
	        if (cache && cache.context == this.buffer) {
	            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
	                for (let c = cache; c; c = c._parent)
	                    if (c.index == index) {
	                        if (index == this.index)
	                            return c;
	                        result = c;
	                        depth = d + 1;
	                        break scan;
	                    }
	                index = this.stack[--d];
	            }
	        }
	        for (let i = depth; i < this.stack.length; i++)
	            result = new BufferNode(this.buffer, result, this.stack[i]);
	        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
	    }
	    /**
	    Get the [tree](#common.Tree) that represents the current node, if
	    any. Will return null when the node is in a [tree
	    buffer](#common.TreeBuffer).
	    */
	    get tree() {
	        return this.buffer ? null : this._tree._tree;
	    }
	    /**
	    Iterate over the current node and all its descendants, calling
	    `enter` when entering a node and `leave`, if given, when leaving
	    one. When `enter` returns `false`, any children of that node are
	    skipped, and `leave` isn't called for it.
	    */
	    iterate(enter, leave) {
	        for (let depth = 0;;) {
	            let mustLeave = false;
	            if (this.type.isAnonymous || enter(this) !== false) {
	                if (this.firstChild()) {
	                    depth++;
	                    continue;
	                }
	                if (!this.type.isAnonymous)
	                    mustLeave = true;
	            }
	            for (;;) {
	                if (mustLeave && leave)
	                    leave(this);
	                mustLeave = this.type.isAnonymous;
	                if (this.nextSibling())
	                    break;
	                if (!depth)
	                    return;
	                this.parent();
	                depth--;
	                mustLeave = true;
	            }
	        }
	    }
	    /**
	    Test whether the current node matches a given context—a sequence
	    of direct parent node names. Empty strings in the context array
	    are treated as wildcards.
	    */
	    matchContext(context) {
	        if (!this.buffer)
	            return matchNodeContext(this.node, context);
	        let { buffer } = this.buffer, { types } = buffer.set;
	        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
	            if (d < 0)
	                return matchNodeContext(this.node, context, i);
	            let type = types[buffer.buffer[this.stack[d]]];
	            if (!type.isAnonymous) {
	                if (context[i] && context[i] != type.name)
	                    return false;
	                i--;
	            }
	        }
	        return true;
	    }
	}
	function hasChild(tree) {
	    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
	}
	function buildTree(data) {
	    var _a;
	    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
	    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
	    let types = nodeSet.types;
	    let contextHash = 0, lookAhead = 0;
	    function takeNode(parentStart, minPos, children, positions, inRepeat, depth) {
	        let { id, start, end, size } = cursor;
	        let lookAheadAtStart = lookAhead;
	        while (size < 0) {
	            cursor.next();
	            if (size == -1 /* SpecialRecord.Reuse */) {
	                let node = reused[id];
	                children.push(node);
	                positions.push(start - parentStart);
	                return;
	            }
	            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
	                contextHash = id;
	                return;
	            }
	            else if (size == -4 /* SpecialRecord.LookAhead */) {
	                lookAhead = id;
	                return;
	            }
	            else {
	                throw new RangeError(`Unrecognized record size: ${size}`);
	            }
	        }
	        let type = types[id], node, buffer;
	        let startPos = start - parentStart;
	        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
	            // Small enough for a buffer, and no reused nodes inside
	            let data = new Uint16Array(buffer.size - buffer.skip);
	            let endPos = cursor.pos - buffer.size, index = data.length;
	            while (cursor.pos > endPos)
	                index = copyToBuffer(buffer.start, data, index);
	            node = new TreeBuffer(data, end - buffer.start, nodeSet);
	            startPos = buffer.start - parentStart;
	        }
	        else { // Make it a node
	            let endPos = cursor.pos - size;
	            cursor.next();
	            let localChildren = [], localPositions = [];
	            let localInRepeat = id >= minRepeatType ? id : -1;
	            let lastGroup = 0, lastEnd = end;
	            while (cursor.pos > endPos) {
	                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
	                    if (cursor.end <= lastEnd - maxBufferLength) {
	                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
	                        lastGroup = localChildren.length;
	                        lastEnd = cursor.end;
	                    }
	                    cursor.next();
	                }
	                else if (depth > 2500 /* CutOff.Depth */) {
	                    takeFlatNode(start, endPos, localChildren, localPositions);
	                }
	                else {
	                    takeNode(start, endPos, localChildren, localPositions, localInRepeat, depth + 1);
	                }
	            }
	            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
	                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
	            localChildren.reverse();
	            localPositions.reverse();
	            if (localInRepeat > -1 && lastGroup > 0) {
	                let make = makeBalanced(type);
	                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
	            }
	            else {
	                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
	            }
	        }
	        children.push(node);
	        positions.push(startPos);
	    }
	    function takeFlatNode(parentStart, minPos, children, positions) {
	        let nodes = []; // Temporary, inverted array of leaf nodes found, with absolute positions
	        let nodeCount = 0, stopAt = -1;
	        while (cursor.pos > minPos) {
	            let { id, start, end, size } = cursor;
	            if (size > 4) { // Not a leaf
	                cursor.next();
	            }
	            else if (stopAt > -1 && start < stopAt) {
	                break;
	            }
	            else {
	                if (stopAt < 0)
	                    stopAt = end - maxBufferLength;
	                nodes.push(id, start, end);
	                nodeCount++;
	                cursor.next();
	            }
	        }
	        if (nodeCount) {
	            let buffer = new Uint16Array(nodeCount * 4);
	            let start = nodes[nodes.length - 2];
	            for (let i = nodes.length - 3, j = 0; i >= 0; i -= 3) {
	                buffer[j++] = nodes[i];
	                buffer[j++] = nodes[i + 1] - start;
	                buffer[j++] = nodes[i + 2] - start;
	                buffer[j++] = j;
	            }
	            children.push(new TreeBuffer(buffer, nodes[2] - start, nodeSet));
	            positions.push(start - parentStart);
	        }
	    }
	    function makeBalanced(type) {
	        return (children, positions, length) => {
	            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
	            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
	                if (!lastI && last.type == type && last.length == length)
	                    return last;
	                if (lookAheadProp = last.prop(NodeProp.lookAhead))
	                    lookAhead = positions[lastI] + last.length + lookAheadProp;
	            }
	            return makeTree(type, children, positions, length, lookAhead);
	        };
	    }
	    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
	        let localChildren = [], localPositions = [];
	        while (children.length > i) {
	            localChildren.push(children.pop());
	            localPositions.push(positions.pop() + base - from);
	        }
	        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
	        positions.push(from - base);
	    }
	    function makeTree(type, children, positions, length, lookAhead = 0, props) {
	        if (contextHash) {
	            let pair = [NodeProp.contextHash, contextHash];
	            props = props ? [pair].concat(props) : [pair];
	        }
	        if (lookAhead > 25) {
	            let pair = [NodeProp.lookAhead, lookAhead];
	            props = props ? [pair].concat(props) : [pair];
	        }
	        return new Tree(type, children, positions, length, props);
	    }
	    function findBufferSize(maxSize, inRepeat) {
	        // Scan through the buffer to find previous siblings that fit
	        // together in a TreeBuffer, and don't contain any reused nodes
	        // (which can't be stored in a buffer).
	        // If `inRepeat` is > -1, ignore node boundaries of that type for
	        // nesting, but make sure the end falls either at the start
	        // (`maxSize`) or before such a node.
	        let fork = cursor.fork();
	        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
	        let result = { size: 0, start: 0, skip: 0 };
	        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
	            let nodeSize = fork.size;
	            // Pretend nested repeat nodes of the same type don't exist
	            if (fork.id == inRepeat && nodeSize >= 0) {
	                // Except that we store the current state as a valid return
	                // value.
	                result.size = size;
	                result.start = start;
	                result.skip = skip;
	                skip += 4;
	                size += 4;
	                fork.next();
	                continue;
	            }
	            let startPos = fork.pos - nodeSize;
	            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
	                break;
	            let localSkipped = fork.id >= minRepeatType ? 4 : 0;
	            let nodeStart = fork.start;
	            fork.next();
	            while (fork.pos > startPos) {
	                if (fork.size < 0) {
	                    if (fork.size == -3 /* SpecialRecord.ContextChange */)
	                        localSkipped += 4;
	                    else
	                        break scan;
	                }
	                else if (fork.id >= minRepeatType) {
	                    localSkipped += 4;
	                }
	                fork.next();
	            }
	            start = nodeStart;
	            size += nodeSize;
	            skip += localSkipped;
	        }
	        if (inRepeat < 0 || size == maxSize) {
	            result.size = size;
	            result.start = start;
	            result.skip = skip;
	        }
	        return result.size > 4 ? result : undefined;
	    }
	    function copyToBuffer(bufferStart, buffer, index) {
	        let { id, start, end, size } = cursor;
	        cursor.next();
	        if (size >= 0 && id < minRepeatType) {
	            let startIndex = index;
	            if (size > 4) {
	                let endPos = cursor.pos - (size - 4);
	                while (cursor.pos > endPos)
	                    index = copyToBuffer(bufferStart, buffer, index);
	            }
	            buffer[--index] = startIndex;
	            buffer[--index] = end - bufferStart;
	            buffer[--index] = start - bufferStart;
	            buffer[--index] = id;
	        }
	        else if (size == -3 /* SpecialRecord.ContextChange */) {
	            contextHash = id;
	        }
	        else if (size == -4 /* SpecialRecord.LookAhead */) {
	            lookAhead = id;
	        }
	        return index;
	    }
	    let children = [], positions = [];
	    while (cursor.pos > 0)
	        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1, 0);
	    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
	    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
	}
	const nodeSizeCache = new WeakMap;
	function nodeSize(balanceType, node) {
	    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
	        return 1;
	    let size = nodeSizeCache.get(node);
	    if (size == null) {
	        size = 1;
	        for (let child of node.children) {
	            if (child.type != balanceType || !(child instanceof Tree)) {
	                size = 1;
	                break;
	            }
	            size += nodeSize(balanceType, child);
	        }
	        nodeSizeCache.set(node, size);
	    }
	    return size;
	}
	function balanceRange(
	// The type the balanced tree's inner nodes.
	balanceType, 
	// The direct children and their positions
	children, positions, 
	// The index range in children/positions to use
	from, to, 
	// The start position of the nodes, relative to their parent.
	start, 
	// Length of the outer node
	length, 
	// Function to build the top node of the balanced tree
	mkTop, 
	// Function to build internal nodes for the balanced tree
	mkTree) {
	    let total = 0;
	    for (let i = from; i < to; i++)
	        total += nodeSize(balanceType, children[i]);
	    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
	    let localChildren = [], localPositions = [];
	    function divide(children, positions, from, to, offset) {
	        for (let i = from; i < to;) {
	            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
	            i++;
	            for (; i < to; i++) {
	                let nextSize = nodeSize(balanceType, children[i]);
	                if (groupSize + nextSize >= maxChild)
	                    break;
	                groupSize += nextSize;
	            }
	            if (i == groupFrom + 1) {
	                if (groupSize > maxChild) {
	                    let only = children[groupFrom]; // Only trees can have a size > 1
	                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
	                    continue;
	                }
	                localChildren.push(children[groupFrom]);
	            }
	            else {
	                let length = positions[i - 1] + children[i - 1].length - groupStart;
	                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
	            }
	            localPositions.push(groupStart + offset - start);
	        }
	    }
	    divide(children, positions, from, to, 0);
	    return (mkTop || mkTree)(localChildren, localPositions, length);
	}

	/**
	Tree fragments are used during [incremental
	parsing](#common.Parser.startParse) to track parts of old trees
	that can be reused in a new parse. An array of fragments is used
	to track regions of an old tree whose nodes might be reused in new
	parses. Use the static
	[`applyChanges`](#common.TreeFragment^applyChanges) method to
	update fragments for document changes.
	*/
	class TreeFragment {
	    /**
	    Construct a tree fragment. You'll usually want to use
	    [`addTree`](#common.TreeFragment^addTree) and
	    [`applyChanges`](#common.TreeFragment^applyChanges) instead of
	    calling this directly.
	    */
	    constructor(
	    /**
	    The start of the unchanged range pointed to by this fragment.
	    This refers to an offset in the _updated_ document (as opposed
	    to the original tree).
	    */
	    from, 
	    /**
	    The end of the unchanged range.
	    */
	    to, 
	    /**
	    The tree that this fragment is based on.
	    */
	    tree, 
	    /**
	    The offset between the fragment's tree and the document that
	    this fragment can be used against. Add this when going from
	    document to tree positions, subtract it to go from tree to
	    document positions.
	    */
	    offset, openStart = false, openEnd = false) {
	        this.from = from;
	        this.to = to;
	        this.tree = tree;
	        this.offset = offset;
	        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
	    }
	    /**
	    Whether the start of the fragment represents the start of a
	    parse, or the end of a change. (In the second case, it may not
	    be safe to reuse some nodes at the start, depending on the
	    parsing algorithm.)
	    */
	    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
	    /**
	    Whether the end of the fragment represents the end of a
	    full-document parse, or the start of a change.
	    */
	    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
	    /**
	    Create a set of fragments from a freshly parsed tree, or update
	    an existing set of fragments by replacing the ones that overlap
	    with a tree with content from the new tree. When `partial` is
	    true, the parse is treated as incomplete, and the resulting
	    fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
	    true.
	    */
	    static addTree(tree, fragments = [], partial = false) {
	        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
	        for (let f of fragments)
	            if (f.to > tree.length)
	                result.push(f);
	        return result;
	    }
	    /**
	    Apply a set of edits to an array of fragments, removing or
	    splitting fragments as necessary to remove edited ranges, and
	    adjusting offsets for fragments that moved.
	    */
	    static applyChanges(fragments, changes, minGap = 128) {
	        if (!changes.length)
	            return fragments;
	        let result = [];
	        let fI = 1, nextF = fragments.length ? fragments[0] : null;
	        for (let cI = 0, pos = 0, off = 0;; cI++) {
	            let nextC = cI < changes.length ? changes[cI] : null;
	            let nextPos = nextC ? nextC.fromA : 1e9;
	            if (nextPos - pos >= minGap)
	                while (nextF && nextF.from < nextPos) {
	                    let cut = nextF;
	                    if (pos >= cut.from || nextPos <= cut.to || off) {
	                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
	                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
	                    }
	                    if (cut)
	                        result.push(cut);
	                    if (nextF.to > nextPos)
	                        break;
	                    nextF = fI < fragments.length ? fragments[fI++] : null;
	                }
	            if (!nextC)
	                break;
	            pos = nextC.toA;
	            off = nextC.toA - nextC.toB;
	        }
	        return result;
	    }
	}
	/**
	A superclass that parsers should extend.
	*/
	class Parser {
	    /**
	    Start a parse, returning a [partial parse](#common.PartialParse)
	    object. [`fragments`](#common.TreeFragment) can be passed in to
	    make the parse incremental.
	    
	    By default, the entire input is parsed. You can pass `ranges`,
	    which should be a sorted array of non-empty, non-overlapping
	    ranges, to parse only those ranges. The tree returned in that
	    case will start at `ranges[0].from`.
	    */
	    startParse(input, fragments, ranges) {
	        if (typeof input == "string")
	            input = new StringInput(input);
	        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
	        return this.createParse(input, fragments || [], ranges);
	    }
	    /**
	    Run a full parse, returning the resulting tree.
	    */
	    parse(input, fragments, ranges) {
	        let parse = this.startParse(input, fragments, ranges);
	        for (;;) {
	            let done = parse.advance();
	            if (done)
	                return done;
	        }
	    }
	}
	class StringInput {
	    constructor(string) {
	        this.string = string;
	    }
	    get length() { return this.string.length; }
	    chunk(from) { return this.string.slice(from); }
	    get lineChunks() { return false; }
	    read(from, to) { return this.string.slice(from, to); }
	}
	new NodeProp({ perNode: true });

	/**
	A parse stack. These are used internally by the parser to track
	parsing progress. They also provide some properties and methods
	that external code such as a tokenizer can use to get information
	about the parse state.
	*/
	class Stack {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The parse that this stack is part of @internal
	    */
	    p, 
	    /**
	    Holds state, input pos, buffer index triplets for all but the
	    top state @internal
	    */
	    stack, 
	    /**
	    The current parse state @internal
	    */
	    state, 
	    // The position at which the next reduce should take place. This
	    // can be less than `this.pos` when skipped expressions have been
	    // added to the stack (which should be moved outside of the next
	    // reduction)
	    /**
	    @internal
	    */
	    reducePos, 
	    /**
	    The input position up to which this stack has parsed.
	    */
	    pos, 
	    /**
	    The dynamic score of the stack, including dynamic precedence
	    and error-recovery penalties
	    @internal
	    */
	    score, 
	    // The output buffer. Holds (type, start, end, size) quads
	    // representing nodes created by the parser, where `size` is
	    // amount of buffer array entries covered by this node.
	    /**
	    @internal
	    */
	    buffer, 
	    // The base offset of the buffer. When stacks are split, the split
	    // instance shared the buffer history with its parent up to
	    // `bufferBase`, which is the absolute offset (including the
	    // offset of previous splits) into the buffer at which this stack
	    // starts writing.
	    /**
	    @internal
	    */
	    bufferBase, 
	    /**
	    @internal
	    */
	    curContext, 
	    /**
	    @internal
	    */
	    lookAhead = 0, 
	    // A parent stack from which this was split off, if any. This is
	    // set up so that it always points to a stack that has some
	    // additional buffer content, never to a stack with an equal
	    // `bufferBase`.
	    /**
	    @internal
	    */
	    parent) {
	        this.p = p;
	        this.stack = stack;
	        this.state = state;
	        this.reducePos = reducePos;
	        this.pos = pos;
	        this.score = score;
	        this.buffer = buffer;
	        this.bufferBase = bufferBase;
	        this.curContext = curContext;
	        this.lookAhead = lookAhead;
	        this.parent = parent;
	    }
	    /**
	    @internal
	    */
	    toString() {
	        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? "!" + this.score : ""}`;
	    }
	    // Start an empty stack
	    /**
	    @internal
	    */
	    static start(p, state, pos = 0) {
	        let cx = p.parser.context;
	        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);
	    }
	    /**
	    The stack's current [context](#lr.ContextTracker) value, if
	    any. Its type will depend on the context tracker's type
	    parameter, or it will be `null` if there is no context
	    tracker.
	    */
	    get context() { return this.curContext ? this.curContext.context : null; }
	    // Push a state onto the stack, tracking its start position as well
	    // as the buffer base at that point.
	    /**
	    @internal
	    */
	    pushState(state, start) {
	        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);
	        this.state = state;
	    }
	    // Apply a reduce action
	    /**
	    @internal
	    */
	    reduce(action) {
	        var _a;
	        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;
	        let { parser } = this.p;
	        let dPrec = parser.dynamicPrecedence(type);
	        if (dPrec)
	            this.score += dPrec;
	        if (depth == 0) {
	            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);
	            // Zero-depth reductions are a special case—they add stuff to
	            // the stack without popping anything off.
	            if (type < parser.minRepeatTerm)
	                this.storeNode(type, this.reducePos, this.reducePos, 4, true);
	            this.reduceContext(type, this.reducePos);
	            return;
	        }
	        // Find the base index into `this.stack`, content after which will
	        // be dropped. Note that with `StayFlag` reductions we need to
	        // consume two extra frames (the dummy parent node for the skipped
	        // expression and the state that we'll be staying in, which should
	        // be moved to `this.state`).
	        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);
	        let start = base ? this.stack[base - 2] : this.p.ranges[0].from, size = this.reducePos - start;
	        // This is a kludge to try and detect overly deep left-associative
	        // trees, which will not increase the parse stack depth and thus
	        // won't be caught by the regular stack-depth limit check.
	        if (size >= 2000 /* Recover.MinBigReduction */ && !((_a = this.p.parser.nodeSet.types[type]) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {
	            if (start == this.p.lastBigReductionStart) {
	                this.p.bigReductionCount++;
	                this.p.lastBigReductionSize = size;
	            }
	            else if (this.p.lastBigReductionSize < size) {
	                this.p.bigReductionCount = 1;
	                this.p.lastBigReductionStart = start;
	                this.p.lastBigReductionSize = size;
	            }
	        }
	        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;
	        // Store normal terms or `R -> R R` repeat reductions
	        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {
	            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;
	            this.storeNode(type, start, pos, count + 4, true);
	        }
	        if (action & 262144 /* Action.StayFlag */) {
	            this.state = this.stack[base];
	        }
	        else {
	            let baseStateID = this.stack[base - 3];
	            this.state = parser.getGoto(baseStateID, type, true);
	        }
	        while (this.stack.length > base)
	            this.stack.pop();
	        this.reduceContext(type, start);
	    }
	    // Shift a value into the buffer
	    /**
	    @internal
	    */
	    storeNode(term, start, end, size = 4, isReduce = false) {
	        if (term == 0 /* Term.Err */ &&
	            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {
	            // Try to omit/merge adjacent error nodes
	            let cur = this, top = this.buffer.length;
	            if (top == 0 && cur.parent) {
	                top = cur.bufferBase - cur.parent.bufferBase;
	                cur = cur.parent;
	            }
	            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {
	                if (start == end)
	                    return;
	                if (cur.buffer[top - 2] >= start) {
	                    cur.buffer[top - 2] = end;
	                    return;
	                }
	            }
	        }
	        if (!isReduce || this.pos == end) { // Simple case, just append
	            this.buffer.push(term, start, end, size);
	        }
	        else { // There may be skipped nodes that have to be moved forward
	            let index = this.buffer.length;
	            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)
	                while (index > 0 && this.buffer[index - 2] > end) {
	                    // Move this record forward
	                    this.buffer[index] = this.buffer[index - 4];
	                    this.buffer[index + 1] = this.buffer[index - 3];
	                    this.buffer[index + 2] = this.buffer[index - 2];
	                    this.buffer[index + 3] = this.buffer[index - 1];
	                    index -= 4;
	                    if (size > 4)
	                        size -= 4;
	                }
	            this.buffer[index] = term;
	            this.buffer[index + 1] = start;
	            this.buffer[index + 2] = end;
	            this.buffer[index + 3] = size;
	        }
	    }
	    // Apply a shift action
	    /**
	    @internal
	    */
	    shift(action, type, start, end) {
	        if (action & 131072 /* Action.GotoFlag */) {
	            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);
	        }
	        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift
	            let nextState = action, { parser } = this.p;
	            if (end > this.pos || type <= parser.maxNode) {
	                this.pos = end;
	                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))
	                    this.reducePos = end;
	            }
	            this.pushState(nextState, start);
	            this.shiftContext(type, start);
	            if (type <= parser.maxNode)
	                this.buffer.push(type, start, end, 4);
	        }
	        else { // Shift-and-stay, which means this is a skipped token
	            this.pos = end;
	            this.shiftContext(type, start);
	            if (type <= this.p.parser.maxNode)
	                this.buffer.push(type, start, end, 4);
	        }
	    }
	    // Apply an action
	    /**
	    @internal
	    */
	    apply(action, next, nextStart, nextEnd) {
	        if (action & 65536 /* Action.ReduceFlag */)
	            this.reduce(action);
	        else
	            this.shift(action, next, nextStart, nextEnd);
	    }
	    // Add a prebuilt (reused) node into the buffer.
	    /**
	    @internal
	    */
	    useNode(value, next) {
	        let index = this.p.reused.length - 1;
	        if (index < 0 || this.p.reused[index] != value) {
	            this.p.reused.push(value);
	            index++;
	        }
	        let start = this.pos;
	        this.reducePos = this.pos = start + value.length;
	        this.pushState(next, start);
	        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);
	        if (this.curContext)
	            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));
	    }
	    // Split the stack. Due to the buffer sharing and the fact
	    // that `this.stack` tends to stay quite shallow, this isn't very
	    // expensive.
	    /**
	    @internal
	    */
	    split() {
	        let parent = this;
	        let off = parent.buffer.length;
	        // Because the top of the buffer (after this.pos) may be mutated
	        // to reorder reductions and skipped tokens, and shared buffers
	        // should be immutable, this copies any outstanding skipped tokens
	        // to the new buffer, and puts the base pointer before them.
	        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)
	            off -= 4;
	        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;
	        // Make sure parent points to an actual parent with content, if there is such a parent.
	        while (parent && base == parent.bufferBase)
	            parent = parent.parent;
	        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);
	    }
	    // Try to recover from an error by 'deleting' (ignoring) one token.
	    /**
	    @internal
	    */
	    recoverByDelete(next, nextEnd) {
	        let isNode = next <= this.p.parser.maxNode;
	        if (isNode)
	            this.storeNode(next, this.pos, nextEnd, 4);
	        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);
	        this.pos = this.reducePos = nextEnd;
	        this.score -= 190 /* Recover.Delete */;
	    }
	    /**
	    Check if the given term would be able to be shifted (optionally
	    after some reductions) on this stack. This can be useful for
	    external tokenizers that want to make sure they only provide a
	    given token when it applies.
	    */
	    canShift(term) {
	        for (let sim = new SimulatedStack(this);;) {
	            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);
	            if (action == 0)
	                return false;
	            if ((action & 65536 /* Action.ReduceFlag */) == 0)
	                return true;
	            sim.reduce(action);
	        }
	    }
	    // Apply up to Recover.MaxNext recovery actions that conceptually
	    // inserts some missing token or rule.
	    /**
	    @internal
	    */
	    recoverByInsert(next) {
	        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)
	            return [];
	        let nextStates = this.p.parser.nextStates(this.state);
	        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {
	            let best = [];
	            for (let i = 0, s; i < nextStates.length; i += 2) {
	                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))
	                    best.push(nextStates[i], s);
	            }
	            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)
	                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {
	                    let s = nextStates[i + 1];
	                    if (!best.some((v, i) => (i & 1) && v == s))
	                        best.push(nextStates[i], s);
	                }
	            nextStates = best;
	        }
	        let result = [];
	        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {
	            let s = nextStates[i + 1];
	            if (s == this.state)
	                continue;
	            let stack = this.split();
	            stack.pushState(s, this.pos);
	            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);
	            stack.shiftContext(nextStates[i], this.pos);
	            stack.reducePos = this.pos;
	            stack.score -= 200 /* Recover.Insert */;
	            result.push(stack);
	        }
	        return result;
	    }
	    // Force a reduce, if possible. Return false if that can't
	    // be done.
	    /**
	    @internal
	    */
	    forceReduce() {
	        let { parser } = this.p;
	        let reduce = parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);
	        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)
	            return false;
	        if (!parser.validAction(this.state, reduce)) {
	            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;
	            let target = this.stack.length - depth * 3;
	            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0) {
	                let backup = this.findForcedReduction();
	                if (backup == null)
	                    return false;
	                reduce = backup;
	            }
	            this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
	            this.score -= 100 /* Recover.Reduce */;
	        }
	        this.reducePos = this.pos;
	        this.reduce(reduce);
	        return true;
	    }
	    /**
	    Try to scan through the automaton to find some kind of reduction
	    that can be applied. Used when the regular ForcedReduce field
	    isn't a valid action. @internal
	    */
	    findForcedReduction() {
	        let { parser } = this.p, seen = [];
	        let explore = (state, depth) => {
	            if (seen.includes(state))
	                return;
	            seen.push(state);
	            return parser.allActions(state, (action) => {
	                if (action & (262144 /* Action.StayFlag */ | 131072 /* Action.GotoFlag */)) ;
	                else if (action & 65536 /* Action.ReduceFlag */) {
	                    let rDepth = (action >> 19 /* Action.ReduceDepthShift */) - depth;
	                    if (rDepth > 1) {
	                        let term = action & 65535 /* Action.ValueMask */, target = this.stack.length - rDepth * 3;
	                        if (target >= 0 && parser.getGoto(this.stack[target], term, false) >= 0)
	                            return (rDepth << 19 /* Action.ReduceDepthShift */) | 65536 /* Action.ReduceFlag */ | term;
	                    }
	                }
	                else {
	                    let found = explore(action, depth + 1);
	                    if (found != null)
	                        return found;
	                }
	            });
	        };
	        return explore(this.state, 0);
	    }
	    /**
	    @internal
	    */
	    forceAll() {
	        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {
	            if (!this.forceReduce()) {
	                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
	                break;
	            }
	        }
	        return this;
	    }
	    /**
	    Check whether this state has no further actions (assumed to be a direct descendant of the
	    top state, since any other states must be able to continue
	    somehow). @internal
	    */
	    get deadEnd() {
	        if (this.stack.length != 3)
	            return false;
	        let { parser } = this.p;
	        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&
	            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);
	    }
	    /**
	    Restart the stack (put it back in its start state). Only safe
	    when this.stack.length == 3 (state is directly below the top
	    state). @internal
	    */
	    restart() {
	        this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);
	        this.state = this.stack[0];
	        this.stack.length = 0;
	    }
	    /**
	    @internal
	    */
	    sameState(other) {
	        if (this.state != other.state || this.stack.length != other.stack.length)
	            return false;
	        for (let i = 0; i < this.stack.length; i += 3)
	            if (this.stack[i] != other.stack[i])
	                return false;
	        return true;
	    }
	    /**
	    Get the parser used by this stack.
	    */
	    get parser() { return this.p.parser; }
	    /**
	    Test whether a given dialect (by numeric ID, as exported from
	    the terms file) is enabled.
	    */
	    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }
	    shiftContext(term, start) {
	        if (this.curContext)
	            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));
	    }
	    reduceContext(term, start) {
	        if (this.curContext)
	            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));
	    }
	    /**
	    @internal
	    */
	    emitContext() {
	        let last = this.buffer.length - 1;
	        if (last < 0 || this.buffer[last] != -3)
	            this.buffer.push(this.curContext.hash, this.pos, this.pos, -3);
	    }
	    /**
	    @internal
	    */
	    emitLookAhead() {
	        let last = this.buffer.length - 1;
	        if (last < 0 || this.buffer[last] != -4)
	            this.buffer.push(this.lookAhead, this.pos, this.pos, -4);
	    }
	    updateContext(context) {
	        if (context != this.curContext.context) {
	            let newCx = new StackContext(this.curContext.tracker, context);
	            if (newCx.hash != this.curContext.hash)
	                this.emitContext();
	            this.curContext = newCx;
	        }
	    }
	    /**
	    @internal
	    */
	    setLookAhead(lookAhead) {
	        if (lookAhead > this.lookAhead) {
	            this.emitLookAhead();
	            this.lookAhead = lookAhead;
	        }
	    }
	    /**
	    @internal
	    */
	    close() {
	        if (this.curContext && this.curContext.tracker.strict)
	            this.emitContext();
	        if (this.lookAhead > 0)
	            this.emitLookAhead();
	    }
	}
	class StackContext {
	    constructor(tracker, context) {
	        this.tracker = tracker;
	        this.context = context;
	        this.hash = tracker.strict ? tracker.hash(context) : 0;
	    }
	}
	// Used to cheaply run some reductions to scan ahead without mutating
	// an entire stack
	class SimulatedStack {
	    constructor(start) {
	        this.start = start;
	        this.state = start.state;
	        this.stack = start.stack;
	        this.base = this.stack.length;
	    }
	    reduce(action) {
	        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;
	        if (depth == 0) {
	            if (this.stack == this.start.stack)
	                this.stack = this.stack.slice();
	            this.stack.push(this.state, 0, 0);
	            this.base += 3;
	        }
	        else {
	            this.base -= (depth - 1) * 3;
	        }
	        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);
	        this.state = goto;
	    }
	}
	// This is given to `Tree.build` to build a buffer, and encapsulates
	// the parent-stack-walking necessary to read the nodes.
	class StackBufferCursor {
	    constructor(stack, pos, index) {
	        this.stack = stack;
	        this.pos = pos;
	        this.index = index;
	        this.buffer = stack.buffer;
	        if (this.index == 0)
	            this.maybeNext();
	    }
	    static create(stack, pos = stack.bufferBase + stack.buffer.length) {
	        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);
	    }
	    maybeNext() {
	        let next = this.stack.parent;
	        if (next != null) {
	            this.index = this.stack.bufferBase - next.bufferBase;
	            this.stack = next;
	            this.buffer = next.buffer;
	        }
	    }
	    get id() { return this.buffer[this.index - 4]; }
	    get start() { return this.buffer[this.index - 3]; }
	    get end() { return this.buffer[this.index - 2]; }
	    get size() { return this.buffer[this.index - 1]; }
	    next() {
	        this.index -= 4;
	        this.pos -= 4;
	        if (this.index == 0)
	            this.maybeNext();
	    }
	    fork() {
	        return new StackBufferCursor(this.stack, this.pos, this.index);
	    }
	}

	// See lezer-generator/src/encode.ts for comments about the encoding
	// used here
	function decodeArray(input, Type = Uint16Array) {
	    if (typeof input != "string")
	        return input;
	    let array = null;
	    for (let pos = 0, out = 0; pos < input.length;) {
	        let value = 0;
	        for (;;) {
	            let next = input.charCodeAt(pos++), stop = false;
	            if (next == 126 /* Encode.BigValCode */) {
	                value = 65535 /* Encode.BigVal */;
	                break;
	            }
	            if (next >= 92 /* Encode.Gap2 */)
	                next--;
	            if (next >= 34 /* Encode.Gap1 */)
	                next--;
	            let digit = next - 32 /* Encode.Start */;
	            if (digit >= 46 /* Encode.Base */) {
	                digit -= 46 /* Encode.Base */;
	                stop = true;
	            }
	            value += digit;
	            if (stop)
	                break;
	            value *= 46 /* Encode.Base */;
	        }
	        if (array)
	            array[out++] = value;
	        else
	            array = new Type(value);
	    }
	    return array;
	}

	class CachedToken {
	    constructor() {
	        this.start = -1;
	        this.value = -1;
	        this.end = -1;
	        this.extended = -1;
	        this.lookAhead = 0;
	        this.mask = 0;
	        this.context = 0;
	    }
	}
	const nullToken = new CachedToken;
	/**
	[Tokenizers](#lr.ExternalTokenizer) interact with the input
	through this interface. It presents the input as a stream of
	characters, tracking lookahead and hiding the complexity of
	[ranges](#common.Parser.parse^ranges) from tokenizer code.
	*/
	class InputStream {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    input, 
	    /**
	    @internal
	    */
	    ranges) {
	        this.input = input;
	        this.ranges = ranges;
	        /**
	        @internal
	        */
	        this.chunk = "";
	        /**
	        @internal
	        */
	        this.chunkOff = 0;
	        /**
	        Backup chunk
	        */
	        this.chunk2 = "";
	        this.chunk2Pos = 0;
	        /**
	        The character code of the next code unit in the input, or -1
	        when the stream is at the end of the input.
	        */
	        this.next = -1;
	        /**
	        @internal
	        */
	        this.token = nullToken;
	        this.rangeIndex = 0;
	        this.pos = this.chunkPos = ranges[0].from;
	        this.range = ranges[0];
	        this.end = ranges[ranges.length - 1].to;
	        this.readNext();
	    }
	    /**
	    @internal
	    */
	    resolveOffset(offset, assoc) {
	        let range = this.range, index = this.rangeIndex;
	        let pos = this.pos + offset;
	        while (pos < range.from) {
	            if (!index)
	                return null;
	            let next = this.ranges[--index];
	            pos -= range.from - next.to;
	            range = next;
	        }
	        while (assoc < 0 ? pos > range.to : pos >= range.to) {
	            if (index == this.ranges.length - 1)
	                return null;
	            let next = this.ranges[++index];
	            pos += next.from - range.to;
	            range = next;
	        }
	        return pos;
	    }
	    /**
	    @internal
	    */
	    clipPos(pos) {
	        if (pos >= this.range.from && pos < this.range.to)
	            return pos;
	        for (let range of this.ranges)
	            if (range.to > pos)
	                return Math.max(pos, range.from);
	        return this.end;
	    }
	    /**
	    Look at a code unit near the stream position. `.peek(0)` equals
	    `.next`, `.peek(-1)` gives you the previous character, and so
	    on.
	    
	    Note that looking around during tokenizing creates dependencies
	    on potentially far-away content, which may reduce the
	    effectiveness incremental parsing—when looking forward—or even
	    cause invalid reparses when looking backward more than 25 code
	    units, since the library does not track lookbehind.
	    */
	    peek(offset) {
	        let idx = this.chunkOff + offset, pos, result;
	        if (idx >= 0 && idx < this.chunk.length) {
	            pos = this.pos + offset;
	            result = this.chunk.charCodeAt(idx);
	        }
	        else {
	            let resolved = this.resolveOffset(offset, 1);
	            if (resolved == null)
	                return -1;
	            pos = resolved;
	            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {
	                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);
	            }
	            else {
	                let i = this.rangeIndex, range = this.range;
	                while (range.to <= pos)
	                    range = this.ranges[++i];
	                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);
	                if (pos + this.chunk2.length > range.to)
	                    this.chunk2 = this.chunk2.slice(0, range.to - pos);
	                result = this.chunk2.charCodeAt(0);
	            }
	        }
	        if (pos >= this.token.lookAhead)
	            this.token.lookAhead = pos + 1;
	        return result;
	    }
	    /**
	    Accept a token. By default, the end of the token is set to the
	    current stream position, but you can pass an offset (relative to
	    the stream position) to change that.
	    */
	    acceptToken(token, endOffset = 0) {
	        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;
	        if (end == null || end < this.token.start)
	            throw new RangeError("Token end out of bounds");
	        this.token.value = token;
	        this.token.end = end;
	    }
	    /**
	    Accept a token ending at a specific given position.
	    */
	    acceptTokenTo(token, endPos) {
	        this.token.value = token;
	        this.token.end = endPos;
	    }
	    getChunk() {
	        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {
	            let { chunk, chunkPos } = this;
	            this.chunk = this.chunk2;
	            this.chunkPos = this.chunk2Pos;
	            this.chunk2 = chunk;
	            this.chunk2Pos = chunkPos;
	            this.chunkOff = this.pos - this.chunkPos;
	        }
	        else {
	            this.chunk2 = this.chunk;
	            this.chunk2Pos = this.chunkPos;
	            let nextChunk = this.input.chunk(this.pos);
	            let end = this.pos + nextChunk.length;
	            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;
	            this.chunkPos = this.pos;
	            this.chunkOff = 0;
	        }
	    }
	    readNext() {
	        if (this.chunkOff >= this.chunk.length) {
	            this.getChunk();
	            if (this.chunkOff == this.chunk.length)
	                return this.next = -1;
	        }
	        return this.next = this.chunk.charCodeAt(this.chunkOff);
	    }
	    /**
	    Move the stream forward N (defaults to 1) code units. Returns
	    the new value of [`next`](#lr.InputStream.next).
	    */
	    advance(n = 1) {
	        this.chunkOff += n;
	        while (this.pos + n >= this.range.to) {
	            if (this.rangeIndex == this.ranges.length - 1)
	                return this.setDone();
	            n -= this.range.to - this.pos;
	            this.range = this.ranges[++this.rangeIndex];
	            this.pos = this.range.from;
	        }
	        this.pos += n;
	        if (this.pos >= this.token.lookAhead)
	            this.token.lookAhead = this.pos + 1;
	        return this.readNext();
	    }
	    setDone() {
	        this.pos = this.chunkPos = this.end;
	        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];
	        this.chunk = "";
	        return this.next = -1;
	    }
	    /**
	    @internal
	    */
	    reset(pos, token) {
	        if (token) {
	            this.token = token;
	            token.start = pos;
	            token.lookAhead = pos + 1;
	            token.value = token.extended = -1;
	        }
	        else {
	            this.token = nullToken;
	        }
	        if (this.pos != pos) {
	            this.pos = pos;
	            if (pos == this.end) {
	                this.setDone();
	                return this;
	            }
	            while (pos < this.range.from)
	                this.range = this.ranges[--this.rangeIndex];
	            while (pos >= this.range.to)
	                this.range = this.ranges[++this.rangeIndex];
	            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {
	                this.chunkOff = pos - this.chunkPos;
	            }
	            else {
	                this.chunk = "";
	                this.chunkOff = 0;
	            }
	            this.readNext();
	        }
	        return this;
	    }
	    /**
	    @internal
	    */
	    read(from, to) {
	        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)
	            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);
	        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)
	            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);
	        if (from >= this.range.from && to <= this.range.to)
	            return this.input.read(from, to);
	        let result = "";
	        for (let r of this.ranges) {
	            if (r.from >= to)
	                break;
	            if (r.to > from)
	                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));
	        }
	        return result;
	    }
	}
	/**
	@internal
	*/
	class TokenGroup {
	    constructor(data, id) {
	        this.data = data;
	        this.id = id;
	    }
	    token(input, stack) {
	        let { parser } = stack.p;
	        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);
	    }
	}
	TokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
	TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;
	// Tokenizer data is stored a big uint16 array containing, for each
	// state:
	//
	//  - A group bitmask, indicating what token groups are reachable from
	//    this state, so that paths that can only lead to tokens not in
	//    any of the current groups can be cut off early.
	//
	//  - The position of the end of the state's sequence of accepting
	//    tokens
	//
	//  - The number of outgoing edges for the state
	//
	//  - The accepting tokens, as (token id, group mask) pairs
	//
	//  - The outgoing edges, as (start character, end character, state
	//    index) triples, with end character being exclusive
	//
	// This function interprets that data, running through a stream as
	// long as new states with the a matching group mask can be reached,
	// and updating `input.token` when it matches a token.
	function readToken(data, input, stack, group, precTable, precOffset) {
	    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;
	    scan: for (;;) {
	        if ((groupMask & data[state]) == 0)
	            break;
	        let accEnd = data[state + 1];
	        // Check whether this state can lead to a token in the current group
	        // Accept tokens in this state, possibly overwriting
	        // lower-precedence / shorter tokens
	        for (let i = state + 3; i < accEnd; i += 2)
	            if ((data[i + 1] & groupMask) > 0) {
	                let term = data[i];
	                if (dialect.allows(term) &&
	                    (input.token.value == -1 || input.token.value == term ||
	                        overrides(term, input.token.value, precTable, precOffset))) {
	                    input.acceptToken(term);
	                    break;
	                }
	            }
	        let next = input.next, low = 0, high = data[state + 2];
	        // Special case for EOF
	        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {
	            state = data[accEnd + high * 3 - 1];
	            continue scan;
	        }
	        // Do a binary search on the state's edges
	        for (; low < high;) {
	            let mid = (low + high) >> 1;
	            let index = accEnd + mid + (mid << 1);
	            let from = data[index], to = data[index + 1] || 0x10000;
	            if (next < from)
	                high = mid;
	            else if (next >= to)
	                low = mid + 1;
	            else {
	                state = data[index + 2];
	                input.advance();
	                continue scan;
	            }
	        }
	        break;
	    }
	}
	function findOffset(data, start, term) {
	    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)
	        if (next == term)
	            return i - start;
	    return -1;
	}
	function overrides(token, prev, tableData, tableOffset) {
	    let iPrev = findOffset(tableData, tableOffset, prev);
	    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;
	}

	// Environment variable used to control console output
	const verbose = typeof process != "undefined" && process.env && /\bparse\b/.test(process.env.LOG);
	let stackIDs = null;
	function cutAt(tree, pos, side) {
	    let cursor = tree.cursor(IterMode.IncludeAnonymous);
	    cursor.moveTo(pos);
	    for (;;) {
	        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))
	            for (;;) {
	                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)
	                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))
	                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));
	                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())
	                    break;
	                if (!cursor.parent())
	                    return side < 0 ? 0 : tree.length;
	            }
	    }
	}
	class FragmentCursor {
	    constructor(fragments, nodeSet) {
	        this.fragments = fragments;
	        this.nodeSet = nodeSet;
	        this.i = 0;
	        this.fragment = null;
	        this.safeFrom = -1;
	        this.safeTo = -1;
	        this.trees = [];
	        this.start = [];
	        this.index = [];
	        this.nextFragment();
	    }
	    nextFragment() {
	        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];
	        if (fr) {
	            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;
	            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;
	            while (this.trees.length) {
	                this.trees.pop();
	                this.start.pop();
	                this.index.pop();
	            }
	            this.trees.push(fr.tree);
	            this.start.push(-fr.offset);
	            this.index.push(0);
	            this.nextStart = this.safeFrom;
	        }
	        else {
	            this.nextStart = 1e9;
	        }
	    }
	    // `pos` must be >= any previously given `pos` for this cursor
	    nodeAt(pos) {
	        if (pos < this.nextStart)
	            return null;
	        while (this.fragment && this.safeTo <= pos)
	            this.nextFragment();
	        if (!this.fragment)
	            return null;
	        for (;;) {
	            let last = this.trees.length - 1;
	            if (last < 0) { // End of tree
	                this.nextFragment();
	                return null;
	            }
	            let top = this.trees[last], index = this.index[last];
	            if (index == top.children.length) {
	                this.trees.pop();
	                this.start.pop();
	                this.index.pop();
	                continue;
	            }
	            let next = top.children[index];
	            let start = this.start[last] + top.positions[index];
	            if (start > pos) {
	                this.nextStart = start;
	                return null;
	            }
	            if (next instanceof Tree) {
	                if (start == pos) {
	                    if (start < this.safeFrom)
	                        return null;
	                    let end = start + next.length;
	                    if (end <= this.safeTo) {
	                        let lookAhead = next.prop(NodeProp.lookAhead);
	                        if (!lookAhead || end + lookAhead < this.fragment.to)
	                            return next;
	                    }
	                }
	                this.index[last]++;
	                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node
	                    this.trees.push(next);
	                    this.start.push(start);
	                    this.index.push(0);
	                }
	            }
	            else {
	                this.index[last]++;
	                this.nextStart = start + next.length;
	            }
	        }
	    }
	}
	class TokenCache {
	    constructor(parser, stream) {
	        this.stream = stream;
	        this.tokens = [];
	        this.mainToken = null;
	        this.actions = [];
	        this.tokens = parser.tokenizers.map(_ => new CachedToken);
	    }
	    getActions(stack) {
	        let actionIndex = 0;
	        let main = null;
	        let { parser } = stack.p, { tokenizers } = parser;
	        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);
	        let context = stack.curContext ? stack.curContext.hash : 0;
	        let lookAhead = 0;
	        for (let i = 0; i < tokenizers.length; i++) {
	            if (((1 << i) & mask) == 0)
	                continue;
	            let tokenizer = tokenizers[i], token = this.tokens[i];
	            if (main && !tokenizer.fallback)
	                continue;
	            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {
	                this.updateCachedToken(token, tokenizer, stack);
	                token.mask = mask;
	                token.context = context;
	            }
	            if (token.lookAhead > token.end + 25 /* Safety.Margin */)
	                lookAhead = Math.max(token.lookAhead, lookAhead);
	            if (token.value != 0 /* Term.Err */) {
	                let startIndex = actionIndex;
	                if (token.extended > -1)
	                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);
	                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);
	                if (!tokenizer.extend) {
	                    main = token;
	                    if (actionIndex > startIndex)
	                        break;
	                }
	            }
	        }
	        while (this.actions.length > actionIndex)
	            this.actions.pop();
	        if (lookAhead)
	            stack.setLookAhead(lookAhead);
	        if (!main && stack.pos == this.stream.end) {
	            main = new CachedToken;
	            main.value = stack.p.parser.eofTerm;
	            main.start = main.end = stack.pos;
	            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);
	        }
	        this.mainToken = main;
	        return this.actions;
	    }
	    getMainToken(stack) {
	        if (this.mainToken)
	            return this.mainToken;
	        let main = new CachedToken, { pos, p } = stack;
	        main.start = pos;
	        main.end = Math.min(pos + 1, p.stream.end);
	        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;
	        return main;
	    }
	    updateCachedToken(token, tokenizer, stack) {
	        let start = this.stream.clipPos(stack.pos);
	        tokenizer.token(this.stream.reset(start, token), stack);
	        if (token.value > -1) {
	            let { parser } = stack.p;
	            for (let i = 0; i < parser.specialized.length; i++)
	                if (parser.specialized[i] == token.value) {
	                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);
	                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {
	                        if ((result & 1) == 0 /* Specialize.Specialize */)
	                            token.value = result >> 1;
	                        else
	                            token.extended = result >> 1;
	                        break;
	                    }
	                }
	        }
	        else {
	            token.value = 0 /* Term.Err */;
	            token.end = this.stream.clipPos(start + 1);
	        }
	    }
	    putAction(action, token, end, index) {
	        // Don't add duplicate actions
	        for (let i = 0; i < index; i += 3)
	            if (this.actions[i] == action)
	                return index;
	        this.actions[index++] = action;
	        this.actions[index++] = token;
	        this.actions[index++] = end;
	        return index;
	    }
	    addActions(stack, token, end, index) {
	        let { state } = stack, { parser } = stack.p, { data } = parser;
	        for (let set = 0; set < 2; set++) {
	            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {
	                if (data[i] == 65535 /* Seq.End */) {
	                    if (data[i + 1] == 1 /* Seq.Next */) {
	                        i = pair(data, i + 2);
	                    }
	                    else {
	                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)
	                            index = this.putAction(pair(data, i + 2), token, end, index);
	                        break;
	                    }
	                }
	                if (data[i] == token)
	                    index = this.putAction(pair(data, i + 1), token, end, index);
	            }
	        }
	        return index;
	    }
	}
	class Parse {
	    constructor(parser, input, fragments, ranges) {
	        this.parser = parser;
	        this.input = input;
	        this.ranges = ranges;
	        this.recovering = 0;
	        this.nextStackID = 0x2654; // ♔, ♕, ♖, ♗, ♘, ♙, ♠, ♡, ♢, ♣, ♤, ♥, ♦, ♧
	        this.minStackPos = 0;
	        this.reused = [];
	        this.stoppedAt = null;
	        this.lastBigReductionStart = -1;
	        this.lastBigReductionSize = 0;
	        this.bigReductionCount = 0;
	        this.stream = new InputStream(input, ranges);
	        this.tokens = new TokenCache(parser, this.stream);
	        this.topTerm = parser.top[1];
	        let { from } = ranges[0];
	        this.stacks = [Stack.start(this, parser.top[0], from)];
	        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4
	            ? new FragmentCursor(fragments, parser.nodeSet) : null;
	    }
	    get parsedPos() {
	        return this.minStackPos;
	    }
	    // Move the parser forward. This will process all parse stacks at
	    // `this.pos` and try to advance them to a further position. If no
	    // stack for such a position is found, it'll start error-recovery.
	    //
	    // When the parse is finished, this will return a syntax tree. When
	    // not, it returns `null`.
	    advance() {
	        let stacks = this.stacks, pos = this.minStackPos;
	        // This will hold stacks beyond `pos`.
	        let newStacks = this.stacks = [];
	        let stopped, stoppedTokens;
	        // If a large amount of reductions happened with the same start
	        // position, force the stack out of that production in order to
	        // avoid creating a tree too deep to recurse through.
	        // (This is an ugly kludge, because unfortunately there is no
	        // straightforward, cheap way to check for this happening, due to
	        // the history of reductions only being available in an
	        // expensive-to-access format in the stack buffers.)
	        if (this.bigReductionCount > 300 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {
	            let [s] = stacks;
	            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }
	            this.bigReductionCount = this.lastBigReductionSize = 0;
	        }
	        // Keep advancing any stacks at `pos` until they either move
	        // forward or can't be advanced. Gather stacks that can't be
	        // advanced further in `stopped`.
	        for (let i = 0; i < stacks.length; i++) {
	            let stack = stacks[i];
	            for (;;) {
	                this.tokens.mainToken = null;
	                if (stack.pos > pos) {
	                    newStacks.push(stack);
	                }
	                else if (this.advanceStack(stack, newStacks, stacks)) {
	                    continue;
	                }
	                else {
	                    if (!stopped) {
	                        stopped = [];
	                        stoppedTokens = [];
	                    }
	                    stopped.push(stack);
	                    let tok = this.tokens.getMainToken(stack);
	                    stoppedTokens.push(tok.value, tok.end);
	                }
	                break;
	            }
	        }
	        if (!newStacks.length) {
	            let finished = stopped && findFinished(stopped);
	            if (finished) {
	                if (verbose)
	                    console.log("Finish with " + this.stackID(finished));
	                return this.stackToTree(finished);
	            }
	            if (this.parser.strict) {
	                if (verbose && stopped)
	                    console.log("Stuck with token " + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : "none"));
	                throw new SyntaxError("No parse at " + pos);
	            }
	            if (!this.recovering)
	                this.recovering = 5 /* Rec.Distance */;
	        }
	        if (this.recovering && stopped) {
	            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]
	                : this.runRecovery(stopped, stoppedTokens, newStacks);
	            if (finished) {
	                if (verbose)
	                    console.log("Force-finish " + this.stackID(finished));
	                return this.stackToTree(finished.forceAll());
	            }
	        }
	        if (this.recovering) {
	            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;
	            if (newStacks.length > maxRemaining) {
	                newStacks.sort((a, b) => b.score - a.score);
	                while (newStacks.length > maxRemaining)
	                    newStacks.pop();
	            }
	            if (newStacks.some(s => s.reducePos > pos))
	                this.recovering--;
	        }
	        else if (newStacks.length > 1) {
	            // Prune stacks that are in the same state, or that have been
	            // running without splitting for a while, to avoid getting stuck
	            // with multiple successful stacks running endlessly on.
	            outer: for (let i = 0; i < newStacks.length - 1; i++) {
	                let stack = newStacks[i];
	                for (let j = i + 1; j < newStacks.length; j++) {
	                    let other = newStacks[j];
	                    if (stack.sameState(other) ||
	                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {
	                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {
	                            newStacks.splice(j--, 1);
	                        }
	                        else {
	                            newStacks.splice(i--, 1);
	                            continue outer;
	                        }
	                    }
	                }
	            }
	            if (newStacks.length > 12 /* Rec.MaxStackCount */)
	                newStacks.splice(12 /* Rec.MaxStackCount */, newStacks.length - 12 /* Rec.MaxStackCount */);
	        }
	        this.minStackPos = newStacks[0].pos;
	        for (let i = 1; i < newStacks.length; i++)
	            if (newStacks[i].pos < this.minStackPos)
	                this.minStackPos = newStacks[i].pos;
	        return null;
	    }
	    stopAt(pos) {
	        if (this.stoppedAt != null && this.stoppedAt < pos)
	            throw new RangeError("Can't move stoppedAt forward");
	        this.stoppedAt = pos;
	    }
	    // Returns an updated version of the given stack, or null if the
	    // stack can't advance normally. When `split` and `stacks` are
	    // given, stacks split off by ambiguous operations will be pushed to
	    // `split`, or added to `stacks` if they move `pos` forward.
	    advanceStack(stack, stacks, split) {
	        let start = stack.pos, { parser } = this;
	        let base = verbose ? this.stackID(stack) + " -> " : "";
	        if (this.stoppedAt != null && start > this.stoppedAt)
	            return stack.forceReduce() ? stack : null;
	        if (this.fragments) {
	            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;
	            for (let cached = this.fragments.nodeAt(start); cached;) {
	                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;
	                if (match > -1 && cached.length && (!strictCx || (cached.prop(NodeProp.contextHash) || 0) == cxHash)) {
	                    stack.useNode(cached, match);
	                    if (verbose)
	                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);
	                    return true;
	                }
	                if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0)
	                    break;
	                let inner = cached.children[0];
	                if (inner instanceof Tree && cached.positions[0] == 0)
	                    cached = inner;
	                else
	                    break;
	            }
	        }
	        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);
	        if (defaultReduce > 0) {
	            stack.reduce(defaultReduce);
	            if (verbose)
	                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);
	            return true;
	        }
	        if (stack.stack.length >= 8400 /* Rec.CutDepth */) {
	            while (stack.stack.length > 6000 /* Rec.CutTo */ && stack.forceReduce()) { }
	        }
	        let actions = this.tokens.getActions(stack);
	        for (let i = 0; i < actions.length;) {
	            let action = actions[i++], term = actions[i++], end = actions[i++];
	            let last = i == actions.length || !split;
	            let localStack = last ? stack : stack.split();
	            let main = this.tokens.mainToken;
	            localStack.apply(action, term, main ? main.start : localStack.pos, end);
	            if (verbose)
	                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? "shift"
                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? "" : ", split"})`);
	            if (last)
	                return true;
	            else if (localStack.pos > start)
	                stacks.push(localStack);
	            else
	                split.push(localStack);
	        }
	        return false;
	    }
	    // Advance a given stack forward as far as it will go. Returns the
	    // (possibly updated) stack if it got stuck, or null if it moved
	    // forward and was given to `pushStackDedup`.
	    advanceFully(stack, newStacks) {
	        let pos = stack.pos;
	        for (;;) {
	            if (!this.advanceStack(stack, null, null))
	                return false;
	            if (stack.pos > pos) {
	                pushStackDedup(stack, newStacks);
	                return true;
	            }
	        }
	    }
	    runRecovery(stacks, tokens, newStacks) {
	        let finished = null, restarted = false;
	        for (let i = 0; i < stacks.length; i++) {
	            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];
	            let base = verbose ? this.stackID(stack) + " -> " : "";
	            if (stack.deadEnd) {
	                if (restarted)
	                    continue;
	                restarted = true;
	                stack.restart();
	                if (verbose)
	                    console.log(base + this.stackID(stack) + " (restarted)");
	                let done = this.advanceFully(stack, newStacks);
	                if (done)
	                    continue;
	            }
	            let force = stack.split(), forceBase = base;
	            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {
	                if (verbose)
	                    console.log(forceBase + this.stackID(force) + " (via force-reduce)");
	                let done = this.advanceFully(force, newStacks);
	                if (done)
	                    break;
	                if (verbose)
	                    forceBase = this.stackID(force) + " -> ";
	            }
	            for (let insert of stack.recoverByInsert(token)) {
	                if (verbose)
	                    console.log(base + this.stackID(insert) + " (via recover-insert)");
	                this.advanceFully(insert, newStacks);
	            }
	            if (this.stream.end > stack.pos) {
	                if (tokenEnd == stack.pos) {
	                    tokenEnd++;
	                    token = 0 /* Term.Err */;
	                }
	                stack.recoverByDelete(token, tokenEnd);
	                if (verbose)
	                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);
	                pushStackDedup(stack, newStacks);
	            }
	            else if (!finished || finished.score < stack.score) {
	                finished = stack;
	            }
	        }
	        return finished;
	    }
	    // Convert the stack's buffer to a syntax tree.
	    stackToTree(stack) {
	        stack.close();
	        return Tree.build({ buffer: StackBufferCursor.create(stack),
	            nodeSet: this.parser.nodeSet,
	            topID: this.topTerm,
	            maxBufferLength: this.parser.bufferLength,
	            reused: this.reused,
	            start: this.ranges[0].from,
	            length: stack.pos - this.ranges[0].from,
	            minRepeatType: this.parser.minRepeatTerm });
	    }
	    stackID(stack) {
	        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);
	        if (!id)
	            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));
	        return id + stack;
	    }
	}
	function pushStackDedup(stack, newStacks) {
	    for (let i = 0; i < newStacks.length; i++) {
	        let other = newStacks[i];
	        if (other.pos == stack.pos && other.sameState(stack)) {
	            if (newStacks[i].score < stack.score)
	                newStacks[i] = stack;
	            return;
	        }
	    }
	    newStacks.push(stack);
	}
	class Dialect {
	    constructor(source, flags, disabled) {
	        this.source = source;
	        this.flags = flags;
	        this.disabled = disabled;
	    }
	    allows(term) { return !this.disabled || this.disabled[term] == 0; }
	}
	/**
	Holds the parse tables for a given grammar, as generated by
	`lezer-generator`, and provides [methods](#common.Parser) to parse
	content with.
	*/
	class LRParser extends Parser {
	    /**
	    @internal
	    */
	    constructor(spec) {
	        super();
	        /**
	        @internal
	        */
	        this.wrappers = [];
	        if (spec.version != 14 /* File.Version */)
	            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);
	        let nodeNames = spec.nodeNames.split(" ");
	        this.minRepeatTerm = nodeNames.length;
	        for (let i = 0; i < spec.repeatNodeCount; i++)
	            nodeNames.push("");
	        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);
	        let nodeProps = [];
	        for (let i = 0; i < nodeNames.length; i++)
	            nodeProps.push([]);
	        function setProp(nodeID, prop, value) {
	            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);
	        }
	        if (spec.nodeProps)
	            for (let propSpec of spec.nodeProps) {
	                let prop = propSpec[0];
	                if (typeof prop == "string")
	                    prop = NodeProp[prop];
	                for (let i = 1; i < propSpec.length;) {
	                    let next = propSpec[i++];
	                    if (next >= 0) {
	                        setProp(next, prop, propSpec[i++]);
	                    }
	                    else {
	                        let value = propSpec[i + -next];
	                        for (let j = -next; j > 0; j--)
	                            setProp(propSpec[i++], prop, value);
	                        i++;
	                    }
	                }
	            }
	        this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({
	            name: i >= this.minRepeatTerm ? undefined : name,
	            id: i,
	            props: nodeProps[i],
	            top: topTerms.indexOf(i) > -1,
	            error: i == 0,
	            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1
	        })));
	        if (spec.propSources)
	            this.nodeSet = this.nodeSet.extend(...spec.propSources);
	        this.strict = false;
	        this.bufferLength = DefaultBufferLength;
	        let tokenArray = decodeArray(spec.tokenData);
	        this.context = spec.context;
	        this.specializerSpecs = spec.specialized || [];
	        this.specialized = new Uint16Array(this.specializerSpecs.length);
	        for (let i = 0; i < this.specializerSpecs.length; i++)
	            this.specialized[i] = this.specializerSpecs[i].term;
	        this.specializers = this.specializerSpecs.map(getSpecializer);
	        this.states = decodeArray(spec.states, Uint32Array);
	        this.data = decodeArray(spec.stateData);
	        this.goto = decodeArray(spec.goto);
	        this.maxTerm = spec.maxTerm;
	        this.tokenizers = spec.tokenizers.map(value => typeof value == "number" ? new TokenGroup(tokenArray, value) : value);
	        this.topRules = spec.topRules;
	        this.dialects = spec.dialects || {};
	        this.dynamicPrecedences = spec.dynamicPrecedences || null;
	        this.tokenPrecTable = spec.tokenPrec;
	        this.termNames = spec.termNames || null;
	        this.maxNode = this.nodeSet.types.length - 1;
	        this.dialect = this.parseDialect();
	        this.top = this.topRules[Object.keys(this.topRules)[0]];
	    }
	    createParse(input, fragments, ranges) {
	        let parse = new Parse(this, input, fragments, ranges);
	        for (let w of this.wrappers)
	            parse = w(parse, input, fragments, ranges);
	        return parse;
	    }
	    /**
	    Get a goto table entry @internal
	    */
	    getGoto(state, term, loose = false) {
	        let table = this.goto;
	        if (term >= table[0])
	            return -1;
	        for (let pos = table[term + 1];;) {
	            let groupTag = table[pos++], last = groupTag & 1;
	            let target = table[pos++];
	            if (last && loose)
	                return target;
	            for (let end = pos + (groupTag >> 1); pos < end; pos++)
	                if (table[pos] == state)
	                    return target;
	            if (last)
	                return -1;
	        }
	    }
	    /**
	    Check if this state has an action for a given terminal @internal
	    */
	    hasAction(state, terminal) {
	        let data = this.data;
	        for (let set = 0; set < 2; set++) {
	            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {
	                if ((next = data[i]) == 65535 /* Seq.End */) {
	                    if (data[i + 1] == 1 /* Seq.Next */)
	                        next = data[i = pair(data, i + 2)];
	                    else if (data[i + 1] == 2 /* Seq.Other */)
	                        return pair(data, i + 2);
	                    else
	                        break;
	                }
	                if (next == terminal || next == 0 /* Term.Err */)
	                    return pair(data, i + 1);
	            }
	        }
	        return 0;
	    }
	    /**
	    @internal
	    */
	    stateSlot(state, slot) {
	        return this.states[(state * 6 /* ParseState.Size */) + slot];
	    }
	    /**
	    @internal
	    */
	    stateFlag(state, flag) {
	        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;
	    }
	    /**
	    @internal
	    */
	    validAction(state, action) {
	        return !!this.allActions(state, a => a == action ? true : null);
	    }
	    /**
	    @internal
	    */
	    allActions(state, action) {
	        let deflt = this.stateSlot(state, 4 /* ParseState.DefaultReduce */);
	        let result = deflt ? action(deflt) : undefined;
	        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */); result == null; i += 3) {
	            if (this.data[i] == 65535 /* Seq.End */) {
	                if (this.data[i + 1] == 1 /* Seq.Next */)
	                    i = pair(this.data, i + 2);
	                else
	                    break;
	            }
	            result = action(pair(this.data, i + 1));
	        }
	        return result;
	    }
	    /**
	    Get the states that can follow this one through shift actions or
	    goto jumps. @internal
	    */
	    nextStates(state) {
	        let result = [];
	        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {
	            if (this.data[i] == 65535 /* Seq.End */) {
	                if (this.data[i + 1] == 1 /* Seq.Next */)
	                    i = pair(this.data, i + 2);
	                else
	                    break;
	            }
	            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {
	                let value = this.data[i + 1];
	                if (!result.some((v, i) => (i & 1) && v == value))
	                    result.push(this.data[i], value);
	            }
	        }
	        return result;
	    }
	    /**
	    Configure the parser. Returns a new parser instance that has the
	    given settings modified. Settings not provided in `config` are
	    kept from the original parser.
	    */
	    configure(config) {
	        // Hideous reflection-based kludge to make it easy to create a
	        // slightly modified copy of a parser.
	        let copy = Object.assign(Object.create(LRParser.prototype), this);
	        if (config.props)
	            copy.nodeSet = this.nodeSet.extend(...config.props);
	        if (config.top) {
	            let info = this.topRules[config.top];
	            if (!info)
	                throw new RangeError(`Invalid top rule name ${config.top}`);
	            copy.top = info;
	        }
	        if (config.tokenizers)
	            copy.tokenizers = this.tokenizers.map(t => {
	                let found = config.tokenizers.find(r => r.from == t);
	                return found ? found.to : t;
	            });
	        if (config.specializers) {
	            copy.specializers = this.specializers.slice();
	            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {
	                let found = config.specializers.find(r => r.from == s.external);
	                if (!found)
	                    return s;
	                let spec = Object.assign(Object.assign({}, s), { external: found.to });
	                copy.specializers[i] = getSpecializer(spec);
	                return spec;
	            });
	        }
	        if (config.contextTracker)
	            copy.context = config.contextTracker;
	        if (config.dialect)
	            copy.dialect = this.parseDialect(config.dialect);
	        if (config.strict != null)
	            copy.strict = config.strict;
	        if (config.wrap)
	            copy.wrappers = copy.wrappers.concat(config.wrap);
	        if (config.bufferLength != null)
	            copy.bufferLength = config.bufferLength;
	        return copy;
	    }
	    /**
	    Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)
	    are registered for this parser.
	    */
	    hasWrappers() {
	        return this.wrappers.length > 0;
	    }
	    /**
	    Returns the name associated with a given term. This will only
	    work for all terms when the parser was generated with the
	    `--names` option. By default, only the names of tagged terms are
	    stored.
	    */
	    getName(term) {
	        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);
	    }
	    /**
	    The eof term id is always allocated directly after the node
	    types. @internal
	    */
	    get eofTerm() { return this.maxNode + 1; }
	    /**
	    The type of top node produced by the parser.
	    */
	    get topNode() { return this.nodeSet.types[this.top[1]]; }
	    /**
	    @internal
	    */
	    dynamicPrecedence(term) {
	        let prec = this.dynamicPrecedences;
	        return prec == null ? 0 : prec[term] || 0;
	    }
	    /**
	    @internal
	    */
	    parseDialect(dialect) {
	        let values = Object.keys(this.dialects), flags = values.map(() => false);
	        if (dialect)
	            for (let part of dialect.split(" ")) {
	                let id = values.indexOf(part);
	                if (id >= 0)
	                    flags[id] = true;
	            }
	        let disabled = null;
	        for (let i = 0; i < values.length; i++)
	            if (!flags[i]) {
	                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)
	                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;
	            }
	        return new Dialect(dialect, flags, disabled);
	    }
	    /**
	    Used by the output of the parser generator. Not available to
	    user code. @hide
	    */
	    static deserialize(spec) {
	        return new LRParser(spec);
	    }
	}
	function pair(data, off) { return data[off] | (data[off + 1] << 16); }
	function findFinished(stacks) {
	    let best = null;
	    for (let stack of stacks) {
	        let stopped = stack.p.stoppedAt;
	        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&
	            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&
	            (!best || best.score < stack.score))
	            best = stack;
	    }
	    return best;
	}
	function getSpecializer(spec) {
	    if (spec.external) {
	        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;
	        return (value, stack) => (spec.external(value, stack) << 1) | mask;
	    }
	    return spec.get;
	}

	let nextTagID = 0;
	/**
	Highlighting tags are markers that denote a highlighting category.
	They are [associated](#highlight.styleTags) with parts of a syntax
	tree by a language mode, and then mapped to an actual CSS style by
	a [highlighter](#highlight.Highlighter).

	Because syntax tree node types and highlight styles have to be
	able to talk the same language, CodeMirror uses a mostly _closed_
	[vocabulary](#highlight.tags) of syntax tags (as opposed to
	traditional open string-based systems, which make it hard for
	highlighting themes to cover all the tokens produced by the
	various languages).

	It _is_ possible to [define](#highlight.Tag^define) your own
	highlighting tags for system-internal use (where you control both
	the language package and the highlighter), but such tags will not
	be picked up by regular highlighters (though you can derive them
	from standard tags to allow highlighters to fall back to those).
	*/
	class Tag {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The set of this tag and all its parent tags, starting with
	    this one itself and sorted in order of decreasing specificity.
	    */
	    set, 
	    /**
	    The base unmodified tag that this one is based on, if it's
	    modified @internal
	    */
	    base, 
	    /**
	    The modifiers applied to this.base @internal
	    */
	    modified) {
	        this.set = set;
	        this.base = base;
	        this.modified = modified;
	        /**
	        @internal
	        */
	        this.id = nextTagID++;
	    }
	    /**
	    Define a new tag. If `parent` is given, the tag is treated as a
	    sub-tag of that parent, and
	    [highlighters](#highlight.tagHighlighter) that don't mention
	    this tag will try to fall back to the parent tag (or grandparent
	    tag, etc).
	    */
	    static define(parent) {
	        if (parent === null || parent === void 0 ? void 0 : parent.base)
	            throw new Error("Can not derive from a modified tag");
	        let tag = new Tag([], null, []);
	        tag.set.push(tag);
	        if (parent)
	            for (let t of parent.set)
	                tag.set.push(t);
	        return tag;
	    }
	    /**
	    Define a tag _modifier_, which is a function that, given a tag,
	    will return a tag that is a subtag of the original. Applying the
	    same modifier to a twice tag will return the same value (`m1(t1)
	    == m1(t1)`) and applying multiple modifiers will, regardless or
	    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
	    
	    When multiple modifiers are applied to a given base tag, each
	    smaller set of modifiers is registered as a parent, so that for
	    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
	    `m1(m3(t1)`, and so on.
	    */
	    static defineModifier() {
	        let mod = new Modifier;
	        return (tag) => {
	            if (tag.modified.indexOf(mod) > -1)
	                return tag;
	            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
	        };
	    }
	}
	let nextModifierID = 0;
	class Modifier {
	    constructor() {
	        this.instances = [];
	        this.id = nextModifierID++;
	    }
	    static get(base, mods) {
	        if (!mods.length)
	            return base;
	        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
	        if (exists)
	            return exists;
	        let set = [], tag = new Tag(set, base, mods);
	        for (let m of mods)
	            m.instances.push(tag);
	        let configs = powerSet(mods);
	        for (let parent of base.set)
	            if (!parent.modified.length)
	                for (let config of configs)
	                    set.push(Modifier.get(parent, config));
	        return tag;
	    }
	}
	function sameArray(a, b) {
	    return a.length == b.length && a.every((x, i) => x == b[i]);
	}
	function powerSet(array) {
	    let sets = [[]];
	    for (let i = 0; i < array.length; i++) {
	        for (let j = 0, e = sets.length; j < e; j++) {
	            sets.push(sets[j].concat(array[i]));
	        }
	    }
	    return sets.sort((a, b) => b.length - a.length);
	}
	/**
	This function is used to add a set of tags to a language syntax
	via [`NodeSet.extend`](#common.NodeSet.extend) or
	[`LRParser.configure`](#lr.LRParser.configure).

	The argument object maps node selectors to [highlighting
	tags](#highlight.Tag) or arrays of tags.

	Node selectors may hold one or more (space-separated) node paths.
	Such a path can be a [node name](#common.NodeType.name), or
	multiple node names (or `*` wildcards) separated by slash
	characters, as in `"Block/Declaration/VariableName"`. Such a path
	matches the final node but only if its direct parent nodes are the
	other nodes mentioned. A `*` in such a path matches any parent,
	but only a single level—wildcards that match multiple parents
	aren't supported, both for efficiency reasons and because Lezer
	trees make it rather hard to reason about what they would match.)

	A path can be ended with `/...` to indicate that the tag assigned
	to the node should also apply to all child nodes, even if they
	match their own style (by default, only the innermost style is
	used).

	When a path ends in `!`, as in `Attribute!`, no further matching
	happens for the node's child nodes, and the entire node gets the
	given style.

	In this notation, node names that contain `/`, `!`, `*`, or `...`
	must be quoted as JSON strings.

	For example:

	```javascript
	parser.withProps(
	  styleTags({
	    // Style Number and BigNumber nodes
	    "Number BigNumber": tags.number,
	    // Style Escape nodes whose parent is String
	    "String/Escape": tags.escape,
	    // Style anything inside Attributes nodes
	    "Attributes!": tags.meta,
	    // Add a style to all content inside Italic nodes
	    "Italic/...": tags.emphasis,
	    // Style InvalidString nodes as both `string` and `invalid`
	    "InvalidString": [tags.string, tags.invalid],
	    // Style the node named "/" as punctuation
	    '"/"': tags.punctuation
	  })
	)
	```
	*/
	function styleTags(spec) {
	    let byName = Object.create(null);
	    for (let prop in spec) {
	        let tags = spec[prop];
	        if (!Array.isArray(tags))
	            tags = [tags];
	        for (let part of prop.split(" "))
	            if (part) {
	                let pieces = [], mode = 2 /* Mode.Normal */, rest = part;
	                for (let pos = 0;;) {
	                    if (rest == "..." && pos > 0 && pos + 3 == part.length) {
	                        mode = 1 /* Mode.Inherit */;
	                        break;
	                    }
	                    let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
	                    if (!m)
	                        throw new RangeError("Invalid path: " + part);
	                    pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
	                    pos += m[0].length;
	                    if (pos == part.length)
	                        break;
	                    let next = part[pos++];
	                    if (pos == part.length && next == "!") {
	                        mode = 0 /* Mode.Opaque */;
	                        break;
	                    }
	                    if (next != "/")
	                        throw new RangeError("Invalid path: " + part);
	                    rest = part.slice(pos);
	                }
	                let last = pieces.length - 1, inner = pieces[last];
	                if (!inner)
	                    throw new RangeError("Invalid path: " + part);
	                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
	                byName[inner] = rule.sort(byName[inner]);
	            }
	    }
	    return ruleNodeProp.add(byName);
	}
	const ruleNodeProp = new NodeProp();
	class Rule {
	    constructor(tags, mode, context, next) {
	        this.tags = tags;
	        this.mode = mode;
	        this.context = context;
	        this.next = next;
	    }
	    get opaque() { return this.mode == 0 /* Mode.Opaque */; }
	    get inherit() { return this.mode == 1 /* Mode.Inherit */; }
	    sort(other) {
	        if (!other || other.depth < this.depth) {
	            this.next = other;
	            return this;
	        }
	        other.next = this.sort(other.next);
	        return other;
	    }
	    get depth() { return this.context ? this.context.length : 0; }
	}
	Rule.empty = new Rule([], 2 /* Mode.Normal */, null);
	/**
	Define a [highlighter](#highlight.Highlighter) from an array of
	tag/class pairs. Classes associated with more specific tags will
	take precedence.
	*/
	function tagHighlighter(tags, options) {
	    let map = Object.create(null);
	    for (let style of tags) {
	        if (!Array.isArray(style.tag))
	            map[style.tag.id] = style.class;
	        else
	            for (let tag of style.tag)
	                map[tag.id] = style.class;
	    }
	    let { scope, all = null } = options || {};
	    return {
	        style: (tags) => {
	            let cls = all;
	            for (let tag of tags) {
	                for (let sub of tag.set) {
	                    let tagClass = map[sub.id];
	                    if (tagClass) {
	                        cls = cls ? cls + " " + tagClass : tagClass;
	                        break;
	                    }
	                }
	            }
	            return cls;
	        },
	        scope
	    };
	}
	function highlightTags(highlighters, tags) {
	    let result = null;
	    for (let highlighter of highlighters) {
	        let value = highlighter.style(tags);
	        if (value)
	            result = result ? result + " " + value : value;
	    }
	    return result;
	}
	/**
	Highlight the given [tree](#common.Tree) with the given
	[highlighter](#highlight.Highlighter). Often, the higher-level
	[`highlightCode`](#highlight.highlightCode) function is easier to
	use.
	*/
	function highlightTree(tree, highlighter, 
	/**
	Assign styling to a region of the text. Will be called, in order
	of position, for any ranges where more than zero classes apply.
	`classes` is a space separated string of CSS classes.
	*/
	putStyle, 
	/**
	The start of the range to highlight.
	*/
	from = 0, 
	/**
	The end of the range.
	*/
	to = tree.length) {
	    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
	    builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
	    builder.flush(to);
	}
	class HighlightBuilder {
	    constructor(at, highlighters, span) {
	        this.at = at;
	        this.highlighters = highlighters;
	        this.span = span;
	        this.class = "";
	    }
	    startSpan(at, cls) {
	        if (cls != this.class) {
	            this.flush(at);
	            if (at > this.at)
	                this.at = at;
	            this.class = cls;
	        }
	    }
	    flush(to) {
	        if (to > this.at && this.class)
	            this.span(this.at, to, this.class);
	    }
	    highlightRange(cursor, from, to, inheritedClass, highlighters) {
	        let { type, from: start, to: end } = cursor;
	        if (start >= to || end <= from)
	            return;
	        if (type.isTop)
	            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));
	        let cls = inheritedClass;
	        let rule = getStyleTags(cursor) || Rule.empty;
	        let tagCls = highlightTags(highlighters, rule.tags);
	        if (tagCls) {
	            if (cls)
	                cls += " ";
	            cls += tagCls;
	            if (rule.mode == 1 /* Mode.Inherit */)
	                inheritedClass += (inheritedClass ? " " : "") + tagCls;
	        }
	        this.startSpan(Math.max(from, start), cls);
	        if (rule.opaque)
	            return;
	        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
	        if (mounted && mounted.overlay) {
	            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
	            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));
	            let hasChild = cursor.firstChild();
	            for (let i = 0, pos = start;; i++) {
	                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
	                let nextPos = next ? next.from + start : end;
	                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
	                if (rangeFrom < rangeTo && hasChild) {
	                    while (cursor.from < rangeTo) {
	                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
	                        this.startSpan(Math.min(rangeTo, cursor.to), cls);
	                        if (cursor.to >= nextPos || !cursor.nextSibling())
	                            break;
	                    }
	                }
	                if (!next || nextPos > to)
	                    break;
	                pos = next.to + start;
	                if (pos > from) {
	                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), "", innerHighlighters);
	                    this.startSpan(Math.min(to, pos), cls);
	                }
	            }
	            if (hasChild)
	                cursor.parent();
	        }
	        else if (cursor.firstChild()) {
	            if (mounted)
	                inheritedClass = "";
	            do {
	                if (cursor.to <= from)
	                    continue;
	                if (cursor.from >= to)
	                    break;
	                this.highlightRange(cursor, from, to, inheritedClass, highlighters);
	                this.startSpan(Math.min(to, cursor.to), cls);
	            } while (cursor.nextSibling());
	            cursor.parent();
	        }
	    }
	}
	/**
	Match a syntax node's [highlight rules](#highlight.styleTags). If
	there's a match, return its set of tags, and whether it is
	opaque (uses a `!`) or applies to all child nodes (`/...`).
	*/
	function getStyleTags(node) {
	    let rule = node.type.prop(ruleNodeProp);
	    while (rule && rule.context && !node.matchContext(rule.context))
	        rule = rule.next;
	    return rule || null;
	}
	const t = Tag.define;
	const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
	/**
	The default set of highlighting [tags](#highlight.Tag).

	This collection is heavily biased towards programming languages,
	and necessarily incomplete. A full ontology of syntactic
	constructs would fill a stack of books, and be impractical to
	write themes for. So try to make do with this set. If all else
	fails, [open an
	issue](https://github.com/codemirror/codemirror.next) to propose a
	new tag, or [define](#highlight.Tag^define) a local custom tag for
	your use case.

	Note that it is not obligatory to always attach the most specific
	tag possible to an element—if your grammar can't easily
	distinguish a certain type of element (such as a local variable),
	it is okay to style it as its more general variant (a variable).

	For tags that extend some parent tag, the documentation links to
	the parent.
	*/
	const tags = {
	    /**
	    A comment.
	    */
	    comment,
	    /**
	    A line [comment](#highlight.tags.comment).
	    */
	    lineComment: t(comment),
	    /**
	    A block [comment](#highlight.tags.comment).
	    */
	    blockComment: t(comment),
	    /**
	    A documentation [comment](#highlight.tags.comment).
	    */
	    docComment: t(comment),
	    /**
	    Any kind of identifier.
	    */
	    name,
	    /**
	    The [name](#highlight.tags.name) of a variable.
	    */
	    variableName: t(name),
	    /**
	    A type [name](#highlight.tags.name).
	    */
	    typeName: typeName,
	    /**
	    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
	    */
	    tagName: t(typeName),
	    /**
	    A property or field [name](#highlight.tags.name).
	    */
	    propertyName: propertyName,
	    /**
	    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
	    */
	    attributeName: t(propertyName),
	    /**
	    The [name](#highlight.tags.name) of a class.
	    */
	    className: t(name),
	    /**
	    A label [name](#highlight.tags.name).
	    */
	    labelName: t(name),
	    /**
	    A namespace [name](#highlight.tags.name).
	    */
	    namespace: t(name),
	    /**
	    The [name](#highlight.tags.name) of a macro.
	    */
	    macroName: t(name),
	    /**
	    A literal value.
	    */
	    literal,
	    /**
	    A string [literal](#highlight.tags.literal).
	    */
	    string,
	    /**
	    A documentation [string](#highlight.tags.string).
	    */
	    docString: t(string),
	    /**
	    A character literal (subtag of [string](#highlight.tags.string)).
	    */
	    character: t(string),
	    /**
	    An attribute value (subtag of [string](#highlight.tags.string)).
	    */
	    attributeValue: t(string),
	    /**
	    A number [literal](#highlight.tags.literal).
	    */
	    number,
	    /**
	    An integer [number](#highlight.tags.number) literal.
	    */
	    integer: t(number),
	    /**
	    A floating-point [number](#highlight.tags.number) literal.
	    */
	    float: t(number),
	    /**
	    A boolean [literal](#highlight.tags.literal).
	    */
	    bool: t(literal),
	    /**
	    Regular expression [literal](#highlight.tags.literal).
	    */
	    regexp: t(literal),
	    /**
	    An escape [literal](#highlight.tags.literal), for example a
	    backslash escape in a string.
	    */
	    escape: t(literal),
	    /**
	    A color [literal](#highlight.tags.literal).
	    */
	    color: t(literal),
	    /**
	    A URL [literal](#highlight.tags.literal).
	    */
	    url: t(literal),
	    /**
	    A language keyword.
	    */
	    keyword,
	    /**
	    The [keyword](#highlight.tags.keyword) for the self or this
	    object.
	    */
	    self: t(keyword),
	    /**
	    The [keyword](#highlight.tags.keyword) for null.
	    */
	    null: t(keyword),
	    /**
	    A [keyword](#highlight.tags.keyword) denoting some atomic value.
	    */
	    atom: t(keyword),
	    /**
	    A [keyword](#highlight.tags.keyword) that represents a unit.
	    */
	    unit: t(keyword),
	    /**
	    A modifier [keyword](#highlight.tags.keyword).
	    */
	    modifier: t(keyword),
	    /**
	    A [keyword](#highlight.tags.keyword) that acts as an operator.
	    */
	    operatorKeyword: t(keyword),
	    /**
	    A control-flow related [keyword](#highlight.tags.keyword).
	    */
	    controlKeyword: t(keyword),
	    /**
	    A [keyword](#highlight.tags.keyword) that defines something.
	    */
	    definitionKeyword: t(keyword),
	    /**
	    A [keyword](#highlight.tags.keyword) related to defining or
	    interfacing with modules.
	    */
	    moduleKeyword: t(keyword),
	    /**
	    An operator.
	    */
	    operator,
	    /**
	    An [operator](#highlight.tags.operator) that dereferences something.
	    */
	    derefOperator: t(operator),
	    /**
	    Arithmetic-related [operator](#highlight.tags.operator).
	    */
	    arithmeticOperator: t(operator),
	    /**
	    Logical [operator](#highlight.tags.operator).
	    */
	    logicOperator: t(operator),
	    /**
	    Bit [operator](#highlight.tags.operator).
	    */
	    bitwiseOperator: t(operator),
	    /**
	    Comparison [operator](#highlight.tags.operator).
	    */
	    compareOperator: t(operator),
	    /**
	    [Operator](#highlight.tags.operator) that updates its operand.
	    */
	    updateOperator: t(operator),
	    /**
	    [Operator](#highlight.tags.operator) that defines something.
	    */
	    definitionOperator: t(operator),
	    /**
	    Type-related [operator](#highlight.tags.operator).
	    */
	    typeOperator: t(operator),
	    /**
	    Control-flow [operator](#highlight.tags.operator).
	    */
	    controlOperator: t(operator),
	    /**
	    Program or markup punctuation.
	    */
	    punctuation,
	    /**
	    [Punctuation](#highlight.tags.punctuation) that separates
	    things.
	    */
	    separator: t(punctuation),
	    /**
	    Bracket-style [punctuation](#highlight.tags.punctuation).
	    */
	    bracket,
	    /**
	    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
	    tokens).
	    */
	    angleBracket: t(bracket),
	    /**
	    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
	    tokens).
	    */
	    squareBracket: t(bracket),
	    /**
	    Parentheses (usually `(` and `)` tokens). Subtag of
	    [bracket](#highlight.tags.bracket).
	    */
	    paren: t(bracket),
	    /**
	    Braces (usually `{` and `}` tokens). Subtag of
	    [bracket](#highlight.tags.bracket).
	    */
	    brace: t(bracket),
	    /**
	    Content, for example plain text in XML or markup documents.
	    */
	    content,
	    /**
	    [Content](#highlight.tags.content) that represents a heading.
	    */
	    heading,
	    /**
	    A level 1 [heading](#highlight.tags.heading).
	    */
	    heading1: t(heading),
	    /**
	    A level 2 [heading](#highlight.tags.heading).
	    */
	    heading2: t(heading),
	    /**
	    A level 3 [heading](#highlight.tags.heading).
	    */
	    heading3: t(heading),
	    /**
	    A level 4 [heading](#highlight.tags.heading).
	    */
	    heading4: t(heading),
	    /**
	    A level 5 [heading](#highlight.tags.heading).
	    */
	    heading5: t(heading),
	    /**
	    A level 6 [heading](#highlight.tags.heading).
	    */
	    heading6: t(heading),
	    /**
	    A prose separator (such as a horizontal rule).
	    */
	    contentSeparator: t(content),
	    /**
	    [Content](#highlight.tags.content) that represents a list.
	    */
	    list: t(content),
	    /**
	    [Content](#highlight.tags.content) that represents a quote.
	    */
	    quote: t(content),
	    /**
	    [Content](#highlight.tags.content) that is emphasized.
	    */
	    emphasis: t(content),
	    /**
	    [Content](#highlight.tags.content) that is styled strong.
	    */
	    strong: t(content),
	    /**
	    [Content](#highlight.tags.content) that is part of a link.
	    */
	    link: t(content),
	    /**
	    [Content](#highlight.tags.content) that is styled as code or
	    monospace.
	    */
	    monospace: t(content),
	    /**
	    [Content](#highlight.tags.content) that has a strike-through
	    style.
	    */
	    strikethrough: t(content),
	    /**
	    Inserted text in a change-tracking format.
	    */
	    inserted: t(),
	    /**
	    Deleted text.
	    */
	    deleted: t(),
	    /**
	    Changed text.
	    */
	    changed: t(),
	    /**
	    An invalid or unsyntactic element.
	    */
	    invalid: t(),
	    /**
	    Metadata or meta-instruction.
	    */
	    meta,
	    /**
	    [Metadata](#highlight.tags.meta) that applies to the entire
	    document.
	    */
	    documentMeta: t(meta),
	    /**
	    [Metadata](#highlight.tags.meta) that annotates or adds
	    attributes to a given syntactic element.
	    */
	    annotation: t(meta),
	    /**
	    Processing instruction or preprocessor directive. Subtag of
	    [meta](#highlight.tags.meta).
	    */
	    processingInstruction: t(meta),
	    /**
	    [Modifier](#highlight.Tag^defineModifier) that indicates that a
	    given element is being defined. Expected to be used with the
	    various [name](#highlight.tags.name) tags.
	    */
	    definition: Tag.defineModifier(),
	    /**
	    [Modifier](#highlight.Tag^defineModifier) that indicates that
	    something is constant. Mostly expected to be used with
	    [variable names](#highlight.tags.variableName).
	    */
	    constant: Tag.defineModifier(),
	    /**
	    [Modifier](#highlight.Tag^defineModifier) used to indicate that
	    a [variable](#highlight.tags.variableName) or [property
	    name](#highlight.tags.propertyName) is being called or defined
	    as a function.
	    */
	    function: Tag.defineModifier(),
	    /**
	    [Modifier](#highlight.Tag^defineModifier) that can be applied to
	    [names](#highlight.tags.name) to indicate that they belong to
	    the language's standard environment.
	    */
	    standard: Tag.defineModifier(),
	    /**
	    [Modifier](#highlight.Tag^defineModifier) that indicates a given
	    [names](#highlight.tags.name) is local to some scope.
	    */
	    local: Tag.defineModifier(),
	    /**
	    A generic variant [modifier](#highlight.Tag^defineModifier) that
	    can be used to tag language-specific alternative variants of
	    some common tag. It is recommended for themes to define special
	    forms of at least the [string](#highlight.tags.string) and
	    [variable name](#highlight.tags.variableName) tags, since those
	    come up a lot.
	    */
	    special: Tag.defineModifier()
	};
	/**
	This is a highlighter that adds stable, predictable classes to
	tokens, for styling with external CSS.

	The following tags are mapped to their name prefixed with `"tok-"`
	(for example `"tok-comment"`):

	* [`link`](#highlight.tags.link)
	* [`heading`](#highlight.tags.heading)
	* [`emphasis`](#highlight.tags.emphasis)
	* [`strong`](#highlight.tags.strong)
	* [`keyword`](#highlight.tags.keyword)
	* [`atom`](#highlight.tags.atom)
	* [`bool`](#highlight.tags.bool)
	* [`url`](#highlight.tags.url)
	* [`labelName`](#highlight.tags.labelName)
	* [`inserted`](#highlight.tags.inserted)
	* [`deleted`](#highlight.tags.deleted)
	* [`literal`](#highlight.tags.literal)
	* [`string`](#highlight.tags.string)
	* [`number`](#highlight.tags.number)
	* [`variableName`](#highlight.tags.variableName)
	* [`typeName`](#highlight.tags.typeName)
	* [`namespace`](#highlight.tags.namespace)
	* [`className`](#highlight.tags.className)
	* [`macroName`](#highlight.tags.macroName)
	* [`propertyName`](#highlight.tags.propertyName)
	* [`operator`](#highlight.tags.operator)
	* [`comment`](#highlight.tags.comment)
	* [`meta`](#highlight.tags.meta)
	* [`punctuation`](#highlight.tags.punctuation)
	* [`invalid`](#highlight.tags.invalid)

	In addition, these mappings are provided:

	* [`regexp`](#highlight.tags.regexp),
	  [`escape`](#highlight.tags.escape), and
	  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
	  are mapped to `"tok-string2"`
	* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName2"`
	* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName tok-local"`
	* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
	  to `"tok-variableName tok-definition"`
	* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
	  to `"tok-propertyName tok-definition"`
	*/
	tagHighlighter([
	    { tag: tags.link, class: "tok-link" },
	    { tag: tags.heading, class: "tok-heading" },
	    { tag: tags.emphasis, class: "tok-emphasis" },
	    { tag: tags.strong, class: "tok-strong" },
	    { tag: tags.keyword, class: "tok-keyword" },
	    { tag: tags.atom, class: "tok-atom" },
	    { tag: tags.bool, class: "tok-bool" },
	    { tag: tags.url, class: "tok-url" },
	    { tag: tags.labelName, class: "tok-labelName" },
	    { tag: tags.inserted, class: "tok-inserted" },
	    { tag: tags.deleted, class: "tok-deleted" },
	    { tag: tags.literal, class: "tok-literal" },
	    { tag: tags.string, class: "tok-string" },
	    { tag: tags.number, class: "tok-number" },
	    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
	    { tag: tags.variableName, class: "tok-variableName" },
	    { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
	    { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
	    { tag: tags.special(tags.variableName), class: "tok-variableName2" },
	    { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
	    { tag: tags.typeName, class: "tok-typeName" },
	    { tag: tags.namespace, class: "tok-namespace" },
	    { tag: tags.className, class: "tok-className" },
	    { tag: tags.macroName, class: "tok-macroName" },
	    { tag: tags.propertyName, class: "tok-propertyName" },
	    { tag: tags.operator, class: "tok-operator" },
	    { tag: tags.comment, class: "tok-comment" },
	    { tag: tags.meta, class: "tok-meta" },
	    { tag: tags.invalid, class: "tok-invalid" },
	    { tag: tags.punctuation, class: "tok-punctuation" }
	]);

	const javaHighlighting = styleTags({
	  null: tags.null,
	    instanceof: tags.operatorKeyword,
	  this: tags.self,
	  "new super assert open to with void": tags.keyword,
	  "class interface extends implements enum var": tags.definitionKeyword,
	  "module package import": tags.moduleKeyword,
	  "switch while for if else case default do break continue return try catch finally throw": tags.controlKeyword,
	  ["requires exports opens uses provides public private protected static transitive abstract final " +
	   "strictfp synchronized native transient volatile throws"]: tags.modifier,
	  IntegerLiteral: tags.integer,
	  FloatingPointLiteral: tags.float,
	  "StringLiteral TextBlock": tags.string,
	  CharacterLiteral: tags.character,
	  LineComment: tags.lineComment,
	  BlockComment: tags.blockComment,
	  BooleanLiteral: tags.bool,
	  PrimitiveType: tags.standard(tags.typeName),
	  TypeName: tags.typeName,
	  Identifier: tags.variableName,
	  "MethodName/Identifier": tags.function(tags.variableName),
	  Definition: tags.definition(tags.variableName),
	  ArithOp: tags.arithmeticOperator,
	  LogicOp: tags.logicOperator,
	  BitOp: tags.bitwiseOperator,
	  CompareOp: tags.compareOperator,
	  AssignOp: tags.definitionOperator,
	  UpdateOp: tags.updateOperator,
	  Asterisk: tags.punctuation,
	  Label: tags.labelName,
	  "( )": tags.paren,
	  "[ ]": tags.squareBracket,
	  "{ }": tags.brace,
	  ".": tags.derefOperator,
	  ", ;": tags.separator
	});

	// This file was generated by lezer-generator. You probably shouldn't edit it.
	const spec_identifier = {__proto__:null,true:34, false:34, null:42, void:46, byte:48, short:48, int:48, long:48, char:48, float:48, double:48, boolean:48, extends:62, super:64, class:76, this:78, new:84, public:100, protected:102, private:104, abstract:106, static:108, final:110, strictfp:112, default:114, synchronized:116, native:118, transient:120, volatile:122, throws:150, implements:160, interface:166, enum:176, instanceof:236, open:265, module:267, requires:272, transitive:274, exports:276, to:278, opens:280, uses:282, provides:284, with:286, package:290, import:294, if:306, else:308, while:312, for:316, var:323, assert:330, switch:334, case:340, do:344, break:348, continue:352, return:356, throw:362, try:366, catch:370, finally:378};
	const parser = LRParser.deserialize({
	  version: 14,
	  states: "#!tQ]QPOOQ$wQPOOO(_QQO'#H]O*cQQO'#CbOOQO'#Cb'#CbO*jQPO'#CaO*rOSO'#CpOOQO'#Hb'#HbOOQO'#Cu'#CuO,_QPO'#D_O,xQQO'#HlOOQO'#Hl'#HlO/^QQO'#HgO/eQQO'#HgOOQO'#Hg'#HgOOQO'#Hf'#HfO1iQPO'#DUO1vQPO'#GmO4nQPO'#D_O4uQPO'#DzO*jQPO'#E[O5hQPO'#E[OOQO'#DV'#DVO6vQQO'#H`O8}QQO'#EeO9UQPO'#EdO9ZQPO'#EfOOQO'#Ha'#HaO7^QQO'#HaO:^QQO'#FgO:eQPO'#EwO:jQPO'#E|O:jQPO'#FOOOQO'#H`'#H`OOQO'#HX'#HXOOQO'#Gg'#GgOOQO'#HW'#HWO;zQPO'#FhOOQO'#HV'#HVOOQO'#Gf'#GfQ]QPOOOOQO'#Hr'#HrO<PQPO'#HrO<UQPO'#D{O<UQPO'#EVO<UQPO'#EQO<^QPO'#HoO<oQQO'#EfO*jQPO'#C`O<wQPO'#C`O*jQPO'#FbO<|QPO'#FdO=XQPO'#FjO=XQPO'#FmO<UQPO'#FrO=^QPO'#FoO:jQPO'#FvO=XQPO'#FxO]QPO'#F}O=cQPO'#GPO=nQPO'#GRO=yQPO'#GTO=XQPO'#GVO:jQPO'#GWO>QQPO'#GYO>nQQO'#HhO?ZQQO'#CuO?bQPO'#HwO?pQPO'#D_O@`QPO'#DpO?eQPO'#DqO@jQPO'#HwO@{QPO'#DpOATQPO'#IQOAYQPO'#E`OOQO'#Hq'#HqOOQO'#Gl'#GlQ$wQPOOOAbQPO'#HrOOQO'#H]'#H]OCaQQO,58{OOQO'#HZ'#HZOOOO'#Gh'#GhOESOSO,59[OOQO,59[,59[OOQO'#Hh'#HhOEsQPO,59eOFuQPO,59yOOQO-E:e-E:eO*jQPO,58zOGiQPO,58zO*jQPO,5;|OGnQPO'#DQOGsQPO'#DQOOQO'#Gj'#GjOHsQQO,59jOOQO'#Dm'#DmOJ[QPO'#HtOJfQPO'#DlOJtQPO'#HsOJ|QPO,5<^OKRQPO,59^OKlQPO'#CxOOQO,59c,59cOKsQPO,59bOLOQQO'#H]OM}QQO'#CbO! |QPO'#D_O!#RQQO'#HlO!#cQQO,59pO!#jQPO'#DvO!#xQPO'#H{O!$QQPO,5:`O!$VQPO,5:`O!$mQPO,5;mO!$xQPO'#ISO!%TQPO,5;dO!%YQPO,5=XOOQO-E:k-E:kOOQO,5:f,5:fO!&pQPO,5:fO!&wQPO,5:vO?bQPO,5<^O*jQPO,5:vO<UQPO,5:gO<UQPO,5:qO<UQPO,5:lO<UQPO,5<^O!'_QPO,59qO:jQPO,5:}O!'fQPO,5;QO:jQPO,59TO!'tQPO'#DXOOQO,5;O,5;OOOQO'#El'#ElOOQO'#En'#EnO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;UO:jQPO,5;eOOQO,5;h,5;hOOQO,5<R,5<RO!'{QPO,5;aO!(^QPO,5;cO!'{QPO'#CyO!(eQQO'#HlO!(sQQO,5;jO]QPO,5<SOOQO-E:d-E:dOOQO,5>^,5>^O!*TQPO,5:gO!*cQPO,5:qO!*kQPO,5:lO!*vQPO,5>ZO!#jQPO,5>ZO!&|QPO,59UO!+RQQO,58zO!+ZQQO,5;|O!+cQQO,5<OO*jQPO,5<OO:jQPO'#DUO]QPO,5<UO]QPO,5<XO!+kQPO'#FqO]QPO,5<ZO]QPO,5<`O!+{QQO,5<bO!,VQPO,5<dO!,[QPO,5<iOOQO'#Fi'#FiOOQO,5<k,5<kO!,aQPO,5<kOOQO,5<m,5<mO!,fQPO,5<mO!,kQQO,5<oOOQO,5<o,5<oO>TQPO,5<qO!,rQQO,5<rO!,yQPO'#GcO!.PQPO,5<tO>TQPO,5<|O!1}QPO,59jO!2[QPO'#HtO!2cQPO,59xO!2hQPO,5>cO?bQPO,59xO!2sQPO,5:[OAYQPO,5:zO!2{QPO'#DrO?eQPO'#DrO!3WQPO'#HxO!3`QPO,5:]O?bQPO,5>cO!'{QPO,5>cOATQPO,5>lOOQO,5:[,5:[O!$VQPO'#DtOOQO,5>l,5>lO!3eQPO'#EaOOQO,5:z,5:zO!6fQPO,5:zO!'{QPO'#DxOOQO-E:j-E:jOOQO,5:y,5:yO*jQPO,58}O!6kQPO'#ChOOQO1G.k1G.kOOOO-E:f-E:fOOQO1G.v1G.vO!+RQQO1G.fO*jQPO1G.fO!6uQQO1G1hOOQO,59l,59lO!6}QPO,59lOOQO-E:h-E:hO!7SQPO,5>`O!7kQPO,5:WO<UQPO'#GoO!7rQPO,5>_OOQO1G1x1G1xOOQO1G.x1G.xO!8]QPO'#CyO!8{QPO'#HlO!9VQPO'#CzO!9eQPO'#HkO!9mQPO,59dOOQO1G.|1G.|OKsQPO1G.|O!:TQPO,59eO!:bQQO'#H]O!:sQQO'#CbOOQO,5:b,5:bO<UQPO,5:cOOQO,5:a,5:aO!;UQQO,5:aOOQO1G/[1G/[O!;ZQPO,5:bO!;lQPO'#GrO!<PQPO,5>gOOQO1G/z1G/zO!<XQPO'#DvO!<jQPO1G/zO!'{QPO'#GpO!<oQPO1G1XO:jQPO1G1XO<UQPO'#GxO!<wQPO,5>nOOQO1G1O1G1OOOQO1G0Q1G0QO!=PQPO'#E]OOQO1G0b1G0bO!=pQPO1G1xO!&wQPO1G0bO!*TQPO1G0RO!*cQPO1G0]O!*kQPO1G0WOOQO1G/]1G/]O!=uQQO1G.pO9UQPO1G0jO*jQPO1G0jO<^QPO'#HoO!?iQQO1G.pOOQO1G.p1G.pO!?nQQO1G0iOOQO1G0l1G0lO!?uQPO1G0lO!@QQQO1G.oO!@hQQO'#HpO!@uQPO,59sO!BUQQO1G0pO!CmQQO1G0pO!D{QQO1G0pO!EYQQO1G0pO!F_QQO1G0pO!FuQQO1G0pO!GPQQO1G1PO!GWQQO'#HlOOQO1G0{1G0{O!HZQQO1G0}OOQO1G0}1G0}OOQO1G1n1G1nO!HqQPO'#D[O!'{QPO'#D|O!'{QPO'#D}OOQO1G0R1G0RO!HxQPO1G0RO!H}QPO1G0RO!IVQPO1G0RO!IbQPO'#EXOOQO1G0]1G0]O!IuQPO1G0]O!IzQPO'#ETO!'{QPO'#ESOOQO1G0W1G0WO!JtQPO1G0WO!JyQPO1G0WO!KRQPO'#EhO!KYQPO'#EhOOQO'#Gw'#GwO!KbQQO1G0mO!MRQQO1G3uO9UQPO1G3uO# QQPO'#FWOOQO1G.f1G.fOOQO1G1h1G1hO# XQPO1G1jOOQO1G1j1G1jO# dQQO1G1jO# lQPO1G1pOOQO1G1s1G1sO*zQPO'#D_O,xQQO,5<aO#%dQPO,5<aO#%uQPO,5<]O#%|QPO,5<]OOQO1G1u1G1uOOQO1G1z1G1zOOQO1G1|1G1|O:jQPO1G1|O#)pQPO'#FzOOQO1G2O1G2OO=XQPO1G2TOOQO1G2V1G2VOOQO1G2X1G2XOOQO1G2Z1G2ZOOQO1G2]1G2]OOQO1G2^1G2^O#)wQQO'#H]O#*bQQO'#CbO,xQQO'#HlO#*{QQOOO#+iQQO'#EeO#+WQQO'#HaO!#jQPO'#GdO#+pQPO,5<}OOQO'#HP'#HPO#+xQPO1G2`O#/vQPO'#G[O>TQPO'#G`OOQO1G2`1G2`O#/{QPO1G2hO#3yQPO,5>fOOQO1G/d1G/dOOQO1G3}1G3}O#4[QPO1G/dOOQO1G/v1G/vOOQO1G0f1G0fO!6fQPO1G0fOOQO,5:^,5:^O!'{QPO'#DsO#4aQPO,5:^O?eQPO'#GqO#4lQPO,5>dOOQO1G/w1G/wOATQPO'#HzO#4tQPO1G3}O?bQPO1G3}OOQO1G4W1G4WO!!mQPO'#DvO! |QPO'#D_OOQO,5:{,5:{O#5PQPO,5:{O#5PQPO,5:{O#5WQQO'#H`O#6fQQO'#HaO#6pQQO'#EbO#6{QPO'#EbO#7TQPO'#H}OOQO,5:d,5:dOOQO1G.i1G.iO#7`QQO'#EeO#7pQQO'#H_O#8QQPO'#FSOOQO'#H_'#H_O#8[QPO'#H_O#8yQPO'#IVO#9RQPO,59SOOQO7+$Q7+$QO!+RQQO7+$QOOQO7+'S7+'SOOQO1G/W1G/WO#9WQPO'#DoO#9bQQO'#HuOOQO'#Hu'#HuOOQO1G/r1G/rOOQO,5=Z,5=ZOOQO-E:m-E:mO#9rQWO,58{O#9yQPO,59fOOQO,59f,59fO!'{QPO'#HnOKWQPO'#GiO#:XQPO,5>VOOQO1G/O1G/OOOQO7+$h7+$hOOQO1G/{1G/{O#:aQQO1G/{OOQO1G/}1G/}O#:fQPO1G/{OOQO1G/|1G/|O<UQPO1G/}OOQO,5=^,5=^OOQO-E:p-E:pOOQO7+%f7+%fOOQO,5=[,5=[OOQO-E:n-E:nO:jQPO7+&sOOQO7+&s7+&sOOQO,5=d,5=dOOQO-E:v-E:vO#:kQPO'#EUO#:yQPO'#EUOOQO'#Gv'#GvO#;bQPO,5:wOOQO,5:w,5:wOOQO7+'d7+'dOOQO7+%|7+%|OOQO7+%m7+%mO!HxQPO7+%mO!H}QPO7+%mO!IVQPO7+%mOOQO7+%w7+%wO!IuQPO7+%wOOQO7+%r7+%rO!JtQPO7+%rO!JyQPO7+%rOOQO7+&U7+&UOOQO'#Ee'#EeO9UQPO7+&UO9UQPO,5>ZO#<RQPO7+$[OOQO7+&T7+&TOOQO7+&W7+&WO:jQPO'#GkO#<aQPO,5>[OOQO1G/_1G/_O:jQPO7+&kO#<lQQO,59eO#=oQPO,59vOOQO,59v,59vOOQO,5:h,5:hOOQO'#EP'#EPOOQO,5:i,5:iO#=vQPO'#EYO<UQPO'#EYO#>XQPO'#IOO#>dQPO,5:sO?bQPO'#HwO!'{QPO'#HwO#>lQPO'#DpOOQO'#Gt'#GtO#>sQPO,5:oOOQO,5:o,5:oOOQO,5:n,5:nOOQO,5;S,5;SO#?mQQO,5;SO#?tQPO,5;SOOQO-E:u-E:uOOQO7+&X7+&XOOQO7+)a7+)aO#?{QQO7+)aOOQO'#G{'#G{O#AiQPO,5;rOOQO,5;r,5;rO#ApQPO'#FXO*jQPO'#FXO*jQPO'#FXO*jQPO'#FXO#BOQPO7+'UO#BTQPO7+'UOOQO7+'U7+'UO]QPO7+'[O#B`QPO1G1{O?bQPO1G1{O#BnQQO1G1wO!'tQPO1G1wO#BuQPO1G1wO#B|QQO7+'hOOQO'#HO'#HOO#CTQPO,5<fOOQO,5<f,5<fO#C[QPO'#HrO:jQPO'#F{O#CdQPO7+'oO#CiQPO,5=OO?bQPO,5=OO#CnQPO1G2iO#DwQPO1G2iOOQO1G2i1G2iOOQO-E:}-E:}OOQO7+'z7+'zO!;lQPO'#G^O>TQPO,5<vOOQO,5<z,5<zO#EPQPO7+(SOOQO7+(S7+(SO#H}QPO1G4QOOQO7+%O7+%OOOQO7+&Q7+&QO#I`QPO,5:_OOQO1G/x1G/xOOQO,5=],5=]OOQO-E:o-E:oOOQO7+)i7+)iO#IkQPO7+)iO!9rQPO,5:aOOQO1G0g1G0gO#IvQPO1G0gO#I}QPO,59qO#JcQPO,5:|O9UQPO,5:|O!'{QPO'#GsO#JhQPO,5>iO#JsQPO,59TO#JzQPO'#IUO#KSQPO,5;nO*jQPO'#GzO#KXQPO,5>qOOQO1G.n1G.nOOQO<<Gl<<GlO#KaQPO'#HvO#KiQPO,5:ZOOQO1G/Q1G/QOOQO,5>Y,5>YOOQO,5=T,5=TOOQO-E:g-E:gO#KnQPO7+%gOOQO7+%g7+%gOOQO7+%i7+%iOOQO<<J_<<J_O#LUQPO'#H]O#L]QPO'#CbO#LdQPO,5:pO#LiQPO,5:xO#:kQPO,5:pOOQO-E:t-E:tOOQO1G0c1G0cOOQO<<IX<<IXO!HxQPO<<IXO!H}QPO<<IXOOQO<<Ic<<IcOOQO<<I^<<I^O!JtQPO<<I^OOQO<<Ip<<IpO#LnQQO<<GvO9UQPO<<IpO*jQPO<<IpOOQO<<Gv<<GvO#NbQQO,5=VOOQO-E:i-E:iO#NoQQO<<JVOOQO1G/b1G/bOOQO,5:t,5:tO$ VQPO,5:tO$ eQPO,5:tO$ vQPO'#GuO$!^QPO,5>jO$!iQPO'#EZOOQO1G0_1G0_O$!pQPO1G0_O?bQPO,5:pOOQO-E:r-E:rOOQO1G0Z1G0ZOOQO1G0n1G0nO$!uQQO1G0nOOQO<<L{<<L{OOQO-E:y-E:yOOQO1G1^1G1^O$!|QQO,5;sOOQO'#G|'#G|O#ApQPO,5;sOOQO'#IW'#IWO$#UQQO,5;sO$#gQQO,5;sOOQO<<Jp<<JpO$#oQPO<<JpOOQO<<Jv<<JvO:jQPO7+'gO$#tQPO7+'gO!'tQPO7+'cO$$SQPO7+'cO$$XQQO7+'cOOQO<<KS<<KSOOQO-E:|-E:|OOQO1G2Q1G2QOOQO,5<g,5<gO$$`QQO,5<gOOQO<<KZ<<KZO:jQPO1G2jO$$gQPO1G2jOOQO,5=m,5=mOOQO7+(T7+(TO$$lQPO7+(TOOQO-E;P-E;PO$&ZQWO'#HgO$%uQWO'#HgO$&bQPO'#G_O<UQPO,5<xO!#jQPO,5<xOOQO1G2b1G2bOOQO<<Kn<<KnO$&sQPO1G/yOOQO<<MT<<MTOOQO7+&R7+&RO$'OQPO1G0jO$'ZQQO1G0hOOQO1G0h1G0hO$'cQPO1G0hOOQO,5=_,5=_OOQO-E:q-E:qO$'hQQO1G.oOOQO1G1Z1G1ZO$'rQPO'#GyO$(PQPO,5>pOOQO1G1Y1G1YO$(XQPO'#FTOOQO,5=f,5=fOOQO-E:x-E:xO$(^QPO'#GnO$(kQPO,5>bOOQO1G/u1G/uOOQO<<IR<<IROOQO1G0[1G0[O$(sQPO1G0dO$(xQPO1G0[O$(}QPO1G0dOOQOAN>sAN>sO!HxQPOAN>sOOQOAN>xAN>xOOQOAN?[AN?[O9UQPOAN?[OOQO1G0`1G0`O$)SQPO1G0`OOQO,5=a,5=aOOQO-E:s-E:sO$)bQPO,5:uOOQO7+%y7+%yOOQO7+&Y7+&YOOQO1G1_1G1_O$)iQQO1G1_OOQO-E:z-E:zO$)qQQO'#IXO$)lQPO1G1_O$#[QPO1G1_O*jQPO1G1_OOQOAN@[AN@[O$)|QQO<<KRO:jQPO<<KRO$*TQPO<<J}OOQO<<J}<<J}O!'tQPO<<J}OOQO1G2R1G2RO$*YQQO7+(UO:jQPO7+(UOOQO<<Ko<<KoP!,yQPO'#HRO!#jQPO'#HQO$*dQPO,5<yO$*oQPO1G2dO<UQPO1G2dO9UQPO7+&SO$*tQPO7+&SOOQO7+&S7+&SOOQO,5=e,5=eOOQO-E:w-E:wO#JsQPO,5;oOOQO,5=Y,5=YOOQO-E:l-E:lO$*yQPO7+&OOOQO7+%v7+%vO$+XQPO7+&OOOQOG24_G24_OOQOG24vG24vOOQO7+%z7+%zOOQO7+&y7+&yO*jQPO'#G}O$+^QPO,5>sO$+fQPO7+&yO$+kQQO'#IYOOQOAN@mAN@mO$+vQQOAN@mOOQOAN@iAN@iO$+}QPOAN@iO$,SQQO<<KpO$,^QPO,5=lOOQO-E;O-E;OOOQO7+(O7+(OO$,oQPO7+(OO$,tQPO<<InOOQO<<In<<InO$,yQPO<<IjOOQO<<Ij<<IjO#JsQPO<<IjO$,yQPO<<IjO$-XQQO,5=iOOQO-E:{-E:{OOQO<<Je<<JeO$-dQPO,5>tOOQOG26XG26XOOQOG26TG26TOOQO<<Kj<<KjOOQOAN?YAN?YOOQOAN?UAN?UO#JsQPOAN?UO$-lQPOAN?UO$-qQPOAN?UO$.PQPOG24pOOQOG24pG24pO#JsQPOG24pOOQOLD*[LD*[O$.UQPOLD*[OOQO!$'Mv!$'MvO*jQPO'#CaO$.ZQQO'#H]O$.nQQO'#CbO!'{QPO'#Cy",
	  stateData: "$/Z~OPOSQOS%xOS~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO![!`O!]yO!^yO!_yO!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&sdO~Og^Oh^Ov{O}cO!P!mO!SyO!TyO!UyO!VyO!W!pO!XyO!YyO!ZzO!]yO!^yO!_yO!u}O!z|O%|TO&O!cO&Q!dO&^!hO&sdO~OWiXW&PXZ&PXuiXu&PX!P&PX!b&PX#]&PX#_&PX#a&PX#c&PX#d&PX#e&PX#f&PX#g&PX#h&PX#j&PX#n&PX#q&PX%|iX&OiX&QiX&]&PX&^iX&^&PX&m&PX&uiX&u&PX&w!aX~O#o$]X~P&bOWUXW&[XZUXuUXu&[X!PUX!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX%|&[X&O&[X&Q&[X&]UX&^UX&^&[X&mUX&uUX&u&[X&w!aX~O#o$]X~P(fO&OSO&Q!qO~O&V!vO&X!tO~Og^Oh^O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO%|TO&O!wO&QWOg!RXh!RX$g!RX&O!RX&Q!RX~O#x!|O#y!{O$V!}Ov!RX!u!RX!z!RX&s!RX~P*zOW#XOu#OO%|TO&O#SO&Q#SO&u&`X~OW#[Ou&ZX%|&ZX&O&ZX&Q&ZX&u&ZXY&ZXw&ZX&m&ZX&p&ZXZ&ZXq&ZX&]&ZX!P&ZX#_&ZX#a&ZX#c&ZX#d&ZX#e&ZX#f&ZX#g&ZX#h&ZX#j&ZX#n&ZX#q&ZX}&ZX!r&ZX#o&ZXs&ZX|&ZX~O&^#YO~P-^O&^&ZX~P-^OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO#epO#qoO#spO#tpO%|TO&WUO~O&O#^O&Q#]OY&oP~P/lO%|TOg%aXh%aXv%aX!S%aX!T%aX!U%aX!V%aX!W%aX!X%aX!Y%aX!Z%aX!]%aX!^%aX!_%aX!u%aX!z%aX$g%aX&O%aX&Q%aX&s%aX&^%aX~O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yOg!RXh!RXv!RX!u!RX!z!RX&O!RX&Q!RX&s!RX&^!RX~O$g!RX~P3^O|#kO~P]Og^Oh^Ov#pO!u#rO!z#qO&O!wO&QWO&s#oO~O$g#sO~P4|Ou#uO&u#vO!P&SX#_&SX#a&SX#c&SX#d&SX#e&SX#f&SX#g&SX#h&SX#j&SX#n&SX#q&SX&]&SX&^&SX&m&SX~OW#tOY&SX#o&SXs&SXq&SX|&SX~P5oO!b#wO#]#wOW&TXu&TX!P&TX#_&TX#a&TX#c&TX#d&TX#e&TX#f&TX#g&TX#h&TX#j&TX#n&TX#q&TX&]&TX&^&TX&m&TX&u&TXY&TX#o&TXs&TXq&TX|&TX~OZ#XX~P7^OZ#xO~O&u#vO~O#_#|O#a#}O#c$OO#d$OO#e$PO#f$QO#g$RO#h$RO#j$VO#n$SO#q$TO&]#zO&^#zO&m#{O~O!P$UO~P9`O&w$WO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO#epO#qoO#spO#tpO%|TO&O0kO&Q0jO&WUO~O#o$[O~O![$^O~O&O#SO&Q#SO~Og^Oh^O&O!wO&QWO&^#YO~OW$dO&u#vO~O#y!{O~O!W$hO&OSO&Q!qO~OZ$iO~OZ$lO~O!P$sO&O$rO&Q$rO~O!P$uO&O$rO&Q$rO~O!P$xO~P:jOZ${O}cO~OW&[Xu&[X%|&[X&O&[X&Q&[X&^&[X~OZ!aX~P>YOWiXuiX%|iX&OiX&QiX&^iX~OZ!aX~P>uOu#OO%|TO&O#SO&Q#SO~O%|TO~P3^Og^Oh^Ov#pO!u#rO!z#qO&^!hO&s#oO~O&O!cO&Q!dO~P?wOg^Oh^O%|TO&O!cO&Q!dO~O}cO!P%^O~OZ%_O~O}%aO!m%dO~O}cOg&fXh&fXv&fX!S&fX!T&fX!U&fX!V&fX!W&fX!X&fX!Y&fX!Z&fX!]&fX!^&fX!_&fX!u&fX!z&fX%|&fX&O&fX&Q&fX&^&fX&s&fX~OW%gOZ%hOgTahTa%|Ta&OTa&QTa~OvTa!STa!TTa!UTa!VTa!WTa!XTa!YTa!ZTa!]Ta!^Ta!_Ta!uTa!zTa#xTa#yTa$VTa$gTa&sTa&^TauTaYTaqTa|Ta!PTa~PBxO&V%kO&X!tO~Ou#OO%|TOqma&]maYma&mma!Pma~O&uma}ma!rma~PE[O!SyO!TyO!UyO!VyO!WyO!XyO!YyO!ZzO!]yO!^yO!_yO~Og!Rah!Rav!Ra!u!Ra!z!Ra$g!Ra&O!Ra&Q!Ra&s!Ra&^!Ra~PFQO#y%mO~Os%oO~Ou%pO%|TO~Ou#OO%|ra&Ora&Qra&uraYrawra&mra&pra!Pra&]raqra~OWra#_ra#ara#cra#dra#era#fra#gra#hra#jra#nra#qra&^ra#orasra|ra~PG{Ou#OO%|TOq&hX!P&hX!b&hX~OY&hX#o&hX~PIyO!b%sOq!`X!P!`XY!`X~Oq%tO!P&gX~O!P%vO~Ov%wO~Og^Oh^O%|0iO&O!wO&QWO&a%zO~O&]&_P~PKWO%|TO&O!wO&QWO~OW&PXYiXY!aXY&PXZ&PXq!aXu&PXwiX!b&PX#]&PX#_&PX#a&PX#c&PX#d&PX#e&PX#f&PX#g&PX#h&PX#j&PX#n&PX#q&PX&]&PX&^&PX&miX&m&PX&piX&uiX&u&PX&w!aX~P>uOWUXYUXY!aXY&[XZUXq!aXuUXw&[X!bUX#]UX#_UX#aUX#cUX#dUX#eUX#fUX#gUX#hUX#jUX#nUX#qUX&]UX&^UX&mUX&m&[X&p&[X&uUX&u&[X&w!aX~P>YOg^Oh^O%|TO&O!wO&QWOg!RXh!RX&O!RX&Q!RX~PFQOu#OOw&UO%|TO&O&RO&Q&QO&p&TO~OW#XOY&`X&m&`X&u&`X~P!!mOY&WO~P9`Og^Oh^O&O!wO&QWO~Oq&YOY&oX~OY&[O~Og^Oh^O%|TO&O!wO&QWOY&oP~PFQOY&aO&m&_O&u#vO~Oq&bO&w$WOY&vX~OY&dO~O%|TOg%aah%aav%aa!S%aa!T%aa!U%aa!V%aa!W%aa!X%aa!Y%aa!Z%aa!]%aa!^%aa!_%aa!u%aa!z%aa$g%aa&O%aa&Q%aa&s%aa&^%aa~O|&eO~P]O}&fO~Op&rOw&sO&OSO&Q!qO&^#YO~Oz&qO~P!&|Oz&uO&OSO&Q!qO&^#YO~OY&dP~P:jOg^Oh^O%|TO&O!wO&QWO~O}cO~P:jOW#XOu#OO%|TO&u&`X~O#q$TO!P#ra#_#ra#a#ra#c#ra#d#ra#e#ra#f#ra#g#ra#h#ra#j#ra#n#ra&]#ra&^#ra&m#raY#ra#o#ras#raq#ra|#ra~Oo'XO}'WO!r'YO&^!hO~O}'_O!r'YO~Oo'cO}'bO&^!hO~OZ#xOu'gO%|TO~OW%gO}'mO~OW%gO!P'oO~OW'pO!P'qO~O$g!WO&O0kO&Q0jO!P&dP~P/lO!P'|O#o'}O~P9`O}(OO~O$b(QO~O!P(RO~O!P(SO~O!P(TO~P9`O!P(VO~P9`OZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQO%P(bO%T(cOZ$|a_$|a`$|aa$|ab$|ac$|ae$|ag$|ah$|ap$|av$|aw$|az$|a}$|a!P$|a!S$|a!T$|a!U$|a!V$|a!W$|a!X$|a!Y$|a!Z$|a![$|a!]$|a!^$|a!_$|a!u$|a!z$|a#e$|a#q$|a#s$|a#t$|a#x$|a#y$|a$V$|a$X$|a$_$|a$b$|a$d$|a$g$|a$k$|a$m$|a$r$|a$t$|a$v$|a$x$|a${$|a$}$|a%v$|a%|$|a&O$|a&Q$|a&W$|a&s$|a|$|a$`$|a$p$|a~O}ra!rra&}ra~PG{OZ%_O~PIyO!P(gO~O!m%dO}&ka!P&ka~O}cO!P(jO~Oo(nOq!fX&]!fX~Oq(pO&]&lX~O&](rO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op)OOv{Ow(}Oz!OO|(yO}cO!PvO![!`O!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&^#YO&sdO~PFQO}%aO~O})VOY&yP~P:jOW%gO!P)^O~Os)_O~Ou#OO%|TOq&ha!P&ha!b&haY&ha#o&ha~O})`O~P:jOq%tO!P&ga~Og^Oh^O%|0iO&O!wO&QWO~O&a)gO~P!7zOu#OO%|TOq&`X&]&`XY&`X&m&`X!P&`X~O}&`X!r&`X~P!8dOo)iOp)iOqnX&]nX~Oq)jO&]&_X~O&])lO~Ou#OOw)nO%|TO&OSO&Q!qO~OYma&mma&uma~P!9rOW&PXY!aXq!aXu!aX%|!aX~OWUXY!aXq!aXu!aX%|!aX~OW)qO~Ou#OO%|TO&O#SO&Q#SO&p)sO~Og^Oh^O%|TO&O!wO&QWO~PFQOq&YOY&oa~Ou#OO%|TO&O#SO&Q#SO&p&TO~OY)vO~OY)yO&m&_O~Oq&bOY&va~Og^Oh^Ov{O|*RO!u}O%|TO&O!wO&QWO&sdO~PFQO!P*SO~OW^iZ#XXu^i!P^i!b^i#]^i#_^i#a^i#c^i#d^i#e^i#f^i#g^i#h^i#j^i#n^i#q^i&]^i&^^i&m^i&u^iY^i#o^is^iq^i|^i~OW*cO~Os*dO~P9`Oz*eO&OSO&Q!qO~O!P]iY]i#o]is]iq]i|]i~P9`Oq*fOY&dX!P&dX~P9`OY*hO~O#q$TO!P#^i#_#^i#a#^i#c#^i#d#^i#e#^i#f#^i#j#^i#n#^i&]#^i&^#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#g$RO#h$RO~P!@zO#_#|O#f$QO#g$RO#h$RO#j$VO#q$TO&]#zO&^#zO!P#^i#a#^i#c#^i#d#^i#n#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#e$PO~P!B`O#_#|O#f$QO#g$RO#h$RO#j$VO#q$TO&]#zO&^#zO!P#^i#c#^i#d#^i#n#^iY#^i#o#^is#^iq#^i|#^i~O#a#}O#e$PO&m#{O~P!CtO#e#^i~P!B`O#q$TO!P#^i#a#^i#c#^i#d#^i#e#^i#f#^i#n#^i&m#^iY#^i#o#^is#^iq#^i|#^i~O#_#|O#g$RO#h$RO#j$VO&]#zO&^#zO~P!EaO#g#^i#h#^i~P!@zO#o*iO~P9`O#_&`X#a&`X#c&`X#d&`X#e&`X#f&`X#g&`X#h&`X#j&`X#n&`X#q&`X&^&`X#o&`Xs&`X|&`X~P!8dO!P#kiY#ki#o#kis#kiq#ki|#ki~P9`O|*lO~P$wO}'WO~O}'WO!r'YO~Oo'XO}'WO!r'YO~O%|TO&O#SO&Q#SO|&rP!P&rP~PFQO}'_O~Og^Oh^Ov{O|*yO!P*wO!u}O!z|O%|TO&O!wO&QWO&^!hO&sdO~PFQO}'bO~Oo'cO}'bO~Os*{O~P:jOu*}O%|TO~Ou'gO})`O%|TOW#Zi!P#Zi#_#Zi#a#Zi#c#Zi#d#Zi#e#Zi#f#Zi#g#Zi#h#Zi#j#Zi#n#Zi#q#Zi&]#Zi&^#Zi&m#Zi&u#ZiY#Zi#o#Zis#Ziq#Zi|#Zi~O}'WOW&ciu&ci!P&ci#_&ci#a&ci#c&ci#d&ci#e&ci#f&ci#g&ci#h&ci#j&ci#n&ci#q&ci&]&ci&^&ci&m&ci&u&ciY&ci#o&cis&ciq&ci|&ci~O#|+VO$O+WO$Q+WO$R+XO$S+YO~O|+UO~P!NoO$Y+ZO&OSO&Q!qO~OW+[O!P+]O~O$`+^OZ$^i_$^i`$^ia$^ib$^ic$^ie$^ig$^ih$^ip$^iv$^iw$^iz$^i}$^i!P$^i!S$^i!T$^i!U$^i!V$^i!W$^i!X$^i!Y$^i!Z$^i![$^i!]$^i!^$^i!_$^i!u$^i!z$^i#e$^i#q$^i#s$^i#t$^i#x$^i#y$^i$V$^i$X$^i$_$^i$b$^i$d$^i$g$^i$k$^i$m$^i$r$^i$t$^i$v$^i$x$^i${$^i$}$^i%v$^i%|$^i&O$^i&Q$^i&W$^i&s$^i|$^i$p$^i~Og^Oh^O$g#sO&O!wO&QWO~O!P+bO~P:jO!P+cO~OZ`O_VO`VOaVObVOcVOeVOg^Oh^Op!POv{OwkOz!OO}cO!PvO!SyO!TyO!UyO!VyO!WyO!XyO!YyO!Z+hO![!`O!]yO!^yO!_yO!u}O!z|O#epO#qoO#spO#tpO#x!RO#y!QO$V!SO$X!TO$_!UO$b!VO$d!XO$g!WO$k!YO$m!ZO$p+iO$r![O$t!]O$v!^O$x!_O${!aO$}!bO%|TO&ORO&QQO&WUO&sdO~O|+gO~P#&ROW&PXY&PXZ&PXu&PX!P&PX&uiX&u&PX~P>uOWUXYUXZUXuUX!PUX&uUX&u&[X~P>YOW#tOu#uO&u#vO~OW&TXY%WXu&TX!P%WX&u&TX~OZ#XX~P#+WOY+oO!P+mO~O%P(bO%T(cOZ$|i_$|i`$|ia$|ib$|ic$|ie$|ig$|ih$|ip$|iv$|iw$|iz$|i}$|i!P$|i!S$|i!T$|i!U$|i!V$|i!W$|i!X$|i!Y$|i!Z$|i![$|i!]$|i!^$|i!_$|i!u$|i!z$|i#e$|i#q$|i#s$|i#t$|i#x$|i#y$|i$V$|i$X$|i$_$|i$b$|i$d$|i$g$|i$k$|i$m$|i$r$|i$t$|i$v$|i$x$|i${$|i$}$|i%v$|i%|$|i&O$|i&Q$|i&W$|i&s$|i|$|i$`$|i$p$|i~OZ+rO~O%P(bO%T(cOZ%Ui_%Ui`%Uia%Uib%Uic%Uie%Uig%Uih%Uip%Uiv%Uiw%Uiz%Ui}%Ui!P%Ui!S%Ui!T%Ui!U%Ui!V%Ui!W%Ui!X%Ui!Y%Ui!Z%Ui![%Ui!]%Ui!^%Ui!_%Ui!u%Ui!z%Ui#e%Ui#q%Ui#s%Ui#t%Ui#x%Ui#y%Ui$V%Ui$X%Ui$_%Ui$b%Ui$d%Ui$g%Ui$k%Ui$m%Ui$r%Ui$t%Ui$v%Ui$x%Ui${%Ui$}%Ui%v%Ui%|%Ui&O%Ui&Q%Ui&W%Ui&s%Ui|%Ui$`%Ui$p%Ui~Ou#OO%|TO}&na!P&na!m&na~O!P+xO~Oo(nOq!fa&]!fa~Oq(pO&]&la~O!m%dO}&ki!P&ki~O|,RO~P]OW,TO~P5oOW&TXu&TX#_&TX#a&TX#c&TX#d&TX#e&TX#f&TX#g&TX#h&TX#j&TX#n&TX#q&TX&]&TX&^&TX&m&TX&u&TX~OZ#xO!P&TX~P#5_OW$dOZ#xO&u#vO~Op,VOw,VO~Oq,WO}&qX!P&qX~O!b,YO#]#wOY&TXZ#XX~P#5_OY&RXq&RX|&RX!P&RX~P9`O})VO|&xP~P:jOY&RXg%ZXh%ZX%|%ZX&O%ZX&Q%ZXq&RX|&RX!P&RX~Oq,]OY&yX~OY,_O~O})`O|&jP~P:jOq&iX!P&iX|&iXY&iX~P9`O&aTa~PBxOo)iOp)iOqna&]na~Oq)jO&]&_a~OW,gO~Ow,hO~Ou#OO%|TO&O,lO&Q,kO~Og^Oh^Ov#pO!u#rO&O!wO&QWO&s#oO~Og^Oh^Ov{O|,qO!u}O%|TO&O!wO&QWO&sdO~PFQOw,|O&OSO&Q!qO&^#YO~Oq*fOY&da!P&da~O#_ma#ama#cma#dma#ema#fma#gma#hma#jma#nma#qma&^ma#omasma|ma~PE[O|-QO~P$wOZ#xO}'WOq!|X|!|X!P!|X~Oq-UO|&rX!P&rX~O|-XO!P-WO~O&^!hO~P4|Og^Oh^Ov{O|-]O!P*wO!u}O!z|O%|TO&O!wO&QWO&^!hO&sdO~PFQOs-^O~P9`Os-^O~P:jO}'WOW&cqu&cq!P&cq#_&cq#a&cq#c&cq#d&cq#e&cq#f&cq#g&cq#h&cq#j&cq#n&cq#q&cq&]&cq&^&cq&m&cq&u&cqY&cq#o&cqs&cqq&cq|&cq~O|-bO~P!NoO!W-fO#}-fO&OSO&Q!qO~O!P-iO~O$Y-jO&OSO&Q!qO~O!b%sO#o-lOq!`X!P!`X~O!P-nO~P9`O!P-nO~P:jO!P-qO~P9`O|-sO~P#&RO![$^O#o-tO~O!P-vO~O!b-wO~OY-zOZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQOY-zO!P-{O~O%P(bO%T(cOZ%Uq_%Uq`%Uqa%Uqb%Uqc%Uqe%Uqg%Uqh%Uqp%Uqv%Uqw%Uqz%Uq}%Uq!P%Uq!S%Uq!T%Uq!U%Uq!V%Uq!W%Uq!X%Uq!Y%Uq!Z%Uq![%Uq!]%Uq!^%Uq!_%Uq!u%Uq!z%Uq#e%Uq#q%Uq#s%Uq#t%Uq#x%Uq#y%Uq$V%Uq$X%Uq$_%Uq$b%Uq$d%Uq$g%Uq$k%Uq$m%Uq$r%Uq$t%Uq$v%Uq$x%Uq${%Uq$}%Uq%v%Uq%|%Uq&O%Uq&Q%Uq&W%Uq&s%Uq|%Uq$`%Uq$p%Uq~Ou#OO%|TO}&ni!P&ni!m&ni~O&m&_Oq!ga&]!ga~O!m%dO}&kq!P&kq~O|.WO~P]Op.YOw&sOz&qO&OSO&Q!qO&^#YO~O!P.ZO~Oq,WO}&qa!P&qa~O})VO~P:jOq.aO|&xX~O|.cO~Oq,]OY&ya~Oq.gO|&jX~O|.iO~Ow.jO~Oq!aXu!aX!P!aX!b!aX%|!aX~OZ&PX~P#KsOZUX~P#KsO!P.kO~OZ.lO~OW^yZ#XXu^y!P^y!b^y#]^y#_^y#a^y#c^y#d^y#e^y#f^y#g^y#h^y#j^y#n^y#q^y&]^y&^^y&m^y&u^yY^y#o^ys^yq^y|^y~OY%_aq%_a!P%_a~P9`O!P#myY#my#o#mys#myq#my|#my~P9`O}'WOq!|a|!|a!P!|a~OZ#xO}'WOq!|a|!|a!P!|a~O%|TO&O#SO&Q#SOq%iX|%iX!P%iX~PFQOq-UO|&ra!P&ra~O|!}X~P$wO|.yO~Os.zO~P9`OW%gO!P.{O~OW%gO$P/QO&OSO&Q!qO!P&{P~OW%gO$T/RO~O!P/SO~O!b%sO#o/UOq!`X!P!`X~OY/WO~O!P/XO~P9`O#o/YO~P9`O!b/[O~OY/]OZ$iO_VO`VOaVObVOcVOeVOg^Oh^Op!POwkOz!OO%|TO&O(XO&Q(WO&WUO~PFQOW#[Ou&ZX%|&ZX&O&ZX&Q&ZX&}&ZX~O&^#YO~P$%uOu#OO%|TO&}/_O&O%RX&Q%RX~O&m&_Oq!gi&]!gi~Op/cO&OSO&Q!qO~OW*cOZ#xO~O!P/eO~OY&RXq&RX~P9`O})VOq%mX|%mX~P:jOq.aO|&xa~O!b/hO~O})`Oq%bX|%bX~P:jOq.gO|&ja~OY/kO~O!P/lO~OZ/mO~O}'WOq!|i|!|i!P!|i~O|!}a~P$wOW%gO!P/qO~OW%gOq/rO!P&{X~OY/vO~P9`OY/xO~OY%Wq!P%Wq~P9`O&}/_O&O%Ra&Q%Ra~OY/}O~O!P0QO~Ou#OO!P0SO!Z0TO%|TO~OY0UO~Oq/rO!P&{a~O!P0XO~OW%gOq/rO!P&|X~OY0ZO~P9`OY0[O~OY%Wy!P%Wy~P9`Ou#OO%|TO&O%ta&Q%ta&}%ta~OY0]O~O!P0^O~Ou#OO!P0_O!Z0`O%|TO~OW%gOq%qa!P%qa~Oq/rO!P&|a~O!P0dO~Ou#OO!P0dO!Z0eO%|TO~O!P0fO~O!P0hO~O#o&PXY&PXs&PXq&PX|&PX~P&bO#oUXYUXsUXqUX|UX~P(fO`Q_P#f&Wc~",
	  goto: "#)S&}PPPP'O'c*t-wP'cPP.].a/uPPPPP1aP2yPP4c7U9q<^<v>kPPP>qPAXPPPBR2yPCzPPDuPElEtPPPPPPPPPPPPGPGhPJpJxKUKpKvK|MlMpMpMxPNX! a!!U!!`P!!u! aP!!{!#V! |!#fP!$V!$a!$g! a!$j!$pElEl!$t!%O!%R2y!&m2y2y!(fP.aP!(jP!)ZPPPPPP.aP.a!)w.aPP.aP.aPP.a!+]!+gPP!+m!+vPPPPPPPP'OP'OPP!+z!+z!,_!+zPP!+zP!+zP!,x!,{P!+z!-c!+zP!+zP!-f!-iP!+zP!+zP!+zP!+zP!+z!+zP!+zP!-mP!-s!-v!-|P!+z!.Y!.]P!.e!.w!2v!2|!3S!4Y!4`!4n!5t!5z!6Q!6[!6b!6h!6n!6t!6z!7Q!7W!7^!7d!7j!7p!7v!8Q!8W!8b!8hPPP!8n!+z!9cP!<vP!=zP!@]!@s!Co2yPPP!E]!Hy!KjPP!NV!NYP#!c#!i#$V#$f#$n#%p#&Y#'T#'^#'a#'oP#'r#(OP#(V#(^P#(aP#(lP#(o#(r#(u#(y#)PstOcx![#l$[$j$k$m$n%a(O(z({+^+f,S'orOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$V$W$X$Y$[$b$i$j$k$l$m$n${%P%S%W%Z%[%_%a%d%h%r%s%x%y&O&P&X&Y&]&_&a&f'R'W'X'Y'_'b'c'g'h'j'u'v'x'}(O(Y(f(n(p(u(w(x(z({)V)`)i)j)y)}*Q*f*i*j*k*t*u*x*}+^+`+b+c+f+i+l+m+r+w,Q,S,W,Y,o-U-W-Z-l-n-w-{.P.a.g.x/U/X/[/^/h/k/{0R0T0U0`0b0e0l#rhO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0et!sT!Q!S!T!{!}$h%m+V+W+X+Y-e-g/Q/R/r0iQ#mdS&V#`(wQ&i#oU&n#t$d,TQ&u#vW([${+m-{/^U)S%g'p+[Q)T%hS)o&P,QU*`&p,{.XQ*e&vQ,n)}Q,y*cQ.d,]R.n,ou!sT!Q!S!T!{!}$h%m+V+W+X+Y-e-g/Q/R/r0iT%i!r)f#uqO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e#tlO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eX(]${+m-{/^#}VO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0e#}kO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0e%x[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lQ%}#[Q)m&OV-}+r.R/_%x[OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lV-}+r.R/_%x]OPX`ceopx!O!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m,S,W,Y-W-l-n-w-{.a.g.x/U/X/[/^/h0T0`0e0lV.O+r.R/_S#Z[-}S$c!O&qS&p#t$dQ&v#vQ)P%aQ,{*cR.X,T$eZO`copx!Y![!_!a#Y#l#u#w#x#|#}$O$P$Q$R$S$V$W$[$i$j$k$l$m$n${%a%d%h%s&_&a'X'Y'c'g'x'}(O(n(z({)V)`)i)j)y*f*i*}+^+b+c+f+i+m,S,W,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ%{#YR,e)j%y_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0l!o#QY!e!x#R#T#`#n$Y%O%P%S%Z%r%y&P&X&]'R'v(Y(f(u(w)}*j*t+`+l+w,Q,o-Z.P/k/{0R0U0b#|kO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ$j!UQ$k!VQ$p!ZQ$y!`R+j(QQ#yiS'k$b*bQ*_&oQ+R'lS,U(})OQ,x*aQ-S*pQ.[,VQ.r,zQ.u-TQ/d.YQ/o.sR0P/cQ'Z$_W*U&j'[']'^Q+Q'kU,r*V*W*XQ-R*pQ-`+RS.o,s,tS.t-S-TQ/n.pR/p.u]!mP!o'W*k-W.xreOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!gP!o'W*k-W.xW#b`#e%_&YQ'w$lW(^${+m-{/^S*O&f*QS*q'_-US*v'b*xR.R+rh#VY!W!e#n#s%S'v)}*t+`,o-ZQ)d%tQ)p&TR,i)s#rnOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e^!kP!g!o'W*k-W.xv#TY!W#`#n#s%t&T&X&]'v(Y(w)s)}+`+l,o.Q/bQ#g`Q$_{Q$`|Q$a}W%P!e%S*t-ZS%V!h(pQ%]!iQ&j#pQ&k#qQ&l#rQ(o%WS(s%Z(uQ){&bS*p'_-UR-T*qU)b%s)`.gR+P'j[!mP!o'W*k-W.xT*w'b*x^!iP!g!o'W*k-W.xQ'^$_Q'f$aQ*X&jQ*^&lV*u'b*v*xQ%X!hR+|(pQ(m%VR+{(o#tnO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eQ%`!kS(f%P(sR(v%]T#e`%_U#c`#e%_R)t&YQ%c!lQ(h%RQ(l%UQ,O(tR.V,PrvOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xQ$|!bQ%^!jQ%f!pQ'U$WQ(U$yQ(e$}Q(j%TQ+t(cR.S+srtOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xS*P&f*QT*w'b*xQ']$_S*W&j'^R,t*XQ'[$_Q'a$`U*V&j']'^Q*Z&kS,s*W*XR.p,tQ*o'YR*z'cQ'e$aS*]&l'fR,w*^Q'd$aU*[&l'e'fS,v*]*^R.q,wrtOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!mP!o'W*k-W.xT*w'b*xQ'`$`S*Y&k'aR,u*ZQ*r'_R.v-UR-Y*sQ&g#mR*T&iT*P&f*QQ%b!lS(k%U%cR+y(lR({%aWk${+m-{/^#ulO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0e#|iO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eU&o#t$d,TS*a&p.XQ,z*cR.s,{T'i$b'j!]#|m#a$o$w$z&t&w&x&{&|&}'O'Q'T)U)a*|+a+d,}-P-_-p-u._/T/Z/w/z!V#}m#a$o$w$z&t&w&x&|'Q'T)U)a*|+a+d,}-P-_-p-u._/T/Z/w/z#unO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0ea)W%h)V,Y.a/h0T0`0eQ)Y%hR.e,]Q'n$eQ)[%lR,`)]T+S'm+TsvOcx![#l$[$j$k$m$n%a(O(z({+^+f,SruOcx![#l$[$j$k$m$n%a(O(z({+^+f,SQ$t!]R$v!^R$m!XrvOcx![#l$[$j$k$m$n%a(O(z({+^+f,SR'x$lR$n!XR(P$pT+e(O+fX(`$|(a(e+uR+s(bQ.Q+rR/b.RQ(d$|Q+q(aQ+v(eR.T+uR$}!bQ(_${V-y+m-{/^QxOQ#lcW$]x#l(z,SQ(z%aR,S({rXOcx![#l$[$j$k$m$n%a(O(z({+^+f,Sn!fP!o#e&Y&f'W'_'b*Q*k*x+r-U-W.xl!zX!f#P#_#i$X%W%[%x&O'h'u(x0l!j#PY!e!x#T#`#n$Y%P%S%Z%r%y&P&X&]'R'v(Y(f(u(w)}*j*t+`+l+w,Q,o-Z.P/k/{0R0U0bQ#_`Q#ia#^$Xop!Y!_!a#u#w#x#|#}$O$P$Q$R$S$W$i%d%h%s&_&a'X'Y'c'g'x'}(n)V)`)i)y*f*i*}+b+c+i,W,Y-l-n-w.a.g/U/X/[/h0T0`0eS%W!h(pS%[!i*uS%x#Y)jQ&O#[S'h$b'jY'u$l${+m-{/^Q(x%_R0l$VQ!uUR%j!uQ)k%{R,f)k^#RY#`$Y'R'v(Y*jx%O!e!x#n%S%Z%y&P&X&](u(w)}*t+`+l,Q,o-Z.P/{[%q#R%O%r+w0R0bS%r#T%PQ+w(fQ0R/kR0b0UQ*g&xR-O*gQ!oPU%e!o*k.xQ*k'WR.x-W!pbOP`cx![!o#e#l$[$j$k$l$m$n${%_%a&Y&f'W'_'b(O(z({*Q*k*x+^+f+m+r,S-U-W-{.x/^Y!yX!f#_'u(xT#jb!yQ.h,aR/j.hQ%u#VR)e%uQ&`#fS)x&`.UR.U+zQ(q%XR+}(qQ&Z#cR)u&ZQ,X)QR.^,XQ*x'bR-[*xQ-V*rR.w-VQ*Q&fR,p*QQ'j$bR+O'jQ&c#gR)|&cQ.b,ZR/g.bQ,^)YR.f,^Q+T'mR-a+TQ-e+VR.}-eQ/s/OS0W/s0YR0Y/uQ+f(OR-r+fQ(a$|S+p(a+uR+u(eQ/`.PR/|/`Q+n(_R-|+n`wOcx#l%a(z({,SQ$q![Q'V$[Q's$jQ't$kQ'z$mQ'{$nS+e(O+fR-k+^'^sOPXY`acopx!Y![!_!a!e!f!h!i!o!x#P#T#Y#[#_#`#e#i#l#n#u#w#x#|#}$O$P$Q$R$S$V$W$X$Y$[$b$i$j$k$l$m$n${%P%S%W%Z%[%_%a%d%r%s%x%y&O&P&X&Y&]&_&a&f'R'W'X'Y'_'b'c'g'h'j'u'v'x'}(O(Y(f(n(p(u(w(x(z({)`)i)j)y)}*Q*f*i*j*k*t*u*x*}+^+`+b+c+f+i+l+m+r+w,Q,S,W,o-U-W-Z-l-n-w-{.P.g.x/U/X/[/^/k/{0R0U0b0la)X%h)V,Y.a/h0T0`0eQ!rTQ$e!QQ$f!SQ$g!TQ%l!{Q%n!}Q'r$hQ)]%mQ)f0iS-c+V+XQ-g+WQ-h+YQ.|-eS/O-g/QQ/u/RR0V/r%oSOT`cdopx!Q!S!T!Y![!_!a!{!}#`#l#o#t#u#v#w#x#|#}$O$P$Q$R$S$W$[$d$h$i$j$k$l$m$n${%a%g%h%m%s&P&a&p&v'g'p'x'}(O(w(z({)V)`)y)}*c*f*i*}+V+W+X+Y+[+^+b+c+f+i+m,Q,S,T,Y,],o,{-e-g-l-n-w-{.X.a.g/Q/R/U/X/[/^/h/r0T0`0e0iQ)Z%hQ,Z)VS.`,Y/hQ/f.aQ0a0TQ0c0`R0g0ermOcx![#l$[$j$k$m$n%a(O(z({+^+f,SS#a`$iQ$ToQ$ZpQ$o!YQ$w!_Q$z!aQ&t#uQ&w#wY&x#x$l+b-n/XQ&z#|Q&{#}Q&|$OQ&}$PQ'O$QQ'P$RQ'Q$SQ'T$W^)U%h)V.a/h0T0`0eU)a%s)`.gQ)z&aQ*|'gQ+a'xQ+d'}Q,j)yQ,}*fQ-P*iQ-_*}Q-p+cQ-u+iQ._,YQ/T-lQ/Z-wQ/w/UR/z/[#rgO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i,S,Y-l-n-w.a.g/U/X/[/h0T0`0eW(Z${+m-{/^R(|%arYOcx![#l$[$j$k$m$n%a(O(z({+^+f,S[!eP!o'W*k-W.xW!xX$X%x'uQ#``Q#ne!|$Yop!Y!_!a#u#w#x#|#}$O$P$Q$R$S$W$i%h%s&a'g'x'})V)`)y*f*i*}+b+c+i,Y-l-n-w.a.g/U/X/[/h0T0`0eQ%S!gS%Z!i*ud%y#Y%d&_'X'Y'c(n)i)j,WQ&P#_Q&X#bS&]#e&YQ'R$VQ'v$lW(Y${+m-{/^Q(u%[Q(w%_S)}&f*QQ*j0lS*t'b*xQ+`'wQ+l(^Q,Q(xQ,o*OQ-Z*vS.P+r.RR/{/_%x_OPX`ceopx!Y![!_!a!g!i!o#Y#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$i$j$k$l$m$n${%[%_%a%d%h%s%x&Y&_&a&f'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0lQ$b!OQ'l$cR*b&q&TWOPX`ceopx!O!Y![!_!a!g!i!o#Y#[#_#b#e#l#u#w#x#|#}$O$P$Q$R$S$V$W$X$[$c$i$j$k$l$m$n${%[%_%a%d%h%s%x&O&Y&_&a&f&q'W'X'Y'b'c'g'u'w'x'}(O(^(n(x(z({)V)`)i)j)y*O*Q*f*i*k*u*v*x*}+^+b+c+f+i+m+r,S,W,Y-W-l-n-w-{.R.a.g.x/U/X/[/^/_/h0T0`0e0lR%|#Y#zjOcopx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eQ#f`Q%{#YQ'S$VU)Q%d'Y'cQ)w&_Q*m'XQ+z(nQ,d)iQ,e)jR.],WQ)h%zR,c)g#|fO`copx!Y![!_!a#l#u#w#x#|#}$O$P$Q$R$S$W$[$i$j$k$l$m$n${%a%h%s&a'g'x'}(O(z({)V)`)y*f*i*}+^+b+c+f+i+m,S,Y-l-n-w-{.a.g/U/X/[/^/h0T0`0eT&m#t,TQ&y#xQ'y$lQ-o+bQ/V-nR/y/X]!nP!o'W*k-W.x#PaOPX`bcx![!f!o!y#_#e#l$[$j$k$l$m$n${%_%a&Y&f'W'_'b'u(O(x(z({*Q*k*x+^+f+m+r,S-U-W-{.x/^U#WY!W'vQ%Q!eU&h#n#s+`Q(i%SS,m)}*tT.m,o-Zj#UY!W!e#n#s%S%t&T)s)}*t,o-ZU&S#`&](wQ)r&XQ+_'vQ+k(YQ-m+`Q-x+lQ/a.QR0O/bQ)c%sQ,a)`R/i.gR,b)``!jP!o'W'b*k*x-W.xT%T!g*vR%Y!hW%R!e%S*t-ZQ(t%ZR,P(uS#d`%_R&^#eQ)R%dT*n'Y'cR*s'_[!lP!o'W*k-W.xR%U!gR#h`R,[)VR)Z%hT-d+V-eQ/P-gR/t/QR/t/R",
	  nodeNames: "⚠ LineComment BlockComment Program ModuleDeclaration MarkerAnnotation Identifier ScopedIdentifier . Annotation ) ( AnnotationArgumentList AssignmentExpression FieldAccess IntegerLiteral FloatingPointLiteral BooleanLiteral CharacterLiteral StringLiteral TextBlock null ClassLiteral void PrimitiveType TypeName ScopedTypeName GenericType TypeArguments AnnotatedType Wildcard extends super , ArrayType ] Dimension [ class this ParenthesizedExpression ObjectCreationExpression new ArgumentList } { ClassBody ; FieldDeclaration Modifiers public protected private abstract static final strictfp default synchronized native transient volatile VariableDeclarator Definition AssignOp ArrayInitializer MethodDeclaration TypeParameters TypeParameter TypeBound FormalParameters ReceiverParameter FormalParameter SpreadParameter Throws throws Block ClassDeclaration Superclass SuperInterfaces implements InterfaceTypeList InterfaceDeclaration interface ExtendsInterfaces InterfaceBody ConstantDeclaration EnumDeclaration enum EnumBody EnumConstant EnumBodyDeclarations AnnotationTypeDeclaration AnnotationTypeBody AnnotationTypeElementDeclaration StaticInitializer ConstructorDeclaration ConstructorBody ExplicitConstructorInvocation ArrayAccess MethodInvocation MethodName MethodReference ArrayCreationExpression Dimension AssignOp BinaryExpression CompareOp CompareOp LogicOp BitOp BitOp LogicOp ArithOp ArithOp ArithOp BitOp InstanceofExpression instanceof LambdaExpression InferredParameters TernaryExpression LogicOp : UpdateExpression UpdateOp UnaryExpression LogicOp BitOp CastExpression ElementValueArrayInitializer ElementValuePair open module ModuleBody ModuleDirective requires transitive exports to opens uses provides with PackageDeclaration package ImportDeclaration import Asterisk ExpressionStatement LabeledStatement Label IfStatement if else WhileStatement while ForStatement for ForSpec LocalVariableDeclaration var EnhancedForStatement ForSpec AssertStatement assert SwitchStatement switch SwitchBlock SwitchLabel case DoStatement do BreakStatement break ContinueStatement continue ReturnStatement return SynchronizedStatement ThrowStatement throw TryStatement try CatchClause catch CatchFormalParameter CatchType FinallyClause finally TryWithResourcesStatement ResourceSpecification Resource ClassContent",
	  maxTerm: 275,
	  nodeProps: [
	    ["isolate", -4,1,2,18,19,""],
	    ["group", -26,4,47,76,77,82,87,92,144,146,149,150,152,155,157,160,162,164,166,171,173,175,177,179,180,182,190,"Statement",-25,6,13,14,15,16,17,18,19,20,21,22,39,40,41,99,100,102,103,106,117,119,121,124,126,129,"Expression",-7,23,24,25,26,27,29,34,"Type"],
	    ["openedBy", 10,"(",44,"{"],
	    ["closedBy", 11,")",45,"}"]
	  ],
	  propSources: [javaHighlighting],
	  skippedNodes: [0,1,2],
	  repeatNodeCount: 28,
	  tokenData: "#$f_R!_OX%QXY'fYZ)bZ^'f^p%Qpq'fqr*|rs,^st%Qtu4euv5qvw7Rwx8ixyAQyzAnz{B[{|CQ|}Dh}!OEU!O!PFo!P!Q! i!Q!R!,_!R![!0V![!]!>g!]!^!?w!^!_!@e!_!`!BO!`!a!Br!a!b!D`!b!c!EO!c!}!Kz!}#O!MW#O#P%Q#P#Q!Mt#Q#R!Nb#R#S4e#S#T%Q#T#o4e#o#p# U#p#q# r#q#r##[#r#s##x#s#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%QS%VV&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS%qO&XSS%tVOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZS&^VOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QS&vP;=`<%l%QS&|UOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZS'cP;=`<%l&Z_'mk&XS%xZOX%QXY'fYZ)bZ^'f^p%Qpq'fqr%Qrs%qs#y%Q#y#z'f#z$f%Q$f$g'f$g#BY%Q#BY#BZ'f#BZ$IS%Q$IS$I_'f$I_$I|%Q$I|$JO'f$JO$JT%Q$JT$JU'f$JU$KV%Q$KV$KW'f$KW&FU%Q&FU&FV'f&FV;'S%Q;'S;=`&s<%lO%Q_)iY&XS%xZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XZ*^Y%xZX^*Xpq*X#y#z*X$f$g*X#BY#BZ*X$IS$I_*X$I|$JO*X$JT$JU*X$KV$KW*X&FU&FV*XV+TX#sP&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QU+wV#_Q&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT,aXOY,|YZ%lZr,|rs3Ys#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T-PXOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT-qX&XSOY-lYZ%lZr-lrs.^s#O-l#O#P.x#P;'S-l;'S;=`2|<%lO-lT.cVcPOY&ZYZ%lZr&Zrs&ys;'S&Z;'S;=`'`<%lO&ZT.}V&XSOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT/iW&XSOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0UWOY0RZr0Rrs0ns#O0R#O#P0s#P;'S0R;'S;=`1V<%lO0RP0sOcPP0vTOY0RYZ0RZ;'S0R;'S;=`1V<%lO0RP1YP;=`<%l0RT1`XOY,|YZ%lZr,|rs1{s#O,|#O#P2d#P;'S,|;'S;=`3S<%lO,|T2QUcPOY&ZYZ%lZr&Zs;'S&Z;'S;=`'`<%lO&ZT2gVOY-lYZ/dZr-lrs1]s;'S-l;'S;=`2|<%lO-lT3PP;=`<%l-lT3VP;=`<%l,|T3_VcPOY&ZYZ%lZr&Zrs3ts;'S&Z;'S;=`'`<%lO&ZT3yR&VSXY4SYZ4`pq4SP4VRXY4SYZ4`pq4SP4eO&WP_4la&OZ&XSOY%QYZ%lZr%Qrs%qst%Qtu4eu!Q%Q!Q![4e![!c%Q!c!}4e!}#R%Q#R#S4e#S#T%Q#T#o4e#o;'S%Q;'S;=`&s<%lO%QU5xX#gQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU6lV#]Q&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV7YZ&mR&XSOY%QYZ%lZr%Qrs%qsv%Qvw7{w!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QU8SV#aQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT8nZ&XSOY9aYZ%lZr9ars:osw9awx%Qx#O9a#O#P;y#P;'S9a;'S;=`@z<%lO9aT9fX&XSOY%QYZ%lZr%Qrs%qsw%Qwx:Rx;'S%Q;'S;=`&s<%lO%QT:YVbP&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT:rXOY&ZYZ%lZr&Zrs&ysw&Zwx;_x;'S&Z;'S;=`'`<%lO&ZT;dVbPOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT<OZ&XSOY<qYZ%lZr<qrs=isw<qwx9ax#O<q#O#P9a#P;'S<q;'S;=`?T<%lO<qT<vZ&XSOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT=lZOY>_YZ%lZr>_rs?Zsw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_T>bZOY<qYZ%lZr<qrs=isw<qwx:Rx#O<q#O#P%Q#P;'S<q;'S;=`?T<%lO<qT?WP;=`<%l<qT?^ZOY>_YZ%lZr>_rs@Psw>_wx;_x#O>_#O#P&Z#P;'S>_;'S;=`@t<%lO>_P@SVOY@PZw@Pwx@ix#O@P#P;'S@P;'S;=`@n<%lO@PP@nObPP@qP;=`<%l@PT@wP;=`<%l>_T@}P;=`<%l9a_AXVZZ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVAuVYR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVBeX$YP&XS#fQOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVCXZ#eR&XSOY%QYZ%lZr%Qrs%qs{%Q{|Cz|!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QVDRV#qR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVDoVqR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QVE][#eR&XSOY%QYZ%lZr%Qrs%qs}%Q}!OCz!O!_%Q!_!`6e!`!aFR!a;'S%Q;'S;=`&s<%lO%QVFYV&wR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_FvZWY&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!PGi!P!Q%Q!Q![Hw![;'S%Q;'S;=`&s<%lO%QVGnX&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!PHZ!P;'S%Q;'S;=`&s<%lO%QVHbV&pR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTIOc&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#R%Q#R#SNq#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTJbV&XS`POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QTJ|]&XSOY%QYZ%lZr%Qrs%qs{%Q{|Ku|}%Q}!OKu!O!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTKzX&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![;'S%Q;'S;=`&s<%lO%QTLnc&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![!f%Q!f!gJZ!g!h%Q!h!iJZ!i#R%Q#R#SMy#S#W%Q#W#XJZ#X#Y%Q#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QTNOZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Lg![#R%Q#R#SMy#S;'S%Q;'S;=`&s<%lO%QTNvZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![#R%Q#R#SNq#S;'S%Q;'S;=`&s<%lO%Q_! p]&XS#fQOY%QYZ%lZr%Qrs%qsz%Qz{!!i{!P%Q!P!Q!)[!Q!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%Q_!!nX&XSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!#`T&XSOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!#rTOz!#oz{!$R{;'S!#o;'S;=`!$p<%lO!#oZ!$UVOz!#oz{!$R{!P!#o!P!Q!$k!Q;'S!#o;'S;=`!$p<%lO!#oZ!$pOQZZ!$sP;=`<%l!#o_!$yXOY!%fYZ!#ZZr!%frs!'psz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!%iXOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{;'S!!i;'S;=`!'j<%lO!!i_!&ZZ&XSOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!'TV&XSQZOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!'mP;=`<%l!!i_!'sXOY!%fYZ!#ZZr!%frs!#osz!%fz{!(`{;'S!%f;'S;=`!)U<%lO!%f_!(cZOY!!iYZ!#ZZr!!irs!$vsz!!iz{!&U{!P!!i!P!Q!&|!Q;'S!!i;'S;=`!'j<%lO!!i_!)XP;=`<%l!%f_!)cV&XSPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!)}VPZOY!*dYZ%lZr!*drs!+Us;'S!*d;'S;=`!,X<%lO!*d_!*iVPZOY!)[YZ%lZr!)[rs!)xs;'S!)[;'S;=`!+O<%lO!)[_!+RP;=`<%l!)[_!+ZVPZOY!*dYZ%lZr!*drs!+ps;'S!*d;'S;=`!,X<%lO!*dZ!+uSPZOY!+pZ;'S!+p;'S;=`!,R<%lO!+pZ!,UP;=`<%l!+p_!,[P;=`<%l!*dT!,fu&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!d%Q!d!e!3a!e!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o!q%Q!q!r!5_!r!z%Q!z!{!7V!{#R%Q#R#S!2i#S#U%Q#U#V!3a#V#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a#c%Q#c#d!5_#d#l%Q#l#m!7V#m;'S%Q;'S;=`&s<%lO%QT!/Qa&XS`POY%QYZ%lZr%Qrs%qs!Q%Q!Q![Hw![!f%Q!f!gJZ!g!hJw!h!iJZ!i#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z;'S%Q;'S;=`&s<%lO%QT!0^i&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!.y!P!Q%Q!Q![!0V![!f%Q!f!gJZ!g!hJw!h!iJZ!i!n%Q!n!o!1{!o#R%Q#R#S!2i#S#W%Q#W#XJZ#X#YJw#Y#ZJZ#Z#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!2SV&XS_POY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT!2nZ&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!0V![#R%Q#R#S!2i#S;'S%Q;'S;=`&s<%lO%QT!3fY&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S;'S%Q;'S;=`&s<%lO%QT!4]`&XS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!R!4U!R!S!4U!S!n%Q!n!o!1{!o#R%Q#R#S!3a#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!5dX&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y;'S%Q;'S;=`&s<%lO%QT!6W_&XS_POY%QYZ%lZr%Qrs%qs!Q%Q!Q!Y!6P!Y!n%Q!n!o!1{!o#R%Q#R#S!5_#S#`%Q#`#a!1{#a;'S%Q;'S;=`&s<%lO%QT!7[_&XSOY%QYZ%lZr%Qrs%qs!O%Q!O!P!8Z!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QT!8`]&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i#T%Q#T#Z!9X#Z;'S%Q;'S;=`&s<%lO%QT!9^c&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#R%Q#R#S!8Z#S#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!:pi&XS_POY%QYZ%lZr%Qrs%qs!O%Q!O!P!<_!P!Q%Q!Q![!:i![!c%Q!c!i!:i!i!n%Q!n!o!1{!o!r%Q!r!sJw!s#R%Q#R#S!=i#S#T%Q#T#Z!:i#Z#`%Q#`#a!1{#a#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!<da&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!9X![!c%Q!c!i!9X!i!r%Q!r!sJw!s#T%Q#T#Z!9X#Z#d%Q#d#eJw#e;'S%Q;'S;=`&s<%lO%QT!=n]&XSOY%QYZ%lZr%Qrs%qs!Q%Q!Q![!:i![!c%Q!c!i!:i!i#T%Q#T#Z!:i#Z;'S%Q;'S;=`&s<%lO%QV!>nX#oR&XSOY%QYZ%lZr%Qrs%qs![%Q![!]!?Z!];'S%Q;'S;=`&s<%lO%QV!?bV&uR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!@OV!PR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!@lY&^Z&XSOY%QYZ%lZr%Qrs%qs!^%Q!^!_!A[!_!`+p!`;'S%Q;'S;=`&s<%lO%QU!AcX#hQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV!BVX!bR&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`;'S%Q;'S;=`&s<%lO%QV!ByY&]R&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`+p!`!a!Ci!a;'S%Q;'S;=`&s<%lO%QU!CpY#hQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`!a!A[!a;'S%Q;'S;=`&s<%lO%Q_!DiV&aX#nQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!EVX%|Z&XSOY%QYZ%lZr%Qrs%qs#]%Q#]#^!Er#^;'S%Q;'S;=`&s<%lO%QV!EwX&XSOY%QYZ%lZr%Qrs%qs#b%Q#b#c!Fd#c;'S%Q;'S;=`&s<%lO%QV!FiX&XSOY%QYZ%lZr%Qrs%qs#h%Q#h#i!GU#i;'S%Q;'S;=`&s<%lO%QV!GZX&XSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!Gv#Y;'S%Q;'S;=`&s<%lO%QV!G{X&XSOY%QYZ%lZr%Qrs%qs#f%Q#f#g!Hh#g;'S%Q;'S;=`&s<%lO%QV!HmX&XSOY%QYZ%lZr%Qrs%qs#Y%Q#Y#Z!IY#Z;'S%Q;'S;=`&s<%lO%QV!I_X&XSOY%QYZ%lZr%Qrs%qs#T%Q#T#U!Iz#U;'S%Q;'S;=`&s<%lO%QV!JPX&XSOY%QYZ%lZr%Qrs%qs#V%Q#V#W!Jl#W;'S%Q;'S;=`&s<%lO%QV!JqX&XSOY%QYZ%lZr%Qrs%qs#X%Q#X#Y!K^#Y;'S%Q;'S;=`&s<%lO%QV!KeV&sR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_!LRa&QZ&XSOY%QYZ%lZr%Qrs%qst%Qtu!Kzu!Q%Q!Q![!Kz![!c%Q!c!}!Kz!}#R%Q#R#S!Kz#S#T%Q#T#o!Kz#o;'S%Q;'S;=`&s<%lO%Q_!M_VuZ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV!M{VsR&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QU!NiX#cQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`;'S%Q;'S;=`&s<%lO%QV# ]V}R&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q_# {Z&}X#cQ&XSOY%QYZ%lZr%Qrs%qs!_%Q!_!`6e!`#p%Q#p#q#!n#q;'S%Q;'S;=`&s<%lO%QU#!uV#dQ&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QV##cV|R&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%QT#$PV#tP&XSOY%QYZ%lZr%Qrs%qs;'S%Q;'S;=`&s<%lO%Q",
	  tokenizers: [0, 1, 2, 3],
	  topRules: {"Program":[0,3],"ClassContent":[1,193]},
	  dynamicPrecedences: {"27":1,"231":-1,"242":-1},
	  specialized: [{term: 230, get: (value) => spec_identifier[value] || -1}],
	  tokenPrec: 6995
	});

	var _a;
	/**
	Node prop stored in a parser's top syntax node to provide the
	facet that stores language-specific data for that language.
	*/
	const languageDataProp = /*@__PURE__*/new NodeProp();
	/**
	Helper function to define a facet (to be added to the top syntax
	node(s) for a language via
	[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
	used to associate language data with the language. You
	probably only need this when subclassing
	[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
	*/
	function defineLanguageFacet(baseData) {
	    return Facet.define({
	        combine: baseData ? values => values.concat(baseData) : undefined
	    });
	}
	/**
	Syntax node prop used to register sublanguages. Should be added to
	the top level node type for the language.
	*/
	const sublanguageProp = /*@__PURE__*/new NodeProp();
	/**
	A language object manages parsing and per-language
	[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
	managed as a [Lezer](https://lezer.codemirror.net) tree. The class
	can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
	subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
	via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
	for stream parsers.
	*/
	class Language {
	    /**
	    Construct a language object. If you need to invoke this
	    directly, first define a data facet with
	    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
	    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
	    to the language's outer syntax node.
	    */
	    constructor(
	    /**
	    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
	    used for this language.
	    */
	    data, parser, extraExtensions = [], 
	    /**
	    A language name.
	    */
	    name = "") {
	        this.data = data;
	        this.name = name;
	        // Kludge to define EditorState.tree as a debugging helper,
	        // without the EditorState package actually knowing about
	        // languages and lezer trees.
	        if (!EditorState.prototype.hasOwnProperty("tree"))
	            Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
	        this.parser = parser;
	        this.extension = [
	            language.of(this),
	            EditorState.languageData.of((state, pos, side) => {
	                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
	                if (!data)
	                    return [];
	                let base = state.facet(data), sub = top.type.prop(sublanguageProp);
	                if (sub) {
	                    let innerNode = top.resolve(pos - top.from, side);
	                    for (let sublang of sub)
	                        if (sublang.test(innerNode, state)) {
	                            let data = state.facet(sublang.facet);
	                            return sublang.type == "replace" ? data : data.concat(base);
	                        }
	                }
	                return base;
	            })
	        ].concat(extraExtensions);
	    }
	    /**
	    Query whether this language is active at the given position.
	    */
	    isActiveAt(state, pos, side = -1) {
	        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
	    }
	    /**
	    Find the document regions that were parsed using this language.
	    The returned regions will _include_ any nested languages rooted
	    in this language, when those exist.
	    */
	    findRegions(state) {
	        let lang = state.facet(language);
	        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
	            return [{ from: 0, to: state.doc.length }];
	        if (!lang || !lang.allowsNesting)
	            return [];
	        let result = [];
	        let explore = (tree, from) => {
	            if (tree.prop(languageDataProp) == this.data) {
	                result.push({ from, to: from + tree.length });
	                return;
	            }
	            let mount = tree.prop(NodeProp.mounted);
	            if (mount) {
	                if (mount.tree.prop(languageDataProp) == this.data) {
	                    if (mount.overlay)
	                        for (let r of mount.overlay)
	                            result.push({ from: r.from + from, to: r.to + from });
	                    else
	                        result.push({ from: from, to: from + tree.length });
	                    return;
	                }
	                else if (mount.overlay) {
	                    let size = result.length;
	                    explore(mount.tree, mount.overlay[0].from + from);
	                    if (result.length > size)
	                        return;
	                }
	            }
	            for (let i = 0; i < tree.children.length; i++) {
	                let ch = tree.children[i];
	                if (ch instanceof Tree)
	                    explore(ch, tree.positions[i] + from);
	            }
	        };
	        explore(syntaxTree(state), 0);
	        return result;
	    }
	    /**
	    Indicates whether this language allows nested languages. The
	    default implementation returns true.
	    */
	    get allowsNesting() { return true; }
	}
	/**
	@internal
	*/
	Language.setState = /*@__PURE__*/StateEffect.define();
	function topNodeAt(state, pos, side) {
	    let topLang = state.facet(language), tree = syntaxTree(state).topNode;
	    if (!topLang || topLang.allowsNesting) {
	        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
	            if (node.type.isTop)
	                tree = node;
	    }
	    return tree;
	}
	/**
	A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer
	[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)
	parsers.
	*/
	class LRLanguage extends Language {
	    constructor(data, parser, name) {
	        super(data, parser, [], name);
	        this.parser = parser;
	    }
	    /**
	    Define a language from a parser.
	    */
	    static define(spec) {
	        let data = defineLanguageFacet(spec.languageData);
	        return new LRLanguage(data, spec.parser.configure({
	            props: [languageDataProp.add(type => type.isTop ? data : undefined)]
	        }), spec.name);
	    }
	    /**
	    Create a new instance of this language with a reconfigured
	    version of its parser and optionally a new name.
	    */
	    configure(options, name) {
	        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);
	    }
	    get allowsNesting() { return this.parser.hasWrappers(); }
	}
	/**
	Get the syntax tree for a state, which is the current (possibly
	incomplete) parse tree of the active
	[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
	language available.
	*/
	function syntaxTree(state) {
	    let field = state.field(Language.state, false);
	    return field ? field.tree : Tree.empty;
	}
	/**
	Lezer-style
	[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
	object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
	*/
	class DocInput {
	    /**
	    Create an input object for the given document.
	    */
	    constructor(doc) {
	        this.doc = doc;
	        this.cursorPos = 0;
	        this.string = "";
	        this.cursor = doc.iter();
	    }
	    get length() { return this.doc.length; }
	    syncTo(pos) {
	        this.string = this.cursor.next(pos - this.cursorPos).value;
	        this.cursorPos = pos + this.string.length;
	        return this.cursorPos - this.string.length;
	    }
	    chunk(pos) {
	        this.syncTo(pos);
	        return this.string;
	    }
	    get lineChunks() { return true; }
	    read(from, to) {
	        let stringStart = this.cursorPos - this.string.length;
	        if (from < stringStart || to >= this.cursorPos)
	            return this.doc.sliceString(from, to);
	        else
	            return this.string.slice(from - stringStart, to - stringStart);
	    }
	}
	let currentContext = null;
	/**
	A parse context provided to parsers working on the editor content.
	*/
	class ParseContext {
	    constructor(parser, 
	    /**
	    The current editor state.
	    */
	    state, 
	    /**
	    Tree fragments that can be reused by incremental re-parses.
	    */
	    fragments = [], 
	    /**
	    @internal
	    */
	    tree, 
	    /**
	    @internal
	    */
	    treeLen, 
	    /**
	    The current editor viewport (or some overapproximation
	    thereof). Intended to be used for opportunistically avoiding
	    work (in which case
	    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
	    should be called to make sure the parser is restarted when the
	    skipped region becomes visible).
	    */
	    viewport, 
	    /**
	    @internal
	    */
	    skipped, 
	    /**
	    This is where skipping parsers can register a promise that,
	    when resolved, will schedule a new parse. It is cleared when
	    the parse worker picks up the promise. @internal
	    */
	    scheduleOn) {
	        this.parser = parser;
	        this.state = state;
	        this.fragments = fragments;
	        this.tree = tree;
	        this.treeLen = treeLen;
	        this.viewport = viewport;
	        this.skipped = skipped;
	        this.scheduleOn = scheduleOn;
	        this.parse = null;
	        /**
	        @internal
	        */
	        this.tempSkipped = [];
	    }
	    /**
	    @internal
	    */
	    static create(parser, state, viewport) {
	        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
	    }
	    startParse() {
	        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
	    }
	    /**
	    @internal
	    */
	    work(until, upto) {
	        if (upto != null && upto >= this.state.doc.length)
	            upto = undefined;
	        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
	            this.takeTree();
	            return true;
	        }
	        return this.withContext(() => {
	            var _a;
	            if (typeof until == "number") {
	                let endTime = Date.now() + until;
	                until = () => Date.now() > endTime;
	            }
	            if (!this.parse)
	                this.parse = this.startParse();
	            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
	                upto < this.state.doc.length)
	                this.parse.stopAt(upto);
	            for (;;) {
	                let done = this.parse.advance();
	                if (done) {
	                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
	                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
	                    this.tree = done;
	                    this.parse = null;
	                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
	                        this.parse = this.startParse();
	                    else
	                        return true;
	                }
	                if (until())
	                    return false;
	            }
	        });
	    }
	    /**
	    @internal
	    */
	    takeTree() {
	        let pos, tree;
	        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
	            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
	                this.parse.stopAt(pos);
	            this.withContext(() => { while (!(tree = this.parse.advance())) { } });
	            this.treeLen = pos;
	            this.tree = tree;
	            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
	            this.parse = null;
	        }
	    }
	    withContext(f) {
	        let prev = currentContext;
	        currentContext = this;
	        try {
	            return f();
	        }
	        finally {
	            currentContext = prev;
	        }
	    }
	    withoutTempSkipped(fragments) {
	        for (let r; r = this.tempSkipped.pop();)
	            fragments = cutFragments(fragments, r.from, r.to);
	        return fragments;
	    }
	    /**
	    @internal
	    */
	    changes(changes, newState) {
	        let { fragments, tree, treeLen, viewport, skipped } = this;
	        this.takeTree();
	        if (!changes.empty) {
	            let ranges = [];
	            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
	            fragments = TreeFragment.applyChanges(fragments, ranges);
	            tree = Tree.empty;
	            treeLen = 0;
	            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
	            if (this.skipped.length) {
	                skipped = [];
	                for (let r of this.skipped) {
	                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
	                    if (from < to)
	                        skipped.push({ from, to });
	                }
	            }
	        }
	        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
	    }
	    /**
	    @internal
	    */
	    updateViewport(viewport) {
	        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
	            return false;
	        this.viewport = viewport;
	        let startLen = this.skipped.length;
	        for (let i = 0; i < this.skipped.length; i++) {
	            let { from, to } = this.skipped[i];
	            if (from < viewport.to && to > viewport.from) {
	                this.fragments = cutFragments(this.fragments, from, to);
	                this.skipped.splice(i--, 1);
	            }
	        }
	        if (this.skipped.length >= startLen)
	            return false;
	        this.reset();
	        return true;
	    }
	    /**
	    @internal
	    */
	    reset() {
	        if (this.parse) {
	            this.takeTree();
	            this.parse = null;
	        }
	    }
	    /**
	    Notify the parse scheduler that the given region was skipped
	    because it wasn't in view, and the parse should be restarted
	    when it comes into view.
	    */
	    skipUntilInView(from, to) {
	        this.skipped.push({ from, to });
	    }
	    /**
	    Returns a parser intended to be used as placeholder when
	    asynchronously loading a nested parser. It'll skip its input and
	    mark it as not-really-parsed, so that the next update will parse
	    it again.
	    
	    When `until` is given, a reparse will be scheduled when that
	    promise resolves.
	    */
	    static getSkippingParser(until) {
	        return new class extends Parser {
	            createParse(input, fragments, ranges) {
	                let from = ranges[0].from, to = ranges[ranges.length - 1].to;
	                let parser = {
	                    parsedPos: from,
	                    advance() {
	                        let cx = currentContext;
	                        if (cx) {
	                            for (let r of ranges)
	                                cx.tempSkipped.push(r);
	                            if (until)
	                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
	                        }
	                        this.parsedPos = to;
	                        return new Tree(NodeType.none, [], [], to - from);
	                    },
	                    stoppedAt: null,
	                    stopAt() { }
	                };
	                return parser;
	            }
	        };
	    }
	    /**
	    @internal
	    */
	    isDone(upto) {
	        upto = Math.min(upto, this.state.doc.length);
	        let frags = this.fragments;
	        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
	    }
	    /**
	    Get the context for the current parse, or `null` if no editor
	    parse is in progress.
	    */
	    static get() { return currentContext; }
	}
	function cutFragments(fragments, from, to) {
	    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
	}
	class LanguageState {
	    constructor(
	    // A mutable parse state that is used to preserve work done during
	    // the lifetime of a state when moving to the next state.
	    context) {
	        this.context = context;
	        this.tree = context.tree;
	    }
	    apply(tr) {
	        if (!tr.docChanged && this.tree == this.context.tree)
	            return this;
	        let newCx = this.context.changes(tr.changes, tr.state);
	        // If the previous parse wasn't done, go forward only up to its
	        // end position or the end of the viewport, to avoid slowing down
	        // state updates with parse work beyond the viewport.
	        let upto = this.context.treeLen == tr.startState.doc.length ? undefined
	            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
	        if (!newCx.work(20 /* Work.Apply */, upto))
	            newCx.takeTree();
	        return new LanguageState(newCx);
	    }
	    static init(state) {
	        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);
	        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
	        if (!parseState.work(20 /* Work.Apply */, vpTo))
	            parseState.takeTree();
	        return new LanguageState(parseState);
	    }
	}
	Language.state = /*@__PURE__*/StateField.define({
	    create: LanguageState.init,
	    update(value, tr) {
	        for (let e of tr.effects)
	            if (e.is(Language.setState))
	                return e.value;
	        if (tr.startState.facet(language) != tr.state.facet(language))
	            return LanguageState.init(tr.state);
	        return value.apply(tr);
	    }
	});
	let requestIdle = (callback) => {
	    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);
	    return () => clearTimeout(timeout);
	};
	if (typeof requestIdleCallback != "undefined")
	    requestIdle = (callback) => {
	        let idle = -1, timeout = setTimeout(() => {
	            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });
	        }, 100 /* Work.MinPause */);
	        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
	    };
	const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
	    ? () => navigator.scheduling.isInputPending() : null;
	const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
	    constructor(view) {
	        this.view = view;
	        this.working = null;
	        this.workScheduled = 0;
	        // End of the current time chunk
	        this.chunkEnd = -1;
	        // Milliseconds of budget left for this chunk
	        this.chunkBudget = -1;
	        this.work = this.work.bind(this);
	        this.scheduleWork();
	    }
	    update(update) {
	        let cx = this.view.state.field(Language.state).context;
	        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
	            this.scheduleWork();
	        if (update.docChanged || update.selectionSet) {
	            if (this.view.hasFocus)
	                this.chunkBudget += 50 /* Work.ChangeBonus */;
	            this.scheduleWork();
	        }
	        this.checkAsyncSchedule(cx);
	    }
	    scheduleWork() {
	        if (this.working)
	            return;
	        let { state } = this.view, field = state.field(Language.state);
	        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
	            this.working = requestIdle(this.work);
	    }
	    work(deadline) {
	        this.working = null;
	        let now = Date.now();
	        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
	            this.chunkEnd = now + 30000 /* Work.ChunkTime */;
	            this.chunkBudget = 3000 /* Work.ChunkBudget */;
	        }
	        if (this.chunkBudget <= 0)
	            return; // No more budget
	        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
	        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))
	            return;
	        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);
	        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
	        let done = field.context.work(() => {
	            return isInputPending && isInputPending() || Date.now() > endTime;
	        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));
	        this.chunkBudget -= Date.now() - now;
	        if (done || this.chunkBudget <= 0) {
	            field.context.takeTree();
	            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
	        }
	        if (this.chunkBudget > 0 && !(done && !viewportFirst))
	            this.scheduleWork();
	        this.checkAsyncSchedule(field.context);
	    }
	    checkAsyncSchedule(cx) {
	        if (cx.scheduleOn) {
	            this.workScheduled++;
	            cx.scheduleOn
	                .then(() => this.scheduleWork())
	                .catch(err => logException(this.view.state, err))
	                .then(() => this.workScheduled--);
	            cx.scheduleOn = null;
	        }
	    }
	    destroy() {
	        if (this.working)
	            this.working();
	    }
	    isWorking() {
	        return !!(this.working || this.workScheduled > 0);
	    }
	}, {
	    eventHandlers: { focus() { this.scheduleWork(); } }
	});
	/**
	The facet used to associate a language with an editor state. Used
	by `Language` object's `extension` property (so you don't need to
	manually wrap your languages in this). Can be used to access the
	current language on a state.
	*/
	const language = /*@__PURE__*/Facet.define({
	    combine(languages) { return languages.length ? languages[0] : null; },
	    enables: language => [
	        Language.state,
	        parseWorker,
	        EditorView.contentAttributes.compute([language], state => {
	            let lang = state.facet(language);
	            return lang && lang.name ? { "data-language": lang.name } : {};
	        })
	    ]
	});
	/**
	This class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an
	optional set of supporting extensions. Language packages are
	encouraged to export a function that optionally takes a
	configuration object and returns a `LanguageSupport` instance, as
	the main way for client code to use the package.
	*/
	class LanguageSupport {
	    /**
	    Create a language support object.
	    */
	    constructor(
	    /**
	    The language object.
	    */
	    language, 
	    /**
	    An optional set of supporting extensions. When nesting a
	    language in another language, the outer language is encouraged
	    to include the supporting extensions for its inner languages
	    in its own set of support extensions.
	    */
	    support = []) {
	        this.language = language;
	        this.support = support;
	        this.extension = [language, support];
	    }
	}

	/**
	Facet that defines a way to provide a function that computes the
	appropriate indentation depth, as a column number (see
	[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
	line. A return value of `null` indicates no indentation can be
	determined, and the line should inherit the indentation of the one
	above it. A return value of `undefined` defers to the next indent
	service.
	*/
	const indentService = /*@__PURE__*/Facet.define();
	/**
	Facet for overriding the unit by which indentation happens. Should
	be a string consisting either entirely of the same whitespace
	character. When not set, this defaults to 2 spaces.
	*/
	const indentUnit = /*@__PURE__*/Facet.define({
	    combine: values => {
	        if (!values.length)
	            return "  ";
	        let unit = values[0];
	        if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
	            throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
	        return unit;
	    }
	});
	/**
	Return the _column width_ of an indent unit in the state.
	Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
	facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
	contains tabs.
	*/
	function getIndentUnit(state) {
	    let unit = state.facet(indentUnit);
	    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
	}
	/**
	Create an indentation string that covers columns 0 to `cols`.
	Will use tabs for as much of the columns as possible when the
	[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
	tabs.
	*/
	function indentString(state, cols) {
	    let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
	    if (ch == "\t") {
	        while (cols >= ts) {
	            result += "\t";
	            cols -= ts;
	        }
	        ch = " ";
	    }
	    for (let i = 0; i < cols; i++)
	        result += ch;
	    return result;
	}
	/**
	Get the indentation, as a column number, at the given position.
	Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
	that are registered, and if none of those return an indentation,
	this will check the syntax tree for the [indent node
	prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
	number when an indentation could be determined, and null
	otherwise.
	*/
	function getIndentation(context, pos) {
	    if (context instanceof EditorState)
	        context = new IndentContext(context);
	    for (let service of context.state.facet(indentService)) {
	        let result = service(context, pos);
	        if (result !== undefined)
	            return result;
	    }
	    let tree = syntaxTree(context.state);
	    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
	}
	/**
	Indentation contexts are used when calling [indentation
	services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
	useful in indentation logic, and can selectively override the
	indentation reported for some lines.
	*/
	class IndentContext {
	    /**
	    Create an indent context.
	    */
	    constructor(
	    /**
	    The editor state.
	    */
	    state, 
	    /**
	    @internal
	    */
	    options = {}) {
	        this.state = state;
	        this.options = options;
	        this.unit = getIndentUnit(state);
	    }
	    /**
	    Get a description of the line at the given position, taking
	    [simulated line
	    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
	    into account. If there is such a break at `pos`, the `bias`
	    argument determines whether the part of the line line before or
	    after the break is used.
	    */
	    lineAt(pos, bias = 1) {
	        let line = this.state.doc.lineAt(pos);
	        let { simulateBreak, simulateDoubleBreak } = this.options;
	        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
	            if (simulateDoubleBreak && simulateBreak == pos)
	                return { text: "", from: pos };
	            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
	                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
	            else
	                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
	        }
	        return line;
	    }
	    /**
	    Get the text directly after `pos`, either the entire line
	    or the next 100 characters, whichever is shorter.
	    */
	    textAfterPos(pos, bias = 1) {
	        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
	            return "";
	        let { text, from } = this.lineAt(pos, bias);
	        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
	    }
	    /**
	    Find the column for the given position.
	    */
	    column(pos, bias = 1) {
	        let { text, from } = this.lineAt(pos, bias);
	        let result = this.countColumn(text, pos - from);
	        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
	        if (override > -1)
	            result += override - this.countColumn(text, text.search(/\S|$/));
	        return result;
	    }
	    /**
	    Find the column position (taking tabs into account) of the given
	    position in the given string.
	    */
	    countColumn(line, pos = line.length) {
	        return countColumn(line, this.state.tabSize, pos);
	    }
	    /**
	    Find the indentation column of the line at the given point.
	    */
	    lineIndent(pos, bias = 1) {
	        let { text, from } = this.lineAt(pos, bias);
	        let override = this.options.overrideIndentation;
	        if (override) {
	            let overriden = override(from);
	            if (overriden > -1)
	                return overriden;
	        }
	        return this.countColumn(text, text.search(/\S|$/));
	    }
	    /**
	    Returns the [simulated line
	    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
	    for this context, if any.
	    */
	    get simulatedBreak() {
	        return this.options.simulateBreak || null;
	    }
	}
	/**
	A syntax tree node prop used to associate indentation strategies
	with node types. Such a strategy is a function from an indentation
	context to a column number (see also
	[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
	indicates that no definitive indentation can be determined.
	*/
	const indentNodeProp = /*@__PURE__*/new NodeProp();
	// Compute the indentation for a given position from the syntax tree.
	function syntaxIndentation(cx, ast, pos) {
	    let stack = ast.resolveStack(pos);
	    let inner = stack.node.enterUnfinishedNodesBefore(pos);
	    if (inner != stack.node) {
	        let add = [];
	        for (let cur = inner; cur != stack.node; cur = cur.parent)
	            add.push(cur);
	        for (let i = add.length - 1; i >= 0; i--)
	            stack = { node: add[i], next: stack };
	    }
	    return indentFor(stack, cx, pos);
	}
	function indentFor(stack, cx, pos) {
	    for (let cur = stack; cur; cur = cur.next) {
	        let strategy = indentStrategy(cur.node);
	        if (strategy)
	            return strategy(TreeIndentContext.create(cx, pos, cur));
	    }
	    return 0;
	}
	function ignoreClosed(cx) {
	    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
	}
	function indentStrategy(tree) {
	    let strategy = tree.type.prop(indentNodeProp);
	    if (strategy)
	        return strategy;
	    let first = tree.firstChild, close;
	    if (first && (close = first.type.prop(NodeProp.closedBy))) {
	        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
	        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
	    }
	    return tree.parent == null ? topIndent : null;
	}
	function topIndent() { return 0; }
	/**
	Objects of this type provide context information and helper
	methods to indentation functions registered on syntax nodes.
	*/
	class TreeIndentContext extends IndentContext {
	    constructor(base, 
	    /**
	    The position at which indentation is being computed.
	    */
	    pos, 
	    /**
	    @internal
	    */
	    context) {
	        super(base.state, base.options);
	        this.base = base;
	        this.pos = pos;
	        this.context = context;
	    }
	    /**
	    The syntax tree node to which the indentation strategy
	    applies.
	    */
	    get node() { return this.context.node; }
	    /**
	    @internal
	    */
	    static create(base, pos, context) {
	        return new TreeIndentContext(base, pos, context);
	    }
	    /**
	    Get the text directly after `this.pos`, either the entire line
	    or the next 100 characters, whichever is shorter.
	    */
	    get textAfter() {
	        return this.textAfterPos(this.pos);
	    }
	    /**
	    Get the indentation at the reference line for `this.node`, which
	    is the line on which it starts, unless there is a node that is
	    _not_ a parent of this node covering the start of that line. If
	    so, the line at the start of that node is tried, again skipping
	    on if it is covered by another such node.
	    */
	    get baseIndent() {
	        return this.baseIndentFor(this.node);
	    }
	    /**
	    Get the indentation for the reference line of the given node
	    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
	    */
	    baseIndentFor(node) {
	        let line = this.state.doc.lineAt(node.from);
	        // Skip line starts that are covered by a sibling (or cousin, etc)
	        for (;;) {
	            let atBreak = node.resolve(line.from);
	            while (atBreak.parent && atBreak.parent.from == atBreak.from)
	                atBreak = atBreak.parent;
	            if (isParent(atBreak, node))
	                break;
	            line = this.state.doc.lineAt(atBreak.from);
	        }
	        return this.lineIndent(line.from);
	    }
	    /**
	    Continue looking for indentations in the node's parent nodes,
	    and return the result of that.
	    */
	    continue() {
	        return indentFor(this.context.next, this.base, this.pos);
	    }
	}
	function isParent(parent, of) {
	    for (let cur = of; cur; cur = cur.parent)
	        if (parent == cur)
	            return true;
	    return false;
	}
	// Check whether a delimited node is aligned (meaning there are
	// non-skipped nodes on the same line as the opening delimiter). And
	// if so, return the opening token.
	function bracketedAligned(context) {
	    let tree = context.node;
	    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
	    if (!openToken)
	        return null;
	    let sim = context.options.simulateBreak;
	    let openLine = context.state.doc.lineAt(openToken.from);
	    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
	    for (let pos = openToken.to;;) {
	        let next = tree.childAfter(pos);
	        if (!next || next == last)
	            return null;
	        if (!next.type.isSkipped)
	            return next.from < lineEnd ? openToken : null;
	        pos = next.to;
	    }
	}
	/**
	An indentation strategy for delimited (usually bracketed) nodes.
	Will, by default, indent one unit more than the parent's base
	indent unless the line starts with a closing token. When `align`
	is true and there are non-skipped nodes on the node's opening
	line, the content of the node will be aligned with the end of the
	opening node, like this:

	    foo(bar,
	        baz)
	*/
	function delimitedIndent({ closing, align = true, units = 1 }) {
	    return (context) => delimitedStrategy(context, align, units, closing);
	}
	function delimitedStrategy(context, align, units, closing, closedAt) {
	    let after = context.textAfter, space = after.match(/^\s*/)[0].length;
	    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
	    let aligned = align ? bracketedAligned(context) : null;
	    if (aligned)
	        return closed ? context.column(aligned.from) : context.column(aligned.to);
	    return context.baseIndent + (closed ? 0 : context.unit * units);
	}
	/**
	An indentation strategy that aligns a node's content to its base
	indentation.
	*/
	const flatIndent = (context) => context.baseIndent;
	/**
	Creates an indentation strategy that, by default, indents
	continued lines one unit more than the node's base indentation.
	You can provide `except` to prevent indentation of lines that
	match a pattern (for example `/^else\b/` in `if`/`else`
	constructs), and you can change the amount of units used with the
	`units` option.
	*/
	function continuedIndent({ except, units = 1 } = {}) {
	    return (context) => {
	        let matchExcept = except && except.test(context.textAfter);
	        return context.baseIndent + (matchExcept ? 0 : units * context.unit);
	    };
	}
	const DontIndentBeyond = 200;
	/**
	Enables reindentation on input. When a language defines an
	`indentOnInput` field in its [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
	expression, the line at the cursor will be reindented whenever new
	text is typed and the input from the start of the line up to the
	cursor matches that regexp.

	To avoid unneccesary reindents, it is recommended to start the
	regexp with `^` (usually followed by `\s*`), and end it with `$`.
	For example, `/^\s*\}$/` will reindent when a closing brace is
	added at the start of a line.
	*/
	function indentOnInput() {
	    return EditorState.transactionFilter.of(tr => {
	        if (!tr.docChanged || !tr.isUserEvent("input.type") && !tr.isUserEvent("input.complete"))
	            return tr;
	        let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
	        if (!rules.length)
	            return tr;
	        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
	        if (head > line.from + DontIndentBeyond)
	            return tr;
	        let lineStart = doc.sliceString(line.from, head);
	        if (!rules.some(r => r.test(lineStart)))
	            return tr;
	        let { state } = tr, last = -1, changes = [];
	        for (let { head } of state.selection.ranges) {
	            let line = state.doc.lineAt(head);
	            if (line.from == last)
	                continue;
	            last = line.from;
	            let indent = getIndentation(state, line.from);
	            if (indent == null)
	                continue;
	            let cur = /^\s*/.exec(line.text)[0];
	            let norm = indentString(state, indent);
	            if (cur != norm)
	                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
	        }
	        return changes.length ? [tr, { changes, sequential: true }] : tr;
	    });
	}

	/**
	A facet that registers a code folding service. When called with
	the extent of a line, such a function should return a foldable
	range that starts on that line (but continues beyond it), if one
	can be found.
	*/
	const foldService = /*@__PURE__*/Facet.define();
	/**
	This node prop is used to associate folding information with
	syntax node types. Given a syntax node, it should check whether
	that tree is foldable and return the range that can be collapsed
	when it is.
	*/
	const foldNodeProp = /*@__PURE__*/new NodeProp();
	/**
	[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
	the first and the last child of a syntax node. Useful for nodes
	that start and end with delimiters.
	*/
	function foldInside(node) {
	    let first = node.firstChild, last = node.lastChild;
	    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;
	}
	function syntaxFolding(state, start, end) {
	    let tree = syntaxTree(state);
	    if (tree.length < end)
	        return null;
	    let stack = tree.resolveStack(end, 1);
	    let found = null;
	    for (let iter = stack; iter; iter = iter.next) {
	        let cur = iter.node;
	        if (cur.to <= end || cur.from > end)
	            continue;
	        if (found && cur.from < start)
	            break;
	        let prop = cur.type.prop(foldNodeProp);
	        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {
	            let value = prop(cur, state);
	            if (value && value.from <= end && value.from >= start && value.to > end)
	                found = value;
	        }
	    }
	    return found;
	}
	function isUnfinished(node) {
	    let ch = node.lastChild;
	    return ch && ch.to == node.to && ch.type.isError;
	}
	/**
	Check whether the given line is foldable. First asks any fold
	services registered through
	[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
	a result, tries to query the [fold node
	prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
	of the line.
	*/
	function foldable(state, lineStart, lineEnd) {
	    for (let service of state.facet(foldService)) {
	        let result = service(state, lineStart, lineEnd);
	        if (result)
	            return result;
	    }
	    return syntaxFolding(state, lineStart, lineEnd);
	}
	function mapRange(range, mapping) {
	    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
	    return from >= to ? undefined : { from, to };
	}
	/**
	State effect that can be attached to a transaction to fold the
	given range. (You probably only need this in exceptional
	circumstances—usually you'll just want to let
	[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold
	gutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)
	*/
	const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
	/**
	State effect that unfolds the given range (if it was folded).
	*/
	const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
	function selectedLines(view) {
	    let lines = [];
	    for (let { head } of view.state.selection.ranges) {
	        if (lines.some(l => l.from <= head && l.to >= head))
	            continue;
	        lines.push(view.lineBlockAt(head));
	    }
	    return lines;
	}
	/**
	The state field that stores the folded ranges (as a [decoration
	set](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to
	[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and
	[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold
	state.
	*/
	const foldState = /*@__PURE__*/StateField.define({
	    create() {
	        return Decoration.none;
	    },
	    update(folded, tr) {
	        folded = folded.map(tr.changes);
	        for (let e of tr.effects) {
	            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {
	                let { preparePlaceholder } = tr.state.facet(foldConfig);
	                let widget = !preparePlaceholder ? foldWidget :
	                    Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });
	                folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });
	            }
	            else if (e.is(unfoldEffect)) {
	                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
	                    filterFrom: e.value.from, filterTo: e.value.to });
	            }
	        }
	        // Clear folded ranges that cover the selection head
	        if (tr.selection) {
	            let onSelection = false, { head } = tr.selection.main;
	            folded.between(head, head, (a, b) => { if (a < head && b > head)
	                onSelection = true; });
	            if (onSelection)
	                folded = folded.update({
	                    filterFrom: head,
	                    filterTo: head,
	                    filter: (a, b) => b <= head || a >= head
	                });
	        }
	        return folded;
	    },
	    provide: f => EditorView.decorations.from(f),
	    toJSON(folded, state) {
	        let ranges = [];
	        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });
	        return ranges;
	    },
	    fromJSON(value) {
	        if (!Array.isArray(value) || value.length % 2)
	            throw new RangeError("Invalid JSON for fold state");
	        let ranges = [];
	        for (let i = 0; i < value.length;) {
	            let from = value[i++], to = value[i++];
	            if (typeof from != "number" || typeof to != "number")
	                throw new RangeError("Invalid JSON for fold state");
	            ranges.push(foldWidget.range(from, to));
	        }
	        return Decoration.set(ranges, true);
	    }
	});
	function findFold(state, from, to) {
	    var _a;
	    let found = null;
	    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
	        if (!found || found.from > from)
	            found = { from, to };
	    });
	    return found;
	}
	function foldExists(folded, from, to) {
	    let found = false;
	    folded.between(from, from, (a, b) => { if (a == from && b == to)
	        found = true; });
	    return found;
	}
	function maybeEnable(state, other) {
	    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
	}
	/**
	Fold the lines that are selected, if possible.
	*/
	const foldCode = view => {
	    for (let line of selectedLines(view)) {
	        let range = foldable(view.state, line.from, line.to);
	        if (range) {
	            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
	            return true;
	        }
	    }
	    return false;
	};
	/**
	Unfold folded ranges on selected lines.
	*/
	const unfoldCode = view => {
	    if (!view.state.field(foldState, false))
	        return false;
	    let effects = [];
	    for (let line of selectedLines(view)) {
	        let folded = findFold(view.state, line.from, line.to);
	        if (folded)
	            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
	    }
	    if (effects.length)
	        view.dispatch({ effects });
	    return effects.length > 0;
	};
	function announceFold(view, range, fold = true) {
	    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
	    return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
	}
	/**
	Fold all top-level foldable ranges. Note that, in most cases,
	folding information will depend on the [syntax
	tree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work
	reliably when the document hasn't been fully parsed (either
	because the editor state was only just initialized, or because the
	document is so big that the parser decided not to parse it
	entirely).
	*/
	const foldAll = view => {
	    let { state } = view, effects = [];
	    for (let pos = 0; pos < state.doc.length;) {
	        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);
	        if (range)
	            effects.push(foldEffect.of(range));
	        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;
	    }
	    if (effects.length)
	        view.dispatch({ effects: maybeEnable(view.state, effects) });
	    return !!effects.length;
	};
	/**
	Unfold all folded code.
	*/
	const unfoldAll = view => {
	    let field = view.state.field(foldState, false);
	    if (!field || !field.size)
	        return false;
	    let effects = [];
	    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
	    view.dispatch({ effects });
	    return true;
	};
	/**
	Default fold-related key bindings.

	 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).
	 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).
	 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).
	 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).
	*/
	const foldKeymap = [
	    { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
	    { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
	    { key: "Ctrl-Alt-[", run: foldAll },
	    { key: "Ctrl-Alt-]", run: unfoldAll }
	];
	const defaultConfig = {
	    placeholderDOM: null,
	    preparePlaceholder: null,
	    placeholderText: "…"
	};
	const foldConfig = /*@__PURE__*/Facet.define({
	    combine(values) { return combineConfig(values, defaultConfig); }
	});
	/**
	Create an extension that configures code folding.
	*/
	function codeFolding(config) {
	    let result = [foldState, baseTheme$1$1];
	    if (config)
	        result.push(foldConfig.of(config));
	    return result;
	}
	function widgetToDOM(view, prepared) {
	    let { state } = view, conf = state.facet(foldConfig);
	    let onclick = (event) => {
	        let line = view.lineBlockAt(view.posAtDOM(event.target));
	        let folded = findFold(view.state, line.from, line.to);
	        if (folded)
	            view.dispatch({ effects: unfoldEffect.of(folded) });
	        event.preventDefault();
	    };
	    if (conf.placeholderDOM)
	        return conf.placeholderDOM(view, onclick, prepared);
	    let element = document.createElement("span");
	    element.textContent = conf.placeholderText;
	    element.setAttribute("aria-label", state.phrase("folded code"));
	    element.title = state.phrase("unfold");
	    element.className = "cm-foldPlaceholder";
	    element.onclick = onclick;
	    return element;
	}
	const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
	        toDOM(view) { return widgetToDOM(view, null); }
	    } });
	class PreparedFoldWidget extends WidgetType {
	    constructor(value) {
	        super();
	        this.value = value;
	    }
	    eq(other) { return this.value == other.value; }
	    toDOM(view) { return widgetToDOM(view, this.value); }
	}
	const foldGutterDefaults = {
	    openText: "⌄",
	    closedText: "›",
	    markerDOM: null,
	    domEventHandlers: {},
	    foldingChanged: () => false
	};
	class FoldMarker extends GutterMarker {
	    constructor(config, open) {
	        super();
	        this.config = config;
	        this.open = open;
	    }
	    eq(other) { return this.config == other.config && this.open == other.open; }
	    toDOM(view) {
	        if (this.config.markerDOM)
	            return this.config.markerDOM(this.open);
	        let span = document.createElement("span");
	        span.textContent = this.open ? this.config.openText : this.config.closedText;
	        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
	        return span;
	    }
	}
	/**
	Create an extension that registers a fold gutter, which shows a
	fold status indicator before foldable lines (which can be clicked
	to fold or unfold the line).
	*/
	function foldGutter(config = {}) {
	    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
	    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
	    let markers = ViewPlugin.fromClass(class {
	        constructor(view) {
	            this.from = view.viewport.from;
	            this.markers = this.buildMarkers(view);
	        }
	        update(update) {
	            if (update.docChanged || update.viewportChanged ||
	                update.startState.facet(language) != update.state.facet(language) ||
	                update.startState.field(foldState, false) != update.state.field(foldState, false) ||
	                syntaxTree(update.startState) != syntaxTree(update.state) ||
	                fullConfig.foldingChanged(update))
	                this.markers = this.buildMarkers(update.view);
	        }
	        buildMarkers(view) {
	            let builder = new RangeSetBuilder();
	            for (let line of view.viewportLineBlocks) {
	                let mark = findFold(view.state, line.from, line.to) ? canUnfold
	                    : foldable(view.state, line.from, line.to) ? canFold : null;
	                if (mark)
	                    builder.add(line.from, line.from, mark);
	            }
	            return builder.finish();
	        }
	    });
	    let { domEventHandlers } = fullConfig;
	    return [
	        markers,
	        gutter({
	            class: "cm-foldGutter",
	            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
	            initialSpacer() {
	                return new FoldMarker(fullConfig, false);
	            },
	            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {
	                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))
	                        return true;
	                    let folded = findFold(view.state, line.from, line.to);
	                    if (folded) {
	                        view.dispatch({ effects: unfoldEffect.of(folded) });
	                        return true;
	                    }
	                    let range = foldable(view.state, line.from, line.to);
	                    if (range) {
	                        view.dispatch({ effects: foldEffect.of(range) });
	                        return true;
	                    }
	                    return false;
	                } })
	        }),
	        codeFolding()
	    ];
	}
	const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-foldPlaceholder": {
	        backgroundColor: "#eee",
	        border: "1px solid #ddd",
	        color: "#888",
	        borderRadius: ".2em",
	        margin: "0 1px",
	        padding: "0 1px",
	        cursor: "pointer"
	    },
	    ".cm-foldGutter span": {
	        padding: "0 1px",
	        cursor: "pointer"
	    }
	});

	/**
	A highlight style associates CSS styles with higlighting
	[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).
	*/
	class HighlightStyle {
	    constructor(
	    /**
	    The tag styles used to create this highlight style.
	    */
	    specs, options) {
	        this.specs = specs;
	        let modSpec;
	        function def(spec) {
	            let cls = StyleModule.newName();
	            (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
	            return cls;
	        }
	        const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : undefined;
	        const scopeOpt = options.scope;
	        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data
	            : scopeOpt ? (type) => type == scopeOpt : undefined;
	        this.style = tagHighlighter(specs.map(style => ({
	            tag: style.tag,
	            class: style.class || def(Object.assign({}, style, { tag: null }))
	        })), {
	            all,
	        }).style;
	        this.module = modSpec ? new StyleModule(modSpec) : null;
	        this.themeType = options.themeType;
	    }
	    /**
	    Create a highlighter style that associates the given styles to
	    the given tags. The specs must be objects that hold a style tag
	    or array of tags in their `tag` property, and either a single
	    `class` property providing a static CSS class (for highlighter
	    that rely on external styling), or a
	    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
	    set of CSS properties (which define the styling for those tags).
	    
	    The CSS rules created for a highlighter will be emitted in the
	    order of the spec's properties. That means that for elements that
	    have multiple tags associated with them, styles defined further
	    down in the list will have a higher CSS precedence than styles
	    defined earlier.
	    */
	    static define(specs, options) {
	        return new HighlightStyle(specs, options || {});
	    }
	}
	const highlighterFacet = /*@__PURE__*/Facet.define();
	const fallbackHighlighter = /*@__PURE__*/Facet.define({
	    combine(values) { return values.length ? [values[0]] : null; }
	});
	function getHighlighters(state) {
	    let main = state.facet(highlighterFacet);
	    return main.length ? main : state.facet(fallbackHighlighter);
	}
	/**
	Wrap a highlighter in an editor extension that uses it to apply
	syntax highlighting to the editor content.

	When multiple (non-fallback) styles are provided, the styling
	applied is the union of the classes they emit.
	*/
	function syntaxHighlighting(highlighter, options) {
	    let ext = [treeHighlighter], themeType;
	    if (highlighter instanceof HighlightStyle) {
	        if (highlighter.module)
	            ext.push(EditorView.styleModule.of(highlighter.module));
	        themeType = highlighter.themeType;
	    }
	    if (options === null || options === void 0 ? void 0 : options.fallback)
	        ext.push(fallbackHighlighter.of(highlighter));
	    else if (themeType)
	        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {
	            return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
	        }));
	    else
	        ext.push(highlighterFacet.of(highlighter));
	    return ext;
	}
	class TreeHighlighter {
	    constructor(view) {
	        this.markCache = Object.create(null);
	        this.tree = syntaxTree(view.state);
	        this.decorations = this.buildDeco(view, getHighlighters(view.state));
	    }
	    update(update) {
	        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
	        let styleChange = highlighters != getHighlighters(update.startState);
	        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
	            this.decorations = this.decorations.map(update.changes);
	        }
	        else if (tree != this.tree || update.viewportChanged || styleChange) {
	            this.tree = tree;
	            this.decorations = this.buildDeco(update.view, highlighters);
	        }
	    }
	    buildDeco(view, highlighters) {
	        if (!highlighters || !this.tree.length)
	            return Decoration.none;
	        let builder = new RangeSetBuilder();
	        for (let { from, to } of view.visibleRanges) {
	            highlightTree(this.tree, highlighters, (from, to, style) => {
	                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
	            }, from, to);
	        }
	        return builder.finish();
	    }
	}
	const treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
	    decorations: v => v.decorations
	}));
	/**
	A default highlight style (works well with light themes).
	*/
	const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
	    { tag: tags.meta,
	        color: "#404740" },
	    { tag: tags.link,
	        textDecoration: "underline" },
	    { tag: tags.heading,
	        textDecoration: "underline",
	        fontWeight: "bold" },
	    { tag: tags.emphasis,
	        fontStyle: "italic" },
	    { tag: tags.strong,
	        fontWeight: "bold" },
	    { tag: tags.strikethrough,
	        textDecoration: "line-through" },
	    { tag: tags.keyword,
	        color: "#708" },
	    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
	        color: "#219" },
	    { tag: [tags.literal, tags.inserted],
	        color: "#164" },
	    { tag: [tags.string, tags.deleted],
	        color: "#a11" },
	    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
	        color: "#e40" },
	    { tag: /*@__PURE__*/tags.definition(tags.variableName),
	        color: "#00f" },
	    { tag: /*@__PURE__*/tags.local(tags.variableName),
	        color: "#30a" },
	    { tag: [tags.typeName, tags.namespace],
	        color: "#085" },
	    { tag: tags.className,
	        color: "#167" },
	    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
	        color: "#256" },
	    { tag: /*@__PURE__*/tags.definition(tags.propertyName),
	        color: "#00c" },
	    { tag: tags.comment,
	        color: "#940" },
	    { tag: tags.invalid,
	        color: "#f00" }
	]);

	const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
	    "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
	    "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
	});
	const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
	const bracketMatchingConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            afterCursor: true,
	            brackets: DefaultBrackets,
	            maxScanDistance: DefaultScanDist,
	            renderMatch: defaultRenderMatch
	        });
	    }
	});
	const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
	function defaultRenderMatch(match) {
	    let decorations = [];
	    let mark = match.matched ? matchingMark : nonmatchingMark;
	    decorations.push(mark.range(match.start.from, match.start.to));
	    if (match.end)
	        decorations.push(mark.range(match.end.from, match.end.to));
	    return decorations;
	}
	const bracketMatchingState = /*@__PURE__*/StateField.define({
	    create() { return Decoration.none; },
	    update(deco, tr) {
	        if (!tr.docChanged && !tr.selection)
	            return deco;
	        let decorations = [];
	        let config = tr.state.facet(bracketMatchingConfig);
	        for (let range of tr.state.selection.ranges) {
	            if (!range.empty)
	                continue;
	            let match = matchBrackets(tr.state, range.head, -1, config)
	                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
	                || (config.afterCursor &&
	                    (matchBrackets(tr.state, range.head, 1, config) ||
	                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
	            if (match)
	                decorations = decorations.concat(config.renderMatch(match, tr.state));
	        }
	        return Decoration.set(decorations, true);
	    },
	    provide: f => EditorView.decorations.from(f)
	});
	const bracketMatchingUnique = [
	    bracketMatchingState,
	    baseTheme$2
	];
	/**
	Create an extension that enables bracket matching. Whenever the
	cursor is next to a bracket, that bracket and the one it matches
	are highlighted. Or, when no matching bracket is found, another
	highlighting style is used to indicate this.
	*/
	function bracketMatching(config = {}) {
	    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
	}
	/**
	When larger syntax nodes, such as HTML tags, are marked as
	opening/closing, it can be a bit messy to treat the whole node as
	a matchable bracket. This node prop allows you to define, for such
	a node, a ‘handle’—the part of the node that is highlighted, and
	that the cursor must be on to activate highlighting in the first
	place.
	*/
	const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
	function matchingNodes(node, dir, brackets) {
	    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
	    if (byProp)
	        return byProp;
	    if (node.name.length == 1) {
	        let index = brackets.indexOf(node.name);
	        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
	            return [brackets[index + dir]];
	    }
	    return null;
	}
	function findHandle(node) {
	    let hasHandle = node.type.prop(bracketMatchingHandle);
	    return hasHandle ? hasHandle(node.node) : node;
	}
	/**
	Find the matching bracket for the token at `pos`, scanning
	direction `dir`. Only the `brackets` and `maxScanDistance`
	properties are used from `config`, if given. Returns null if no
	bracket was found at `pos`, or a match result otherwise.
	*/
	function matchBrackets(state, pos, dir, config = {}) {
	    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
	    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
	    for (let cur = node; cur; cur = cur.parent) {
	        let matches = matchingNodes(cur.type, dir, brackets);
	        if (matches && cur.from < cur.to) {
	            let handle = findHandle(cur);
	            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
	                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
	        }
	    }
	    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
	}
	function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
	    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
	    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
	    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
	        do {
	            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
	                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
	                    let endHandle = findHandle(cursor);
	                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
	                }
	                else if (matchingNodes(cursor.type, dir, brackets)) {
	                    depth++;
	                }
	                else if (matchingNodes(cursor.type, -dir, brackets)) {
	                    if (depth == 0) {
	                        let endHandle = findHandle(cursor);
	                        return {
	                            start: firstToken,
	                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
	                            matched: false
	                        };
	                    }
	                    depth--;
	                }
	            }
	        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
	    return { start: firstToken, matched: false };
	}
	function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
	    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
	    let bracket = brackets.indexOf(startCh);
	    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
	        return null;
	    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
	    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
	    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
	        let text = iter.value;
	        if (dir < 0)
	            distance += text.length;
	        let basePos = pos + distance * dir;
	        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
	            let found = brackets.indexOf(text[pos]);
	            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
	                continue;
	            if ((found % 2 == 0) == (dir > 0)) {
	                depth++;
	            }
	            else if (depth == 1) { // Closing
	                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
	            }
	            else {
	                depth--;
	            }
	        }
	        if (dir > 0)
	            distance += text.length;
	    }
	    return iter.done ? { start: startToken, matched: false } : null;
	}
	const noTokens = /*@__PURE__*/Object.create(null);
	const typeArray = [NodeType.none];
	const warned = [];
	// Cache of node types by name and tags
	const byTag = /*@__PURE__*/Object.create(null);
	const defaultTable = /*@__PURE__*/Object.create(null);
	for (let [legacyName, name] of [
	    ["variable", "variableName"],
	    ["variable-2", "variableName.special"],
	    ["string-2", "string.special"],
	    ["def", "variableName.definition"],
	    ["tag", "tagName"],
	    ["attribute", "attributeName"],
	    ["type", "typeName"],
	    ["builtin", "variableName.standard"],
	    ["qualifier", "modifier"],
	    ["error", "invalid"],
	    ["header", "heading"],
	    ["property", "propertyName"]
	])
	    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
	function warnForPart(part, msg) {
	    if (warned.indexOf(part) > -1)
	        return;
	    warned.push(part);
	    console.warn(msg);
	}
	function createTokenType(extra, tagStr) {
	    let tags$1 = [];
	    for (let name of tagStr.split(" ")) {
	        let found = [];
	        for (let part of name.split(".")) {
	            let value = (extra[part] || tags[part]);
	            if (!value) {
	                warnForPart(part, `Unknown highlighting tag ${part}`);
	            }
	            else if (typeof value == "function") {
	                if (!found.length)
	                    warnForPart(part, `Modifier ${part} used at start of tag`);
	                else
	                    found = found.map(value);
	            }
	            else {
	                if (found.length)
	                    warnForPart(part, `Tag ${part} used as modifier`);
	                else
	                    found = Array.isArray(value) ? value : [value];
	            }
	        }
	        for (let tag of found)
	            tags$1.push(tag);
	    }
	    if (!tags$1.length)
	        return 0;
	    let name = tagStr.replace(/ /g, "_"), key = name + " " + tags$1.map(t => t.id);
	    let known = byTag[key];
	    if (known)
	        return known.id;
	    let type = byTag[key] = NodeType.define({
	        id: typeArray.length,
	        name,
	        props: [styleTags({ [name]: tags$1 })]
	    });
	    typeArray.push(type);
	    return type.id;
	}
	({
	    rtl: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
	    ltr: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
	    auto: /*@__PURE__*/Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
	});

	/**
	A language provider based on the [Lezer Java
	parser](https://github.com/lezer-parser/java), extended with
	highlighting and indentation information.
	*/
	const javaLanguage = /*@__PURE__*/LRLanguage.define({
	    name: "java",
	    parser: /*@__PURE__*/parser.configure({
	        props: [
	            /*@__PURE__*/indentNodeProp.add({
	                IfStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|else\b)/ }),
	                TryStatement: /*@__PURE__*/continuedIndent({ except: /^\s*({|catch|finally)\b/ }),
	                LabeledStatement: flatIndent,
	                SwitchBlock: context => {
	                    let after = context.textAfter, closed = /^\s*\}/.test(after), isCase = /^\s*(case|default)\b/.test(after);
	                    return context.baseIndent + (closed ? 0 : isCase ? 1 : 2) * context.unit;
	                },
	                Block: /*@__PURE__*/delimitedIndent({ closing: "}" }),
	                BlockComment: () => null,
	                Statement: /*@__PURE__*/continuedIndent({ except: /^{/ })
	            }),
	            /*@__PURE__*/foldNodeProp.add({
	                ["Block SwitchBlock ClassBody ElementValueArrayInitializer ModuleBody EnumBody " +
	                    "ConstructorBody InterfaceBody ArrayInitializer"]: foldInside,
	                BlockComment(tree) { return { from: tree.from + 2, to: tree.to - 2 }; }
	            })
	        ]
	    }),
	    languageData: {
	        commentTokens: { line: "//", block: { open: "/*", close: "*/" } },
	        indentOnInput: /^\s*(?:case |default:|\{|\})$/
	    }
	});
	/**
	Java language support.
	*/
	function java() {
	    return new LanguageSupport(javaLanguage);
	}

	/**
	Comment or uncomment the current selection. Will use line comments
	if available, otherwise falling back to block comments.
	*/
	const toggleComment = target => {
	    let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
	    return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
	};
	function command(f, option) {
	    return ({ state, dispatch }) => {
	        if (state.readOnly)
	            return false;
	        let tr = f(option, state);
	        if (!tr)
	            return false;
	        dispatch(state.update(tr));
	        return true;
	    };
	}
	/**
	Comment or uncomment the current selection using line comments.
	The line comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
	/**
	Comment or uncomment the current selection using block comments.
	The block comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
	/**
	Comment or uncomment the lines around the current selection using
	block comments.
	*/
	const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
	function getConfig(state, pos) {
	    let data = state.languageDataAt("commentTokens", pos);
	    return data.length ? data[0] : {};
	}
	const SearchMargin = 50;
	/**
	Determines if the given range is block-commented in the given
	state.
	*/
	function findBlockComment(state, { open, close }, from, to) {
	    let textBefore = state.sliceDoc(from - SearchMargin, from);
	    let textAfter = state.sliceDoc(to, to + SearchMargin);
	    let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
	    let beforeOff = textBefore.length - spaceBefore;
	    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
	        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
	        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
	            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
	    }
	    let startText, endText;
	    if (to - from <= 2 * SearchMargin) {
	        startText = endText = state.sliceDoc(from, to);
	    }
	    else {
	        startText = state.sliceDoc(from, from + SearchMargin);
	        endText = state.sliceDoc(to - SearchMargin, to);
	    }
	    let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
	    let endOff = endText.length - endSpace - close.length;
	    if (startText.slice(startSpace, startSpace + open.length) == open &&
	        endText.slice(endOff, endOff + close.length) == close) {
	        return { open: { pos: from + startSpace + open.length,
	                margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
	            close: { pos: to - endSpace - close.length,
	                margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
	    }
	    return null;
	}
	function selectedLineRanges(state) {
	    let ranges = [];
	    for (let r of state.selection.ranges) {
	        let fromLine = state.doc.lineAt(r.from);
	        let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
	        let last = ranges.length - 1;
	        if (last >= 0 && ranges[last].to > fromLine.from)
	            ranges[last].to = toLine.to;
	        else
	            ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
	    }
	    return ranges;
	}
	// Performs toggle, comment and uncomment of block comments in
	// languages that support them.
	function changeBlockComment(option, state, ranges = state.selection.ranges) {
	    let tokens = ranges.map(r => getConfig(state, r.from).block);
	    if (!tokens.every(c => c))
	        return null;
	    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
	    if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
	        return { changes: state.changes(ranges.map((range, i) => {
	                if (comments[i])
	                    return [];
	                return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
	            })) };
	    }
	    else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
	        let changes = [];
	        for (let i = 0, comment; i < comments.length; i++)
	            if (comment = comments[i]) {
	                let token = tokens[i], { open, close } = comment;
	                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
	            }
	        return { changes };
	    }
	    return null;
	}
	// Performs toggle, comment and uncomment of line comments.
	function changeLineComment(option, state, ranges = state.selection.ranges) {
	    let lines = [];
	    let prevLine = -1;
	    for (let { from, to } of ranges) {
	        let startI = lines.length, minIndent = 1e9;
	        let token = getConfig(state, from).line;
	        if (!token)
	            continue;
	        for (let pos = from; pos <= to;) {
	            let line = state.doc.lineAt(pos);
	            if (line.from > prevLine && (from == to || to > line.from)) {
	                prevLine = line.from;
	                let indent = /^\s*/.exec(line.text)[0].length;
	                let empty = indent == line.length;
	                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
	                if (indent < line.text.length && indent < minIndent)
	                    minIndent = indent;
	                lines.push({ line, comment, token, indent, empty, single: false });
	            }
	            pos = line.to + 1;
	        }
	        if (minIndent < 1e9)
	            for (let i = startI; i < lines.length; i++)
	                if (lines[i].indent < lines[i].line.text.length)
	                    lines[i].indent = minIndent;
	        if (lines.length == startI + 1)
	            lines[startI].single = true;
	    }
	    if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
	        let changes = [];
	        for (let { line, token, indent, empty, single } of lines)
	            if (single || !empty)
	                changes.push({ from: line.from + indent, insert: token + " " });
	        let changeSet = state.changes(changes);
	        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
	    }
	    else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
	        let changes = [];
	        for (let { line, comment, token } of lines)
	            if (comment >= 0) {
	                let from = line.from + comment, to = from + token.length;
	                if (line.text[to - line.from] == " ")
	                    to++;
	                changes.push({ from, to });
	            }
	        return { changes };
	    }
	    return null;
	}

	const fromHistory = /*@__PURE__*/Annotation.define();
	/**
	Transaction annotation that will prevent that transaction from
	being combined with other transactions in the undo history. Given
	`"before"`, it'll prevent merging with previous transactions. With
	`"after"`, subsequent transactions won't be combined with this
	one. With `"full"`, the transaction is isolated on both sides.
	*/
	const isolateHistory = /*@__PURE__*/Annotation.define();
	/**
	This facet provides a way to register functions that, given a
	transaction, provide a set of effects that the history should
	store when inverting the transaction. This can be used to
	integrate some kinds of effects in the history, so that they can
	be undone (and redone again).
	*/
	const invertedEffects = /*@__PURE__*/Facet.define();
	const historyConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            minDepth: 100,
	            newGroupDelay: 500,
	            joinToEvent: (_t, isAdjacent) => isAdjacent,
	        }, {
	            minDepth: Math.max,
	            newGroupDelay: Math.min,
	            joinToEvent: (a, b) => (tr, adj) => a(tr, adj) || b(tr, adj)
	        });
	    }
	});
	const historyField_ = /*@__PURE__*/StateField.define({
	    create() {
	        return HistoryState.empty;
	    },
	    update(state, tr) {
	        let config = tr.state.facet(historyConfig);
	        let fromHist = tr.annotation(fromHistory);
	        if (fromHist) {
	            let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
	            let other = from == 0 /* BranchName.Done */ ? state.undone : state.done;
	            if (item)
	                other = updateBranch(other, other.length, config.minDepth, item);
	            else
	                other = addSelection(other, tr.startState.selection);
	            return new HistoryState(from == 0 /* BranchName.Done */ ? fromHist.rest : other, from == 0 /* BranchName.Done */ ? other : fromHist.rest);
	        }
	        let isolate = tr.annotation(isolateHistory);
	        if (isolate == "full" || isolate == "before")
	            state = state.isolate();
	        if (tr.annotation(Transaction.addToHistory) === false)
	            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
	        let event = HistEvent.fromTransaction(tr);
	        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
	        if (event)
	            state = state.addChanges(event, time, userEvent, config, tr);
	        else if (tr.selection)
	            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
	        if (isolate == "full" || isolate == "after")
	            state = state.isolate();
	        return state;
	    },
	    toJSON(value) {
	        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
	    },
	    fromJSON(json) {
	        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
	    }
	});
	/**
	Create a history extension with the given configuration.
	*/
	function history(config = {}) {
	    return [
	        historyField_,
	        historyConfig.of(config),
	        EditorView.domEventHandlers({
	            beforeinput(e, view) {
	                let command = e.inputType == "historyUndo" ? undo : e.inputType == "historyRedo" ? redo : null;
	                if (!command)
	                    return false;
	                e.preventDefault();
	                return command(view);
	            }
	        })
	    ];
	}
	function cmd(side, selection) {
	    return function ({ state, dispatch }) {
	        if (!selection && state.readOnly)
	            return false;
	        let historyState = state.field(historyField_, false);
	        if (!historyState)
	            return false;
	        let tr = historyState.pop(side, state, selection);
	        if (!tr)
	            return false;
	        dispatch(tr);
	        return true;
	    };
	}
	/**
	Undo a single group of history events. Returns false if no group
	was available.
	*/
	const undo = /*@__PURE__*/cmd(0 /* BranchName.Done */, false);
	/**
	Redo a group of history events. Returns false if no group was
	available.
	*/
	const redo = /*@__PURE__*/cmd(1 /* BranchName.Undone */, false);
	/**
	Undo a change or selection change.
	*/
	const undoSelection = /*@__PURE__*/cmd(0 /* BranchName.Done */, true);
	/**
	Redo a change or selection change.
	*/
	const redoSelection = /*@__PURE__*/cmd(1 /* BranchName.Undone */, true);
	// History events store groups of changes or effects that need to be
	// undone/redone together.
	class HistEvent {
	    constructor(
	    // The changes in this event. Normal events hold at least one
	    // change or effect. But it may be necessary to store selection
	    // events before the first change, in which case a special type of
	    // instance is created which doesn't hold any changes, with
	    // changes == startSelection == undefined
	    changes, 
	    // The effects associated with this event
	    effects, 
	    // Accumulated mapping (from addToHistory==false) that should be
	    // applied to events below this one.
	    mapped, 
	    // The selection before this event
	    startSelection, 
	    // Stores selection changes after this event, to be used for
	    // selection undo/redo.
	    selectionsAfter) {
	        this.changes = changes;
	        this.effects = effects;
	        this.mapped = mapped;
	        this.startSelection = startSelection;
	        this.selectionsAfter = selectionsAfter;
	    }
	    setSelAfter(after) {
	        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
	    }
	    toJSON() {
	        var _a, _b, _c;
	        return {
	            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
	            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
	            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
	            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
	        };
	    }
	    static fromJSON(json) {
	        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
	    }
	    // This does not check `addToHistory` and such, it assumes the
	    // transaction needs to be converted to an item. Returns null when
	    // there are no changes or effects in the transaction.
	    static fromTransaction(tr, selection) {
	        let effects = none;
	        for (let invert of tr.startState.facet(invertedEffects)) {
	            let result = invert(tr);
	            if (result.length)
	                effects = effects.concat(result);
	        }
	        if (!effects.length && tr.changes.empty)
	            return null;
	        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, selection || tr.startState.selection, none);
	    }
	    static selection(selections) {
	        return new HistEvent(undefined, none, undefined, undefined, selections);
	    }
	}
	function updateBranch(branch, to, maxLen, newEvent) {
	    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
	    let newBranch = branch.slice(start, to);
	    newBranch.push(newEvent);
	    return newBranch;
	}
	function isAdjacent(a, b) {
	    let ranges = [], isAdjacent = false;
	    a.iterChangedRanges((f, t) => ranges.push(f, t));
	    b.iterChangedRanges((_f, _t, f, t) => {
	        for (let i = 0; i < ranges.length;) {
	            let from = ranges[i++], to = ranges[i++];
	            if (t >= from && f <= to)
	                isAdjacent = true;
	        }
	    });
	    return isAdjacent;
	}
	function eqSelectionShape(a, b) {
	    return a.ranges.length == b.ranges.length &&
	        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
	}
	function conc(a, b) {
	    return !a.length ? b : !b.length ? a : a.concat(b);
	}
	const none = [];
	const MaxSelectionsPerEvent = 200;
	function addSelection(branch, selection) {
	    if (!branch.length) {
	        return [HistEvent.selection([selection])];
	    }
	    else {
	        let lastEvent = branch[branch.length - 1];
	        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
	        if (sels.length && sels[sels.length - 1].eq(selection))
	            return branch;
	        sels.push(selection);
	        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
	    }
	}
	// Assumes the top item has one or more selectionAfter values
	function popSelection(branch) {
	    let last = branch[branch.length - 1];
	    let newBranch = branch.slice();
	    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
	    return newBranch;
	}
	// Add a mapping to the top event in the given branch. If this maps
	// away all the changes and effects in that item, drop it and
	// propagate the mapping to the next item.
	function addMappingToBranch(branch, mapping) {
	    if (!branch.length)
	        return branch;
	    let length = branch.length, selections = none;
	    while (length) {
	        let event = mapEvent(branch[length - 1], mapping, selections);
	        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
	            let result = branch.slice(0, length);
	            result[length - 1] = event;
	            return result;
	        }
	        else { // Drop this event, since there's no changes or effects left
	            mapping = event.mapped;
	            length--;
	            selections = event.selectionsAfter;
	        }
	    }
	    return selections.length ? [HistEvent.selection(selections)] : none;
	}
	function mapEvent(event, mapping, extraSelections) {
	    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none, extraSelections);
	    // Change-less events don't store mappings (they are always the last event in a branch)
	    if (!event.changes)
	        return HistEvent.selection(selections);
	    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
	    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
	    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
	}
	const joinableUserEvent = /^(input\.type|delete)($|\.)/;
	class HistoryState {
	    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
	        this.done = done;
	        this.undone = undone;
	        this.prevTime = prevTime;
	        this.prevUserEvent = prevUserEvent;
	    }
	    isolate() {
	        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
	    }
	    addChanges(event, time, userEvent, config, tr) {
	        let done = this.done, lastEvent = done[done.length - 1];
	        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
	            (!userEvent || joinableUserEvent.test(userEvent)) &&
	            ((!lastEvent.selectionsAfter.length &&
	                time - this.prevTime < config.newGroupDelay &&
	                config.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes))) ||
	                // For compose (but not compose.start) events, always join with previous event
	                userEvent == "input.type.compose")) {
	            done = updateBranch(done, done.length - 1, config.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
	        }
	        else {
	            done = updateBranch(done, done.length, config.minDepth, event);
	        }
	        return new HistoryState(done, none, time, userEvent);
	    }
	    addSelection(selection, time, userEvent, newGroupDelay) {
	        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
	        if (last.length > 0 &&
	            time - this.prevTime < newGroupDelay &&
	            userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
	            eqSelectionShape(last[last.length - 1], selection))
	            return this;
	        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
	    }
	    addMapping(mapping) {
	        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
	    }
	    pop(side, state, onlySelection) {
	        let branch = side == 0 /* BranchName.Done */ ? this.done : this.undone;
	        if (branch.length == 0)
	            return null;
	        let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
	        if (onlySelection && event.selectionsAfter.length) {
	            return state.update({
	                selection: event.selectionsAfter[event.selectionsAfter.length - 1],
	                annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
	                userEvent: side == 0 /* BranchName.Done */ ? "select.undo" : "select.redo",
	                scrollIntoView: true
	            });
	        }
	        else if (!event.changes) {
	            return null;
	        }
	        else {
	            let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
	            if (event.mapped)
	                rest = addMappingToBranch(rest, event.mapped);
	            return state.update({
	                changes: event.changes,
	                selection: event.startSelection,
	                effects: event.effects,
	                annotations: fromHistory.of({ side, rest, selection }),
	                filter: false,
	                userEvent: side == 0 /* BranchName.Done */ ? "undo" : "redo",
	                scrollIntoView: true
	            });
	        }
	    }
	}
	HistoryState.empty = /*@__PURE__*/new HistoryState(none, none);
	/**
	Default key bindings for the undo history.

	- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#commands.undo).
	- Mod-y (Mod-Shift-z on macOS) + Ctrl-Shift-z on Linux: [`redo`](https://codemirror.net/6/docs/ref/#commands.redo).
	- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#commands.undoSelection).
	- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#commands.redoSelection).
	*/
	const historyKeymap = [
	    { key: "Mod-z", run: undo, preventDefault: true },
	    { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
	    { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
	    { key: "Mod-u", run: undoSelection, preventDefault: true },
	    { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
	];

	function updateSel(sel, by) {
	    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
	}
	function setSel(state, selection) {
	    return state.update({ selection, scrollIntoView: true, userEvent: "select" });
	}
	function moveSel({ state, dispatch }, how) {
	    let selection = updateSel(state.selection, how);
	    if (selection.eq(state.selection, true))
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	function rangeEnd(range, forward) {
	    return EditorSelection.cursor(forward ? range.to : range.from);
	}
	function cursorByChar(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
	}
	function ltrAtCursor(view) {
	    return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
	}
	/**
	Move the selection one character to the left (which is backward in
	left-to-right text, forward in right-to-left text).
	*/
	const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
	/**
	Move the selection one character to the right.
	*/
	const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
	function cursorByGroup(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
	}
	/**
	Move the selection to the left across one group of word or
	non-word (but also non-space) characters.
	*/
	const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
	/**
	Move the selection one group to the right.
	*/
	const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
	function interestingNode(state, node, bracketProp) {
	    if (node.type.prop(bracketProp))
	        return true;
	    let len = node.to - node.from;
	    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
	}
	function moveBySyntax(state, start, forward) {
	    let pos = syntaxTree(state).resolveInner(start.head);
	    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
	    // Scan forward through child nodes to see if there's an interesting
	    // node ahead.
	    for (let at = start.head;;) {
	        let next = forward ? pos.childAfter(at) : pos.childBefore(at);
	        if (!next)
	            break;
	        if (interestingNode(state, next, bracketProp))
	            pos = next;
	        else
	            at = forward ? next.to : next.from;
	    }
	    let bracket = pos.type.prop(bracketProp), match, newPos;
	    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
	        newPos = forward ? match.end.to : match.end.from;
	    else
	        newPos = forward ? pos.to : pos.from;
	    return EditorSelection.cursor(newPos, forward ? -1 : 1);
	}
	/**
	Move the cursor over the next syntactic element to the left.
	*/
	const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
	/**
	Move the cursor over the next syntactic element to the right.
	*/
	const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
	function cursorByLine(view, forward) {
	    return moveSel(view, range => {
	        if (!range.empty)
	            return rangeEnd(range, forward);
	        let moved = view.moveVertically(range, forward);
	        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
	    });
	}
	/**
	Move the selection one line up.
	*/
	const cursorLineUp = view => cursorByLine(view, false);
	/**
	Move the selection one line down.
	*/
	const cursorLineDown = view => cursorByLine(view, true);
	function pageInfo(view) {
	    let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
	    let marginTop = 0, marginBottom = 0, height;
	    if (selfScroll) {
	        for (let source of view.state.facet(EditorView.scrollMargins)) {
	            let margins = source(view);
	            if (margins === null || margins === void 0 ? void 0 : margins.top)
	                marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
	            if (margins === null || margins === void 0 ? void 0 : margins.bottom)
	                marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
	        }
	        height = view.scrollDOM.clientHeight - marginTop - marginBottom;
	    }
	    else {
	        height = (view.dom.ownerDocument.defaultView || window).innerHeight;
	    }
	    return { marginTop, marginBottom, selfScroll,
	        height: Math.max(view.defaultLineHeight, height - 5) };
	}
	function cursorByPage(view, forward) {
	    let page = pageInfo(view);
	    let { state } = view, selection = updateSel(state.selection, range => {
	        return range.empty ? view.moveVertically(range, forward, page.height)
	            : rangeEnd(range, forward);
	    });
	    if (selection.eq(state.selection))
	        return false;
	    let effect;
	    if (page.selfScroll) {
	        let startPos = view.coordsAtPos(state.selection.main.head);
	        let scrollRect = view.scrollDOM.getBoundingClientRect();
	        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
	        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
	            effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
	    }
	    view.dispatch(setSel(state, selection), { effects: effect });
	    return true;
	}
	/**
	Move the selection one page up.
	*/
	const cursorPageUp = view => cursorByPage(view, false);
	/**
	Move the selection one page down.
	*/
	const cursorPageDown = view => cursorByPage(view, true);
	function moveByLineBoundary(view, start, forward) {
	    let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
	    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
	        moved = view.moveToLineBoundary(start, forward, false);
	    if (!forward && moved.head == line.from && line.length) {
	        let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
	        if (space && start.head != line.from + space)
	            moved = EditorSelection.cursor(line.from + space);
	    }
	    return moved;
	}
	/**
	Move the selection to the next line wrap point, or to the end of
	the line if there isn't one left on this line.
	*/
	const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection to previous line wrap point, or failing that to
	the start of the line. If the line is indented, and the cursor
	isn't already at the end of the indentation, this will move to the
	end of the indentation instead of the start of the line.
	*/
	const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection one line wrap point to the left.
	*/
	const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
	/**
	Move the selection one line wrap point to the right.
	*/
	const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
	/**
	Move the selection to the start of the line.
	*/
	const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
	/**
	Move the selection to the end of the line.
	*/
	const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
	function toMatchingBracket(state, dispatch, extend) {
	    let found = false, selection = updateSel(state.selection, range => {
	        let matching = matchBrackets(state, range.head, -1)
	            || matchBrackets(state, range.head, 1)
	            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
	            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
	        if (!matching || !matching.end)
	            return range;
	        found = true;
	        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
	        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
	    });
	    if (!found)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	/**
	Move the selection to the bracket matching the one it is currently
	on, if any.
	*/
	const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
	function extendSel(view, how) {
	    let selection = updateSel(view.state.selection, range => {
	        let head = how(range);
	        return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
	    });
	    if (selection.eq(view.state.selection))
	        return false;
	    view.dispatch(setSel(view.state, selection));
	    return true;
	}
	function selectByChar(view, forward) {
	    return extendSel(view, range => view.moveByChar(range, forward));
	}
	/**
	Move the selection head one character to the left, while leaving
	the anchor in place.
	*/
	const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
	/**
	Move the selection head one character to the right.
	*/
	const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
	function selectByGroup(view, forward) {
	    return extendSel(view, range => view.moveByGroup(range, forward));
	}
	/**
	Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
	the left.
	*/
	const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
	/**
	Move the selection head one group to the right.
	*/
	const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
	/**
	Move the selection head over the next syntactic element to the left.
	*/
	const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
	/**
	Move the selection head over the next syntactic element to the right.
	*/
	const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
	function selectByLine(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward));
	}
	/**
	Move the selection head one line up.
	*/
	const selectLineUp = view => selectByLine(view, false);
	/**
	Move the selection head one line down.
	*/
	const selectLineDown = view => selectByLine(view, true);
	function selectByPage(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
	}
	/**
	Move the selection head one page up.
	*/
	const selectPageUp = view => selectByPage(view, false);
	/**
	Move the selection head one page down.
	*/
	const selectPageDown = view => selectByPage(view, true);
	/**
	Move the selection head to the next line boundary.
	*/
	const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection head to the previous line boundary.
	*/
	const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection head one line boundary to the left.
	*/
	const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
	/**
	Move the selection head one line boundary to the right.
	*/
	const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
	/**
	Move the selection head to the start of the line.
	*/
	const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
	/**
	Move the selection head to the end of the line.
	*/
	const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
	/**
	Move the selection to the start of the document.
	*/
	const cursorDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: 0 }));
	    return true;
	};
	/**
	Move the selection to the end of the document.
	*/
	const cursorDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.doc.length }));
	    return true;
	};
	/**
	Move the selection head to the start of the document.
	*/
	const selectDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
	    return true;
	};
	/**
	Move the selection head to the end of the document.
	*/
	const selectDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
	    return true;
	};
	/**
	Select the entire document.
	*/
	const selectAll = ({ state, dispatch }) => {
	    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
	    return true;
	};
	/**
	Expand the selection to cover entire lines.
	*/
	const selectLine = ({ state, dispatch }) => {
	    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
	    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
	    return true;
	};
	/**
	Select the next syntactic construct that is larger than the
	selection. Note that this will only work insofar as the language
	[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
	syntax tree.
	*/
	const selectParentSyntax = ({ state, dispatch }) => {
	    let selection = updateSel(state.selection, range => {
	        var _a;
	        let stack = syntaxTree(state).resolveStack(range.from, 1);
	        for (let cur = stack; cur; cur = cur.next) {
	            let { node } = cur;
	            if (((node.from < range.from && node.to >= range.to) ||
	                (node.to > range.to && node.from <= range.from)) &&
	                ((_a = node.parent) === null || _a === void 0 ? void 0 : _a.parent))
	                return EditorSelection.range(node.to, node.from);
	        }
	        return range;
	    });
	    dispatch(setSel(state, selection));
	    return true;
	};
	/**
	Simplify the current selection. When multiple ranges are selected,
	reduce it to its main range. Otherwise, if the selection is
	non-empty, convert it to a cursor selection.
	*/
	const simplifySelection = ({ state, dispatch }) => {
	    let cur = state.selection, selection = null;
	    if (cur.ranges.length > 1)
	        selection = EditorSelection.create([cur.main]);
	    else if (!cur.main.empty)
	        selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
	    if (!selection)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	};
	function deleteBy(target, by) {
	    if (target.state.readOnly)
	        return false;
	    let event = "delete.selection", { state } = target;
	    let changes = state.changeByRange(range => {
	        let { from, to } = range;
	        if (from == to) {
	            let towards = by(range);
	            if (towards < from) {
	                event = "delete.backward";
	                towards = skipAtomic(target, towards, false);
	            }
	            else if (towards > from) {
	                event = "delete.forward";
	                towards = skipAtomic(target, towards, true);
	            }
	            from = Math.min(from, towards);
	            to = Math.max(to, towards);
	        }
	        else {
	            from = skipAtomic(target, from, false);
	            to = skipAtomic(target, to, true);
	        }
	        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
	    });
	    if (changes.changes.empty)
	        return false;
	    target.dispatch(state.update(changes, {
	        scrollIntoView: true,
	        userEvent: event,
	        effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
	    }));
	    return true;
	}
	function skipAtomic(target, pos, forward) {
	    if (target instanceof EditorView)
	        for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
	            ranges.between(pos, pos, (from, to) => {
	                if (from < pos && to > pos)
	                    pos = forward ? to : from;
	            });
	    return pos;
	}
	const deleteByChar = (target, forward) => deleteBy(target, range => {
	    let pos = range.from, { state } = target, line = state.doc.lineAt(pos), before, targetPos;
	    if (!forward && pos > line.from && pos < line.from + 200 &&
	        !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
	        if (before[before.length - 1] == "\t")
	            return pos - 1;
	        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
	        for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
	            pos--;
	        targetPos = pos;
	    }
	    else {
	        targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
	        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
	            targetPos += forward ? 1 : -1;
	        else if (!forward && /[\ufe00-\ufe0f]/.test(line.text.slice(targetPos - line.from, pos - line.from)))
	            targetPos = findClusterBreak(line.text, targetPos - line.from, false, false) + line.from;
	    }
	    return targetPos;
	});
	/**
	Delete the selection, or, for cursor selections, the character
	before the cursor.
	*/
	const deleteCharBackward = view => deleteByChar(view, false);
	/**
	Delete the selection or the character after the cursor.
	*/
	const deleteCharForward = view => deleteByChar(view, true);
	const deleteByGroup = (target, forward) => deleteBy(target, range => {
	    let pos = range.head, { state } = target, line = state.doc.lineAt(pos);
	    let categorize = state.charCategorizer(pos);
	    for (let cat = null;;) {
	        if (pos == (forward ? line.to : line.from)) {
	            if (pos == range.head && line.number != (forward ? state.doc.lines : 1))
	                pos += forward ? 1 : -1;
	            break;
	        }
	        let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
	        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
	        let nextCat = categorize(nextChar);
	        if (cat != null && nextCat != cat)
	            break;
	        if (nextChar != " " || pos != range.head)
	            cat = nextCat;
	        pos = next;
	    }
	    return pos;
	});
	/**
	Delete the selection or backward until the end of the next
	[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
	whitespace when they consist of a single space.
	*/
	const deleteGroupBackward = target => deleteByGroup(target, false);
	/**
	Delete the selection or forward until the end of the next group.
	*/
	const deleteGroupForward = target => deleteByGroup(target, true);
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the end of the line. If the cursor is directly at the end of the
	line, delete the line break after it.
	*/
	const deleteToLineEnd = view => deleteBy(view, range => {
	    let lineEnd = view.lineBlockAt(range.head).to;
	    return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the start of the line or the next line wrap before the cursor.
	*/
	const deleteLineBoundaryBackward = view => deleteBy(view, range => {
	    let lineStart = view.moveToLineBoundary(range, false).head;
	    return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the end of the line or the next line wrap after the cursor.
	*/
	const deleteLineBoundaryForward = view => deleteBy(view, range => {
	    let lineStart = view.moveToLineBoundary(range, true).head;
	    return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
	});
	/**
	Replace each selection range with a line break, leaving the cursor
	on the line before the break.
	*/
	const splitLine = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let changes = state.changeByRange(range => {
	        return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
	            range: EditorSelection.cursor(range.from) };
	    });
	    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
	    return true;
	};
	/**
	Flip the characters before and after the cursor(s).
	*/
	const transposeChars = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let changes = state.changeByRange(range => {
	        if (!range.empty || range.from == 0 || range.from == state.doc.length)
	            return { range };
	        let pos = range.from, line = state.doc.lineAt(pos);
	        let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
	        let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
	        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
	            range: EditorSelection.cursor(to) };
	    });
	    if (changes.changes.empty)
	        return false;
	    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
	    return true;
	};
	function selectedLineBlocks(state) {
	    let blocks = [], upto = -1;
	    for (let range of state.selection.ranges) {
	        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
	        if (!range.empty && range.to == endLine.from)
	            endLine = state.doc.lineAt(range.to - 1);
	        if (upto >= startLine.number) {
	            let prev = blocks[blocks.length - 1];
	            prev.to = endLine.to;
	            prev.ranges.push(range);
	        }
	        else {
	            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
	        }
	        upto = endLine.number + 1;
	    }
	    return blocks;
	}
	function moveLine(state, dispatch, forward) {
	    if (state.readOnly)
	        return false;
	    let changes = [], ranges = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward ? block.to == state.doc.length : block.from == 0)
	            continue;
	        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
	        let size = nextLine.length + 1;
	        if (forward) {
	            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
	            for (let r of block.ranges)
	                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
	        }
	        else {
	            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
	            for (let r of block.ranges)
	                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
	        }
	    }
	    if (!changes.length)
	        return false;
	    dispatch(state.update({
	        changes,
	        scrollIntoView: true,
	        selection: EditorSelection.create(ranges, state.selection.mainIndex),
	        userEvent: "move.line"
	    }));
	    return true;
	}
	/**
	Move the selected lines up one line.
	*/
	const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
	/**
	Move the selected lines down one line.
	*/
	const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
	function copyLine(state, dispatch, forward) {
	    if (state.readOnly)
	        return false;
	    let changes = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward)
	            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
	        else
	            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
	    }
	    dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
	    return true;
	}
	/**
	Create a copy of the selected lines. Keep the selection in the top copy.
	*/
	const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
	/**
	Create a copy of the selected lines. Keep the selection in the bottom copy.
	*/
	const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
	/**
	Delete selected lines.
	*/
	const deleteLine = view => {
	    if (view.state.readOnly)
	        return false;
	    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
	        if (from > 0)
	            from--;
	        else if (to < state.doc.length)
	            to++;
	        return { from, to };
	    }));
	    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
	    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
	    return true;
	};
	function isBetweenBrackets(state, pos) {
	    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
	        return { from: pos, to: pos };
	    let context = syntaxTree(state).resolveInner(pos);
	    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
	    if (before && after && before.to <= pos && after.from >= pos &&
	        (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
	        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
	        !/\S/.test(state.sliceDoc(before.to, after.from)))
	        return { from: before.to, to: after.from };
	    return null;
	}
	/**
	Replace the selection with a newline and indent the newly created
	line(s). If the current line consists only of whitespace, this
	will also delete that whitespace. When the cursor is between
	matching brackets, an additional newline will be inserted after
	the cursor.
	*/
	const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
	/**
	Create a blank, indented line below the current line.
	*/
	const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
	function newlineAndIndent(atEof) {
	    return ({ state, dispatch }) => {
	        if (state.readOnly)
	            return false;
	        let changes = state.changeByRange(range => {
	            let { from, to } = range, line = state.doc.lineAt(from);
	            let explode = !atEof && from == to && isBetweenBrackets(state, from);
	            if (atEof)
	                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
	            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
	            let indent = getIndentation(cx, from);
	            if (indent == null)
	                indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
	            while (to < line.to && /\s/.test(line.text[to - line.from]))
	                to++;
	            if (explode)
	                ({ from, to } = explode);
	            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
	                from = line.from;
	            let insert = ["", indentString(state, indent)];
	            if (explode)
	                insert.push(indentString(state, cx.lineIndent(line.from, -1)));
	            return { changes: { from, to, insert: Text.of(insert) },
	                range: EditorSelection.cursor(from + 1 + insert[1].length) };
	        });
	        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
	        return true;
	    };
	}
	function changeBySelectedLine(state, f) {
	    let atLine = -1;
	    return state.changeByRange(range => {
	        let changes = [];
	        for (let pos = range.from; pos <= range.to;) {
	            let line = state.doc.lineAt(pos);
	            if (line.number > atLine && (range.empty || range.to > line.from)) {
	                f(line, changes, range);
	                atLine = line.number;
	            }
	            pos = line.to + 1;
	        }
	        let changeSet = state.changes(changes);
	        return { changes,
	            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
	    });
	}
	/**
	Auto-indent the selected lines. This uses the [indentation service
	facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
	information.
	*/
	const indentSelection = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let updated = Object.create(null);
	    let context = new IndentContext(state, { overrideIndentation: start => {
	            let found = updated[start];
	            return found == null ? -1 : found;
	        } });
	    let changes = changeBySelectedLine(state, (line, changes, range) => {
	        let indent = getIndentation(context, line.from);
	        if (indent == null)
	            return;
	        if (!/\S/.test(line.text))
	            indent = 0;
	        let cur = /^\s*/.exec(line.text)[0];
	        let norm = indentString(state, indent);
	        if (cur != norm || range.from < line.from + cur.length) {
	            updated[line.from] = indent;
	            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
	        }
	    });
	    if (!changes.changes.empty)
	        dispatch(state.update(changes, { userEvent: "indent" }));
	    return true;
	};
	/**
	Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
	lines.
	*/
	const indentMore = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        changes.push({ from: line.from, insert: state.facet(indentUnit) });
	    }), { userEvent: "input.indent" }));
	    return true;
	};
	/**
	Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
	selected lines.
	*/
	const indentLess = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        let space = /^\s*/.exec(line.text)[0];
	        if (!space)
	            return;
	        let col = countColumn(space, state.tabSize), keep = 0;
	        let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
	        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
	            keep++;
	        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
	    }), { userEvent: "delete.dedent" }));
	    return true;
	};
	/**
	Array of key bindings containing the Emacs-style bindings that are
	available on macOS by default.

	 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
	 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
	 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
	 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
	 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
	*/
	const emacsStyleKeymap = [
	    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
	    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
	    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
	    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
	    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
	    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
	    { key: "Ctrl-d", run: deleteCharForward },
	    { key: "Ctrl-h", run: deleteCharBackward },
	    { key: "Ctrl-k", run: deleteToLineEnd },
	    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
	    { key: "Ctrl-o", run: splitLine },
	    { key: "Ctrl-t", run: transposeChars },
	    { key: "Ctrl-v", run: cursorPageDown },
	];
	/**
	An array of key bindings closely sticking to platform-standard or
	widely used bindings. (This includes the bindings from
	[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
	property changed to `mac`.)

	 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
	 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
	 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
	 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
	 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
	 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
	 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
	 - Cmd-Backspace (macOS): [`deleteLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryBackward).
	 - Cmd-Delete (macOS): [`deleteLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.deleteLineBoundaryForward).
	*/
	const standardKeymap = /*@__PURE__*/[
	    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
	    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
	    { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
	    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
	    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
	    { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
	    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
	    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
	    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
	    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
	    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
	    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
	    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
	    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
	    { key: "Enter", run: insertNewlineAndIndent },
	    { key: "Mod-a", run: selectAll },
	    { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
	    { key: "Delete", run: deleteCharForward },
	    { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
	    { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
	    { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
	    { mac: "Mod-Delete", run: deleteLineBoundaryForward }
	].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
	/**
	The default keymap. Includes all bindings from
	[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

	- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
	- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
	- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
	- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
	- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
	- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
	- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
	- Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
	- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
	- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
	- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
	- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
	- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
	- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
	- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
	- Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
	- Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
	*/
	const defaultKeymap = /*@__PURE__*/[
	    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
	    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
	    { key: "Alt-ArrowUp", run: moveLineUp },
	    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
	    { key: "Alt-ArrowDown", run: moveLineDown },
	    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
	    { key: "Escape", run: simplifySelection },
	    { key: "Mod-Enter", run: insertBlankLine },
	    { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
	    { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
	    { key: "Mod-[", run: indentLess },
	    { key: "Mod-]", run: indentMore },
	    { key: "Mod-Alt-\\", run: indentSelection },
	    { key: "Shift-Mod-k", run: deleteLine },
	    { key: "Shift-Mod-\\", run: cursorMatchingBracket },
	    { key: "Mod-/", run: toggleComment },
	    { key: "Alt-A", run: toggleBlockComment }
	].concat(standardKeymap);

	const defaults = {
	    brackets: ["(", "[", "{", "'", '"'],
	    before: ")]}:;>",
	    stringPrefixes: []
	};
	const closeBracketEffect = /*@__PURE__*/StateEffect.define({
	    map(value, mapping) {
	        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
	        return mapped == null ? undefined : mapped;
	    }
	});
	const closedBracket = /*@__PURE__*/new class extends RangeValue {
	};
	closedBracket.startSide = 1;
	closedBracket.endSide = -1;
	const bracketState = /*@__PURE__*/StateField.define({
	    create() { return RangeSet.empty; },
	    update(value, tr) {
	        value = value.map(tr.changes);
	        if (tr.selection) {
	            let line = tr.state.doc.lineAt(tr.selection.main.head);
	            value = value.update({ filter: from => from >= line.from && from <= line.to });
	        }
	        for (let effect of tr.effects)
	            if (effect.is(closeBracketEffect))
	                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
	        return value;
	    }
	});
	/**
	Extension to enable bracket-closing behavior. When a closeable
	bracket is typed, its closing bracket is immediately inserted
	after the cursor. When closing a bracket directly in front of a
	closing bracket inserted by the extension, the cursor moves over
	that bracket.
	*/
	function closeBrackets() {
	    return [inputHandler, bracketState];
	}
	const definedClosing = "()[]{}<>";
	function closing(ch) {
	    for (let i = 0; i < definedClosing.length; i += 2)
	        if (definedClosing.charCodeAt(i) == ch)
	            return definedClosing.charAt(i + 1);
	    return fromCodePoint(ch < 128 ? ch : ch + 1);
	}
	function config(state, pos) {
	    return state.languageDataAt("closeBrackets", pos)[0] || defaults;
	}
	const android = typeof navigator == "object" && /*@__PURE__*//Android\b/.test(navigator.userAgent);
	const inputHandler = /*@__PURE__*/EditorView.inputHandler.of((view, from, to, insert) => {
	    if ((android ? view.composing : view.compositionStarted) || view.state.readOnly)
	        return false;
	    let sel = view.state.selection.main;
	    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
	        from != sel.from || to != sel.to)
	        return false;
	    let tr = insertBracket(view.state, insert);
	    if (!tr)
	        return false;
	    view.dispatch(tr);
	    return true;
	});
	/**
	Command that implements deleting a pair of matching brackets when
	the cursor is between them.
	*/
	const deleteBracketPair = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let conf = config(state, state.selection.main.head);
	    let tokens = conf.brackets || defaults.brackets;
	    let dont = null, changes = state.changeByRange(range => {
	        if (range.empty) {
	            let before = prevChar(state.doc, range.head);
	            for (let token of tokens) {
	                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
	                    return { changes: { from: range.head - token.length, to: range.head + token.length },
	                        range: EditorSelection.cursor(range.head - token.length) };
	            }
	        }
	        return { range: dont = range };
	    });
	    if (!dont)
	        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "delete.backward" }));
	    return !dont;
	};
	/**
	Close-brackets related key bindings. Binds Backspace to
	[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#autocomplete.deleteBracketPair).
	*/
	const closeBracketsKeymap = [
	    { key: "Backspace", run: deleteBracketPair }
	];
	/**
	Implements the extension's behavior on text insertion. If the
	given string counts as a bracket in the language around the
	selection, and replacing the selection with it requires custom
	behavior (inserting a closing version or skipping past a
	previously-closed bracket), this function returns a transaction
	representing that custom behavior. (You only need this if you want
	to programmatically insert brackets—the
	[`closeBrackets`](https://codemirror.net/6/docs/ref/#autocomplete.closeBrackets) extension will
	take care of running this for user input.)
	*/
	function insertBracket(state, bracket) {
	    let conf = config(state, state.selection.main.head);
	    let tokens = conf.brackets || defaults.brackets;
	    for (let tok of tokens) {
	        let closed = closing(codePointAt(tok, 0));
	        if (bracket == tok)
	            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1, conf)
	                : handleOpen(state, tok, closed, conf.before || defaults.before);
	        if (bracket == closed && closedBracketAt(state, state.selection.main.from))
	            return handleClose(state, tok, closed);
	    }
	    return null;
	}
	function closedBracketAt(state, pos) {
	    let found = false;
	    state.field(bracketState).between(0, state.doc.length, from => {
	        if (from == pos)
	            found = true;
	    });
	    return found;
	}
	function nextChar(doc, pos) {
	    let next = doc.sliceString(pos, pos + 2);
	    return next.slice(0, codePointSize(codePointAt(next, 0)));
	}
	function prevChar(doc, pos) {
	    let prev = doc.sliceString(pos - 2, pos);
	    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
	}
	function handleOpen(state, open, close, closeBefore) {
	    let dont = null, changes = state.changeByRange(range => {
	        if (!range.empty)
	            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
	                effects: closeBracketEffect.of(range.to + open.length),
	                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
	        let next = nextChar(state.doc, range.head);
	        if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
	            return { changes: { insert: open + close, from: range.head },
	                effects: closeBracketEffect.of(range.head + open.length),
	                range: EditorSelection.cursor(range.head + open.length) };
	        return { range: dont = range };
	    });
	    return dont ? null : state.update(changes, {
	        scrollIntoView: true,
	        userEvent: "input.type"
	    });
	}
	function handleClose(state, _open, close) {
	    let dont = null, changes = state.changeByRange(range => {
	        if (range.empty && nextChar(state.doc, range.head) == close)
	            return { changes: { from: range.head, to: range.head + close.length, insert: close },
	                range: EditorSelection.cursor(range.head + close.length) };
	        return dont = { range };
	    });
	    return dont ? null : state.update(changes, {
	        scrollIntoView: true,
	        userEvent: "input.type"
	    });
	}
	// Handles cases where the open and close token are the same, and
	// possibly triple quotes (as in `"""abc"""`-style quoting).
	function handleSame(state, token, allowTriple, config) {
	    let stringPrefixes = config.stringPrefixes || defaults.stringPrefixes;
	    let dont = null, changes = state.changeByRange(range => {
	        if (!range.empty)
	            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
	                effects: closeBracketEffect.of(range.to + token.length),
	                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
	        let pos = range.head, next = nextChar(state.doc, pos), start;
	        if (next == token) {
	            if (nodeStart(state, pos)) {
	                return { changes: { insert: token + token, from: pos },
	                    effects: closeBracketEffect.of(pos + token.length),
	                    range: EditorSelection.cursor(pos + token.length) };
	            }
	            else if (closedBracketAt(state, pos)) {
	                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
	                let content = isTriple ? token + token + token : token;
	                return { changes: { from: pos, to: pos + content.length, insert: content },
	                    range: EditorSelection.cursor(pos + content.length) };
	            }
	        }
	        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
	            (start = canStartStringAt(state, pos - 2 * token.length, stringPrefixes)) > -1 &&
	            nodeStart(state, start)) {
	            return { changes: { insert: token + token + token + token, from: pos },
	                effects: closeBracketEffect.of(pos + token.length),
	                range: EditorSelection.cursor(pos + token.length) };
	        }
	        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
	            if (canStartStringAt(state, pos, stringPrefixes) > -1 && !probablyInString(state, pos, token, stringPrefixes))
	                return { changes: { insert: token + token, from: pos },
	                    effects: closeBracketEffect.of(pos + token.length),
	                    range: EditorSelection.cursor(pos + token.length) };
	        }
	        return { range: dont = range };
	    });
	    return dont ? null : state.update(changes, {
	        scrollIntoView: true,
	        userEvent: "input.type"
	    });
	}
	function nodeStart(state, pos) {
	    let tree = syntaxTree(state).resolveInner(pos + 1);
	    return tree.parent && tree.from == pos;
	}
	function probablyInString(state, pos, quoteToken, prefixes) {
	    let node = syntaxTree(state).resolveInner(pos, -1);
	    let maxPrefix = prefixes.reduce((m, p) => Math.max(m, p.length), 0);
	    for (let i = 0; i < 5; i++) {
	        let start = state.sliceDoc(node.from, Math.min(node.to, node.from + quoteToken.length + maxPrefix));
	        let quotePos = start.indexOf(quoteToken);
	        if (!quotePos || quotePos > -1 && prefixes.indexOf(start.slice(0, quotePos)) > -1) {
	            let first = node.firstChild;
	            while (first && first.from == node.from && first.to - first.from > quoteToken.length + quotePos) {
	                if (state.sliceDoc(first.to - quoteToken.length, first.to) == quoteToken)
	                    return false;
	                first = first.firstChild;
	            }
	            return true;
	        }
	        let parent = node.to == pos && node.parent;
	        if (!parent)
	            break;
	        node = parent;
	    }
	    return false;
	}
	function canStartStringAt(state, pos, prefixes) {
	    let charCat = state.charCategorizer(pos);
	    if (charCat(state.sliceDoc(pos - 1, pos)) != CharCategory.Word)
	        return pos;
	    for (let prefix of prefixes) {
	        let start = pos - prefix.length;
	        if (state.sliceDoc(start, pos) == prefix && charCat(state.sliceDoc(start - 1, start)) != CharCategory.Word)
	            return start;
	    }
	    return -1;
	}

	function crelt() {
	  var elt = arguments[0];
	  if (typeof elt == "string") elt = document.createElement(elt);
	  var i = 1, next = arguments[1];
	  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
	    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
	      var value = next[name];
	      if (typeof value == "string") elt.setAttribute(name, value);
	      else if (value != null) elt[name] = value;
	    }
	    i++;
	  }
	  for (; i < arguments.length; i++) add(elt, arguments[i]);
	  return elt
	}

	function add(elt, child) {
	  if (typeof child == "string") {
	    elt.appendChild(document.createTextNode(child));
	  } else if (child == null) ; else if (child.nodeType != null) {
	    elt.appendChild(child);
	  } else if (Array.isArray(child)) {
	    for (var i = 0; i < child.length; i++) add(elt, child[i]);
	  } else {
	    throw new RangeError("Unsupported child node: " + child)
	  }
	}

	const basicNormalize = typeof String.prototype.normalize == "function"
	    ? x => x.normalize("NFKD") : x => x;
	/**
	A search cursor provides an iterator over text matches in a
	document.
	*/
	class SearchCursor {
	    /**
	    Create a text cursor. The query is the search string, `from` to
	    `to` provides the region to search.
	    
	    When `normalize` is given, it will be called, on both the query
	    string and the content it is matched against, before comparing.
	    You can, for example, create a case-insensitive search by
	    passing `s => s.toLowerCase()`.
	    
	    Text is always normalized with
	    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
	    (when supported).
	    */
	    constructor(text, query, from = 0, to = text.length, normalize, test) {
	        this.test = test;
	        /**
	        The current match (only holds a meaningful value after
	        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
	        `done` is false).
	        */
	        this.value = { from: 0, to: 0 };
	        /**
	        Whether the end of the iterated region has been reached.
	        */
	        this.done = false;
	        this.matches = [];
	        this.buffer = "";
	        this.bufferPos = 0;
	        this.iter = text.iterRange(from, to);
	        this.bufferStart = from;
	        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
	        this.query = this.normalize(query);
	    }
	    peek() {
	        if (this.bufferPos == this.buffer.length) {
	            this.bufferStart += this.buffer.length;
	            this.iter.next();
	            if (this.iter.done)
	                return -1;
	            this.bufferPos = 0;
	            this.buffer = this.iter.value;
	        }
	        return codePointAt(this.buffer, this.bufferPos);
	    }
	    /**
	    Look for the next match. Updates the iterator's
	    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
	    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
	    at least once before using the cursor.
	    */
	    next() {
	        while (this.matches.length)
	            this.matches.pop();
	        return this.nextOverlapping();
	    }
	    /**
	    The `next` method will ignore matches that partially overlap a
	    previous match. This method behaves like `next`, but includes
	    such matches.
	    */
	    nextOverlapping() {
	        for (;;) {
	            let next = this.peek();
	            if (next < 0) {
	                this.done = true;
	                return this;
	            }
	            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
	            this.bufferPos += codePointSize(next);
	            let norm = this.normalize(str);
	            for (let i = 0, pos = start;; i++) {
	                let code = norm.charCodeAt(i);
	                let match = this.match(code, pos, this.bufferPos + this.bufferStart);
	                if (i == norm.length - 1) {
	                    if (match) {
	                        this.value = match;
	                        return this;
	                    }
	                    break;
	                }
	                if (pos == start && i < str.length && str.charCodeAt(i) == code)
	                    pos++;
	            }
	        }
	    }
	    match(code, pos, end) {
	        let match = null;
	        for (let i = 0; i < this.matches.length; i += 2) {
	            let index = this.matches[i], keep = false;
	            if (this.query.charCodeAt(index) == code) {
	                if (index == this.query.length - 1) {
	                    match = { from: this.matches[i + 1], to: end };
	                }
	                else {
	                    this.matches[i]++;
	                    keep = true;
	                }
	            }
	            if (!keep) {
	                this.matches.splice(i, 2);
	                i -= 2;
	            }
	        }
	        if (this.query.charCodeAt(0) == code) {
	            if (this.query.length == 1)
	                match = { from: pos, to: end };
	            else
	                this.matches.push(1, pos);
	        }
	        if (match && this.test && !this.test(match.from, match.to, this.buffer, this.bufferStart))
	            match = null;
	        return match;
	    }
	}
	if (typeof Symbol != "undefined")
	    SearchCursor.prototype[Symbol.iterator] = function () { return this; };

	const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
	const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
	/**
	This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
	but searches for a regular expression pattern instead of a plain
	string.
	*/
	class RegExpCursor {
	    /**
	    Create a cursor that will search the given range in the given
	    document. `query` should be the raw pattern (as you'd pass it to
	    `new RegExp`).
	    */
	    constructor(text, query, options, from = 0, to = text.length) {
	        this.text = text;
	        this.to = to;
	        this.curLine = "";
	        /**
	        Set to `true` when the cursor has reached the end of the search
	        range.
	        */
	        this.done = false;
	        /**
	        Will contain an object with the extent of the match and the
	        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
	        sucessfully finds a match.
	        */
	        this.value = empty;
	        if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
	            return new MultilineRegExpCursor(text, query, options, from, to);
	        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
	        this.test = options === null || options === void 0 ? void 0 : options.test;
	        this.iter = text.iter();
	        let startLine = text.lineAt(from);
	        this.curLineStart = startLine.from;
	        this.matchPos = toCharEnd(text, from);
	        this.getLine(this.curLineStart);
	    }
	    getLine(skip) {
	        this.iter.next(skip);
	        if (this.iter.lineBreak) {
	            this.curLine = "";
	        }
	        else {
	            this.curLine = this.iter.value;
	            if (this.curLineStart + this.curLine.length > this.to)
	                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
	            this.iter.next();
	        }
	    }
	    nextLine() {
	        this.curLineStart = this.curLineStart + this.curLine.length + 1;
	        if (this.curLineStart > this.to)
	            this.curLine = "";
	        else
	            this.getLine(0);
	    }
	    /**
	    Move to the next match, if there is one.
	    */
	    next() {
	        for (let off = this.matchPos - this.curLineStart;;) {
	            this.re.lastIndex = off;
	            let match = this.matchPos <= this.to && this.re.exec(this.curLine);
	            if (match) {
	                let from = this.curLineStart + match.index, to = from + match[0].length;
	                this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
	                if (from == this.curLineStart + this.curLine.length)
	                    this.nextLine();
	                if ((from < to || from > this.value.to) && (!this.test || this.test(from, to, match))) {
	                    this.value = { from, to, match };
	                    return this;
	                }
	                off = this.matchPos - this.curLineStart;
	            }
	            else if (this.curLineStart + this.curLine.length < this.to) {
	                this.nextLine();
	                off = 0;
	            }
	            else {
	                this.done = true;
	                return this;
	            }
	        }
	    }
	}
	const flattened = /*@__PURE__*/new WeakMap();
	// Reusable (partially) flattened document strings
	class FlattenedDoc {
	    constructor(from, text) {
	        this.from = from;
	        this.text = text;
	    }
	    get to() { return this.from + this.text.length; }
	    static get(doc, from, to) {
	        let cached = flattened.get(doc);
	        if (!cached || cached.from >= to || cached.to <= from) {
	            let flat = new FlattenedDoc(from, doc.sliceString(from, to));
	            flattened.set(doc, flat);
	            return flat;
	        }
	        if (cached.from == from && cached.to == to)
	            return cached;
	        let { text, from: cachedFrom } = cached;
	        if (cachedFrom > from) {
	            text = doc.sliceString(from, cachedFrom) + text;
	            cachedFrom = from;
	        }
	        if (cached.to < to)
	            text += doc.sliceString(cached.to, to);
	        flattened.set(doc, new FlattenedDoc(cachedFrom, text));
	        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
	    }
	}
	class MultilineRegExpCursor {
	    constructor(text, query, options, from, to) {
	        this.text = text;
	        this.to = to;
	        this.done = false;
	        this.value = empty;
	        this.matchPos = toCharEnd(text, from);
	        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
	        this.test = options === null || options === void 0 ? void 0 : options.test;
	        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Chunk.Base */));
	    }
	    chunkEnd(pos) {
	        return pos >= this.to ? this.to : this.text.lineAt(pos).to;
	    }
	    next() {
	        for (;;) {
	            let off = this.re.lastIndex = this.matchPos - this.flat.from;
	            let match = this.re.exec(this.flat.text);
	            // Skip empty matches directly after the last match
	            if (match && !match[0] && match.index == off) {
	                this.re.lastIndex = off + 1;
	                match = this.re.exec(this.flat.text);
	            }
	            if (match) {
	                let from = this.flat.from + match.index, to = from + match[0].length;
	                // If a match goes almost to the end of a noncomplete chunk, try
	                // again, since it'll likely be able to match more
	                if ((this.flat.to >= this.to || match.index + match[0].length <= this.flat.text.length - 10) &&
	                    (!this.test || this.test(from, to, match))) {
	                    this.value = { from, to, match };
	                    this.matchPos = toCharEnd(this.text, to + (from == to ? 1 : 0));
	                    return this;
	                }
	            }
	            if (this.flat.to == this.to) {
	                this.done = true;
	                return this;
	            }
	            // Grow the flattened doc
	            this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
	        }
	    }
	}
	if (typeof Symbol != "undefined") {
	    RegExpCursor.prototype[Symbol.iterator] = MultilineRegExpCursor.prototype[Symbol.iterator] =
	        function () { return this; };
	}
	function validRegExp(source) {
	    try {
	        new RegExp(source, baseFlags);
	        return true;
	    }
	    catch (_a) {
	        return false;
	    }
	}
	function toCharEnd(text, pos) {
	    if (pos >= text.length)
	        return pos;
	    let line = text.lineAt(pos), next;
	    while (pos < line.to && (next = line.text.charCodeAt(pos - line.from)) >= 0xDC00 && next < 0xE000)
	        pos++;
	    return pos;
	}

	function createLineDialog(view) {
	    let line = String(view.state.doc.lineAt(view.state.selection.main.head).number);
	    let input = crelt("input", { class: "cm-textfield", name: "line", value: line });
	    let dom = crelt("form", {
	        class: "cm-gotoLine",
	        onkeydown: (event) => {
	            if (event.keyCode == 27) { // Escape
	                event.preventDefault();
	                view.dispatch({ effects: dialogEffect.of(false) });
	                view.focus();
	            }
	            else if (event.keyCode == 13) { // Enter
	                event.preventDefault();
	                go();
	            }
	        },
	        onsubmit: (event) => {
	            event.preventDefault();
	            go();
	        }
	    }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
	    function go() {
	        let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
	        if (!match)
	            return;
	        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
	        let [, sign, ln, cl, percent] = match;
	        let col = cl ? +cl.slice(1) : 0;
	        let line = ln ? +ln : startLine.number;
	        if (ln && percent) {
	            let pc = line / 100;
	            if (sign)
	                pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
	            line = Math.round(state.doc.lines * pc);
	        }
	        else if (ln && sign) {
	            line = line * (sign == "-" ? -1 : 1) + startLine.number;
	        }
	        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
	        let selection = EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length)));
	        view.dispatch({
	            effects: [dialogEffect.of(false), EditorView.scrollIntoView(selection.from, { y: 'center' })],
	            selection,
	        });
	        view.focus();
	    }
	    return { dom };
	}
	const dialogEffect = /*@__PURE__*/StateEffect.define();
	const dialogField = /*@__PURE__*/StateField.define({
	    create() { return true; },
	    update(value, tr) {
	        for (let e of tr.effects)
	            if (e.is(dialogEffect))
	                value = e.value;
	        return value;
	    },
	    provide: f => showPanel.from(f, val => val ? createLineDialog : null)
	});
	/**
	Command that shows a dialog asking the user for a line number, and
	when a valid position is provided, moves the cursor to that line.

	Supports line numbers, relative line offsets prefixed with `+` or
	`-`, document percentages suffixed with `%`, and an optional
	column position by adding `:` and a second number after the line
	number.
	*/
	const gotoLine = view => {
	    let panel = getPanel(view, createLineDialog);
	    if (!panel) {
	        let effects = [dialogEffect.of(true)];
	        if (view.state.field(dialogField, false) == null)
	            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1]));
	        view.dispatch({ effects });
	        panel = getPanel(view, createLineDialog);
	    }
	    if (panel)
	        panel.dom.querySelector("input").select();
	    return true;
	};
	const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-panel.cm-gotoLine": {
	        padding: "2px 6px 4px",
	        "& label": { fontSize: "80%" }
	    }
	});

	const defaultHighlightOptions = {
	    highlightWordAroundCursor: false,
	    minSelectionLength: 1,
	    maxMatches: 100,
	    wholeWords: false
	};
	const highlightConfig = /*@__PURE__*/Facet.define({
	    combine(options) {
	        return combineConfig(options, defaultHighlightOptions, {
	            highlightWordAroundCursor: (a, b) => a || b,
	            minSelectionLength: Math.min,
	            maxMatches: Math.min
	        });
	    }
	});
	/**
	This extension highlights text that matches the selection. It uses
	the `"cm-selectionMatch"` class for the highlighting. When
	`highlightWordAroundCursor` is enabled, the word at the cursor
	itself will be highlighted with `"cm-selectionMatch-main"`.
	*/
	function highlightSelectionMatches(options) {
	    let ext = [defaultTheme, matchHighlighter];
	    if (options)
	        ext.push(highlightConfig.of(options));
	    return ext;
	}
	const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
	const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
	// Whether the characters directly outside the given positions are non-word characters
	function insideWordBoundaries(check, state, from, to) {
	    return (from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
	        (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word);
	}
	// Whether the characters directly at the given positions are word characters
	function insideWord(check, state, from, to) {
	    return check(state.sliceDoc(from, from + 1)) == CharCategory.Word
	        && check(state.sliceDoc(to - 1, to)) == CharCategory.Word;
	}
	const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.selectionSet || update.docChanged || update.viewportChanged)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let conf = view.state.facet(highlightConfig);
	        let { state } = view, sel = state.selection;
	        if (sel.ranges.length > 1)
	            return Decoration.none;
	        let range = sel.main, query, check = null;
	        if (range.empty) {
	            if (!conf.highlightWordAroundCursor)
	                return Decoration.none;
	            let word = state.wordAt(range.head);
	            if (!word)
	                return Decoration.none;
	            check = state.charCategorizer(range.head);
	            query = state.sliceDoc(word.from, word.to);
	        }
	        else {
	            let len = range.to - range.from;
	            if (len < conf.minSelectionLength || len > 200)
	                return Decoration.none;
	            if (conf.wholeWords) {
	                query = state.sliceDoc(range.from, range.to); // TODO: allow and include leading/trailing space?
	                check = state.charCategorizer(range.head);
	                if (!(insideWordBoundaries(check, state, range.from, range.to) &&
	                    insideWord(check, state, range.from, range.to)))
	                    return Decoration.none;
	            }
	            else {
	                query = state.sliceDoc(range.from, range.to);
	                if (!query)
	                    return Decoration.none;
	            }
	        }
	        let deco = [];
	        for (let part of view.visibleRanges) {
	            let cursor = new SearchCursor(state.doc, query, part.from, part.to);
	            while (!cursor.next().done) {
	                let { from, to } = cursor.value;
	                if (!check || insideWordBoundaries(check, state, from, to)) {
	                    if (range.empty && from <= range.from && to >= range.to)
	                        deco.push(mainMatchDeco.range(from, to));
	                    else if (from >= range.to || to <= range.from)
	                        deco.push(matchDeco.range(from, to));
	                    if (deco.length > conf.maxMatches)
	                        return Decoration.none;
	                }
	            }
	        }
	        return Decoration.set(deco);
	    }
	}, {
	    decorations: v => v.decorations
	});
	const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
	    ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
	});
	// Select the words around the cursors.
	const selectWord = ({ state, dispatch }) => {
	    let { selection } = state;
	    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
	    if (newSel.eq(selection))
	        return false;
	    dispatch(state.update({ selection: newSel }));
	    return true;
	};
	// Find next occurrence of query relative to last cursor. Wrap around
	// the document if there are no more matches.
	function findNextOccurrence(state, query) {
	    let { main, ranges } = state.selection;
	    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
	    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
	        cursor.next();
	        if (cursor.done) {
	            if (cycled)
	                return null;
	            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
	            cycled = true;
	        }
	        else {
	            if (cycled && ranges.some(r => r.from == cursor.value.from))
	                continue;
	            if (fullWord) {
	                let word = state.wordAt(cursor.value.from);
	                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
	                    continue;
	            }
	            return cursor.value;
	        }
	    }
	}
	/**
	Select next occurrence of the current selection. Expand selection
	to the surrounding word when the selection is empty.
	*/
	const selectNextOccurrence = ({ state, dispatch }) => {
	    let { ranges } = state.selection;
	    if (ranges.some(sel => sel.from === sel.to))
	        return selectWord({ state, dispatch });
	    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
	    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
	        return false;
	    let range = findNextOccurrence(state, searchedText);
	    if (!range)
	        return false;
	    dispatch(state.update({
	        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
	        effects: EditorView.scrollIntoView(range.to)
	    }));
	    return true;
	};

	const searchConfigFacet = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            top: false,
	            caseSensitive: false,
	            literal: false,
	            regexp: false,
	            wholeWord: false,
	            createPanel: view => new SearchPanel(view),
	            scrollToMatch: range => EditorView.scrollIntoView(range)
	        });
	    }
	});
	/**
	A search query. Part of the editor's search state.
	*/
	class SearchQuery {
	    /**
	    Create a query object.
	    */
	    constructor(config) {
	        this.search = config.search;
	        this.caseSensitive = !!config.caseSensitive;
	        this.literal = !!config.literal;
	        this.regexp = !!config.regexp;
	        this.replace = config.replace || "";
	        this.valid = !!this.search && (!this.regexp || validRegExp(this.search));
	        this.unquoted = this.unquote(this.search);
	        this.wholeWord = !!config.wholeWord;
	    }
	    /**
	    @internal
	    */
	    unquote(text) {
	        return this.literal ? text :
	            text.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
	    }
	    /**
	    Compare this query to another query.
	    */
	    eq(other) {
	        return this.search == other.search && this.replace == other.replace &&
	            this.caseSensitive == other.caseSensitive && this.regexp == other.regexp &&
	            this.wholeWord == other.wholeWord;
	    }
	    /**
	    @internal
	    */
	    create() {
	        return this.regexp ? new RegExpQuery(this) : new StringQuery(this);
	    }
	    /**
	    Get a search cursor for this query, searching through the given
	    range in the given state.
	    */
	    getCursor(state, from = 0, to) {
	        let st = state.doc ? state : EditorState.create({ doc: state });
	        if (to == null)
	            to = st.doc.length;
	        return this.regexp ? regexpCursor(this, st, from, to) : stringCursor(this, st, from, to);
	    }
	}
	class QueryType {
	    constructor(spec) {
	        this.spec = spec;
	    }
	}
	function stringCursor(spec, state, from, to) {
	    return new SearchCursor(state.doc, spec.unquoted, from, to, spec.caseSensitive ? undefined : x => x.toLowerCase(), spec.wholeWord ? stringWordTest(state.doc, state.charCategorizer(state.selection.main.head)) : undefined);
	}
	function stringWordTest(doc, categorizer) {
	    return (from, to, buf, bufPos) => {
	        if (bufPos > from || bufPos + buf.length < to) {
	            bufPos = Math.max(0, from - 2);
	            buf = doc.sliceString(bufPos, Math.min(doc.length, to + 2));
	        }
	        return (categorizer(charBefore(buf, from - bufPos)) != CharCategory.Word ||
	            categorizer(charAfter(buf, from - bufPos)) != CharCategory.Word) &&
	            (categorizer(charAfter(buf, to - bufPos)) != CharCategory.Word ||
	                categorizer(charBefore(buf, to - bufPos)) != CharCategory.Word);
	    };
	}
	class StringQuery extends QueryType {
	    constructor(spec) {
	        super(spec);
	    }
	    nextMatch(state, curFrom, curTo) {
	        let cursor = stringCursor(this.spec, state, curTo, state.doc.length).nextOverlapping();
	        if (cursor.done)
	            cursor = stringCursor(this.spec, state, 0, curFrom).nextOverlapping();
	        return cursor.done ? null : cursor.value;
	    }
	    // Searching in reverse is, rather than implementing an inverted search
	    // cursor, done by scanning chunk after chunk forward.
	    prevMatchInRange(state, from, to) {
	        for (let pos = to;;) {
	            let start = Math.max(from, pos - 10000 /* FindPrev.ChunkSize */ - this.spec.unquoted.length);
	            let cursor = stringCursor(this.spec, state, start, pos), range = null;
	            while (!cursor.nextOverlapping().done)
	                range = cursor.value;
	            if (range)
	                return range;
	            if (start == from)
	                return null;
	            pos -= 10000 /* FindPrev.ChunkSize */;
	        }
	    }
	    prevMatch(state, curFrom, curTo) {
	        return this.prevMatchInRange(state, 0, curFrom) ||
	            this.prevMatchInRange(state, curTo, state.doc.length);
	    }
	    getReplacement(_result) { return this.spec.unquote(this.spec.replace); }
	    matchAll(state, limit) {
	        let cursor = stringCursor(this.spec, state, 0, state.doc.length), ranges = [];
	        while (!cursor.next().done) {
	            if (ranges.length >= limit)
	                return null;
	            ranges.push(cursor.value);
	        }
	        return ranges;
	    }
	    highlight(state, from, to, add) {
	        let cursor = stringCursor(this.spec, state, Math.max(0, from - this.spec.unquoted.length), Math.min(to + this.spec.unquoted.length, state.doc.length));
	        while (!cursor.next().done)
	            add(cursor.value.from, cursor.value.to);
	    }
	}
	function regexpCursor(spec, state, from, to) {
	    return new RegExpCursor(state.doc, spec.search, {
	        ignoreCase: !spec.caseSensitive,
	        test: spec.wholeWord ? regexpWordTest(state.charCategorizer(state.selection.main.head)) : undefined
	    }, from, to);
	}
	function charBefore(str, index) {
	    return str.slice(findClusterBreak(str, index, false), index);
	}
	function charAfter(str, index) {
	    return str.slice(index, findClusterBreak(str, index));
	}
	function regexpWordTest(categorizer) {
	    return (_from, _to, match) => !match[0].length ||
	        (categorizer(charBefore(match.input, match.index)) != CharCategory.Word ||
	            categorizer(charAfter(match.input, match.index)) != CharCategory.Word) &&
	            (categorizer(charAfter(match.input, match.index + match[0].length)) != CharCategory.Word ||
	                categorizer(charBefore(match.input, match.index + match[0].length)) != CharCategory.Word);
	}
	class RegExpQuery extends QueryType {
	    nextMatch(state, curFrom, curTo) {
	        let cursor = regexpCursor(this.spec, state, curTo, state.doc.length).next();
	        if (cursor.done)
	            cursor = regexpCursor(this.spec, state, 0, curFrom).next();
	        return cursor.done ? null : cursor.value;
	    }
	    prevMatchInRange(state, from, to) {
	        for (let size = 1;; size++) {
	            let start = Math.max(from, to - size * 10000 /* FindPrev.ChunkSize */);
	            let cursor = regexpCursor(this.spec, state, start, to), range = null;
	            while (!cursor.next().done)
	                range = cursor.value;
	            if (range && (start == from || range.from > start + 10))
	                return range;
	            if (start == from)
	                return null;
	        }
	    }
	    prevMatch(state, curFrom, curTo) {
	        return this.prevMatchInRange(state, 0, curFrom) ||
	            this.prevMatchInRange(state, curTo, state.doc.length);
	    }
	    getReplacement(result) {
	        return this.spec.unquote(this.spec.replace).replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
	            : i == "&" ? result.match[0]
	                : i != "0" && +i < result.match.length ? result.match[i]
	                    : m);
	    }
	    matchAll(state, limit) {
	        let cursor = regexpCursor(this.spec, state, 0, state.doc.length), ranges = [];
	        while (!cursor.next().done) {
	            if (ranges.length >= limit)
	                return null;
	            ranges.push(cursor.value);
	        }
	        return ranges;
	    }
	    highlight(state, from, to, add) {
	        let cursor = regexpCursor(this.spec, state, Math.max(0, from - 250 /* RegExp.HighlightMargin */), Math.min(to + 250 /* RegExp.HighlightMargin */, state.doc.length));
	        while (!cursor.next().done)
	            add(cursor.value.from, cursor.value.to);
	    }
	}
	/**
	A state effect that updates the current search query. Note that
	this only has an effect if the search state has been initialized
	(by including [`search`](https://codemirror.net/6/docs/ref/#search.search) in your configuration or
	by running [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel) at least
	once).
	*/
	const setSearchQuery = /*@__PURE__*/StateEffect.define();
	const togglePanel = /*@__PURE__*/StateEffect.define();
	const searchState = /*@__PURE__*/StateField.define({
	    create(state) {
	        return new SearchState(defaultQuery(state).create(), null);
	    },
	    update(value, tr) {
	        for (let effect of tr.effects) {
	            if (effect.is(setSearchQuery))
	                value = new SearchState(effect.value.create(), value.panel);
	            else if (effect.is(togglePanel))
	                value = new SearchState(value.query, effect.value ? createSearchPanel : null);
	        }
	        return value;
	    },
	    provide: f => showPanel.from(f, val => val.panel)
	});
	class SearchState {
	    constructor(query, panel) {
	        this.query = query;
	        this.panel = panel;
	    }
	}
	const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
	const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.decorations = this.highlight(view.state.field(searchState));
	    }
	    update(update) {
	        let state = update.state.field(searchState);
	        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet || update.viewportChanged)
	            this.decorations = this.highlight(state);
	    }
	    highlight({ query, panel }) {
	        if (!panel || !query.spec.valid)
	            return Decoration.none;
	        let { view } = this;
	        let builder = new RangeSetBuilder();
	        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
	            let { from, to } = ranges[i];
	            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* RegExp.HighlightMargin */)
	                to = ranges[++i].to;
	            query.highlight(view.state, from, to, (from, to) => {
	                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
	                builder.add(from, to, selected ? selectedMatchMark : matchMark);
	            });
	        }
	        return builder.finish();
	    }
	}, {
	    decorations: v => v.decorations
	});
	function searchCommand(f) {
	    return view => {
	        let state = view.state.field(searchState, false);
	        return state && state.query.spec.valid ? f(view, state) : openSearchPanel(view);
	    };
	}
	/**
	Open the search panel if it isn't already open, and move the
	selection to the first match after the current main selection.
	Will wrap around to the start of the document when it reaches the
	end.
	*/
	const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { to } = view.state.selection.main;
	    let next = query.nextMatch(view.state, to, to);
	    if (!next)
	        return false;
	    let selection = EditorSelection.single(next.from, next.to);
	    let config = view.state.facet(searchConfigFacet);
	    view.dispatch({
	        selection,
	        effects: [announceMatch(view, next), config.scrollToMatch(selection.main, view)],
	        userEvent: "select.search"
	    });
	    selectSearchInput(view);
	    return true;
	});
	/**
	Move the selection to the previous instance of the search query,
	before the current main selection. Will wrap past the start
	of the document to start searching at the end again.
	*/
	const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { state } = view, { from } = state.selection.main;
	    let prev = query.prevMatch(state, from, from);
	    if (!prev)
	        return false;
	    let selection = EditorSelection.single(prev.from, prev.to);
	    let config = view.state.facet(searchConfigFacet);
	    view.dispatch({
	        selection,
	        effects: [announceMatch(view, prev), config.scrollToMatch(selection.main, view)],
	        userEvent: "select.search"
	    });
	    selectSearchInput(view);
	    return true;
	});
	/**
	Select all instances of the search query.
	*/
	const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
	    let ranges = query.matchAll(view.state, 1000);
	    if (!ranges || !ranges.length)
	        return false;
	    view.dispatch({
	        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to))),
	        userEvent: "select.search.matches"
	    });
	    return true;
	});
	/**
	Select all instances of the currently selected text.
	*/
	const selectSelectionMatches = ({ state, dispatch }) => {
	    let sel = state.selection;
	    if (sel.ranges.length > 1 || sel.main.empty)
	        return false;
	    let { from, to } = sel.main;
	    let ranges = [], main = 0;
	    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
	        if (ranges.length > 1000)
	            return false;
	        if (cur.value.from == from)
	            main = ranges.length;
	        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
	    }
	    dispatch(state.update({
	        selection: EditorSelection.create(ranges, main),
	        userEvent: "select.search.matches"
	    }));
	    return true;
	};
	/**
	Replace the current match of the search query.
	*/
	const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { state } = view, { from, to } = state.selection.main;
	    if (state.readOnly)
	        return false;
	    let next = query.nextMatch(state, from, from);
	    if (!next)
	        return false;
	    let changes = [], selection, replacement;
	    let effects = [];
	    if (next.from == from && next.to == to) {
	        replacement = state.toText(query.getReplacement(next));
	        changes.push({ from: next.from, to: next.to, insert: replacement });
	        next = query.nextMatch(state, next.from, next.to);
	        effects.push(EditorView.announce.of(state.phrase("replaced match on line $", state.doc.lineAt(from).number) + "."));
	    }
	    if (next) {
	        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
	        selection = EditorSelection.single(next.from - off, next.to - off);
	        effects.push(announceMatch(view, next));
	        effects.push(state.facet(searchConfigFacet).scrollToMatch(selection.main, view));
	    }
	    view.dispatch({
	        changes, selection, effects,
	        userEvent: "input.replace"
	    });
	    return true;
	});
	/**
	Replace all instances of the search query with the given
	replacement.
	*/
	const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
	    if (view.state.readOnly)
	        return false;
	    let changes = query.matchAll(view.state, 1e9).map(match => {
	        let { from, to } = match;
	        return { from, to, insert: query.getReplacement(match) };
	    });
	    if (!changes.length)
	        return false;
	    let announceText = view.state.phrase("replaced $ matches", changes.length) + ".";
	    view.dispatch({
	        changes,
	        effects: EditorView.announce.of(announceText),
	        userEvent: "input.replace.all"
	    });
	    return true;
	});
	function createSearchPanel(view) {
	    return view.state.facet(searchConfigFacet).createPanel(view);
	}
	function defaultQuery(state, fallback) {
	    var _a, _b, _c, _d, _e;
	    let sel = state.selection.main;
	    let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
	    if (fallback && !selText)
	        return fallback;
	    let config = state.facet(searchConfigFacet);
	    return new SearchQuery({
	        search: ((_a = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _a !== void 0 ? _a : config.literal) ? selText : selText.replace(/\n/g, "\\n"),
	        caseSensitive: (_b = fallback === null || fallback === void 0 ? void 0 : fallback.caseSensitive) !== null && _b !== void 0 ? _b : config.caseSensitive,
	        literal: (_c = fallback === null || fallback === void 0 ? void 0 : fallback.literal) !== null && _c !== void 0 ? _c : config.literal,
	        regexp: (_d = fallback === null || fallback === void 0 ? void 0 : fallback.regexp) !== null && _d !== void 0 ? _d : config.regexp,
	        wholeWord: (_e = fallback === null || fallback === void 0 ? void 0 : fallback.wholeWord) !== null && _e !== void 0 ? _e : config.wholeWord
	    });
	}
	function getSearchInput(view) {
	    let panel = getPanel(view, createSearchPanel);
	    return panel && panel.dom.querySelector("[main-field]");
	}
	function selectSearchInput(view) {
	    let input = getSearchInput(view);
	    if (input && input == view.root.activeElement)
	        input.select();
	}
	/**
	Make sure the search panel is open and focused.
	*/
	const openSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (state && state.panel) {
	        let searchInput = getSearchInput(view);
	        if (searchInput && searchInput != view.root.activeElement) {
	            let query = defaultQuery(view.state, state.query.spec);
	            if (query.valid)
	                view.dispatch({ effects: setSearchQuery.of(query) });
	            searchInput.focus();
	            searchInput.select();
	        }
	    }
	    else {
	        view.dispatch({ effects: [
	                togglePanel.of(true),
	                state ? setSearchQuery.of(defaultQuery(view.state, state.query.spec)) : StateEffect.appendConfig.of(searchExtensions)
	            ] });
	    }
	    return true;
	};
	/**
	Close the search panel.
	*/
	const closeSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (!state || !state.panel)
	        return false;
	    let panel = getPanel(view, createSearchPanel);
	    if (panel && panel.dom.contains(view.root.activeElement))
	        view.focus();
	    view.dispatch({ effects: togglePanel.of(false) });
	    return true;
	};
	/**
	Default search-related key bindings.

	 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
	 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
	 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
	 - Mod-Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
	 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
	*/
	const searchKeymap = [
	    { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
	    { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
	    { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel", preventDefault: true },
	    { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
	    { key: "Mod-Shift-l", run: selectSelectionMatches },
	    { key: "Mod-Alt-g", run: gotoLine },
	    { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
	];
	class SearchPanel {
	    constructor(view) {
	        this.view = view;
	        let query = this.query = view.state.field(searchState).query.spec;
	        this.commit = this.commit.bind(this);
	        this.searchField = crelt("input", {
	            value: query.search,
	            placeholder: phrase(view, "Find"),
	            "aria-label": phrase(view, "Find"),
	            class: "cm-textfield",
	            name: "search",
	            form: "",
	            "main-field": "true",
	            onchange: this.commit,
	            onkeyup: this.commit
	        });
	        this.replaceField = crelt("input", {
	            value: query.replace,
	            placeholder: phrase(view, "Replace"),
	            "aria-label": phrase(view, "Replace"),
	            class: "cm-textfield",
	            name: "replace",
	            form: "",
	            onchange: this.commit,
	            onkeyup: this.commit
	        });
	        this.caseField = crelt("input", {
	            type: "checkbox",
	            name: "case",
	            form: "",
	            checked: query.caseSensitive,
	            onchange: this.commit
	        });
	        this.reField = crelt("input", {
	            type: "checkbox",
	            name: "re",
	            form: "",
	            checked: query.regexp,
	            onchange: this.commit
	        });
	        this.wordField = crelt("input", {
	            type: "checkbox",
	            name: "word",
	            form: "",
	            checked: query.wholeWord,
	            onchange: this.commit
	        });
	        function button(name, onclick, content) {
	            return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
	        }
	        this.dom = crelt("div", { onkeydown: (e) => this.keydown(e), class: "cm-search" }, [
	            this.searchField,
	            button("next", () => findNext(view), [phrase(view, "next")]),
	            button("prev", () => findPrevious(view), [phrase(view, "previous")]),
	            button("select", () => selectMatches(view), [phrase(view, "all")]),
	            crelt("label", null, [this.caseField, phrase(view, "match case")]),
	            crelt("label", null, [this.reField, phrase(view, "regexp")]),
	            crelt("label", null, [this.wordField, phrase(view, "by word")]),
	            ...view.state.readOnly ? [] : [
	                crelt("br"),
	                this.replaceField,
	                button("replace", () => replaceNext(view), [phrase(view, "replace")]),
	                button("replaceAll", () => replaceAll(view), [phrase(view, "replace all")])
	            ],
	            crelt("button", {
	                name: "close",
	                onclick: () => closeSearchPanel(view),
	                "aria-label": phrase(view, "close"),
	                type: "button"
	            }, ["×"])
	        ]);
	    }
	    commit() {
	        let query = new SearchQuery({
	            search: this.searchField.value,
	            caseSensitive: this.caseField.checked,
	            regexp: this.reField.checked,
	            wholeWord: this.wordField.checked,
	            replace: this.replaceField.value,
	        });
	        if (!query.eq(this.query)) {
	            this.query = query;
	            this.view.dispatch({ effects: setSearchQuery.of(query) });
	        }
	    }
	    keydown(e) {
	        if (runScopeHandlers(this.view, e, "search-panel")) {
	            e.preventDefault();
	        }
	        else if (e.keyCode == 13 && e.target == this.searchField) {
	            e.preventDefault();
	            (e.shiftKey ? findPrevious : findNext)(this.view);
	        }
	        else if (e.keyCode == 13 && e.target == this.replaceField) {
	            e.preventDefault();
	            replaceNext(this.view);
	        }
	    }
	    update(update) {
	        for (let tr of update.transactions)
	            for (let effect of tr.effects) {
	                if (effect.is(setSearchQuery) && !effect.value.eq(this.query))
	                    this.setQuery(effect.value);
	            }
	    }
	    setQuery(query) {
	        this.query = query;
	        this.searchField.value = query.search;
	        this.replaceField.value = query.replace;
	        this.caseField.checked = query.caseSensitive;
	        this.reField.checked = query.regexp;
	        this.wordField.checked = query.wholeWord;
	    }
	    mount() {
	        this.searchField.select();
	    }
	    get pos() { return 80; }
	    get top() { return this.view.state.facet(searchConfigFacet).top; }
	}
	function phrase(view, phrase) { return view.state.phrase(phrase); }
	const AnnounceMargin = 30;
	const Break = /[\s\.,:;?!]/;
	function announceMatch(view, { from, to }) {
	    let line = view.state.doc.lineAt(from), lineEnd = view.state.doc.lineAt(to).to;
	    let start = Math.max(line.from, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
	    let text = view.state.sliceDoc(start, end);
	    if (start != line.from) {
	        for (let i = 0; i < AnnounceMargin; i++)
	            if (!Break.test(text[i + 1]) && Break.test(text[i])) {
	                text = text.slice(i);
	                break;
	            }
	    }
	    if (end != lineEnd) {
	        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
	            if (!Break.test(text[i - 1]) && Break.test(text[i])) {
	                text = text.slice(0, i);
	                break;
	            }
	    }
	    return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${line.number}.`);
	}
	const baseTheme = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-panel.cm-search": {
	        padding: "2px 6px 4px",
	        position: "relative",
	        "& [name=close]": {
	            position: "absolute",
	            top: "0",
	            right: "4px",
	            backgroundColor: "inherit",
	            border: "none",
	            font: "inherit",
	            padding: 0,
	            margin: 0
	        },
	        "& input, & button, & label": {
	            margin: ".2em .6em .2em 0"
	        },
	        "& input[type=checkbox]": {
	            marginRight: ".2em"
	        },
	        "& label": {
	            fontSize: "80%",
	            whiteSpace: "pre"
	        }
	    },
	    "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
	    "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
	    "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
	    "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
	});
	const searchExtensions = [
	    searchState,
	    /*@__PURE__*/Prec.low(searchHighlighter),
	    baseTheme
	];

	/** @module editorModule */



	/**
	 * Creates language support for Java.
	 * @function javaLanguageSupport
	 * @returns {LanguageSupport} Language support for Java.
	 */
	function javaLanguageSupport() {
	  return new LanguageSupport(javaLanguage);
	}

	/**
	 * Represents a keymap for keyboard shortcuts.
	 * @typedef {Object} Keymap Represents a set of keyboard shortcuts.
	 * @property {Array} extensions - Used in the `extensions` array to provide keymap functionality.
	 */

	/**
	 * Represents language support for Java.
	 * @typedef {Object} LanguageSupport Represents language-specific support for Java code.
	 * @property {Array} extensions - Used in the `extensions` array to provide language support for Java code.
	 */

	/**
	 * Represents line numbers displayed in the editor.
	 * @typedef {Object} LineNumbers Represents the display of line numbers in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to display line numbers in the editor.
	 */

	/**
	 * Represents highlighting of the active line gutter.
	 * @typedef {Object} HighlightActiveLineGutter Represents the visual highlighting of the active line gutter.
	 * @property {Array} extensions - Used in the `extensions` array to highlight the active line gutter.
	 */

	/**
	 * Represents bracket matching functionality.
	 * @typedef {Object} BracketMatching Represents the capability to match brackets in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to enable bracket matching functionality.
	 */

	/**
	 * Represents automatic insertion of closing brackets.
	 * @typedef {Object} CloseBrackets Represents the automatic insertion of closing brackets in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to enable automatic insertion of closing brackets.
	 */

	/**
	 * Represents syntax highlighting for Java code.
	 * @typedef {Object} SyntaxHighlighting Represents the syntax highlighting rules for Java code.
	 * @property {Array} extensions - Used in the `extensions` array to provide syntax highlighting for Java code.
	 */

	/**
	 * Represents a history mechanism for undo/redo functionality.
	 * @typedef {Object} History Represents the history mechanism for undo/redo functionality in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to provide undo/redo functionality.
	 */

	/**
	 * Represents a fold gutter for code folding.
	 * @typedef {Object} FoldGutter Represents the gutter used for code folding.
	 * @property {Array} extensions - Used in the `extensions` array to enable code folding.
	 */

	/**
	 * Represents automatic indentation on input.
	 * @typedef {Object} IndentOnInput Represents automatic indentation behavior on user input.
	 * @property {Array} extensions - Used in the `extensions` array to enable automatic indentation.
	 */

	/**
	 * Represents highlighting of selection matches.
	 * @typedef {Object} HighlightSelectionMatches Represents the highlighting of matches for the selected text.
	 * @property {Array} extensions - Used in the `extensions` array to highlight selection matches.
	 */

	/**
	 * Represents highlighting of special characters.
	 * @typedef {Object} HighlightSpecialChars Represents the highlighting of special characters in the editor.
	 * @property {string[]} extensions - Used in the `extensions` array to highlight special characters.
	 */

	/**
	 * Represents drawing of selections in the editor.
	 * @typedef {Object} DrawSelection Represents the drawing of selections in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to enable drawing of selections.
	 */

	/**
	 * Represents a drop cursor for dragging and dropping text.
	 * @typedef {Object} DropCursor Represents the cursor used for dragging and dropping text in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to enable drop cursor functionality.
	 */

	/**
	 * Represents rectangular selection functionality.
	 * @typedef {Object} RectangularSelection Represents the functionality for making rectangular selections in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to enable rectangular selection functionality.
	 */

	/**
	 * Represents a crosshair cursor for precise text selection.
	 * @typedef {Object} CrosshairCursor Represents the cursor used for precise text selection.
	 * @property {Array} extensions - Used in the `extensions` array to enable crosshair cursor functionality.
	 */

	/**
	 * Represents highlighting of the active line.
	 * @typedef {Object} HighlightActiveLine Represents the highlighting of the active line in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to highlight the active line.
	 */

	/**
	 * Represents language support for Java in an editor.
	 * @typedef {Object} LanguageSupport Represents language-specific support for Java in the editor.
	 * @property {Array} extensions - Used in the `extensions` array to provide language support for Java in the editor.
	 */

	/** 
	   * Represents the state of the editor.
	   * @typedef {Object} EditorState
	   * @property {string} doc - The document content of the editor state.
	   * @property {Array} extensions - The extensions used by the editor state.
	   */


	/** @type {Array} */
	let extensions = [
	  keymap.of(defaultKeymap, historyKeymap,
	    closeBracketsKeymap, searchKeymap, foldKeymap),
	  java(),
	  lineNumbers(),
	  highlightActiveLineGutter(),
	  bracketMatching(),
	  closeBrackets(),
	  syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
	  history(),
	  foldGutter(),
	  indentOnInput(),
	  highlightSelectionMatches(),
	  highlightSpecialChars(),
	  drawSelection(),
	  dropCursor(),
	  rectangularSelection(),
	  crosshairCursor(),
	  highlightActiveLine(),
	  javaLanguageSupport(),
	];



	/**
	 * Class representing a text editor.
	 * @class
	 */
	class Editor {
	  /**
	   * Create an Editor.
	   * @param {HTMLElement} el - The HTML element to attach the editor to.
	   * @param {string} value - The initial vaule of the editor.
	   */
	  constructor(el, value) {
	    /**
	     * @private
	     * @type {EditorView}
	     */
	    const state = this.createState(value);
	    /**
	     * What is contained in the editor which is then attached to an HTML element.
	     * @type {EditorView}
	     */
	    this.view = new EditorView({
	      parent: el,
	      state
	    });
	  }

	  /**
	   * Create the state of the editor.
	   * @param {string} value - The initial value of the editor state.
	   * @returns {EditorState} The created editor state.
	   */
	  

	  createState(value) {
	    return EditorState.create({
	      doc: value,
	      extensions: extensions
	    });
	  }

	  /**
	   * Update the state of the editor.
	   * @param {string} str - The new value to set for the editor state.
	   */
	  updateState(str) {
	    var newState = EditorState.create({
	      doc: str,
	      extensions: extensions
	    });
	    this.view.setState(newState);
	    /*
	    this.view.dispatch({
	      changes: {from: 0, to: this.view.state.doc.length , insert: str}
	    });
	    */
	  }
	}

	var xterm = {exports: {}};

	(function (module, exports) {
		!function(e,t){module.exports=t();}(self,(()=>(()=>{var e={4567:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.AccessibilityManager=void 0;const n=i(9042),o=i(6114),a=i(9924),h=i(844),c=i(5596),l=i(4725),d=i(3656);let _=t.AccessibilityManager=class extends h.Disposable{constructor(e,t){super(),this._terminal=e,this._renderService=t,this._liveRegionLineCount=0,this._charsToConsume=[],this._charsToAnnounce="",this._accessibilityContainer=document.createElement("div"),this._accessibilityContainer.classList.add("xterm-accessibility"),this._rowContainer=document.createElement("div"),this._rowContainer.setAttribute("role","list"),this._rowContainer.classList.add("xterm-accessibility-tree"),this._rowElements=[];for(let e=0;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);if(this._topBoundaryFocusListener=e=>this._handleBoundaryFocus(e,0),this._bottomBoundaryFocusListener=e=>this._handleBoundaryFocus(e,1),this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions(),this._accessibilityContainer.appendChild(this._rowContainer),this._liveRegion=document.createElement("div"),this._liveRegion.classList.add("live-region"),this._liveRegion.setAttribute("aria-live","assertive"),this._accessibilityContainer.appendChild(this._liveRegion),this._liveRegionDebouncer=this.register(new a.TimeBasedDebouncer(this._renderRows.bind(this))),!this._terminal.element)throw new Error("Cannot enable accessibility before Terminal.open");this._terminal.element.insertAdjacentElement("afterbegin",this._accessibilityContainer),this.register(this._terminal.onResize((e=>this._handleResize(e.rows)))),this.register(this._terminal.onRender((e=>this._refreshRows(e.start,e.end)))),this.register(this._terminal.onScroll((()=>this._refreshRows()))),this.register(this._terminal.onA11yChar((e=>this._handleChar(e)))),this.register(this._terminal.onLineFeed((()=>this._handleChar("\n")))),this.register(this._terminal.onA11yTab((e=>this._handleTab(e)))),this.register(this._terminal.onKey((e=>this._handleKey(e.key)))),this.register(this._terminal.onBlur((()=>this._clearLiveRegion()))),this.register(this._renderService.onDimensionsChange((()=>this._refreshRowsDimensions()))),this._screenDprMonitor=new c.ScreenDprMonitor(window),this.register(this._screenDprMonitor),this._screenDprMonitor.setListener((()=>this._refreshRowsDimensions())),this.register((0, d.addDisposableDomListener)(window,"resize",(()=>this._refreshRowsDimensions()))),this._refreshRows(),this.register((0, h.toDisposable)((()=>{this._accessibilityContainer.remove(),this._rowElements.length=0;})));}_handleTab(e){for(let t=0;t<e;t++)this._handleChar(" ");}_handleChar(e){this._liveRegionLineCount<21&&(this._charsToConsume.length>0?this._charsToConsume.shift()!==e&&(this._charsToAnnounce+=e):this._charsToAnnounce+=e,"\n"===e&&(this._liveRegionLineCount++,21===this._liveRegionLineCount&&(this._liveRegion.textContent+=n.tooMuchOutput)),o.isMac&&this._liveRegion.textContent&&this._liveRegion.textContent.length>0&&!this._liveRegion.parentNode&&setTimeout((()=>{this._accessibilityContainer.appendChild(this._liveRegion);}),0));}_clearLiveRegion(){this._liveRegion.textContent="",this._liveRegionLineCount=0,o.isMac&&this._liveRegion.remove();}_handleKey(e){this._clearLiveRegion(),/\p{Control}/u.test(e)||this._charsToConsume.push(e);}_refreshRows(e,t){this._liveRegionDebouncer.refresh(e,t,this._terminal.rows);}_renderRows(e,t){const i=this._terminal.buffer,s=i.lines.length.toString();for(let r=e;r<=t;r++){const e=i.translateBufferLineToString(i.ydisp+r,!0),t=(i.ydisp+r+1).toString(),n=this._rowElements[r];n&&(0===e.length?n.innerText=" ":n.textContent=e,n.setAttribute("aria-posinset",t),n.setAttribute("aria-setsize",s));}this._announceCharacters();}_announceCharacters(){0!==this._charsToAnnounce.length&&(this._liveRegion.textContent+=this._charsToAnnounce,this._charsToAnnounce="");}_handleBoundaryFocus(e,t){const i=e.target,s=this._rowElements[0===t?1:this._rowElements.length-2];if(i.getAttribute("aria-posinset")===(0===t?"1":`${this._terminal.buffer.lines.length}`))return;if(e.relatedTarget!==s)return;let r,n;if(0===t?(r=i,n=this._rowElements.pop(),this._rowContainer.removeChild(n)):(r=this._rowElements.shift(),n=i,this._rowContainer.removeChild(r)),r.removeEventListener("focus",this._topBoundaryFocusListener),n.removeEventListener("focus",this._bottomBoundaryFocusListener),0===t){const e=this._createAccessibilityTreeNode();this._rowElements.unshift(e),this._rowContainer.insertAdjacentElement("afterbegin",e);}else {const e=this._createAccessibilityTreeNode();this._rowElements.push(e),this._rowContainer.appendChild(e);}this._rowElements[0].addEventListener("focus",this._topBoundaryFocusListener),this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._terminal.scrollLines(0===t?-1:1),this._rowElements[0===t?1:this._rowElements.length-2].focus(),e.preventDefault(),e.stopImmediatePropagation();}_handleResize(e){this._rowElements[this._rowElements.length-1].removeEventListener("focus",this._bottomBoundaryFocusListener);for(let e=this._rowContainer.children.length;e<this._terminal.rows;e++)this._rowElements[e]=this._createAccessibilityTreeNode(),this._rowContainer.appendChild(this._rowElements[e]);for(;this._rowElements.length>e;)this._rowContainer.removeChild(this._rowElements.pop());this._rowElements[this._rowElements.length-1].addEventListener("focus",this._bottomBoundaryFocusListener),this._refreshRowsDimensions();}_createAccessibilityTreeNode(){const e=document.createElement("div");return e.setAttribute("role","listitem"),e.tabIndex=-1,this._refreshRowDimensions(e),e}_refreshRowsDimensions(){if(this._renderService.dimensions.css.cell.height){this._accessibilityContainer.style.width=`${this._renderService.dimensions.css.canvas.width}px`,this._rowElements.length!==this._terminal.rows&&this._handleResize(this._terminal.rows);for(let e=0;e<this._terminal.rows;e++)this._refreshRowDimensions(this._rowElements[e]);}}_refreshRowDimensions(e){e.style.height=`${this._renderService.dimensions.css.cell.height}px`;}};t.AccessibilityManager=_=s([r(1,l.IRenderService)],_);},3614:(e,t)=>{function i(e){return e.replace(/\r?\n/g,"\r")}function s(e,t){return t?"[200~"+e+"[201~":e}function r(e,t,r,n){e=s(e=i(e),r.decPrivateModes.bracketedPasteMode&&!0!==n.rawOptions.ignoreBracketedPasteMode),r.triggerDataEvent(e,!0),t.value="";}function n(e,t,i){const s=i.getBoundingClientRect(),r=e.clientX-s.left-10,n=e.clientY-s.top-10;t.style.width="20px",t.style.height="20px",t.style.left=`${r}px`,t.style.top=`${n}px`,t.style.zIndex="1000",t.focus();}Object.defineProperty(t,"__esModule",{value:!0}),t.rightClickHandler=t.moveTextAreaUnderMouseCursor=t.paste=t.handlePasteEvent=t.copyHandler=t.bracketTextForPaste=t.prepareTextForTerminal=void 0,t.prepareTextForTerminal=i,t.bracketTextForPaste=s,t.copyHandler=function(e,t){e.clipboardData&&e.clipboardData.setData("text/plain",t.selectionText),e.preventDefault();},t.handlePasteEvent=function(e,t,i,s){e.stopPropagation(),e.clipboardData&&r(e.clipboardData.getData("text/plain"),t,i,s);},t.paste=r,t.moveTextAreaUnderMouseCursor=n,t.rightClickHandler=function(e,t,i,s,r){n(e,t,i),r&&s.rightClickSelect(e),t.value=s.selectionText,t.select();};},7239:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorContrastCache=void 0;const s=i(1505);t.ColorContrastCache=class{constructor(){this._color=new s.TwoKeyMap,this._css=new s.TwoKeyMap;}setCss(e,t,i){this._css.set(e,t,i);}getCss(e,t){return this._css.get(e,t)}setColor(e,t,i){this._color.set(e,t,i);}getColor(e,t){return this._color.get(e,t)}clear(){this._color.clear(),this._css.clear();}};},3656:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.addDisposableDomListener=void 0,t.addDisposableDomListener=function(e,t,i,s){e.addEventListener(t,i,s);let r=!1;return {dispose:()=>{r||(r=!0,e.removeEventListener(t,i,s));}}};},6465:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.Linkifier2=void 0;const n=i(3656),o=i(8460),a=i(844),h=i(2585);let c=t.Linkifier2=class extends a.Disposable{get currentLink(){return this._currentLink}constructor(e){super(),this._bufferService=e,this._linkProviders=[],this._linkCacheDisposables=[],this._isMouseOut=!0,this._wasResized=!1,this._activeLine=-1,this._onShowLinkUnderline=this.register(new o.EventEmitter),this.onShowLinkUnderline=this._onShowLinkUnderline.event,this._onHideLinkUnderline=this.register(new o.EventEmitter),this.onHideLinkUnderline=this._onHideLinkUnderline.event,this.register((0, a.getDisposeArrayDisposable)(this._linkCacheDisposables)),this.register((0, a.toDisposable)((()=>{this._lastMouseEvent=void 0;}))),this.register(this._bufferService.onResize((()=>{this._clearCurrentLink(),this._wasResized=!0;})));}registerLinkProvider(e){return this._linkProviders.push(e),{dispose:()=>{const t=this._linkProviders.indexOf(e);-1!==t&&this._linkProviders.splice(t,1);}}}attachToDom(e,t,i){this._element=e,this._mouseService=t,this._renderService=i,this.register((0, n.addDisposableDomListener)(this._element,"mouseleave",(()=>{this._isMouseOut=!0,this._clearCurrentLink();}))),this.register((0, n.addDisposableDomListener)(this._element,"mousemove",this._handleMouseMove.bind(this))),this.register((0, n.addDisposableDomListener)(this._element,"mousedown",this._handleMouseDown.bind(this))),this.register((0, n.addDisposableDomListener)(this._element,"mouseup",this._handleMouseUp.bind(this)));}_handleMouseMove(e){if(this._lastMouseEvent=e,!this._element||!this._mouseService)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);if(!t)return;this._isMouseOut=!1;const i=e.composedPath();for(let e=0;e<i.length;e++){const t=i[e];if(t.classList.contains("xterm"))break;if(t.classList.contains("xterm-hover"))return}this._lastBufferCell&&t.x===this._lastBufferCell.x&&t.y===this._lastBufferCell.y||(this._handleHover(t),this._lastBufferCell=t);}_handleHover(e){if(this._activeLine!==e.y||this._wasResized)return this._clearCurrentLink(),this._askForLink(e,!1),void(this._wasResized=!1);this._currentLink&&this._linkAtPosition(this._currentLink.link,e)||(this._clearCurrentLink(),this._askForLink(e,!0));}_askForLink(e,t){var i,s;this._activeProviderReplies&&t||(null===(i=this._activeProviderReplies)||void 0===i||i.forEach((e=>{null==e||e.forEach((e=>{e.link.dispose&&e.link.dispose();}));})),this._activeProviderReplies=new Map,this._activeLine=e.y);let r=!1;for(const[i,n]of this._linkProviders.entries())t?(null===(s=this._activeProviderReplies)||void 0===s?void 0:s.get(i))&&(r=this._checkLinkProviderResult(i,e,r)):n.provideLinks(e.y,(t=>{var s,n;if(this._isMouseOut)return;const o=null==t?void 0:t.map((e=>({link:e})));null===(s=this._activeProviderReplies)||void 0===s||s.set(i,o),r=this._checkLinkProviderResult(i,e,r),(null===(n=this._activeProviderReplies)||void 0===n?void 0:n.size)===this._linkProviders.length&&this._removeIntersectingLinks(e.y,this._activeProviderReplies);}));}_removeIntersectingLinks(e,t){const i=new Set;for(let s=0;s<t.size;s++){const r=t.get(s);if(r)for(let t=0;t<r.length;t++){const s=r[t],n=s.link.range.start.y<e?0:s.link.range.start.x,o=s.link.range.end.y>e?this._bufferService.cols:s.link.range.end.x;for(let e=n;e<=o;e++){if(i.has(e)){r.splice(t--,1);break}i.add(e);}}}}_checkLinkProviderResult(e,t,i){var s;if(!this._activeProviderReplies)return i;const r=this._activeProviderReplies.get(e);let n=!1;for(let t=0;t<e;t++)this._activeProviderReplies.has(t)&&!this._activeProviderReplies.get(t)||(n=!0);if(!n&&r){const e=r.find((e=>this._linkAtPosition(e.link,t)));e&&(i=!0,this._handleNewLink(e));}if(this._activeProviderReplies.size===this._linkProviders.length&&!i)for(let e=0;e<this._activeProviderReplies.size;e++){const r=null===(s=this._activeProviderReplies.get(e))||void 0===s?void 0:s.find((e=>this._linkAtPosition(e.link,t)));if(r){i=!0,this._handleNewLink(r);break}}return i}_handleMouseDown(){this._mouseDownLink=this._currentLink;}_handleMouseUp(e){if(!this._element||!this._mouseService||!this._currentLink)return;const t=this._positionFromMouseEvent(e,this._element,this._mouseService);t&&this._mouseDownLink===this._currentLink&&this._linkAtPosition(this._currentLink.link,t)&&this._currentLink.link.activate(e,this._currentLink.link.text);}_clearCurrentLink(e,t){this._element&&this._currentLink&&this._lastMouseEvent&&(!e||!t||this._currentLink.link.range.start.y>=e&&this._currentLink.link.range.end.y<=t)&&(this._linkLeave(this._element,this._currentLink.link,this._lastMouseEvent),this._currentLink=void 0,(0, a.disposeArray)(this._linkCacheDisposables));}_handleNewLink(e){if(!this._element||!this._lastMouseEvent||!this._mouseService)return;const t=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);t&&this._linkAtPosition(e.link,t)&&(this._currentLink=e,this._currentLink.state={decorations:{underline:void 0===e.link.decorations||e.link.decorations.underline,pointerCursor:void 0===e.link.decorations||e.link.decorations.pointerCursor},isHovered:!0},this._linkHover(this._element,e.link,this._lastMouseEvent),e.link.decorations={},Object.defineProperties(e.link.decorations,{pointerCursor:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.pointerCursor},set:e=>{var t,i;(null===(t=this._currentLink)||void 0===t?void 0:t.state)&&this._currentLink.state.decorations.pointerCursor!==e&&(this._currentLink.state.decorations.pointerCursor=e,this._currentLink.state.isHovered&&(null===(i=this._element)||void 0===i||i.classList.toggle("xterm-cursor-pointer",e)));}},underline:{get:()=>{var e,t;return null===(t=null===(e=this._currentLink)||void 0===e?void 0:e.state)||void 0===t?void 0:t.decorations.underline},set:t=>{var i,s,r;(null===(i=this._currentLink)||void 0===i?void 0:i.state)&&(null===(r=null===(s=this._currentLink)||void 0===s?void 0:s.state)||void 0===r?void 0:r.decorations.underline)!==t&&(this._currentLink.state.decorations.underline=t,this._currentLink.state.isHovered&&this._fireUnderlineEvent(e.link,t));}}}),this._renderService&&this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange((e=>{if(!this._currentLink)return;const t=0===e.start?0:e.start+1+this._bufferService.buffer.ydisp,i=this._bufferService.buffer.ydisp+1+e.end;if(this._currentLink.link.range.start.y>=t&&this._currentLink.link.range.end.y<=i&&(this._clearCurrentLink(t,i),this._lastMouseEvent&&this._element)){const e=this._positionFromMouseEvent(this._lastMouseEvent,this._element,this._mouseService);e&&this._askForLink(e,!1);}}))));}_linkHover(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!0,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!0),this._currentLink.state.decorations.pointerCursor&&e.classList.add("xterm-cursor-pointer")),t.hover&&t.hover(i,t.text);}_fireUnderlineEvent(e,t){const i=e.range,s=this._bufferService.buffer.ydisp,r=this._createLinkUnderlineEvent(i.start.x-1,i.start.y-s-1,i.end.x,i.end.y-s-1,void 0);(t?this._onShowLinkUnderline:this._onHideLinkUnderline).fire(r);}_linkLeave(e,t,i){var s;(null===(s=this._currentLink)||void 0===s?void 0:s.state)&&(this._currentLink.state.isHovered=!1,this._currentLink.state.decorations.underline&&this._fireUnderlineEvent(t,!1),this._currentLink.state.decorations.pointerCursor&&e.classList.remove("xterm-cursor-pointer")),t.leave&&t.leave(i,t.text);}_linkAtPosition(e,t){const i=e.range.start.y*this._bufferService.cols+e.range.start.x,s=e.range.end.y*this._bufferService.cols+e.range.end.x,r=t.y*this._bufferService.cols+t.x;return i<=r&&r<=s}_positionFromMouseEvent(e,t,i){const s=i.getCoords(e,t,this._bufferService.cols,this._bufferService.rows);if(s)return {x:s[0],y:s[1]+this._bufferService.buffer.ydisp}}_createLinkUnderlineEvent(e,t,i,s,r){return {x1:e,y1:t,x2:i,y2:s,cols:this._bufferService.cols,fg:r}}};t.Linkifier2=c=s([r(0,h.IBufferService)],c);},9042:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.tooMuchOutput=t.promptLabel=void 0,t.promptLabel="Terminal input",t.tooMuchOutput="Too much output to announce, navigate to rows manually to read";},3730:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OscLinkProvider=void 0;const n=i(511),o=i(2585);let a=t.OscLinkProvider=class{constructor(e,t,i){this._bufferService=e,this._optionsService=t,this._oscLinkService=i;}provideLinks(e,t){var i;const s=this._bufferService.buffer.lines.get(e-1);if(!s)return void t(void 0);const r=[],o=this._optionsService.rawOptions.linkHandler,a=new n.CellData,c=s.getTrimmedLength();let l=-1,d=-1,_=!1;for(let t=0;t<c;t++)if(-1!==d||s.hasContent(t)){if(s.loadCell(t,a),a.hasExtendedAttrs()&&a.extended.urlId){if(-1===d){d=t,l=a.extended.urlId;continue}_=a.extended.urlId!==l;}else -1!==d&&(_=!0);if(_||-1!==d&&t===c-1){const s=null===(i=this._oscLinkService.getLinkData(l))||void 0===i?void 0:i.uri;if(s){const i={start:{x:d+1,y:e},end:{x:t+(_||t!==c-1?0:1),y:e}};let n=!1;if(!(null==o?void 0:o.allowNonHttpProtocols))try{const e=new URL(s);["http:","https:"].includes(e.protocol)||(n=!0);}catch(e){n=!0;}n||r.push({text:s,range:i,activate:(e,t)=>o?o.activate(e,t,i):h(0,t),hover:(e,t)=>{var s;return null===(s=null==o?void 0:o.hover)||void 0===s?void 0:s.call(o,e,t,i)},leave:(e,t)=>{var s;return null===(s=null==o?void 0:o.leave)||void 0===s?void 0:s.call(o,e,t,i)}});}_=!1,a.hasExtendedAttrs()&&a.extended.urlId?(d=t,l=a.extended.urlId):(d=-1,l=-1);}}t(r);}};function h(e,t){if(confirm(`Do you want to navigate to ${t}?\n\nWARNING: This link could potentially be dangerous`)){const e=window.open();if(e){try{e.opener=null;}catch(e){}e.location.href=t;}else console.warn("Opening link blocked as opener could not be cleared");}}t.OscLinkProvider=a=s([r(0,o.IBufferService),r(1,o.IOptionsService),r(2,o.IOscLinkService)],a);},6193:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.RenderDebouncer=void 0,t.RenderDebouncer=class{constructor(e,t){this._parentWindow=e,this._renderCallback=t,this._refreshCallbacks=[];}dispose(){this._animationFrame&&(this._parentWindow.cancelAnimationFrame(this._animationFrame),this._animationFrame=void 0);}addRefreshCallback(e){return this._refreshCallbacks.push(e),this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh()))),this._animationFrame}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t,this._animationFrame||(this._animationFrame=this._parentWindow.requestAnimationFrame((()=>this._innerRefresh())));}_innerRefresh(){if(this._animationFrame=void 0,void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return void this._runRefreshCallbacks();const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t),this._runRefreshCallbacks();}_runRefreshCallbacks(){for(const e of this._refreshCallbacks)e(0);this._refreshCallbacks=[];}};},5596:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScreenDprMonitor=void 0;const s=i(844);class r extends s.Disposable{constructor(e){super(),this._parentWindow=e,this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this.register((0, s.toDisposable)((()=>{this.clearListener();})));}setListener(e){this._listener&&this.clearListener(),this._listener=e,this._outerListener=()=>{this._listener&&(this._listener(this._parentWindow.devicePixelRatio,this._currentDevicePixelRatio),this._updateDpr());},this._updateDpr();}_updateDpr(){var e;this._outerListener&&(null===(e=this._resolutionMediaMatchList)||void 0===e||e.removeListener(this._outerListener),this._currentDevicePixelRatio=this._parentWindow.devicePixelRatio,this._resolutionMediaMatchList=this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`),this._resolutionMediaMatchList.addListener(this._outerListener));}clearListener(){this._resolutionMediaMatchList&&this._listener&&this._outerListener&&(this._resolutionMediaMatchList.removeListener(this._outerListener),this._resolutionMediaMatchList=void 0,this._listener=void 0,this._outerListener=void 0);}}t.ScreenDprMonitor=r;},3236:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Terminal=void 0;const s=i(3614),r=i(3656),n=i(6465),o=i(9042),a=i(3730),h=i(1680),c=i(3107),l=i(5744),d=i(2950),_=i(1296),u=i(428),f=i(4269),v=i(5114),p=i(8934),g=i(3230),m=i(9312),S=i(4725),C=i(6731),b=i(8055),y=i(8969),w=i(8460),E=i(844),k=i(6114),L=i(8437),D=i(2584),R=i(7399),x=i(5941),A=i(9074),B=i(2585),T=i(5435),M=i(4567),O="undefined"!=typeof window?window.document:null;class P extends y.CoreTerminal{get onFocus(){return this._onFocus.event}get onBlur(){return this._onBlur.event}get onA11yChar(){return this._onA11yCharEmitter.event}get onA11yTab(){return this._onA11yTabEmitter.event}get onWillOpen(){return this._onWillOpen.event}constructor(e={}){super(e),this.browser=k,this._keyDownHandled=!1,this._keyDownSeen=!1,this._keyPressHandled=!1,this._unprocessedDeadKey=!1,this._accessibilityManager=this.register(new E.MutableDisposable),this._onCursorMove=this.register(new w.EventEmitter),this.onCursorMove=this._onCursorMove.event,this._onKey=this.register(new w.EventEmitter),this.onKey=this._onKey.event,this._onRender=this.register(new w.EventEmitter),this.onRender=this._onRender.event,this._onSelectionChange=this.register(new w.EventEmitter),this.onSelectionChange=this._onSelectionChange.event,this._onTitleChange=this.register(new w.EventEmitter),this.onTitleChange=this._onTitleChange.event,this._onBell=this.register(new w.EventEmitter),this.onBell=this._onBell.event,this._onFocus=this.register(new w.EventEmitter),this._onBlur=this.register(new w.EventEmitter),this._onA11yCharEmitter=this.register(new w.EventEmitter),this._onA11yTabEmitter=this.register(new w.EventEmitter),this._onWillOpen=this.register(new w.EventEmitter),this._setup(),this.linkifier2=this.register(this._instantiationService.createInstance(n.Linkifier2)),this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(a.OscLinkProvider)),this._decorationService=this._instantiationService.createInstance(A.DecorationService),this._instantiationService.setService(B.IDecorationService,this._decorationService),this.register(this._inputHandler.onRequestBell((()=>this._onBell.fire()))),this.register(this._inputHandler.onRequestRefreshRows(((e,t)=>this.refresh(e,t)))),this.register(this._inputHandler.onRequestSendFocus((()=>this._reportFocus()))),this.register(this._inputHandler.onRequestReset((()=>this.reset()))),this.register(this._inputHandler.onRequestWindowsOptionsReport((e=>this._reportWindowsOptions(e)))),this.register(this._inputHandler.onColor((e=>this._handleColorEvent(e)))),this.register((0, w.forwardEvent)(this._inputHandler.onCursorMove,this._onCursorMove)),this.register((0, w.forwardEvent)(this._inputHandler.onTitleChange,this._onTitleChange)),this.register((0, w.forwardEvent)(this._inputHandler.onA11yChar,this._onA11yCharEmitter)),this.register((0, w.forwardEvent)(this._inputHandler.onA11yTab,this._onA11yTabEmitter)),this.register(this._bufferService.onResize((e=>this._afterResize(e.cols,e.rows)))),this.register((0, E.toDisposable)((()=>{var e,t;this._customKeyEventHandler=void 0,null===(t=null===(e=this.element)||void 0===e?void 0:e.parentNode)||void 0===t||t.removeChild(this.element);})));}_handleColorEvent(e){if(this._themeService)for(const t of e){let e,i="";switch(t.index){case 256:e="foreground",i="10";break;case 257:e="background",i="11";break;case 258:e="cursor",i="12";break;default:e="ansi",i="4;"+t.index;}switch(t.type){case 0:const s=b.color.toColorRGB("ansi"===e?this._themeService.colors.ansi[t.index]:this._themeService.colors[e]);this.coreService.triggerDataEvent(`${D.C0.ESC}]${i};${(0, x.toRgbString)(s)}${D.C1_ESCAPED.ST}`);break;case 1:if("ansi"===e)this._themeService.modifyColors((e=>e.ansi[t.index]=b.rgba.toColor(...t.color)));else {const i=e;this._themeService.modifyColors((e=>e[i]=b.rgba.toColor(...t.color)));}break;case 2:this._themeService.restoreColor(t.index);}}}_setup(){super._setup(),this._customKeyEventHandler=void 0;}get buffer(){return this.buffers.active}focus(){this.textarea&&this.textarea.focus({preventScroll:!0});}_handleScreenReaderModeOptionChange(e){e?!this._accessibilityManager.value&&this._renderService&&(this._accessibilityManager.value=this._instantiationService.createInstance(M.AccessibilityManager,this)):this._accessibilityManager.clear();}_handleTextAreaFocus(e){this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(D.C0.ESC+"[I"),this.updateCursorStyle(e),this.element.classList.add("focus"),this._showCursor(),this._onFocus.fire();}blur(){var e;return null===(e=this.textarea)||void 0===e?void 0:e.blur()}_handleTextAreaBlur(){this.textarea.value="",this.refresh(this.buffer.y,this.buffer.y),this.coreService.decPrivateModes.sendFocus&&this.coreService.triggerDataEvent(D.C0.ESC+"[O"),this.element.classList.remove("focus"),this._onBlur.fire();}_syncTextArea(){if(!this.textarea||!this.buffer.isCursorInViewport||this._compositionHelper.isComposing||!this._renderService)return;const e=this.buffer.ybase+this.buffer.y,t=this.buffer.lines.get(e);if(!t)return;const i=Math.min(this.buffer.x,this.cols-1),s=this._renderService.dimensions.css.cell.height,r=t.getWidth(i),n=this._renderService.dimensions.css.cell.width*r,o=this.buffer.y*this._renderService.dimensions.css.cell.height,a=i*this._renderService.dimensions.css.cell.width;this.textarea.style.left=a+"px",this.textarea.style.top=o+"px",this.textarea.style.width=n+"px",this.textarea.style.height=s+"px",this.textarea.style.lineHeight=s+"px",this.textarea.style.zIndex="-5";}_initGlobal(){this._bindKeys(),this.register((0, r.addDisposableDomListener)(this.element,"copy",(e=>{this.hasSelection()&&(0, s.copyHandler)(e,this._selectionService);})));const e=e=>(0, s.handlePasteEvent)(e,this.textarea,this.coreService,this.optionsService);this.register((0, r.addDisposableDomListener)(this.textarea,"paste",e)),this.register((0, r.addDisposableDomListener)(this.element,"paste",e)),k.isFirefox?this.register((0, r.addDisposableDomListener)(this.element,"mousedown",(e=>{2===e.button&&(0, s.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord);}))):this.register((0, r.addDisposableDomListener)(this.element,"contextmenu",(e=>{(0, s.rightClickHandler)(e,this.textarea,this.screenElement,this._selectionService,this.options.rightClickSelectsWord);}))),k.isLinux&&this.register((0, r.addDisposableDomListener)(this.element,"auxclick",(e=>{1===e.button&&(0, s.moveTextAreaUnderMouseCursor)(e,this.textarea,this.screenElement);})));}_bindKeys(){this.register((0, r.addDisposableDomListener)(this.textarea,"keyup",(e=>this._keyUp(e)),!0)),this.register((0, r.addDisposableDomListener)(this.textarea,"keydown",(e=>this._keyDown(e)),!0)),this.register((0, r.addDisposableDomListener)(this.textarea,"keypress",(e=>this._keyPress(e)),!0)),this.register((0, r.addDisposableDomListener)(this.textarea,"compositionstart",(()=>this._compositionHelper.compositionstart()))),this.register((0, r.addDisposableDomListener)(this.textarea,"compositionupdate",(e=>this._compositionHelper.compositionupdate(e)))),this.register((0, r.addDisposableDomListener)(this.textarea,"compositionend",(()=>this._compositionHelper.compositionend()))),this.register((0, r.addDisposableDomListener)(this.textarea,"input",(e=>this._inputEvent(e)),!0)),this.register(this.onRender((()=>this._compositionHelper.updateCompositionElements())));}open(e){var t;if(!e)throw new Error("Terminal requires a parent element.");e.isConnected||this._logService.debug("Terminal.open was called on an element that was not attached to the DOM"),this._document=e.ownerDocument,this.element=this._document.createElement("div"),this.element.dir="ltr",this.element.classList.add("terminal"),this.element.classList.add("xterm"),e.appendChild(this.element);const i=O.createDocumentFragment();this._viewportElement=O.createElement("div"),this._viewportElement.classList.add("xterm-viewport"),i.appendChild(this._viewportElement),this._viewportScrollArea=O.createElement("div"),this._viewportScrollArea.classList.add("xterm-scroll-area"),this._viewportElement.appendChild(this._viewportScrollArea),this.screenElement=O.createElement("div"),this.screenElement.classList.add("xterm-screen"),this._helperContainer=O.createElement("div"),this._helperContainer.classList.add("xterm-helpers"),this.screenElement.appendChild(this._helperContainer),i.appendChild(this.screenElement),this.textarea=O.createElement("textarea"),this.textarea.classList.add("xterm-helper-textarea"),this.textarea.setAttribute("aria-label",o.promptLabel),k.isChromeOS||this.textarea.setAttribute("aria-multiline","false"),this.textarea.setAttribute("autocorrect","off"),this.textarea.setAttribute("autocapitalize","off"),this.textarea.setAttribute("spellcheck","false"),this.textarea.tabIndex=0,this._coreBrowserService=this._instantiationService.createInstance(v.CoreBrowserService,this.textarea,null!==(t=this._document.defaultView)&&void 0!==t?t:window),this._instantiationService.setService(S.ICoreBrowserService,this._coreBrowserService),this.register((0, r.addDisposableDomListener)(this.textarea,"focus",(e=>this._handleTextAreaFocus(e)))),this.register((0, r.addDisposableDomListener)(this.textarea,"blur",(()=>this._handleTextAreaBlur()))),this._helperContainer.appendChild(this.textarea),this._charSizeService=this._instantiationService.createInstance(u.CharSizeService,this._document,this._helperContainer),this._instantiationService.setService(S.ICharSizeService,this._charSizeService),this._themeService=this._instantiationService.createInstance(C.ThemeService),this._instantiationService.setService(S.IThemeService,this._themeService),this._characterJoinerService=this._instantiationService.createInstance(f.CharacterJoinerService),this._instantiationService.setService(S.ICharacterJoinerService,this._characterJoinerService),this._renderService=this.register(this._instantiationService.createInstance(g.RenderService,this.rows,this.screenElement)),this._instantiationService.setService(S.IRenderService,this._renderService),this.register(this._renderService.onRenderedViewportChange((e=>this._onRender.fire(e)))),this.onResize((e=>this._renderService.resize(e.cols,e.rows))),this._compositionView=O.createElement("div"),this._compositionView.classList.add("composition-view"),this._compositionHelper=this._instantiationService.createInstance(d.CompositionHelper,this.textarea,this._compositionView),this._helperContainer.appendChild(this._compositionView),this.element.appendChild(i);try{this._onWillOpen.fire(this.element);}catch(e){}this._renderService.hasRenderer()||this._renderService.setRenderer(this._createRenderer()),this._mouseService=this._instantiationService.createInstance(p.MouseService),this._instantiationService.setService(S.IMouseService,this._mouseService),this.viewport=this._instantiationService.createInstance(h.Viewport,this._viewportElement,this._viewportScrollArea),this.viewport.onRequestScrollLines((e=>this.scrollLines(e.amount,e.suppressScrollEvent,1))),this.register(this._inputHandler.onRequestSyncScrollBar((()=>this.viewport.syncScrollArea()))),this.register(this.viewport),this.register(this.onCursorMove((()=>{this._renderService.handleCursorMove(),this._syncTextArea();}))),this.register(this.onResize((()=>this._renderService.handleResize(this.cols,this.rows)))),this.register(this.onBlur((()=>this._renderService.handleBlur()))),this.register(this.onFocus((()=>this._renderService.handleFocus()))),this.register(this._renderService.onDimensionsChange((()=>this.viewport.syncScrollArea()))),this._selectionService=this.register(this._instantiationService.createInstance(m.SelectionService,this.element,this.screenElement,this.linkifier2)),this._instantiationService.setService(S.ISelectionService,this._selectionService),this.register(this._selectionService.onRequestScrollLines((e=>this.scrollLines(e.amount,e.suppressScrollEvent)))),this.register(this._selectionService.onSelectionChange((()=>this._onSelectionChange.fire()))),this.register(this._selectionService.onRequestRedraw((e=>this._renderService.handleSelectionChanged(e.start,e.end,e.columnSelectMode)))),this.register(this._selectionService.onLinuxMouseSelection((e=>{this.textarea.value=e,this.textarea.focus(),this.textarea.select();}))),this.register(this._onScroll.event((e=>{this.viewport.syncScrollArea(),this._selectionService.refresh();}))),this.register((0, r.addDisposableDomListener)(this._viewportElement,"scroll",(()=>this._selectionService.refresh()))),this.linkifier2.attachToDom(this.screenElement,this._mouseService,this._renderService),this.register(this._instantiationService.createInstance(c.BufferDecorationRenderer,this.screenElement)),this.register((0, r.addDisposableDomListener)(this.element,"mousedown",(e=>this._selectionService.handleMouseDown(e)))),this.coreMouseService.areMouseEventsActive?(this._selectionService.disable(),this.element.classList.add("enable-mouse-events")):this._selectionService.enable(),this.options.screenReaderMode&&(this._accessibilityManager.value=this._instantiationService.createInstance(M.AccessibilityManager,this)),this.register(this.optionsService.onSpecificOptionChange("screenReaderMode",(e=>this._handleScreenReaderModeOptionChange(e)))),this.options.overviewRulerWidth&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(l.OverviewRulerRenderer,this._viewportElement,this.screenElement))),this.optionsService.onSpecificOptionChange("overviewRulerWidth",(e=>{!this._overviewRulerRenderer&&e&&this._viewportElement&&this.screenElement&&(this._overviewRulerRenderer=this.register(this._instantiationService.createInstance(l.OverviewRulerRenderer,this._viewportElement,this.screenElement)));})),this._charSizeService.measure(),this.refresh(0,this.rows-1),this._initGlobal(),this.bindMouse();}_createRenderer(){return this._instantiationService.createInstance(_.DomRenderer,this.element,this.screenElement,this._viewportElement,this.linkifier2)}bindMouse(){const e=this,t=this.element;function i(t){const i=e._mouseService.getMouseReportCoords(t,e.screenElement);if(!i)return !1;let s,r;switch(t.overrideType||t.type){case"mousemove":r=32,void 0===t.buttons?(s=3,void 0!==t.button&&(s=t.button<3?t.button:3)):s=1&t.buttons?0:4&t.buttons?1:2&t.buttons?2:3;break;case"mouseup":r=0,s=t.button<3?t.button:3;break;case"mousedown":r=1,s=t.button<3?t.button:3;break;case"wheel":if(0===e.viewport.getLinesScrolled(t))return !1;r=t.deltaY<0?0:1,s=4;break;default:return !1}return !(void 0===r||void 0===s||s>4)&&e.coreMouseService.triggerMouseEvent({col:i.col,row:i.row,x:i.x,y:i.y,button:s,action:r,ctrl:t.ctrlKey,alt:t.altKey,shift:t.shiftKey})}const s={mouseup:null,wheel:null,mousedrag:null,mousemove:null},n={mouseup:e=>(i(e),e.buttons||(this._document.removeEventListener("mouseup",s.mouseup),s.mousedrag&&this._document.removeEventListener("mousemove",s.mousedrag)),this.cancel(e)),wheel:e=>(i(e),this.cancel(e,!0)),mousedrag:e=>{e.buttons&&i(e);},mousemove:e=>{e.buttons||i(e);}};this.register(this.coreMouseService.onProtocolChange((e=>{e?("debug"===this.optionsService.rawOptions.logLevel&&this._logService.debug("Binding to mouse events:",this.coreMouseService.explainEvents(e)),this.element.classList.add("enable-mouse-events"),this._selectionService.disable()):(this._logService.debug("Unbinding from mouse events."),this.element.classList.remove("enable-mouse-events"),this._selectionService.enable()),8&e?s.mousemove||(t.addEventListener("mousemove",n.mousemove),s.mousemove=n.mousemove):(t.removeEventListener("mousemove",s.mousemove),s.mousemove=null),16&e?s.wheel||(t.addEventListener("wheel",n.wheel,{passive:!1}),s.wheel=n.wheel):(t.removeEventListener("wheel",s.wheel),s.wheel=null),2&e?s.mouseup||(t.addEventListener("mouseup",n.mouseup),s.mouseup=n.mouseup):(this._document.removeEventListener("mouseup",s.mouseup),t.removeEventListener("mouseup",s.mouseup),s.mouseup=null),4&e?s.mousedrag||(s.mousedrag=n.mousedrag):(this._document.removeEventListener("mousemove",s.mousedrag),s.mousedrag=null);}))),this.coreMouseService.activeProtocol=this.coreMouseService.activeProtocol,this.register((0, r.addDisposableDomListener)(t,"mousedown",(e=>{if(e.preventDefault(),this.focus(),this.coreMouseService.areMouseEventsActive&&!this._selectionService.shouldForceSelection(e))return i(e),s.mouseup&&this._document.addEventListener("mouseup",s.mouseup),s.mousedrag&&this._document.addEventListener("mousemove",s.mousedrag),this.cancel(e)}))),this.register((0, r.addDisposableDomListener)(t,"wheel",(e=>{if(!s.wheel){if(!this.buffer.hasScrollback){const t=this.viewport.getLinesScrolled(e);if(0===t)return;const i=D.C0.ESC+(this.coreService.decPrivateModes.applicationCursorKeys?"O":"[")+(e.deltaY<0?"A":"B");let s="";for(let e=0;e<Math.abs(t);e++)s+=i;return this.coreService.triggerDataEvent(s,!0),this.cancel(e,!0)}return this.viewport.handleWheel(e)?this.cancel(e):void 0}}),{passive:!1})),this.register((0, r.addDisposableDomListener)(t,"touchstart",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.handleTouchStart(e),this.cancel(e)}),{passive:!0})),this.register((0, r.addDisposableDomListener)(t,"touchmove",(e=>{if(!this.coreMouseService.areMouseEventsActive)return this.viewport.handleTouchMove(e)?void 0:this.cancel(e)}),{passive:!1}));}refresh(e,t){var i;null===(i=this._renderService)||void 0===i||i.refreshRows(e,t);}updateCursorStyle(e){var t;(null===(t=this._selectionService)||void 0===t?void 0:t.shouldColumnSelect(e))?this.element.classList.add("column-select"):this.element.classList.remove("column-select");}_showCursor(){this.coreService.isCursorInitialized||(this.coreService.isCursorInitialized=!0,this.refresh(this.buffer.y,this.buffer.y));}scrollLines(e,t,i=0){var s;1===i?(super.scrollLines(e,t,i),this.refresh(0,this.rows-1)):null===(s=this.viewport)||void 0===s||s.scrollLines(e);}paste(e){(0, s.paste)(e,this.textarea,this.coreService,this.optionsService);}attachCustomKeyEventHandler(e){this._customKeyEventHandler=e;}registerLinkProvider(e){return this.linkifier2.registerLinkProvider(e)}registerCharacterJoiner(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");const t=this._characterJoinerService.register(e);return this.refresh(0,this.rows-1),t}deregisterCharacterJoiner(e){if(!this._characterJoinerService)throw new Error("Terminal must be opened first");this._characterJoinerService.deregister(e)&&this.refresh(0,this.rows-1);}get markers(){return this.buffer.markers}registerMarker(e){return this.buffer.addMarker(this.buffer.ybase+this.buffer.y+e)}registerDecoration(e){return this._decorationService.registerDecoration(e)}hasSelection(){return !!this._selectionService&&this._selectionService.hasSelection}select(e,t,i){this._selectionService.setSelection(e,t,i);}getSelection(){return this._selectionService?this._selectionService.selectionText:""}getSelectionPosition(){if(this._selectionService&&this._selectionService.hasSelection)return {start:{x:this._selectionService.selectionStart[0],y:this._selectionService.selectionStart[1]},end:{x:this._selectionService.selectionEnd[0],y:this._selectionService.selectionEnd[1]}}}clearSelection(){var e;null===(e=this._selectionService)||void 0===e||e.clearSelection();}selectAll(){var e;null===(e=this._selectionService)||void 0===e||e.selectAll();}selectLines(e,t){var i;null===(i=this._selectionService)||void 0===i||i.selectLines(e,t);}_keyDown(e){if(this._keyDownHandled=!1,this._keyDownSeen=!0,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;const t=this.browser.isMac&&this.options.macOptionIsMeta&&e.altKey;if(!t&&!this._compositionHelper.keydown(e))return this.options.scrollOnUserInput&&this.buffer.ybase!==this.buffer.ydisp&&this.scrollToBottom(),!1;t||"Dead"!==e.key&&"AltGraph"!==e.key||(this._unprocessedDeadKey=!0);const i=(0, R.evaluateKeyboardEvent)(e,this.coreService.decPrivateModes.applicationCursorKeys,this.browser.isMac,this.options.macOptionIsMeta);if(this.updateCursorStyle(e),3===i.type||2===i.type){const t=this.rows-1;return this.scrollLines(2===i.type?-t:t),this.cancel(e,!0)}return 1===i.type&&this.selectAll(),!!this._isThirdLevelShift(this.browser,e)||(i.cancel&&this.cancel(e,!0),!i.key||!!(e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&1===e.key.length&&e.key.charCodeAt(0)>=65&&e.key.charCodeAt(0)<=90)||(this._unprocessedDeadKey?(this._unprocessedDeadKey=!1,!0):(i.key!==D.C0.ETX&&i.key!==D.C0.CR||(this.textarea.value=""),this._onKey.fire({key:i.key,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(i.key,!0),!this.optionsService.rawOptions.screenReaderMode||e.altKey||e.ctrlKey?this.cancel(e,!0):void(this._keyDownHandled=!0))))}_isThirdLevelShift(e,t){const i=e.isMac&&!this.options.macOptionIsMeta&&t.altKey&&!t.ctrlKey&&!t.metaKey||e.isWindows&&t.altKey&&t.ctrlKey&&!t.metaKey||e.isWindows&&t.getModifierState("AltGraph");return "keypress"===t.type?i:i&&(!t.keyCode||t.keyCode>47)}_keyUp(e){this._keyDownSeen=!1,this._customKeyEventHandler&&!1===this._customKeyEventHandler(e)||(function(e){return 16===e.keyCode||17===e.keyCode||18===e.keyCode}(e)||this.focus(),this.updateCursorStyle(e),this._keyPressHandled=!1);}_keyPress(e){let t;if(this._keyPressHandled=!1,this._keyDownHandled)return !1;if(this._customKeyEventHandler&&!1===this._customKeyEventHandler(e))return !1;if(this.cancel(e),e.charCode)t=e.charCode;else if(null===e.which||void 0===e.which)t=e.keyCode;else {if(0===e.which||0===e.charCode)return !1;t=e.which;}return !(!t||(e.altKey||e.ctrlKey||e.metaKey)&&!this._isThirdLevelShift(this.browser,e)||(t=String.fromCharCode(t),this._onKey.fire({key:t,domEvent:e}),this._showCursor(),this.coreService.triggerDataEvent(t,!0),this._keyPressHandled=!0,this._unprocessedDeadKey=!1,0))}_inputEvent(e){if(e.data&&"insertText"===e.inputType&&(!e.composed||!this._keyDownSeen)&&!this.optionsService.rawOptions.screenReaderMode){if(this._keyPressHandled)return !1;this._unprocessedDeadKey=!1;const t=e.data;return this.coreService.triggerDataEvent(t,!0),this.cancel(e),!0}return !1}resize(e,t){e!==this.cols||t!==this.rows?super.resize(e,t):this._charSizeService&&!this._charSizeService.hasValidSize&&this._charSizeService.measure();}_afterResize(e,t){var i,s;null===(i=this._charSizeService)||void 0===i||i.measure(),null===(s=this.viewport)||void 0===s||s.syncScrollArea(!0);}clear(){var e;if(0!==this.buffer.ybase||0!==this.buffer.y){this.buffer.clearAllMarkers(),this.buffer.lines.set(0,this.buffer.lines.get(this.buffer.ybase+this.buffer.y)),this.buffer.lines.length=1,this.buffer.ydisp=0,this.buffer.ybase=0,this.buffer.y=0;for(let e=1;e<this.rows;e++)this.buffer.lines.push(this.buffer.getBlankLine(L.DEFAULT_ATTR_DATA));this._onScroll.fire({position:this.buffer.ydisp,source:0}),null===(e=this.viewport)||void 0===e||e.reset(),this.refresh(0,this.rows-1);}}reset(){var e,t;this.options.rows=this.rows,this.options.cols=this.cols;const i=this._customKeyEventHandler;this._setup(),super.reset(),null===(e=this._selectionService)||void 0===e||e.reset(),this._decorationService.reset(),null===(t=this.viewport)||void 0===t||t.reset(),this._customKeyEventHandler=i,this.refresh(0,this.rows-1);}clearTextureAtlas(){var e;null===(e=this._renderService)||void 0===e||e.clearTextureAtlas();}_reportFocus(){var e;(null===(e=this.element)||void 0===e?void 0:e.classList.contains("focus"))?this.coreService.triggerDataEvent(D.C0.ESC+"[I"):this.coreService.triggerDataEvent(D.C0.ESC+"[O");}_reportWindowsOptions(e){if(this._renderService)switch(e){case T.WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:const e=this._renderService.dimensions.css.canvas.width.toFixed(0),t=this._renderService.dimensions.css.canvas.height.toFixed(0);this.coreService.triggerDataEvent(`${D.C0.ESC}[4;${t};${e}t`);break;case T.WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:const i=this._renderService.dimensions.css.cell.width.toFixed(0),s=this._renderService.dimensions.css.cell.height.toFixed(0);this.coreService.triggerDataEvent(`${D.C0.ESC}[6;${s};${i}t`);}}cancel(e,t){if(this.options.cancelEvents||t)return e.preventDefault(),e.stopPropagation(),!1}}t.Terminal=P;},9924:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TimeBasedDebouncer=void 0,t.TimeBasedDebouncer=class{constructor(e,t=1e3){this._renderCallback=e,this._debounceThresholdMS=t,this._lastRefreshMs=0,this._additionalRefreshRequested=!1;}dispose(){this._refreshTimeoutID&&clearTimeout(this._refreshTimeoutID);}refresh(e,t,i){this._rowCount=i,e=void 0!==e?e:0,t=void 0!==t?t:this._rowCount-1,this._rowStart=void 0!==this._rowStart?Math.min(this._rowStart,e):e,this._rowEnd=void 0!==this._rowEnd?Math.max(this._rowEnd,t):t;const s=Date.now();if(s-this._lastRefreshMs>=this._debounceThresholdMS)this._lastRefreshMs=s,this._innerRefresh();else if(!this._additionalRefreshRequested){const e=s-this._lastRefreshMs,t=this._debounceThresholdMS-e;this._additionalRefreshRequested=!0,this._refreshTimeoutID=window.setTimeout((()=>{this._lastRefreshMs=Date.now(),this._innerRefresh(),this._additionalRefreshRequested=!1,this._refreshTimeoutID=void 0;}),t);}}_innerRefresh(){if(void 0===this._rowStart||void 0===this._rowEnd||void 0===this._rowCount)return;const e=Math.max(this._rowStart,0),t=Math.min(this._rowEnd,this._rowCount-1);this._rowStart=void 0,this._rowEnd=void 0,this._renderCallback(e,t);}};},1680:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.Viewport=void 0;const n=i(3656),o=i(4725),a=i(8460),h=i(844),c=i(2585);let l=t.Viewport=class extends h.Disposable{constructor(e,t,i,s,r,o,h,c){super(),this._viewportElement=e,this._scrollArea=t,this._bufferService=i,this._optionsService=s,this._charSizeService=r,this._renderService=o,this._coreBrowserService=h,this.scrollBarWidth=0,this._currentRowHeight=0,this._currentDeviceCellHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._lastTouchY=0,this._lastScrollTop=0,this._wheelPartialScroll=0,this._refreshAnimationFrame=null,this._ignoreNextScrollEvent=!1,this._smoothScrollState={startTime:0,origin:-1,target:-1},this._onRequestScrollLines=this.register(new a.EventEmitter),this.onRequestScrollLines=this._onRequestScrollLines.event,this.scrollBarWidth=this._viewportElement.offsetWidth-this._scrollArea.offsetWidth||15,this.register((0, n.addDisposableDomListener)(this._viewportElement,"scroll",this._handleScroll.bind(this))),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._renderDimensions=this._renderService.dimensions,this.register(this._renderService.onDimensionsChange((e=>this._renderDimensions=e))),this._handleThemeChange(c.colors),this.register(c.onChangeColors((e=>this._handleThemeChange(e)))),this.register(this._optionsService.onSpecificOptionChange("scrollback",(()=>this.syncScrollArea()))),setTimeout((()=>this.syncScrollArea()));}_handleThemeChange(e){this._viewportElement.style.backgroundColor=e.background.css;}reset(){this._currentRowHeight=0,this._currentDeviceCellHeight=0,this._lastRecordedBufferLength=0,this._lastRecordedViewportHeight=0,this._lastRecordedBufferHeight=0,this._lastTouchY=0,this._lastScrollTop=0,this._coreBrowserService.window.requestAnimationFrame((()=>this.syncScrollArea()));}_refresh(e){if(e)return this._innerRefresh(),void(null!==this._refreshAnimationFrame&&this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame));null===this._refreshAnimationFrame&&(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._innerRefresh())));}_innerRefresh(){if(this._charSizeService.height>0){this._currentRowHeight=this._renderService.dimensions.device.cell.height/this._coreBrowserService.dpr,this._currentDeviceCellHeight=this._renderService.dimensions.device.cell.height,this._lastRecordedViewportHeight=this._viewportElement.offsetHeight;const e=Math.round(this._currentRowHeight*this._lastRecordedBufferLength)+(this._lastRecordedViewportHeight-this._renderService.dimensions.css.canvas.height);this._lastRecordedBufferHeight!==e&&(this._lastRecordedBufferHeight=e,this._scrollArea.style.height=this._lastRecordedBufferHeight+"px");}const e=this._bufferService.buffer.ydisp*this._currentRowHeight;this._viewportElement.scrollTop!==e&&(this._ignoreNextScrollEvent=!0,this._viewportElement.scrollTop=e),this._refreshAnimationFrame=null;}syncScrollArea(e=!1){if(this._lastRecordedBufferLength!==this._bufferService.buffer.lines.length)return this._lastRecordedBufferLength=this._bufferService.buffer.lines.length,void this._refresh(e);this._lastRecordedViewportHeight===this._renderService.dimensions.css.canvas.height&&this._lastScrollTop===this._activeBuffer.ydisp*this._currentRowHeight&&this._renderDimensions.device.cell.height===this._currentDeviceCellHeight||this._refresh(e);}_handleScroll(e){if(this._lastScrollTop=this._viewportElement.scrollTop,!this._viewportElement.offsetParent)return;if(this._ignoreNextScrollEvent)return this._ignoreNextScrollEvent=!1,void this._onRequestScrollLines.fire({amount:0,suppressScrollEvent:!0});const t=Math.round(this._lastScrollTop/this._currentRowHeight)-this._bufferService.buffer.ydisp;this._onRequestScrollLines.fire({amount:t,suppressScrollEvent:!0});}_smoothScroll(){if(this._isDisposed||-1===this._smoothScrollState.origin||-1===this._smoothScrollState.target)return;const e=this._smoothScrollPercent();this._viewportElement.scrollTop=this._smoothScrollState.origin+Math.round(e*(this._smoothScrollState.target-this._smoothScrollState.origin)),e<1?this._coreBrowserService.window.requestAnimationFrame((()=>this._smoothScroll())):this._clearSmoothScrollState();}_smoothScrollPercent(){return this._optionsService.rawOptions.smoothScrollDuration&&this._smoothScrollState.startTime?Math.max(Math.min((Date.now()-this._smoothScrollState.startTime)/this._optionsService.rawOptions.smoothScrollDuration,1),0):1}_clearSmoothScrollState(){this._smoothScrollState.startTime=0,this._smoothScrollState.origin=-1,this._smoothScrollState.target=-1;}_bubbleScroll(e,t){const i=this._viewportElement.scrollTop+this._lastRecordedViewportHeight;return !(t<0&&0!==this._viewportElement.scrollTop||t>0&&i<this._lastRecordedBufferHeight)||(e.cancelable&&e.preventDefault(),!1)}handleWheel(e){const t=this._getPixelsScrolled(e);return 0!==t&&(this._optionsService.rawOptions.smoothScrollDuration?(this._smoothScrollState.startTime=Date.now(),this._smoothScrollPercent()<1?(this._smoothScrollState.origin=this._viewportElement.scrollTop,-1===this._smoothScrollState.target?this._smoothScrollState.target=this._viewportElement.scrollTop+t:this._smoothScrollState.target+=t,this._smoothScrollState.target=Math.max(Math.min(this._smoothScrollState.target,this._viewportElement.scrollHeight),0),this._smoothScroll()):this._clearSmoothScrollState()):this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}scrollLines(e){if(0!==e)if(this._optionsService.rawOptions.smoothScrollDuration){const t=e*this._currentRowHeight;this._smoothScrollState.startTime=Date.now(),this._smoothScrollPercent()<1?(this._smoothScrollState.origin=this._viewportElement.scrollTop,this._smoothScrollState.target=this._smoothScrollState.origin+t,this._smoothScrollState.target=Math.max(Math.min(this._smoothScrollState.target,this._viewportElement.scrollHeight),0),this._smoothScroll()):this._clearSmoothScrollState();}else this._onRequestScrollLines.fire({amount:e,suppressScrollEvent:!1});}_getPixelsScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_LINE?t*=this._currentRowHeight:e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._currentRowHeight*this._bufferService.rows),t}getBufferElements(e,t){var i;let s,r="";const n=[],o=null!=t?t:this._bufferService.buffer.lines.length,a=this._bufferService.buffer.lines;for(let t=e;t<o;t++){const e=a.get(t);if(!e)continue;const o=null===(i=a.get(t+1))||void 0===i?void 0:i.isWrapped;if(r+=e.translateToString(!o),!o||t===a.length-1){const e=document.createElement("div");e.textContent=r,n.push(e),r.length>0&&(s=e),r="";}}return {bufferElements:n,cursorElement:s}}getLinesScrolled(e){if(0===e.deltaY||e.shiftKey)return 0;let t=this._applyScrollModifier(e.deltaY,e);return e.deltaMode===WheelEvent.DOM_DELTA_PIXEL?(t/=this._currentRowHeight+0,this._wheelPartialScroll+=t,t=Math.floor(Math.abs(this._wheelPartialScroll))*(this._wheelPartialScroll>0?1:-1),this._wheelPartialScroll%=1):e.deltaMode===WheelEvent.DOM_DELTA_PAGE&&(t*=this._bufferService.rows),t}_applyScrollModifier(e,t){const i=this._optionsService.rawOptions.fastScrollModifier;return "alt"===i&&t.altKey||"ctrl"===i&&t.ctrlKey||"shift"===i&&t.shiftKey?e*this._optionsService.rawOptions.fastScrollSensitivity*this._optionsService.rawOptions.scrollSensitivity:e*this._optionsService.rawOptions.scrollSensitivity}handleTouchStart(e){this._lastTouchY=e.touches[0].pageY;}handleTouchMove(e){const t=this._lastTouchY-e.touches[0].pageY;return this._lastTouchY=e.touches[0].pageY,0!==t&&(this._viewportElement.scrollTop+=t,this._bubbleScroll(e,t))}};t.Viewport=l=s([r(2,c.IBufferService),r(3,c.IOptionsService),r(4,o.ICharSizeService),r(5,o.IRenderService),r(6,o.ICoreBrowserService),r(7,o.IThemeService)],l);},3107:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferDecorationRenderer=void 0;const n=i(3656),o=i(4725),a=i(844),h=i(2585);let c=t.BufferDecorationRenderer=class extends a.Disposable{constructor(e,t,i,s){super(),this._screenElement=e,this._bufferService=t,this._decorationService=i,this._renderService=s,this._decorationElements=new Map,this._altBufferIsActive=!1,this._dimensionsChanged=!1,this._container=document.createElement("div"),this._container.classList.add("xterm-decoration-container"),this._screenElement.appendChild(this._container),this.register(this._renderService.onRenderedViewportChange((()=>this._doRefreshDecorations()))),this.register(this._renderService.onDimensionsChange((()=>{this._dimensionsChanged=!0,this._queueRefresh();}))),this.register((0, n.addDisposableDomListener)(window,"resize",(()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._altBufferIsActive=this._bufferService.buffer===this._bufferService.buffers.alt;}))),this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh()))),this.register(this._decorationService.onDecorationRemoved((e=>this._removeDecoration(e)))),this.register((0, a.toDisposable)((()=>{this._container.remove(),this._decorationElements.clear();})));}_queueRefresh(){void 0===this._animationFrame&&(this._animationFrame=this._renderService.addRefreshCallback((()=>{this._doRefreshDecorations(),this._animationFrame=void 0;})));}_doRefreshDecorations(){for(const e of this._decorationService.decorations)this._renderDecoration(e);this._dimensionsChanged=!1;}_renderDecoration(e){this._refreshStyle(e),this._dimensionsChanged&&this._refreshXPosition(e);}_createElement(e){var t,i;const s=document.createElement("div");s.classList.add("xterm-decoration"),s.classList.toggle("xterm-decoration-top-layer","top"===(null===(t=null==e?void 0:e.options)||void 0===t?void 0:t.layer)),s.style.width=`${Math.round((e.options.width||1)*this._renderService.dimensions.css.cell.width)}px`,s.style.height=(e.options.height||1)*this._renderService.dimensions.css.cell.height+"px",s.style.top=(e.marker.line-this._bufferService.buffers.active.ydisp)*this._renderService.dimensions.css.cell.height+"px",s.style.lineHeight=`${this._renderService.dimensions.css.cell.height}px`;const r=null!==(i=e.options.x)&&void 0!==i?i:0;return r&&r>this._bufferService.cols&&(s.style.display="none"),this._refreshXPosition(e,s),s}_refreshStyle(e){const t=e.marker.line-this._bufferService.buffers.active.ydisp;if(t<0||t>=this._bufferService.rows)e.element&&(e.element.style.display="none",e.onRenderEmitter.fire(e.element));else {let i=this._decorationElements.get(e);i||(i=this._createElement(e),e.element=i,this._decorationElements.set(e,i),this._container.appendChild(i),e.onDispose((()=>{this._decorationElements.delete(e),i.remove();}))),i.style.top=t*this._renderService.dimensions.css.cell.height+"px",i.style.display=this._altBufferIsActive?"none":"block",e.onRenderEmitter.fire(i);}}_refreshXPosition(e,t=e.element){var i;if(!t)return;const s=null!==(i=e.options.x)&&void 0!==i?i:0;"right"===(e.options.anchor||"left")?t.style.right=s?s*this._renderService.dimensions.css.cell.width+"px":"":t.style.left=s?s*this._renderService.dimensions.css.cell.width+"px":"";}_removeDecoration(e){var t;null===(t=this._decorationElements.get(e))||void 0===t||t.remove(),this._decorationElements.delete(e),e.dispose();}};t.BufferDecorationRenderer=c=s([r(1,h.IBufferService),r(2,h.IDecorationService),r(3,o.IRenderService)],c);},5871:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ColorZoneStore=void 0,t.ColorZoneStore=class{constructor(){this._zones=[],this._zonePool=[],this._zonePoolIndex=0,this._linePadding={full:0,left:0,center:0,right:0};}get zones(){return this._zonePool.length=Math.min(this._zonePool.length,this._zones.length),this._zones}clear(){this._zones.length=0,this._zonePoolIndex=0;}addDecoration(e){if(e.options.overviewRulerOptions){for(const t of this._zones)if(t.color===e.options.overviewRulerOptions.color&&t.position===e.options.overviewRulerOptions.position){if(this._lineIntersectsZone(t,e.marker.line))return;if(this._lineAdjacentToZone(t,e.marker.line,e.options.overviewRulerOptions.position))return void this._addLineToZone(t,e.marker.line)}if(this._zonePoolIndex<this._zonePool.length)return this._zonePool[this._zonePoolIndex].color=e.options.overviewRulerOptions.color,this._zonePool[this._zonePoolIndex].position=e.options.overviewRulerOptions.position,this._zonePool[this._zonePoolIndex].startBufferLine=e.marker.line,this._zonePool[this._zonePoolIndex].endBufferLine=e.marker.line,void this._zones.push(this._zonePool[this._zonePoolIndex++]);this._zones.push({color:e.options.overviewRulerOptions.color,position:e.options.overviewRulerOptions.position,startBufferLine:e.marker.line,endBufferLine:e.marker.line}),this._zonePool.push(this._zones[this._zones.length-1]),this._zonePoolIndex++;}}setPadding(e){this._linePadding=e;}_lineIntersectsZone(e,t){return t>=e.startBufferLine&&t<=e.endBufferLine}_lineAdjacentToZone(e,t,i){return t>=e.startBufferLine-this._linePadding[i||"full"]&&t<=e.endBufferLine+this._linePadding[i||"full"]}_addLineToZone(e,t){e.startBufferLine=Math.min(e.startBufferLine,t),e.endBufferLine=Math.max(e.endBufferLine,t);}};},5744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OverviewRulerRenderer=void 0;const n=i(5871),o=i(3656),a=i(4725),h=i(844),c=i(2585),l={full:0,left:0,center:0,right:0},d={full:0,left:0,center:0,right:0},_={full:0,left:0,center:0,right:0};let u=t.OverviewRulerRenderer=class extends h.Disposable{get _width(){return this._optionsService.options.overviewRulerWidth||0}constructor(e,t,i,s,r,o,a){var c;super(),this._viewportElement=e,this._screenElement=t,this._bufferService=i,this._decorationService=s,this._renderService=r,this._optionsService=o,this._coreBrowseService=a,this._colorZoneStore=new n.ColorZoneStore,this._shouldUpdateDimensions=!0,this._shouldUpdateAnchor=!0,this._lastKnownBufferLength=0,this._canvas=document.createElement("canvas"),this._canvas.classList.add("xterm-decoration-overview-ruler"),this._refreshCanvasDimensions(),null===(c=this._viewportElement.parentElement)||void 0===c||c.insertBefore(this._canvas,this._viewportElement);const l=this._canvas.getContext("2d");if(!l)throw new Error("Ctx cannot be null");this._ctx=l,this._registerDecorationListeners(),this._registerBufferChangeListeners(),this._registerDimensionChangeListeners(),this.register((0, h.toDisposable)((()=>{var e;null===(e=this._canvas)||void 0===e||e.remove();})));}_registerDecorationListeners(){this.register(this._decorationService.onDecorationRegistered((()=>this._queueRefresh(void 0,!0)))),this.register(this._decorationService.onDecorationRemoved((()=>this._queueRefresh(void 0,!0))));}_registerBufferChangeListeners(){this.register(this._renderService.onRenderedViewportChange((()=>this._queueRefresh()))),this.register(this._bufferService.buffers.onBufferActivate((()=>{this._canvas.style.display=this._bufferService.buffer===this._bufferService.buffers.alt?"none":"block";}))),this.register(this._bufferService.onScroll((()=>{this._lastKnownBufferLength!==this._bufferService.buffers.normal.lines.length&&(this._refreshDrawHeightConstants(),this._refreshColorZonePadding());})));}_registerDimensionChangeListeners(){this.register(this._renderService.onRender((()=>{this._containerHeight&&this._containerHeight===this._screenElement.clientHeight||(this._queueRefresh(!0),this._containerHeight=this._screenElement.clientHeight);}))),this.register(this._optionsService.onSpecificOptionChange("overviewRulerWidth",(()=>this._queueRefresh(!0)))),this.register((0, o.addDisposableDomListener)(this._coreBrowseService.window,"resize",(()=>this._queueRefresh(!0)))),this._queueRefresh(!0);}_refreshDrawConstants(){const e=Math.floor(this._canvas.width/3),t=Math.ceil(this._canvas.width/3);d.full=this._canvas.width,d.left=e,d.center=t,d.right=e,this._refreshDrawHeightConstants(),_.full=0,_.left=0,_.center=d.left,_.right=d.left+d.center;}_refreshDrawHeightConstants(){l.full=Math.round(2*this._coreBrowseService.dpr);const e=this._canvas.height/this._bufferService.buffer.lines.length,t=Math.round(Math.max(Math.min(e,12),6)*this._coreBrowseService.dpr);l.left=t,l.center=t,l.right=t;}_refreshColorZonePadding(){this._colorZoneStore.setPadding({full:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.full),left:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.left),center:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.center),right:Math.floor(this._bufferService.buffers.active.lines.length/(this._canvas.height-1)*l.right)}),this._lastKnownBufferLength=this._bufferService.buffers.normal.lines.length;}_refreshCanvasDimensions(){this._canvas.style.width=`${this._width}px`,this._canvas.width=Math.round(this._width*this._coreBrowseService.dpr),this._canvas.style.height=`${this._screenElement.clientHeight}px`,this._canvas.height=Math.round(this._screenElement.clientHeight*this._coreBrowseService.dpr),this._refreshDrawConstants(),this._refreshColorZonePadding();}_refreshDecorations(){this._shouldUpdateDimensions&&this._refreshCanvasDimensions(),this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height),this._colorZoneStore.clear();for(const e of this._decorationService.decorations)this._colorZoneStore.addDecoration(e);this._ctx.lineWidth=1;const e=this._colorZoneStore.zones;for(const t of e)"full"!==t.position&&this._renderColorZone(t);for(const t of e)"full"===t.position&&this._renderColorZone(t);this._shouldUpdateDimensions=!1,this._shouldUpdateAnchor=!1;}_renderColorZone(e){this._ctx.fillStyle=e.color,this._ctx.fillRect(_[e.position||"full"],Math.round((this._canvas.height-1)*(e.startBufferLine/this._bufferService.buffers.active.lines.length)-l[e.position||"full"]/2),d[e.position||"full"],Math.round((this._canvas.height-1)*((e.endBufferLine-e.startBufferLine)/this._bufferService.buffers.active.lines.length)+l[e.position||"full"]));}_queueRefresh(e,t){this._shouldUpdateDimensions=e||this._shouldUpdateDimensions,this._shouldUpdateAnchor=t||this._shouldUpdateAnchor,void 0===this._animationFrame&&(this._animationFrame=this._coreBrowseService.window.requestAnimationFrame((()=>{this._refreshDecorations(),this._animationFrame=void 0;})));}};t.OverviewRulerRenderer=u=s([r(2,c.IBufferService),r(3,c.IDecorationService),r(4,a.IRenderService),r(5,c.IOptionsService),r(6,a.ICoreBrowserService)],u);},2950:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CompositionHelper=void 0;const n=i(4725),o=i(2585),a=i(2584);let h=t.CompositionHelper=class{get isComposing(){return this._isComposing}constructor(e,t,i,s,r,n){this._textarea=e,this._compositionView=t,this._bufferService=i,this._optionsService=s,this._coreService=r,this._renderService=n,this._isComposing=!1,this._isSendingComposition=!1,this._compositionPosition={start:0,end:0},this._dataAlreadySent="";}compositionstart(){this._isComposing=!0,this._compositionPosition.start=this._textarea.value.length,this._compositionView.textContent="",this._dataAlreadySent="",this._compositionView.classList.add("active");}compositionupdate(e){this._compositionView.textContent=e.data,this.updateCompositionElements(),setTimeout((()=>{this._compositionPosition.end=this._textarea.value.length;}),0);}compositionend(){this._finalizeComposition(!0);}keydown(e){if(this._isComposing||this._isSendingComposition){if(229===e.keyCode)return !1;if(16===e.keyCode||17===e.keyCode||18===e.keyCode)return !1;this._finalizeComposition(!1);}return 229!==e.keyCode||(this._handleAnyTextareaChanges(),!1)}_finalizeComposition(e){if(this._compositionView.classList.remove("active"),this._isComposing=!1,e){const e={start:this._compositionPosition.start,end:this._compositionPosition.end};this._isSendingComposition=!0,setTimeout((()=>{if(this._isSendingComposition){let t;this._isSendingComposition=!1,e.start+=this._dataAlreadySent.length,t=this._isComposing?this._textarea.value.substring(e.start,e.end):this._textarea.value.substring(e.start),t.length>0&&this._coreService.triggerDataEvent(t,!0);}}),0);}else {this._isSendingComposition=!1;const e=this._textarea.value.substring(this._compositionPosition.start,this._compositionPosition.end);this._coreService.triggerDataEvent(e,!0);}}_handleAnyTextareaChanges(){const e=this._textarea.value;setTimeout((()=>{if(!this._isComposing){const t=this._textarea.value,i=t.replace(e,"");this._dataAlreadySent=i,t.length>e.length?this._coreService.triggerDataEvent(i,!0):t.length<e.length?this._coreService.triggerDataEvent(`${a.C0.DEL}`,!0):t.length===e.length&&t!==e&&this._coreService.triggerDataEvent(t,!0);}}),0);}updateCompositionElements(e){if(this._isComposing){if(this._bufferService.buffer.isCursorInViewport){const e=Math.min(this._bufferService.buffer.x,this._bufferService.cols-1),t=this._renderService.dimensions.css.cell.height,i=this._bufferService.buffer.y*this._renderService.dimensions.css.cell.height,s=e*this._renderService.dimensions.css.cell.width;this._compositionView.style.left=s+"px",this._compositionView.style.top=i+"px",this._compositionView.style.height=t+"px",this._compositionView.style.lineHeight=t+"px",this._compositionView.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._compositionView.style.fontSize=this._optionsService.rawOptions.fontSize+"px";const r=this._compositionView.getBoundingClientRect();this._textarea.style.left=s+"px",this._textarea.style.top=i+"px",this._textarea.style.width=Math.max(r.width,1)+"px",this._textarea.style.height=Math.max(r.height,1)+"px",this._textarea.style.lineHeight=r.height+"px";}e||setTimeout((()=>this.updateCompositionElements(!0)),0);}}};t.CompositionHelper=h=s([r(2,o.IBufferService),r(3,o.IOptionsService),r(4,o.ICoreService),r(5,n.IRenderService)],h);},9806:(e,t)=>{function i(e,t,i){const s=i.getBoundingClientRect(),r=e.getComputedStyle(i),n=parseInt(r.getPropertyValue("padding-left")),o=parseInt(r.getPropertyValue("padding-top"));return [t.clientX-s.left-n,t.clientY-s.top-o]}Object.defineProperty(t,"__esModule",{value:!0}),t.getCoords=t.getCoordsRelativeToElement=void 0,t.getCoordsRelativeToElement=i,t.getCoords=function(e,t,s,r,n,o,a,h,c){if(!o)return;const l=i(e,t,s);return l?(l[0]=Math.ceil((l[0]+(c?a/2:0))/a),l[1]=Math.ceil(l[1]/h),l[0]=Math.min(Math.max(l[0],1),r+(c?1:0)),l[1]=Math.min(Math.max(l[1],1),n),l):void 0};},9504:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.moveToCellSequence=void 0;const s=i(2584);function r(e,t,i,s){const r=e-n(e,i),a=t-n(t,i),l=Math.abs(r-a)-function(e,t,i){let s=0;const r=e-n(e,i),a=t-n(t,i);for(let n=0;n<Math.abs(r-a);n++){const a="A"===o(e,t)?-1:1,h=i.buffer.lines.get(r+a*n);(null==h?void 0:h.isWrapped)&&s++;}return s}(e,t,i);return c(l,h(o(e,t),s))}function n(e,t){let i=0,s=t.buffer.lines.get(e),r=null==s?void 0:s.isWrapped;for(;r&&e>=0&&e<t.rows;)i++,s=t.buffer.lines.get(--e),r=null==s?void 0:s.isWrapped;return i}function o(e,t){return e>t?"A":"B"}function a(e,t,i,s,r,n){let o=e,a=t,h="";for(;o!==i||a!==s;)o+=r?1:-1,r&&o>n.cols-1?(h+=n.buffer.translateBufferLineToString(a,!1,e,o),o=0,e=0,a++):!r&&o<0&&(h+=n.buffer.translateBufferLineToString(a,!1,0,e+1),o=n.cols-1,e=o,a--);return h+n.buffer.translateBufferLineToString(a,!1,e,o)}function h(e,t){const i=t?"O":"[";return s.C0.ESC+i+e}function c(e,t){e=Math.floor(e);let i="";for(let s=0;s<e;s++)i+=t;return i}t.moveToCellSequence=function(e,t,i,s){const o=i.buffer.x,l=i.buffer.y;if(!i.buffer.hasScrollback)return function(e,t,i,s,o,l){return 0===r(t,s,o,l).length?"":c(a(e,t,e,t-n(t,o),!1,o).length,h("D",l))}(o,l,0,t,i,s)+r(l,t,i,s)+function(e,t,i,s,o,l){let d;d=r(t,s,o,l).length>0?s-n(s,o):t;const _=s,u=function(e,t,i,s,o,a){let h;return h=r(i,s,o,a).length>0?s-n(s,o):t,e<i&&h<=s||e>=i&&h<s?"C":"D"}(e,t,i,s,o,l);return c(a(e,d,i,_,"C"===u,o).length,h(u,l))}(o,l,e,t,i,s);let d;if(l===t)return d=o>e?"D":"C",c(Math.abs(o-e),h(d,s));d=l>t?"D":"C";const _=Math.abs(l-t);return c(function(e,t){return t.cols-e}(l>t?e:o,i)+(_-1)*i.cols+1+((l>t?o:e)-1),h(d,s))};},1296:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRenderer=void 0;const n=i(3787),o=i(2550),a=i(2223),h=i(6171),c=i(4725),l=i(8055),d=i(8460),_=i(844),u=i(2585),f="xterm-dom-renderer-owner-",v="xterm-rows",p="xterm-fg-",g="xterm-bg-",m="xterm-focus",S="xterm-selection";let C=1,b=t.DomRenderer=class extends _.Disposable{constructor(e,t,i,s,r,a,c,l,u,p){super(),this._element=e,this._screenElement=t,this._viewportElement=i,this._linkifier2=s,this._charSizeService=a,this._optionsService=c,this._bufferService=l,this._coreBrowserService=u,this._themeService=p,this._terminalClass=C++,this._rowElements=[],this.onRequestRedraw=this.register(new d.EventEmitter).event,this._rowContainer=document.createElement("div"),this._rowContainer.classList.add(v),this._rowContainer.style.lineHeight="normal",this._rowContainer.setAttribute("aria-hidden","true"),this._refreshRowElements(this._bufferService.cols,this._bufferService.rows),this._selectionContainer=document.createElement("div"),this._selectionContainer.classList.add(S),this._selectionContainer.setAttribute("aria-hidden","true"),this.dimensions=(0, h.createRenderDimensions)(),this._updateDimensions(),this.register(this._optionsService.onOptionChange((()=>this._handleOptionsChanged()))),this.register(this._themeService.onChangeColors((e=>this._injectCss(e)))),this._injectCss(this._themeService.colors),this._rowFactory=r.createInstance(n.DomRendererRowFactory,document),this._element.classList.add(f+this._terminalClass),this._screenElement.appendChild(this._rowContainer),this._screenElement.appendChild(this._selectionContainer),this.register(this._linkifier2.onShowLinkUnderline((e=>this._handleLinkHover(e)))),this.register(this._linkifier2.onHideLinkUnderline((e=>this._handleLinkLeave(e)))),this.register((0, _.toDisposable)((()=>{this._element.classList.remove(f+this._terminalClass),this._rowContainer.remove(),this._selectionContainer.remove(),this._widthCache.dispose(),this._themeStyleElement.remove(),this._dimensionsStyleElement.remove();}))),this._widthCache=new o.WidthCache(document),this._widthCache.setFont(this._optionsService.rawOptions.fontFamily,this._optionsService.rawOptions.fontSize,this._optionsService.rawOptions.fontWeight,this._optionsService.rawOptions.fontWeightBold),this._setDefaultSpacing();}_updateDimensions(){const e=this._coreBrowserService.dpr;this.dimensions.device.char.width=this._charSizeService.width*e,this.dimensions.device.char.height=Math.ceil(this._charSizeService.height*e),this.dimensions.device.cell.width=this.dimensions.device.char.width+Math.round(this._optionsService.rawOptions.letterSpacing),this.dimensions.device.cell.height=Math.floor(this.dimensions.device.char.height*this._optionsService.rawOptions.lineHeight),this.dimensions.device.char.left=0,this.dimensions.device.char.top=0,this.dimensions.device.canvas.width=this.dimensions.device.cell.width*this._bufferService.cols,this.dimensions.device.canvas.height=this.dimensions.device.cell.height*this._bufferService.rows,this.dimensions.css.canvas.width=Math.round(this.dimensions.device.canvas.width/e),this.dimensions.css.canvas.height=Math.round(this.dimensions.device.canvas.height/e),this.dimensions.css.cell.width=this.dimensions.css.canvas.width/this._bufferService.cols,this.dimensions.css.cell.height=this.dimensions.css.canvas.height/this._bufferService.rows;for(const e of this._rowElements)e.style.width=`${this.dimensions.css.canvas.width}px`,e.style.height=`${this.dimensions.css.cell.height}px`,e.style.lineHeight=`${this.dimensions.css.cell.height}px`,e.style.overflow="hidden";this._dimensionsStyleElement||(this._dimensionsStyleElement=document.createElement("style"),this._screenElement.appendChild(this._dimensionsStyleElement));const t=`${this._terminalSelector} .${v} span { display: inline-block; height: 100%; vertical-align: top;}`;this._dimensionsStyleElement.textContent=t,this._selectionContainer.style.height=this._viewportElement.style.height,this._screenElement.style.width=`${this.dimensions.css.canvas.width}px`,this._screenElement.style.height=`${this.dimensions.css.canvas.height}px`;}_injectCss(e){this._themeStyleElement||(this._themeStyleElement=document.createElement("style"),this._screenElement.appendChild(this._themeStyleElement));let t=`${this._terminalSelector} .${v} { color: ${e.foreground.css}; font-family: ${this._optionsService.rawOptions.fontFamily}; font-size: ${this._optionsService.rawOptions.fontSize}px; font-kerning: none; white-space: pre}`;t+=`${this._terminalSelector} .${v} .xterm-dim { color: ${l.color.multiplyOpacity(e.foreground,.5).css};}`,t+=`${this._terminalSelector} span:not(.xterm-bold) { font-weight: ${this._optionsService.rawOptions.fontWeight};}${this._terminalSelector} span.xterm-bold { font-weight: ${this._optionsService.rawOptions.fontWeightBold};}${this._terminalSelector} span.xterm-italic { font-style: italic;}`,t+="@keyframes blink_box_shadow_"+this._terminalClass+" { 50% {  border-bottom-style: hidden; }}",t+="@keyframes blink_block_"+this._terminalClass+" { 0% {"+`  background-color: ${e.cursor.css};`+`  color: ${e.cursorAccent.css}; } 50% {  background-color: inherit;`+`  color: ${e.cursor.css}; }}`,t+=`${this._terminalSelector} .${v}.${m} .xterm-cursor.xterm-cursor-blink:not(.xterm-cursor-block) { animation: blink_box_shadow_`+this._terminalClass+" 1s step-end infinite;}"+`${this._terminalSelector} .${v}.${m} .xterm-cursor.xterm-cursor-blink.xterm-cursor-block { animation: blink_block_`+this._terminalClass+" 1s step-end infinite;}"+`${this._terminalSelector} .${v} .xterm-cursor.xterm-cursor-block {`+` background-color: ${e.cursor.css};`+` color: ${e.cursorAccent.css};}`+`${this._terminalSelector} .${v} .xterm-cursor.xterm-cursor-outline {`+` outline: 1px solid ${e.cursor.css}; outline-offset: -1px;}`+`${this._terminalSelector} .${v} .xterm-cursor.xterm-cursor-bar {`+` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${e.cursor.css} inset;}`+`${this._terminalSelector} .${v} .xterm-cursor.xterm-cursor-underline {`+` border-bottom: 1px ${e.cursor.css}; border-bottom-style: solid; height: calc(100% - 1px);}`,t+=`${this._terminalSelector} .${S} { position: absolute; top: 0; left: 0; z-index: 1; pointer-events: none;}${this._terminalSelector}.focus .${S} div { position: absolute; background-color: ${e.selectionBackgroundOpaque.css};}${this._terminalSelector} .${S} div { position: absolute; background-color: ${e.selectionInactiveBackgroundOpaque.css};}`;for(const[i,s]of e.ansi.entries())t+=`${this._terminalSelector} .${p}${i} { color: ${s.css}; }${this._terminalSelector} .${p}${i}.xterm-dim { color: ${l.color.multiplyOpacity(s,.5).css}; }${this._terminalSelector} .${g}${i} { background-color: ${s.css}; }`;t+=`${this._terminalSelector} .${p}${a.INVERTED_DEFAULT_COLOR} { color: ${l.color.opaque(e.background).css}; }${this._terminalSelector} .${p}${a.INVERTED_DEFAULT_COLOR}.xterm-dim { color: ${l.color.multiplyOpacity(l.color.opaque(e.background),.5).css}; }${this._terminalSelector} .${g}${a.INVERTED_DEFAULT_COLOR} { background-color: ${e.foreground.css}; }`,this._themeStyleElement.textContent=t;}_setDefaultSpacing(){const e=this.dimensions.css.cell.width-this._widthCache.get("W",!1,!1);this._rowContainer.style.letterSpacing=`${e}px`,this._rowFactory.defaultSpacing=e;}handleDevicePixelRatioChange(){this._updateDimensions(),this._widthCache.clear(),this._setDefaultSpacing();}_refreshRowElements(e,t){for(let e=this._rowElements.length;e<=t;e++){const e=document.createElement("div");this._rowContainer.appendChild(e),this._rowElements.push(e);}for(;this._rowElements.length>t;)this._rowContainer.removeChild(this._rowElements.pop());}handleResize(e,t){this._refreshRowElements(e,t),this._updateDimensions();}handleCharSizeChanged(){this._updateDimensions(),this._widthCache.clear(),this._setDefaultSpacing();}handleBlur(){this._rowContainer.classList.remove(m);}handleFocus(){this._rowContainer.classList.add(m),this.renderRows(this._bufferService.buffer.y,this._bufferService.buffer.y);}handleSelectionChanged(e,t,i){if(this._selectionContainer.replaceChildren(),this._rowFactory.handleSelectionChanged(e,t,i),this.renderRows(0,this._bufferService.rows-1),!e||!t)return;const s=e[1]-this._bufferService.buffer.ydisp,r=t[1]-this._bufferService.buffer.ydisp,n=Math.max(s,0),o=Math.min(r,this._bufferService.rows-1);if(n>=this._bufferService.rows||o<0)return;const a=document.createDocumentFragment();if(i){const i=e[0]>t[0];a.appendChild(this._createSelectionElement(n,i?t[0]:e[0],i?e[0]:t[0],o-n+1));}else {const i=s===n?e[0]:0,h=n===r?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(n,i,h));const c=o-n-1;if(a.appendChild(this._createSelectionElement(n+1,0,this._bufferService.cols,c)),n!==o){const e=r===o?t[0]:this._bufferService.cols;a.appendChild(this._createSelectionElement(o,0,e));}}this._selectionContainer.appendChild(a);}_createSelectionElement(e,t,i,s=1){const r=document.createElement("div");return r.style.height=s*this.dimensions.css.cell.height+"px",r.style.top=e*this.dimensions.css.cell.height+"px",r.style.left=t*this.dimensions.css.cell.width+"px",r.style.width=this.dimensions.css.cell.width*(i-t)+"px",r}handleCursorMove(){}_handleOptionsChanged(){this._updateDimensions(),this._injectCss(this._themeService.colors),this._widthCache.setFont(this._optionsService.rawOptions.fontFamily,this._optionsService.rawOptions.fontSize,this._optionsService.rawOptions.fontWeight,this._optionsService.rawOptions.fontWeightBold),this._setDefaultSpacing();}clear(){for(const e of this._rowElements)e.replaceChildren();}renderRows(e,t){const i=this._bufferService.buffer,s=i.ybase+i.y,r=Math.min(i.x,this._bufferService.cols-1),n=this._optionsService.rawOptions.cursorBlink,o=this._optionsService.rawOptions.cursorStyle,a=this._optionsService.rawOptions.cursorInactiveStyle;for(let h=e;h<=t;h++){const e=h+i.ydisp,t=this._rowElements[h],c=i.lines.get(e);if(!t||!c)break;t.replaceChildren(...this._rowFactory.createRow(c,e,e===s,o,a,r,n,this.dimensions.css.cell.width,this._widthCache,-1,-1));}}get _terminalSelector(){return `.${f}${this._terminalClass}`}_handleLinkHover(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!0);}_handleLinkLeave(e){this._setCellUnderline(e.x1,e.x2,e.y1,e.y2,e.cols,!1);}_setCellUnderline(e,t,i,s,r,n){i<0&&(e=0),s<0&&(t=0);const o=this._bufferService.rows-1;i=Math.max(Math.min(i,o),0),s=Math.max(Math.min(s,o),0),r=Math.min(r,this._bufferService.cols);const a=this._bufferService.buffer,h=a.ybase+a.y,c=Math.min(a.x,r-1),l=this._optionsService.rawOptions.cursorBlink,d=this._optionsService.rawOptions.cursorStyle,_=this._optionsService.rawOptions.cursorInactiveStyle;for(let o=i;o<=s;++o){const u=o+a.ydisp,f=this._rowElements[o],v=a.lines.get(u);if(!f||!v)break;f.replaceChildren(...this._rowFactory.createRow(v,u,u===h,d,_,c,l,this.dimensions.css.cell.width,this._widthCache,n?o===i?e:0:-1,n?(o===s?t:r)-1:-1));}}};t.DomRenderer=b=s([r(4,u.IInstantiationService),r(5,c.ICharSizeService),r(6,u.IOptionsService),r(7,u.IBufferService),r(8,c.ICoreBrowserService),r(9,c.IThemeService)],b);},3787:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.DomRendererRowFactory=void 0;const n=i(2223),o=i(643),a=i(511),h=i(2585),c=i(8055),l=i(4725),d=i(4269),_=i(6171),u=i(3734);let f=t.DomRendererRowFactory=class{constructor(e,t,i,s,r,n,o){this._document=e,this._characterJoinerService=t,this._optionsService=i,this._coreBrowserService=s,this._coreService=r,this._decorationService=n,this._themeService=o,this._workCell=new a.CellData,this._columnSelectMode=!1,this.defaultSpacing=0;}handleSelectionChanged(e,t,i){this._selectionStart=e,this._selectionEnd=t,this._columnSelectMode=i;}createRow(e,t,i,s,r,a,h,l,_,f,p){const g=[],m=this._characterJoinerService.getJoinedCharacters(t),S=this._themeService.colors;let C,b=e.getNoBgTrimmedLength();i&&b<a+1&&(b=a+1);let y=0,w="",E=0,k=0,L=0,D=!1,R=0,x=!1,A=0;const B=[],T=-1!==f&&-1!==p;for(let M=0;M<b;M++){e.loadCell(M,this._workCell);let b=this._workCell.getWidth();if(0===b)continue;let O=!1,P=M,I=this._workCell;if(m.length>0&&M===m[0][0]){O=!0;const t=m.shift();I=new d.JoinedCellData(this._workCell,e.translateToString(!0,t[0],t[1]),t[1]-t[0]),P=t[1]-1,b=I.getWidth();}const H=this._isCellInSelection(M,t),F=i&&M===a,W=T&&M>=f&&M<=p;let U=!1;this._decorationService.forEachDecorationAtCell(M,t,void 0,(e=>{U=!0;}));let N=I.getChars()||o.WHITESPACE_CELL_CHAR;if(" "===N&&(I.isUnderline()||I.isOverline())&&(N=" "),A=b*l-_.get(N,I.isBold(),I.isItalic()),C){if(y&&(H&&x||!H&&!x&&I.bg===E)&&(H&&x&&S.selectionForeground||I.fg===k)&&I.extended.ext===L&&W===D&&A===R&&!F&&!O&&!U){w+=N,y++;continue}y&&(C.textContent=w),C=this._document.createElement("span"),y=0,w="";}else C=this._document.createElement("span");if(E=I.bg,k=I.fg,L=I.extended.ext,D=W,R=A,x=H,O&&a>=M&&a<=P&&(a=M),!this._coreService.isCursorHidden&&F)if(B.push("xterm-cursor"),this._coreBrowserService.isFocused)h&&B.push("xterm-cursor-blink"),B.push("bar"===s?"xterm-cursor-bar":"underline"===s?"xterm-cursor-underline":"xterm-cursor-block");else if(r)switch(r){case"outline":B.push("xterm-cursor-outline");break;case"block":B.push("xterm-cursor-block");break;case"bar":B.push("xterm-cursor-bar");break;case"underline":B.push("xterm-cursor-underline");}if(I.isBold()&&B.push("xterm-bold"),I.isItalic()&&B.push("xterm-italic"),I.isDim()&&B.push("xterm-dim"),w=I.isInvisible()?o.WHITESPACE_CELL_CHAR:I.getChars()||o.WHITESPACE_CELL_CHAR,I.isUnderline()&&(B.push(`xterm-underline-${I.extended.underlineStyle}`)," "===w&&(w=" "),!I.isUnderlineColorDefault()))if(I.isUnderlineColorRGB())C.style.textDecorationColor=`rgb(${u.AttributeData.toColorRGB(I.getUnderlineColor()).join(",")})`;else {let e=I.getUnderlineColor();this._optionsService.rawOptions.drawBoldTextInBrightColors&&I.isBold()&&e<8&&(e+=8),C.style.textDecorationColor=S.ansi[e].css;}I.isOverline()&&(B.push("xterm-overline")," "===w&&(w=" ")),I.isStrikethrough()&&B.push("xterm-strikethrough"),W&&(C.style.textDecoration="underline");let $=I.getFgColor(),j=I.getFgColorMode(),z=I.getBgColor(),K=I.getBgColorMode();const q=!!I.isInverse();if(q){const e=$;$=z,z=e;const t=j;j=K,K=t;}let V,G,X,J=!1;switch(this._decorationService.forEachDecorationAtCell(M,t,void 0,(e=>{"top"!==e.options.layer&&J||(e.backgroundColorRGB&&(K=50331648,z=e.backgroundColorRGB.rgba>>8&16777215,V=e.backgroundColorRGB),e.foregroundColorRGB&&(j=50331648,$=e.foregroundColorRGB.rgba>>8&16777215,G=e.foregroundColorRGB),J="top"===e.options.layer);})),!J&&H&&(V=this._coreBrowserService.isFocused?S.selectionBackgroundOpaque:S.selectionInactiveBackgroundOpaque,z=V.rgba>>8&16777215,K=50331648,J=!0,S.selectionForeground&&(j=50331648,$=S.selectionForeground.rgba>>8&16777215,G=S.selectionForeground)),J&&B.push("xterm-decoration-top"),K){case 16777216:case 33554432:X=S.ansi[z],B.push(`xterm-bg-${z}`);break;case 50331648:X=c.rgba.toColor(z>>16,z>>8&255,255&z),this._addStyle(C,`background-color:#${v((z>>>0).toString(16),"0",6)}`);break;default:q?(X=S.foreground,B.push(`xterm-bg-${n.INVERTED_DEFAULT_COLOR}`)):X=S.background;}switch(V||I.isDim()&&(V=c.color.multiplyOpacity(X,.5)),j){case 16777216:case 33554432:I.isBold()&&$<8&&this._optionsService.rawOptions.drawBoldTextInBrightColors&&($+=8),this._applyMinimumContrast(C,X,S.ansi[$],I,V,void 0)||B.push(`xterm-fg-${$}`);break;case 50331648:const e=c.rgba.toColor($>>16&255,$>>8&255,255&$);this._applyMinimumContrast(C,X,e,I,V,G)||this._addStyle(C,`color:#${v($.toString(16),"0",6)}`);break;default:this._applyMinimumContrast(C,X,S.foreground,I,V,void 0)||q&&B.push(`xterm-fg-${n.INVERTED_DEFAULT_COLOR}`);}B.length&&(C.className=B.join(" "),B.length=0),F||O||U?C.textContent=w:y++,A!==this.defaultSpacing&&(C.style.letterSpacing=`${A}px`),g.push(C),M=P;}return C&&y&&(C.textContent=w),g}_applyMinimumContrast(e,t,i,s,r,n){if(1===this._optionsService.rawOptions.minimumContrastRatio||(0, _.excludeFromContrastRatioDemands)(s.getCode()))return !1;const o=this._getContrastCache(s);let a;if(r||n||(a=o.getColor(t.rgba,i.rgba)),void 0===a){const e=this._optionsService.rawOptions.minimumContrastRatio/(s.isDim()?2:1);a=c.color.ensureContrastRatio(r||t,n||i,e),o.setColor((r||t).rgba,(n||i).rgba,null!=a?a:null);}return !!a&&(this._addStyle(e,`color:${a.css}`),!0)}_getContrastCache(e){return e.isDim()?this._themeService.colors.halfContrastCache:this._themeService.colors.contrastCache}_addStyle(e,t){e.setAttribute("style",`${e.getAttribute("style")||""}${t};`);}_isCellInSelection(e,t){const i=this._selectionStart,s=this._selectionEnd;return !(!i||!s)&&(this._columnSelectMode?i[0]<=s[0]?e>=i[0]&&t>=i[1]&&e<s[0]&&t<=s[1]:e<i[0]&&t>=i[1]&&e>=s[0]&&t<=s[1]:t>i[1]&&t<s[1]||i[1]===s[1]&&t===i[1]&&e>=i[0]&&e<s[0]||i[1]<s[1]&&t===s[1]&&e<s[0]||i[1]<s[1]&&t===i[1]&&e>=i[0])}};function v(e,t,i){for(;e.length<i;)e=t+e;return e}t.DomRendererRowFactory=f=s([r(1,l.ICharacterJoinerService),r(2,h.IOptionsService),r(3,l.ICoreBrowserService),r(4,h.ICoreService),r(5,h.IDecorationService),r(6,l.IThemeService)],f);},2550:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WidthCache=void 0,t.WidthCache=class{constructor(e){this._flat=new Float32Array(256),this._font="",this._fontSize=0,this._weight="normal",this._weightBold="bold",this._measureElements=[],this._container=e.createElement("div"),this._container.style.position="absolute",this._container.style.top="-50000px",this._container.style.width="50000px",this._container.style.whiteSpace="pre",this._container.style.fontKerning="none";const t=e.createElement("span"),i=e.createElement("span");i.style.fontWeight="bold";const s=e.createElement("span");s.style.fontStyle="italic";const r=e.createElement("span");r.style.fontWeight="bold",r.style.fontStyle="italic",this._measureElements=[t,i,s,r],this._container.appendChild(t),this._container.appendChild(i),this._container.appendChild(s),this._container.appendChild(r),e.body.appendChild(this._container),this.clear();}dispose(){this._container.remove(),this._measureElements.length=0,this._holey=void 0;}clear(){this._flat.fill(-9999),this._holey=new Map;}setFont(e,t,i,s){e===this._font&&t===this._fontSize&&i===this._weight&&s===this._weightBold||(this._font=e,this._fontSize=t,this._weight=i,this._weightBold=s,this._container.style.fontFamily=this._font,this._container.style.fontSize=`${this._fontSize}px`,this._measureElements[0].style.fontWeight=`${i}`,this._measureElements[1].style.fontWeight=`${s}`,this._measureElements[2].style.fontWeight=`${i}`,this._measureElements[3].style.fontWeight=`${s}`,this.clear());}get(e,t,i){let s=0;if(!t&&!i&&1===e.length&&(s=e.charCodeAt(0))<256)return -9999!==this._flat[s]?this._flat[s]:this._flat[s]=this._measure(e,0);let r=e;t&&(r+="B"),i&&(r+="I");let n=this._holey.get(r);if(void 0===n){let s=0;t&&(s|=1),i&&(s|=2),n=this._measure(e,s),this._holey.set(r,n);}return n}_measure(e,t){const i=this._measureElements[t];return i.textContent=e.repeat(32),i.offsetWidth/32}};},2223:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.TEXT_BASELINE=t.DIM_OPACITY=t.INVERTED_DEFAULT_COLOR=void 0;const s=i(6114);t.INVERTED_DEFAULT_COLOR=257,t.DIM_OPACITY=.5,t.TEXT_BASELINE=s.isFirefox||s.isLegacyEdge?"bottom":"ideographic";},6171:(e,t)=>{function i(e){return 57508<=e&&e<=57558}Object.defineProperty(t,"__esModule",{value:!0}),t.createRenderDimensions=t.excludeFromContrastRatioDemands=t.isRestrictedPowerlineGlyph=t.isPowerlineGlyph=t.throwIfFalsy=void 0,t.throwIfFalsy=function(e){if(!e)throw new Error("value must not be falsy");return e},t.isPowerlineGlyph=i,t.isRestrictedPowerlineGlyph=function(e){return 57520<=e&&e<=57527},t.excludeFromContrastRatioDemands=function(e){return i(e)||function(e){return 9472<=e&&e<=9631}(e)},t.createRenderDimensions=function(){return {css:{canvas:{width:0,height:0},cell:{width:0,height:0}},device:{canvas:{width:0,height:0},cell:{width:0,height:0},char:{width:0,height:0,left:0,top:0}}}};},456:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionModel=void 0,t.SelectionModel=class{constructor(e){this._bufferService=e,this.isSelectAllActive=!1,this.selectionStartLength=0;}clearSelection(){this.selectionStart=void 0,this.selectionEnd=void 0,this.isSelectAllActive=!1,this.selectionStartLength=0;}get finalSelectionStart(){return this.isSelectAllActive?[0,0]:this.selectionEnd&&this.selectionStart&&this.areSelectionValuesReversed()?this.selectionEnd:this.selectionStart}get finalSelectionEnd(){if(this.isSelectAllActive)return [this._bufferService.cols,this._bufferService.buffer.ybase+this._bufferService.rows-1];if(this.selectionStart){if(!this.selectionEnd||this.areSelectionValuesReversed()){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?e%this._bufferService.cols==0?[this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)-1]:[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[e,this.selectionStart[1]]}if(this.selectionStartLength&&this.selectionEnd[1]===this.selectionStart[1]){const e=this.selectionStart[0]+this.selectionStartLength;return e>this._bufferService.cols?[e%this._bufferService.cols,this.selectionStart[1]+Math.floor(e/this._bufferService.cols)]:[Math.max(e,this.selectionEnd[0]),this.selectionEnd[1]]}return this.selectionEnd}}areSelectionValuesReversed(){const e=this.selectionStart,t=this.selectionEnd;return !(!e||!t)&&(e[1]>t[1]||e[1]===t[1]&&e[0]>t[0])}handleTrim(e){return this.selectionStart&&(this.selectionStart[1]-=e),this.selectionEnd&&(this.selectionEnd[1]-=e),this.selectionEnd&&this.selectionEnd[1]<0?(this.clearSelection(),!0):(this.selectionStart&&this.selectionStart[1]<0&&(this.selectionStart[1]=0),!1)}};},428:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharSizeService=void 0;const n=i(2585),o=i(8460),a=i(844);let h=t.CharSizeService=class extends a.Disposable{get hasValidSize(){return this.width>0&&this.height>0}constructor(e,t,i){super(),this._optionsService=i,this.width=0,this.height=0,this._onCharSizeChange=this.register(new o.EventEmitter),this.onCharSizeChange=this._onCharSizeChange.event,this._measureStrategy=new c(e,t,this._optionsService),this.register(this._optionsService.onMultipleOptionChange(["fontFamily","fontSize"],(()=>this.measure())));}measure(){const e=this._measureStrategy.measure();e.width===this.width&&e.height===this.height||(this.width=e.width,this.height=e.height,this._onCharSizeChange.fire());}};t.CharSizeService=h=s([r(2,n.IOptionsService)],h);class c{constructor(e,t,i){this._document=e,this._parentElement=t,this._optionsService=i,this._result={width:0,height:0},this._measureElement=this._document.createElement("span"),this._measureElement.classList.add("xterm-char-measure-element"),this._measureElement.textContent="W".repeat(32),this._measureElement.setAttribute("aria-hidden","true"),this._measureElement.style.whiteSpace="pre",this._measureElement.style.fontKerning="none",this._parentElement.appendChild(this._measureElement);}measure(){this._measureElement.style.fontFamily=this._optionsService.rawOptions.fontFamily,this._measureElement.style.fontSize=`${this._optionsService.rawOptions.fontSize}px`;const e={height:Number(this._measureElement.offsetHeight),width:Number(this._measureElement.offsetWidth)};return 0!==e.width&&0!==e.height&&(this._result.width=e.width/32,this._result.height=Math.ceil(e.height)),this._result}}},4269:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CharacterJoinerService=t.JoinedCellData=void 0;const n=i(3734),o=i(643),a=i(511),h=i(2585);class c extends n.AttributeData{constructor(e,t,i){super(),this.content=0,this.combinedData="",this.fg=e.fg,this.bg=e.bg,this.combinedData=t,this._width=i;}isCombined(){return 2097152}getWidth(){return this._width}getChars(){return this.combinedData}getCode(){return 2097151}setFromCharData(e){throw new Error("not implemented")}getAsCharData(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.JoinedCellData=c;let l=t.CharacterJoinerService=class e{constructor(e){this._bufferService=e,this._characterJoiners=[],this._nextCharacterJoinerId=0,this._workCell=new a.CellData;}register(e){const t={id:this._nextCharacterJoinerId++,handler:e};return this._characterJoiners.push(t),t.id}deregister(e){for(let t=0;t<this._characterJoiners.length;t++)if(this._characterJoiners[t].id===e)return this._characterJoiners.splice(t,1),!0;return !1}getJoinedCharacters(e){if(0===this._characterJoiners.length)return [];const t=this._bufferService.buffer.lines.get(e);if(!t||0===t.length)return [];const i=[],s=t.translateToString(!0);let r=0,n=0,a=0,h=t.getFg(0),c=t.getBg(0);for(let e=0;e<t.getTrimmedLength();e++)if(t.loadCell(e,this._workCell),0!==this._workCell.getWidth()){if(this._workCell.fg!==h||this._workCell.bg!==c){if(e-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t]);}r=e,a=n,h=this._workCell.fg,c=this._workCell.bg;}n+=this._workCell.getChars().length||o.WHITESPACE_CELL_CHAR.length;}if(this._bufferService.cols-r>1){const e=this._getJoinedRanges(s,a,n,t,r);for(let t=0;t<e.length;t++)i.push(e[t]);}return i}_getJoinedRanges(t,i,s,r,n){const o=t.substring(i,s);let a=[];try{a=this._characterJoiners[0].handler(o);}catch(e){console.error(e);}for(let t=1;t<this._characterJoiners.length;t++)try{const i=this._characterJoiners[t].handler(o);for(let t=0;t<i.length;t++)e._mergeRanges(a,i[t]);}catch(e){console.error(e);}return this._stringRangesToCellRanges(a,r,n),a}_stringRangesToCellRanges(e,t,i){let s=0,r=!1,n=0,a=e[s];if(a){for(let h=i;h<this._bufferService.cols;h++){const i=t.getWidth(h),c=t.getString(h).length||o.WHITESPACE_CELL_CHAR.length;if(0!==i){if(!r&&a[0]<=n&&(a[0]=h,r=!0),a[1]<=n){if(a[1]=h,a=e[++s],!a)break;a[0]<=n?(a[0]=h,r=!0):r=!1;}n+=c;}}a&&(a[1]=this._bufferService.cols);}}static _mergeRanges(e,t){let i=!1;for(let s=0;s<e.length;s++){const r=e[s];if(i){if(t[1]<=r[0])return e[s-1][1]=t[1],e;if(t[1]<=r[1])return e[s-1][1]=Math.max(t[1],r[1]),e.splice(s,1),e;e.splice(s,1),s--;}else {if(t[1]<=r[0])return e.splice(s,0,t),e;if(t[1]<=r[1])return r[0]=Math.min(t[0],r[0]),e;t[0]<r[1]&&(r[0]=Math.min(t[0],r[0]),i=!0);}}return i?e[e.length-1][1]=t[1]:e.push(t),e}};t.CharacterJoinerService=l=s([r(0,h.IBufferService)],l);},5114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreBrowserService=void 0,t.CoreBrowserService=class{constructor(e,t){this._textarea=e,this.window=t,this._isFocused=!1,this._cachedIsFocused=void 0,this._textarea.addEventListener("focus",(()=>this._isFocused=!0)),this._textarea.addEventListener("blur",(()=>this._isFocused=!1));}get dpr(){return this.window.devicePixelRatio}get isFocused(){return void 0===this._cachedIsFocused&&(this._cachedIsFocused=this._isFocused&&this._textarea.ownerDocument.hasFocus(),queueMicrotask((()=>this._cachedIsFocused=void 0))),this._cachedIsFocused}};},8934:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.MouseService=void 0;const n=i(4725),o=i(9806);let a=t.MouseService=class{constructor(e,t){this._renderService=e,this._charSizeService=t;}getCoords(e,t,i,s,r){return (0, o.getCoords)(window,e,t,i,s,this._charSizeService.hasValidSize,this._renderService.dimensions.css.cell.width,this._renderService.dimensions.css.cell.height,r)}getMouseReportCoords(e,t){const i=(0, o.getCoordsRelativeToElement)(window,e,t);if(this._charSizeService.hasValidSize)return i[0]=Math.min(Math.max(i[0],0),this._renderService.dimensions.css.canvas.width-1),i[1]=Math.min(Math.max(i[1],0),this._renderService.dimensions.css.canvas.height-1),{col:Math.floor(i[0]/this._renderService.dimensions.css.cell.width),row:Math.floor(i[1]/this._renderService.dimensions.css.cell.height),x:Math.floor(i[0]),y:Math.floor(i[1])}}};t.MouseService=a=s([r(0,n.IRenderService),r(1,n.ICharSizeService)],a);},3230:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.RenderService=void 0;const n=i(3656),o=i(6193),a=i(5596),h=i(4725),c=i(8460),l=i(844),d=i(7226),_=i(2585);let u=t.RenderService=class extends l.Disposable{get dimensions(){return this._renderer.value.dimensions}constructor(e,t,i,s,r,h,_,u){if(super(),this._rowCount=e,this._charSizeService=s,this._renderer=this.register(new l.MutableDisposable),this._pausedResizeTask=new d.DebouncedIdleTask,this._isPaused=!1,this._needsFullRefresh=!1,this._isNextRenderRedrawOnly=!0,this._needsSelectionRefresh=!1,this._canvasWidth=0,this._canvasHeight=0,this._selectionState={start:void 0,end:void 0,columnSelectMode:!1},this._onDimensionsChange=this.register(new c.EventEmitter),this.onDimensionsChange=this._onDimensionsChange.event,this._onRenderedViewportChange=this.register(new c.EventEmitter),this.onRenderedViewportChange=this._onRenderedViewportChange.event,this._onRender=this.register(new c.EventEmitter),this.onRender=this._onRender.event,this._onRefreshRequest=this.register(new c.EventEmitter),this.onRefreshRequest=this._onRefreshRequest.event,this._renderDebouncer=new o.RenderDebouncer(_.window,((e,t)=>this._renderRows(e,t))),this.register(this._renderDebouncer),this._screenDprMonitor=new a.ScreenDprMonitor(_.window),this._screenDprMonitor.setListener((()=>this.handleDevicePixelRatioChange())),this.register(this._screenDprMonitor),this.register(h.onResize((()=>this._fullRefresh()))),this.register(h.buffers.onBufferActivate((()=>{var e;return null===(e=this._renderer.value)||void 0===e?void 0:e.clear()}))),this.register(i.onOptionChange((()=>this._handleOptionsChanged()))),this.register(this._charSizeService.onCharSizeChange((()=>this.handleCharSizeChanged()))),this.register(r.onDecorationRegistered((()=>this._fullRefresh()))),this.register(r.onDecorationRemoved((()=>this._fullRefresh()))),this.register(i.onMultipleOptionChange(["customGlyphs","drawBoldTextInBrightColors","letterSpacing","lineHeight","fontFamily","fontSize","fontWeight","fontWeightBold","minimumContrastRatio"],(()=>{this.clear(),this.handleResize(h.cols,h.rows),this._fullRefresh();}))),this.register(i.onMultipleOptionChange(["cursorBlink","cursorStyle"],(()=>this.refreshRows(h.buffer.y,h.buffer.y,!0)))),this.register((0, n.addDisposableDomListener)(_.window,"resize",(()=>this.handleDevicePixelRatioChange()))),this.register(u.onChangeColors((()=>this._fullRefresh()))),"IntersectionObserver"in _.window){const e=new _.window.IntersectionObserver((e=>this._handleIntersectionChange(e[e.length-1])),{threshold:0});e.observe(t),this.register({dispose:()=>e.disconnect()});}}_handleIntersectionChange(e){this._isPaused=void 0===e.isIntersecting?0===e.intersectionRatio:!e.isIntersecting,this._isPaused||this._charSizeService.hasValidSize||this._charSizeService.measure(),!this._isPaused&&this._needsFullRefresh&&(this._pausedResizeTask.flush(),this.refreshRows(0,this._rowCount-1),this._needsFullRefresh=!1);}refreshRows(e,t,i=!1){this._isPaused?this._needsFullRefresh=!0:(i||(this._isNextRenderRedrawOnly=!1),this._renderDebouncer.refresh(e,t,this._rowCount));}_renderRows(e,t){this._renderer.value&&(e=Math.min(e,this._rowCount-1),t=Math.min(t,this._rowCount-1),this._renderer.value.renderRows(e,t),this._needsSelectionRefresh&&(this._renderer.value.handleSelectionChanged(this._selectionState.start,this._selectionState.end,this._selectionState.columnSelectMode),this._needsSelectionRefresh=!1),this._isNextRenderRedrawOnly||this._onRenderedViewportChange.fire({start:e,end:t}),this._onRender.fire({start:e,end:t}),this._isNextRenderRedrawOnly=!0);}resize(e,t){this._rowCount=t,this._fireOnCanvasResize();}_handleOptionsChanged(){this._renderer.value&&(this.refreshRows(0,this._rowCount-1),this._fireOnCanvasResize());}_fireOnCanvasResize(){this._renderer.value&&(this._renderer.value.dimensions.css.canvas.width===this._canvasWidth&&this._renderer.value.dimensions.css.canvas.height===this._canvasHeight||this._onDimensionsChange.fire(this._renderer.value.dimensions));}hasRenderer(){return !!this._renderer.value}setRenderer(e){this._renderer.value=e,this._renderer.value.onRequestRedraw((e=>this.refreshRows(e.start,e.end,!0))),this._needsSelectionRefresh=!0,this._fullRefresh();}addRefreshCallback(e){return this._renderDebouncer.addRefreshCallback(e)}_fullRefresh(){this._isPaused?this._needsFullRefresh=!0:this.refreshRows(0,this._rowCount-1);}clearTextureAtlas(){var e,t;this._renderer.value&&(null===(t=(e=this._renderer.value).clearTextureAtlas)||void 0===t||t.call(e),this._fullRefresh());}handleDevicePixelRatioChange(){this._charSizeService.measure(),this._renderer.value&&(this._renderer.value.handleDevicePixelRatioChange(),this.refreshRows(0,this._rowCount-1));}handleResize(e,t){this._renderer.value&&(this._isPaused?this._pausedResizeTask.set((()=>this._renderer.value.handleResize(e,t))):this._renderer.value.handleResize(e,t),this._fullRefresh());}handleCharSizeChanged(){var e;null===(e=this._renderer.value)||void 0===e||e.handleCharSizeChanged();}handleBlur(){var e;null===(e=this._renderer.value)||void 0===e||e.handleBlur();}handleFocus(){var e;null===(e=this._renderer.value)||void 0===e||e.handleFocus();}handleSelectionChanged(e,t,i){var s;this._selectionState.start=e,this._selectionState.end=t,this._selectionState.columnSelectMode=i,null===(s=this._renderer.value)||void 0===s||s.handleSelectionChanged(e,t,i);}handleCursorMove(){var e;null===(e=this._renderer.value)||void 0===e||e.handleCursorMove();}clear(){var e;null===(e=this._renderer.value)||void 0===e||e.clear();}};t.RenderService=u=s([r(2,_.IOptionsService),r(3,h.ICharSizeService),r(4,_.IDecorationService),r(5,_.IBufferService),r(6,h.ICoreBrowserService),r(7,h.IThemeService)],u);},9312:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.SelectionService=void 0;const n=i(9806),o=i(9504),a=i(456),h=i(4725),c=i(8460),l=i(844),d=i(6114),_=i(4841),u=i(511),f=i(2585),v=String.fromCharCode(160),p=new RegExp(v,"g");let g=t.SelectionService=class extends l.Disposable{constructor(e,t,i,s,r,n,o,h,d){super(),this._element=e,this._screenElement=t,this._linkifier=i,this._bufferService=s,this._coreService=r,this._mouseService=n,this._optionsService=o,this._renderService=h,this._coreBrowserService=d,this._dragScrollAmount=0,this._enabled=!0,this._workCell=new u.CellData,this._mouseDownTimeStamp=0,this._oldHasSelection=!1,this._oldSelectionStart=void 0,this._oldSelectionEnd=void 0,this._onLinuxMouseSelection=this.register(new c.EventEmitter),this.onLinuxMouseSelection=this._onLinuxMouseSelection.event,this._onRedrawRequest=this.register(new c.EventEmitter),this.onRequestRedraw=this._onRedrawRequest.event,this._onSelectionChange=this.register(new c.EventEmitter),this.onSelectionChange=this._onSelectionChange.event,this._onRequestScrollLines=this.register(new c.EventEmitter),this.onRequestScrollLines=this._onRequestScrollLines.event,this._mouseMoveListener=e=>this._handleMouseMove(e),this._mouseUpListener=e=>this._handleMouseUp(e),this._coreService.onUserInput((()=>{this.hasSelection&&this.clearSelection();})),this._trimListener=this._bufferService.buffer.lines.onTrim((e=>this._handleTrim(e))),this.register(this._bufferService.buffers.onBufferActivate((e=>this._handleBufferActivate(e)))),this.enable(),this._model=new a.SelectionModel(this._bufferService),this._activeSelectionMode=0,this.register((0, l.toDisposable)((()=>{this._removeMouseDownListeners();})));}reset(){this.clearSelection();}disable(){this.clearSelection(),this._enabled=!1;}enable(){this._enabled=!0;}get selectionStart(){return this._model.finalSelectionStart}get selectionEnd(){return this._model.finalSelectionEnd}get hasSelection(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;return !(!e||!t||e[0]===t[0]&&e[1]===t[1])}get selectionText(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd;if(!e||!t)return "";const i=this._bufferService.buffer,s=[];if(3===this._activeSelectionMode){if(e[0]===t[0])return "";const r=e[0]<t[0]?e[0]:t[0],n=e[0]<t[0]?t[0]:e[0];for(let o=e[1];o<=t[1];o++){const e=i.translateBufferLineToString(o,!0,r,n);s.push(e);}}else {const r=e[1]===t[1]?t[0]:void 0;s.push(i.translateBufferLineToString(e[1],!0,e[0],r));for(let r=e[1]+1;r<=t[1]-1;r++){const e=i.lines.get(r),t=i.translateBufferLineToString(r,!0);(null==e?void 0:e.isWrapped)?s[s.length-1]+=t:s.push(t);}if(e[1]!==t[1]){const e=i.lines.get(t[1]),r=i.translateBufferLineToString(t[1],!0,0,t[0]);e&&e.isWrapped?s[s.length-1]+=r:s.push(r);}}return s.map((e=>e.replace(p," "))).join(d.isWindows?"\r\n":"\n")}clearSelection(){this._model.clearSelection(),this._removeMouseDownListeners(),this.refresh(),this._onSelectionChange.fire();}refresh(e){this._refreshAnimationFrame||(this._refreshAnimationFrame=this._coreBrowserService.window.requestAnimationFrame((()=>this._refresh()))),d.isLinux&&e&&this.selectionText.length&&this._onLinuxMouseSelection.fire(this.selectionText);}_refresh(){this._refreshAnimationFrame=void 0,this._onRedrawRequest.fire({start:this._model.finalSelectionStart,end:this._model.finalSelectionEnd,columnSelectMode:3===this._activeSelectionMode});}_isClickInSelection(e){const t=this._getMouseBufferCoords(e),i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return !!(i&&s&&t)&&this._areCoordsInSelection(t,i,s)}isCellInSelection(e,t){const i=this._model.finalSelectionStart,s=this._model.finalSelectionEnd;return !(!i||!s)&&this._areCoordsInSelection([e,t],i,s)}_areCoordsInSelection(e,t,i){return e[1]>t[1]&&e[1]<i[1]||t[1]===i[1]&&e[1]===t[1]&&e[0]>=t[0]&&e[0]<i[0]||t[1]<i[1]&&e[1]===i[1]&&e[0]<i[0]||t[1]<i[1]&&e[1]===t[1]&&e[0]>=t[0]}_selectWordAtCursor(e,t){var i,s;const r=null===(s=null===(i=this._linkifier.currentLink)||void 0===i?void 0:i.link)||void 0===s?void 0:s.range;if(r)return this._model.selectionStart=[r.start.x-1,r.start.y-1],this._model.selectionStartLength=(0, _.getRangeLength)(r,this._bufferService.cols),this._model.selectionEnd=void 0,!0;const n=this._getMouseBufferCoords(e);return !!n&&(this._selectWordAt(n,t),this._model.selectionEnd=void 0,!0)}selectAll(){this._model.isSelectAllActive=!0,this.refresh(),this._onSelectionChange.fire();}selectLines(e,t){this._model.clearSelection(),e=Math.max(e,0),t=Math.min(t,this._bufferService.buffer.lines.length-1),this._model.selectionStart=[0,e],this._model.selectionEnd=[this._bufferService.cols,t],this.refresh(),this._onSelectionChange.fire();}_handleTrim(e){this._model.handleTrim(e)&&this.refresh();}_getMouseBufferCoords(e){const t=this._mouseService.getCoords(e,this._screenElement,this._bufferService.cols,this._bufferService.rows,!0);if(t)return t[0]--,t[1]--,t[1]+=this._bufferService.buffer.ydisp,t}_getMouseEventScrollAmount(e){let t=(0, n.getCoordsRelativeToElement)(this._coreBrowserService.window,e,this._screenElement)[1];const i=this._renderService.dimensions.css.canvas.height;return t>=0&&t<=i?0:(t>i&&(t-=i),t=Math.min(Math.max(t,-50),50),t/=50,t/Math.abs(t)+Math.round(14*t))}shouldForceSelection(e){return d.isMac?e.altKey&&this._optionsService.rawOptions.macOptionClickForcesSelection:e.shiftKey}handleMouseDown(e){if(this._mouseDownTimeStamp=e.timeStamp,(2!==e.button||!this.hasSelection)&&0===e.button){if(!this._enabled){if(!this.shouldForceSelection(e))return;e.stopPropagation();}e.preventDefault(),this._dragScrollAmount=0,this._enabled&&e.shiftKey?this._handleIncrementalClick(e):1===e.detail?this._handleSingleClick(e):2===e.detail?this._handleDoubleClick(e):3===e.detail&&this._handleTripleClick(e),this._addMouseDownListeners(),this.refresh(!0);}}_addMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.addEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.addEventListener("mouseup",this._mouseUpListener)),this._dragScrollIntervalTimer=this._coreBrowserService.window.setInterval((()=>this._dragScroll()),50);}_removeMouseDownListeners(){this._screenElement.ownerDocument&&(this._screenElement.ownerDocument.removeEventListener("mousemove",this._mouseMoveListener),this._screenElement.ownerDocument.removeEventListener("mouseup",this._mouseUpListener)),this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer),this._dragScrollIntervalTimer=void 0;}_handleIncrementalClick(e){this._model.selectionStart&&(this._model.selectionEnd=this._getMouseBufferCoords(e));}_handleSingleClick(e){if(this._model.selectionStartLength=0,this._model.isSelectAllActive=!1,this._activeSelectionMode=this.shouldColumnSelect(e)?3:0,this._model.selectionStart=this._getMouseBufferCoords(e),!this._model.selectionStart)return;this._model.selectionEnd=void 0;const t=this._bufferService.buffer.lines.get(this._model.selectionStart[1]);t&&t.length!==this._model.selectionStart[0]&&0===t.hasWidth(this._model.selectionStart[0])&&this._model.selectionStart[0]++;}_handleDoubleClick(e){this._selectWordAtCursor(e,!0)&&(this._activeSelectionMode=1);}_handleTripleClick(e){const t=this._getMouseBufferCoords(e);t&&(this._activeSelectionMode=2,this._selectLineAt(t[1]));}shouldColumnSelect(e){return e.altKey&&!(d.isMac&&this._optionsService.rawOptions.macOptionClickForcesSelection)}_handleMouseMove(e){if(e.stopImmediatePropagation(),!this._model.selectionStart)return;const t=this._model.selectionEnd?[this._model.selectionEnd[0],this._model.selectionEnd[1]]:null;if(this._model.selectionEnd=this._getMouseBufferCoords(e),!this._model.selectionEnd)return void this.refresh(!0);2===this._activeSelectionMode?this._model.selectionEnd[1]<this._model.selectionStart[1]?this._model.selectionEnd[0]=0:this._model.selectionEnd[0]=this._bufferService.cols:1===this._activeSelectionMode&&this._selectToWordAt(this._model.selectionEnd),this._dragScrollAmount=this._getMouseEventScrollAmount(e),3!==this._activeSelectionMode&&(this._dragScrollAmount>0?this._model.selectionEnd[0]=this._bufferService.cols:this._dragScrollAmount<0&&(this._model.selectionEnd[0]=0));const i=this._bufferService.buffer;if(this._model.selectionEnd[1]<i.lines.length){const e=i.lines.get(this._model.selectionEnd[1]);e&&0===e.hasWidth(this._model.selectionEnd[0])&&this._model.selectionEnd[0]++;}t&&t[0]===this._model.selectionEnd[0]&&t[1]===this._model.selectionEnd[1]||this.refresh(!0);}_dragScroll(){if(this._model.selectionEnd&&this._model.selectionStart&&this._dragScrollAmount){this._onRequestScrollLines.fire({amount:this._dragScrollAmount,suppressScrollEvent:!1});const e=this._bufferService.buffer;this._dragScrollAmount>0?(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=this._bufferService.cols),this._model.selectionEnd[1]=Math.min(e.ydisp+this._bufferService.rows,e.lines.length-1)):(3!==this._activeSelectionMode&&(this._model.selectionEnd[0]=0),this._model.selectionEnd[1]=e.ydisp),this.refresh();}}_handleMouseUp(e){const t=e.timeStamp-this._mouseDownTimeStamp;if(this._removeMouseDownListeners(),this.selectionText.length<=1&&t<500&&e.altKey&&this._optionsService.rawOptions.altClickMovesCursor){if(this._bufferService.buffer.ybase===this._bufferService.buffer.ydisp){const t=this._mouseService.getCoords(e,this._element,this._bufferService.cols,this._bufferService.rows,!1);if(t&&void 0!==t[0]&&void 0!==t[1]){const e=(0, o.moveToCellSequence)(t[0]-1,t[1]-1,this._bufferService,this._coreService.decPrivateModes.applicationCursorKeys);this._coreService.triggerDataEvent(e,!0);}}}else this._fireEventIfSelectionChanged();}_fireEventIfSelectionChanged(){const e=this._model.finalSelectionStart,t=this._model.finalSelectionEnd,i=!(!e||!t||e[0]===t[0]&&e[1]===t[1]);i?e&&t&&(this._oldSelectionStart&&this._oldSelectionEnd&&e[0]===this._oldSelectionStart[0]&&e[1]===this._oldSelectionStart[1]&&t[0]===this._oldSelectionEnd[0]&&t[1]===this._oldSelectionEnd[1]||this._fireOnSelectionChange(e,t,i)):this._oldHasSelection&&this._fireOnSelectionChange(e,t,i);}_fireOnSelectionChange(e,t,i){this._oldSelectionStart=e,this._oldSelectionEnd=t,this._oldHasSelection=i,this._onSelectionChange.fire();}_handleBufferActivate(e){this.clearSelection(),this._trimListener.dispose(),this._trimListener=e.activeBuffer.lines.onTrim((e=>this._handleTrim(e)));}_convertViewportColToCharacterIndex(e,t){let i=t;for(let s=0;t>=s;s++){const r=e.loadCell(s,this._workCell).getChars().length;0===this._workCell.getWidth()?i--:r>1&&t!==s&&(i+=r-1);}return i}setSelection(e,t,i){this._model.clearSelection(),this._removeMouseDownListeners(),this._model.selectionStart=[e,t],this._model.selectionStartLength=i,this.refresh(),this._fireEventIfSelectionChanged();}rightClickSelect(e){this._isClickInSelection(e)||(this._selectWordAtCursor(e,!1)&&this.refresh(!0),this._fireEventIfSelectionChanged());}_getWordAt(e,t,i=!0,s=!0){if(e[0]>=this._bufferService.cols)return;const r=this._bufferService.buffer,n=r.lines.get(e[1]);if(!n)return;const o=r.translateBufferLineToString(e[1],!1);let a=this._convertViewportColToCharacterIndex(n,e[0]),h=a;const c=e[0]-a;let l=0,d=0,_=0,u=0;if(" "===o.charAt(a)){for(;a>0&&" "===o.charAt(a-1);)a--;for(;h<o.length&&" "===o.charAt(h+1);)h++;}else {let t=e[0],i=e[0];0===n.getWidth(t)&&(l++,t--),2===n.getWidth(i)&&(d++,i++);const s=n.getString(i).length;for(s>1&&(u+=s-1,h+=s-1);t>0&&a>0&&!this._isCharWordSeparator(n.loadCell(t-1,this._workCell));){n.loadCell(t-1,this._workCell);const e=this._workCell.getChars().length;0===this._workCell.getWidth()?(l++,t--):e>1&&(_+=e-1,a-=e-1),a--,t--;}for(;i<n.length&&h+1<o.length&&!this._isCharWordSeparator(n.loadCell(i+1,this._workCell));){n.loadCell(i+1,this._workCell);const e=this._workCell.getChars().length;2===this._workCell.getWidth()?(d++,i++):e>1&&(u+=e-1,h+=e-1),h++,i++;}}h++;let f=a+c-l+_,v=Math.min(this._bufferService.cols,h-a+l+d-_-u);if(t||""!==o.slice(a,h).trim()){if(i&&0===f&&32!==n.getCodePoint(0)){const t=r.lines.get(e[1]-1);if(t&&n.isWrapped&&32!==t.getCodePoint(this._bufferService.cols-1)){const t=this._getWordAt([this._bufferService.cols-1,e[1]-1],!1,!0,!1);if(t){const e=this._bufferService.cols-t.start;f-=e,v+=e;}}}if(s&&f+v===this._bufferService.cols&&32!==n.getCodePoint(this._bufferService.cols-1)){const t=r.lines.get(e[1]+1);if((null==t?void 0:t.isWrapped)&&32!==t.getCodePoint(0)){const t=this._getWordAt([0,e[1]+1],!1,!1,!0);t&&(v+=t.length);}}return {start:f,length:v}}}_selectWordAt(e,t){const i=this._getWordAt(e,t);if(i){for(;i.start<0;)i.start+=this._bufferService.cols,e[1]--;this._model.selectionStart=[i.start,e[1]],this._model.selectionStartLength=i.length;}}_selectToWordAt(e){const t=this._getWordAt(e,!0);if(t){let i=e[1];for(;t.start<0;)t.start+=this._bufferService.cols,i--;if(!this._model.areSelectionValuesReversed())for(;t.start+t.length>this._bufferService.cols;)t.length-=this._bufferService.cols,i++;this._model.selectionEnd=[this._model.areSelectionValuesReversed()?t.start:t.start+t.length,i];}}_isCharWordSeparator(e){return 0!==e.getWidth()&&this._optionsService.rawOptions.wordSeparator.indexOf(e.getChars())>=0}_selectLineAt(e){const t=this._bufferService.buffer.getWrappedRangeForLine(e),i={start:{x:0,y:t.first},end:{x:this._bufferService.cols-1,y:t.last}};this._model.selectionStart=[0,t.first],this._model.selectionEnd=void 0,this._model.selectionStartLength=(0, _.getRangeLength)(i,this._bufferService.cols);}};t.SelectionService=g=s([r(3,f.IBufferService),r(4,f.ICoreService),r(5,h.IMouseService),r(6,f.IOptionsService),r(7,h.IRenderService),r(8,h.ICoreBrowserService)],g);},4725:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IThemeService=t.ICharacterJoinerService=t.ISelectionService=t.IRenderService=t.IMouseService=t.ICoreBrowserService=t.ICharSizeService=void 0;const s=i(8343);t.ICharSizeService=(0, s.createDecorator)("CharSizeService"),t.ICoreBrowserService=(0, s.createDecorator)("CoreBrowserService"),t.IMouseService=(0, s.createDecorator)("MouseService"),t.IRenderService=(0, s.createDecorator)("RenderService"),t.ISelectionService=(0, s.createDecorator)("SelectionService"),t.ICharacterJoinerService=(0, s.createDecorator)("CharacterJoinerService"),t.IThemeService=(0, s.createDecorator)("ThemeService");},6731:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.ThemeService=t.DEFAULT_ANSI_COLORS=void 0;const n=i(7239),o=i(8055),a=i(8460),h=i(844),c=i(2585),l=o.css.toColor("#ffffff"),d=o.css.toColor("#000000"),_=o.css.toColor("#ffffff"),u=o.css.toColor("#000000"),f={css:"rgba(255, 255, 255, 0.3)",rgba:4294967117};t.DEFAULT_ANSI_COLORS=Object.freeze((()=>{const e=[o.css.toColor("#2e3436"),o.css.toColor("#cc0000"),o.css.toColor("#4e9a06"),o.css.toColor("#c4a000"),o.css.toColor("#3465a4"),o.css.toColor("#75507b"),o.css.toColor("#06989a"),o.css.toColor("#d3d7cf"),o.css.toColor("#555753"),o.css.toColor("#ef2929"),o.css.toColor("#8ae234"),o.css.toColor("#fce94f"),o.css.toColor("#729fcf"),o.css.toColor("#ad7fa8"),o.css.toColor("#34e2e2"),o.css.toColor("#eeeeec")],t=[0,95,135,175,215,255];for(let i=0;i<216;i++){const s=t[i/36%6|0],r=t[i/6%6|0],n=t[i%6];e.push({css:o.channels.toCss(s,r,n),rgba:o.channels.toRgba(s,r,n)});}for(let t=0;t<24;t++){const i=8+10*t;e.push({css:o.channels.toCss(i,i,i),rgba:o.channels.toRgba(i,i,i)});}return e})());let v=t.ThemeService=class extends h.Disposable{get colors(){return this._colors}constructor(e){super(),this._optionsService=e,this._contrastCache=new n.ColorContrastCache,this._halfContrastCache=new n.ColorContrastCache,this._onChangeColors=this.register(new a.EventEmitter),this.onChangeColors=this._onChangeColors.event,this._colors={foreground:l,background:d,cursor:_,cursorAccent:u,selectionForeground:void 0,selectionBackgroundTransparent:f,selectionBackgroundOpaque:o.color.blend(d,f),selectionInactiveBackgroundTransparent:f,selectionInactiveBackgroundOpaque:o.color.blend(d,f),ansi:t.DEFAULT_ANSI_COLORS.slice(),contrastCache:this._contrastCache,halfContrastCache:this._halfContrastCache},this._updateRestoreColors(),this._setTheme(this._optionsService.rawOptions.theme),this.register(this._optionsService.onSpecificOptionChange("minimumContrastRatio",(()=>this._contrastCache.clear()))),this.register(this._optionsService.onSpecificOptionChange("theme",(()=>this._setTheme(this._optionsService.rawOptions.theme))));}_setTheme(e={}){const i=this._colors;if(i.foreground=p(e.foreground,l),i.background=p(e.background,d),i.cursor=p(e.cursor,_),i.cursorAccent=p(e.cursorAccent,u),i.selectionBackgroundTransparent=p(e.selectionBackground,f),i.selectionBackgroundOpaque=o.color.blend(i.background,i.selectionBackgroundTransparent),i.selectionInactiveBackgroundTransparent=p(e.selectionInactiveBackground,i.selectionBackgroundTransparent),i.selectionInactiveBackgroundOpaque=o.color.blend(i.background,i.selectionInactiveBackgroundTransparent),i.selectionForeground=e.selectionForeground?p(e.selectionForeground,o.NULL_COLOR):void 0,i.selectionForeground===o.NULL_COLOR&&(i.selectionForeground=void 0),o.color.isOpaque(i.selectionBackgroundTransparent)){const e=.3;i.selectionBackgroundTransparent=o.color.opacity(i.selectionBackgroundTransparent,e);}if(o.color.isOpaque(i.selectionInactiveBackgroundTransparent)){const e=.3;i.selectionInactiveBackgroundTransparent=o.color.opacity(i.selectionInactiveBackgroundTransparent,e);}if(i.ansi=t.DEFAULT_ANSI_COLORS.slice(),i.ansi[0]=p(e.black,t.DEFAULT_ANSI_COLORS[0]),i.ansi[1]=p(e.red,t.DEFAULT_ANSI_COLORS[1]),i.ansi[2]=p(e.green,t.DEFAULT_ANSI_COLORS[2]),i.ansi[3]=p(e.yellow,t.DEFAULT_ANSI_COLORS[3]),i.ansi[4]=p(e.blue,t.DEFAULT_ANSI_COLORS[4]),i.ansi[5]=p(e.magenta,t.DEFAULT_ANSI_COLORS[5]),i.ansi[6]=p(e.cyan,t.DEFAULT_ANSI_COLORS[6]),i.ansi[7]=p(e.white,t.DEFAULT_ANSI_COLORS[7]),i.ansi[8]=p(e.brightBlack,t.DEFAULT_ANSI_COLORS[8]),i.ansi[9]=p(e.brightRed,t.DEFAULT_ANSI_COLORS[9]),i.ansi[10]=p(e.brightGreen,t.DEFAULT_ANSI_COLORS[10]),i.ansi[11]=p(e.brightYellow,t.DEFAULT_ANSI_COLORS[11]),i.ansi[12]=p(e.brightBlue,t.DEFAULT_ANSI_COLORS[12]),i.ansi[13]=p(e.brightMagenta,t.DEFAULT_ANSI_COLORS[13]),i.ansi[14]=p(e.brightCyan,t.DEFAULT_ANSI_COLORS[14]),i.ansi[15]=p(e.brightWhite,t.DEFAULT_ANSI_COLORS[15]),e.extendedAnsi){const s=Math.min(i.ansi.length-16,e.extendedAnsi.length);for(let r=0;r<s;r++)i.ansi[r+16]=p(e.extendedAnsi[r],t.DEFAULT_ANSI_COLORS[r+16]);}this._contrastCache.clear(),this._halfContrastCache.clear(),this._updateRestoreColors(),this._onChangeColors.fire(this.colors);}restoreColor(e){this._restoreColor(e),this._onChangeColors.fire(this.colors);}_restoreColor(e){if(void 0!==e)switch(e){case 256:this._colors.foreground=this._restoreColors.foreground;break;case 257:this._colors.background=this._restoreColors.background;break;case 258:this._colors.cursor=this._restoreColors.cursor;break;default:this._colors.ansi[e]=this._restoreColors.ansi[e];}else for(let e=0;e<this._restoreColors.ansi.length;++e)this._colors.ansi[e]=this._restoreColors.ansi[e];}modifyColors(e){e(this._colors),this._onChangeColors.fire(this.colors);}_updateRestoreColors(){this._restoreColors={foreground:this._colors.foreground,background:this._colors.background,cursor:this._colors.cursor,ansi:this._colors.ansi.slice()};}};function p(e,t){if(void 0!==e)try{return o.css.toColor(e)}catch(e){}return t}t.ThemeService=v=s([r(0,c.IOptionsService)],v);},6349:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CircularList=void 0;const s=i(8460),r=i(844);class n extends r.Disposable{constructor(e){super(),this._maxLength=e,this.onDeleteEmitter=this.register(new s.EventEmitter),this.onDelete=this.onDeleteEmitter.event,this.onInsertEmitter=this.register(new s.EventEmitter),this.onInsert=this.onInsertEmitter.event,this.onTrimEmitter=this.register(new s.EventEmitter),this.onTrim=this.onTrimEmitter.event,this._array=new Array(this._maxLength),this._startIndex=0,this._length=0;}get maxLength(){return this._maxLength}set maxLength(e){if(this._maxLength===e)return;const t=new Array(e);for(let i=0;i<Math.min(e,this.length);i++)t[i]=this._array[this._getCyclicIndex(i)];this._array=t,this._maxLength=e,this._startIndex=0;}get length(){return this._length}set length(e){if(e>this._length)for(let t=this._length;t<e;t++)this._array[t]=void 0;this._length=e;}get(e){return this._array[this._getCyclicIndex(e)]}set(e,t){this._array[this._getCyclicIndex(e)]=t;}push(e){this._array[this._getCyclicIndex(this._length)]=e,this._length===this._maxLength?(this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1)):this._length++;}recycle(){if(this._length!==this._maxLength)throw new Error("Can only recycle when the buffer is full");return this._startIndex=++this._startIndex%this._maxLength,this.onTrimEmitter.fire(1),this._array[this._getCyclicIndex(this._length-1)]}get isFull(){return this._length===this._maxLength}pop(){return this._array[this._getCyclicIndex(this._length---1)]}splice(e,t,...i){if(t){for(let i=e;i<this._length-t;i++)this._array[this._getCyclicIndex(i)]=this._array[this._getCyclicIndex(i+t)];this._length-=t,this.onDeleteEmitter.fire({index:e,amount:t});}for(let t=this._length-1;t>=e;t--)this._array[this._getCyclicIndex(t+i.length)]=this._array[this._getCyclicIndex(t)];for(let t=0;t<i.length;t++)this._array[this._getCyclicIndex(e+t)]=i[t];if(i.length&&this.onInsertEmitter.fire({index:e,amount:i.length}),this._length+i.length>this._maxLength){const e=this._length+i.length-this._maxLength;this._startIndex+=e,this._length=this._maxLength,this.onTrimEmitter.fire(e);}else this._length+=i.length;}trimStart(e){e>this._length&&(e=this._length),this._startIndex+=e,this._length-=e,this.onTrimEmitter.fire(e);}shiftElements(e,t,i){if(!(t<=0)){if(e<0||e>=this._length)throw new Error("start argument out of range");if(e+i<0)throw new Error("Cannot shift elements in list beyond index 0");if(i>0){for(let s=t-1;s>=0;s--)this.set(e+s+i,this.get(e+s));const s=e+t+i-this._length;if(s>0)for(this._length+=s;this._length>this._maxLength;)this._length--,this._startIndex++,this.onTrimEmitter.fire(1);}else for(let s=0;s<t;s++)this.set(e+s+i,this.get(e+s));}}_getCyclicIndex(e){return (this._startIndex+e)%this._maxLength}}t.CircularList=n;},1439:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.clone=void 0,t.clone=function e(t,i=5){if("object"!=typeof t)return t;const s=Array.isArray(t)?[]:{};for(const r in t)s[r]=i<=1?t[r]:t[r]&&e(t[r],i-1);return s};},8055:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.contrastRatio=t.toPaddedHex=t.rgba=t.rgb=t.css=t.color=t.channels=t.NULL_COLOR=void 0;const s=i(6114);let r=0,n=0,o=0,a=0;var h,c,l,d,_;function u(e){const t=e.toString(16);return t.length<2?"0"+t:t}function f(e,t){return e<t?(t+.05)/(e+.05):(e+.05)/(t+.05)}t.NULL_COLOR={css:"#00000000",rgba:0},function(e){e.toCss=function(e,t,i,s){return void 0!==s?`#${u(e)}${u(t)}${u(i)}${u(s)}`:`#${u(e)}${u(t)}${u(i)}`},e.toRgba=function(e,t,i,s=255){return (e<<24|t<<16|i<<8|s)>>>0};}(h||(t.channels=h={})),function(e){function t(e,t){return a=Math.round(255*t),[r,n,o]=_.toChannels(e.rgba),{css:h.toCss(r,n,o,a),rgba:h.toRgba(r,n,o,a)}}e.blend=function(e,t){if(a=(255&t.rgba)/255,1===a)return {css:t.css,rgba:t.rgba};const i=t.rgba>>24&255,s=t.rgba>>16&255,c=t.rgba>>8&255,l=e.rgba>>24&255,d=e.rgba>>16&255,_=e.rgba>>8&255;return r=l+Math.round((i-l)*a),n=d+Math.round((s-d)*a),o=_+Math.round((c-_)*a),{css:h.toCss(r,n,o),rgba:h.toRgba(r,n,o)}},e.isOpaque=function(e){return 255==(255&e.rgba)},e.ensureContrastRatio=function(e,t,i){const s=_.ensureContrastRatio(e.rgba,t.rgba,i);if(s)return _.toColor(s>>24&255,s>>16&255,s>>8&255)},e.opaque=function(e){const t=(255|e.rgba)>>>0;return [r,n,o]=_.toChannels(t),{css:h.toCss(r,n,o),rgba:t}},e.opacity=t,e.multiplyOpacity=function(e,i){return a=255&e.rgba,t(e,a*i/255)},e.toColorRGB=function(e){return [e.rgba>>24&255,e.rgba>>16&255,e.rgba>>8&255]};}(c||(t.color=c={})),function(e){let t,i;if(!s.isNode){const e=document.createElement("canvas");e.width=1,e.height=1;const s=e.getContext("2d",{willReadFrequently:!0});s&&(t=s,t.globalCompositeOperation="copy",i=t.createLinearGradient(0,0,1,1));}e.toColor=function(e){if(e.match(/#[\da-f]{3,8}/i))switch(e.length){case 4:return r=parseInt(e.slice(1,2).repeat(2),16),n=parseInt(e.slice(2,3).repeat(2),16),o=parseInt(e.slice(3,4).repeat(2),16),_.toColor(r,n,o);case 5:return r=parseInt(e.slice(1,2).repeat(2),16),n=parseInt(e.slice(2,3).repeat(2),16),o=parseInt(e.slice(3,4).repeat(2),16),a=parseInt(e.slice(4,5).repeat(2),16),_.toColor(r,n,o,a);case 7:return {css:e,rgba:(parseInt(e.slice(1),16)<<8|255)>>>0};case 9:return {css:e,rgba:parseInt(e.slice(1),16)>>>0}}const s=e.match(/rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(,\s*(0|1|\d?\.(\d+))\s*)?\)/);if(s)return r=parseInt(s[1]),n=parseInt(s[2]),o=parseInt(s[3]),a=Math.round(255*(void 0===s[5]?1:parseFloat(s[5]))),_.toColor(r,n,o,a);if(!t||!i)throw new Error("css.toColor: Unsupported css format");if(t.fillStyle=i,t.fillStyle=e,"string"!=typeof t.fillStyle)throw new Error("css.toColor: Unsupported css format");if(t.fillRect(0,0,1,1),[r,n,o,a]=t.getImageData(0,0,1,1).data,255!==a)throw new Error("css.toColor: Unsupported css format");return {rgba:h.toRgba(r,n,o,a),css:e}};}(l||(t.css=l={})),function(e){function t(e,t,i){const s=e/255,r=t/255,n=i/255;return .2126*(s<=.03928?s/12.92:Math.pow((s+.055)/1.055,2.4))+.7152*(r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4))+.0722*(n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4))}e.relativeLuminance=function(e){return t(e>>16&255,e>>8&255,255&e)},e.relativeLuminance2=t;}(d||(t.rgb=d={})),function(e){function t(e,t,i){const s=e>>24&255,r=e>>16&255,n=e>>8&255;let o=t>>24&255,a=t>>16&255,h=t>>8&255,c=f(d.relativeLuminance2(o,a,h),d.relativeLuminance2(s,r,n));for(;c<i&&(o>0||a>0||h>0);)o-=Math.max(0,Math.ceil(.1*o)),a-=Math.max(0,Math.ceil(.1*a)),h-=Math.max(0,Math.ceil(.1*h)),c=f(d.relativeLuminance2(o,a,h),d.relativeLuminance2(s,r,n));return (o<<24|a<<16|h<<8|255)>>>0}function i(e,t,i){const s=e>>24&255,r=e>>16&255,n=e>>8&255;let o=t>>24&255,a=t>>16&255,h=t>>8&255,c=f(d.relativeLuminance2(o,a,h),d.relativeLuminance2(s,r,n));for(;c<i&&(o<255||a<255||h<255);)o=Math.min(255,o+Math.ceil(.1*(255-o))),a=Math.min(255,a+Math.ceil(.1*(255-a))),h=Math.min(255,h+Math.ceil(.1*(255-h))),c=f(d.relativeLuminance2(o,a,h),d.relativeLuminance2(s,r,n));return (o<<24|a<<16|h<<8|255)>>>0}e.ensureContrastRatio=function(e,s,r){const n=d.relativeLuminance(e>>8),o=d.relativeLuminance(s>>8);if(f(n,o)<r){if(o<n){const o=t(e,s,r),a=f(n,d.relativeLuminance(o>>8));if(a<r){const t=i(e,s,r);return a>f(n,d.relativeLuminance(t>>8))?o:t}return o}const a=i(e,s,r),h=f(n,d.relativeLuminance(a>>8));if(h<r){const i=t(e,s,r);return h>f(n,d.relativeLuminance(i>>8))?a:i}return a}},e.reduceLuminance=t,e.increaseLuminance=i,e.toChannels=function(e){return [e>>24&255,e>>16&255,e>>8&255,255&e]},e.toColor=function(e,t,i,s){return {css:h.toCss(e,t,i,s),rgba:h.toRgba(e,t,i,s)}};}(_||(t.rgba=_={})),t.toPaddedHex=u,t.contrastRatio=f;},8969:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CoreTerminal=void 0;const s=i(844),r=i(2585),n=i(4348),o=i(7866),a=i(744),h=i(7302),c=i(6975),l=i(8460),d=i(1753),_=i(1480),u=i(7994),f=i(9282),v=i(5435),p=i(5981),g=i(2660);let m=!1;class S extends s.Disposable{get onScroll(){return this._onScrollApi||(this._onScrollApi=this.register(new l.EventEmitter),this._onScroll.event((e=>{var t;null===(t=this._onScrollApi)||void 0===t||t.fire(e.position);}))),this._onScrollApi.event}get cols(){return this._bufferService.cols}get rows(){return this._bufferService.rows}get buffers(){return this._bufferService.buffers}get options(){return this.optionsService.options}set options(e){for(const t in e)this.optionsService.options[t]=e[t];}constructor(e){super(),this._windowsWrappingHeuristics=this.register(new s.MutableDisposable),this._onBinary=this.register(new l.EventEmitter),this.onBinary=this._onBinary.event,this._onData=this.register(new l.EventEmitter),this.onData=this._onData.event,this._onLineFeed=this.register(new l.EventEmitter),this.onLineFeed=this._onLineFeed.event,this._onResize=this.register(new l.EventEmitter),this.onResize=this._onResize.event,this._onWriteParsed=this.register(new l.EventEmitter),this.onWriteParsed=this._onWriteParsed.event,this._onScroll=this.register(new l.EventEmitter),this._instantiationService=new n.InstantiationService,this.optionsService=this.register(new h.OptionsService(e)),this._instantiationService.setService(r.IOptionsService,this.optionsService),this._bufferService=this.register(this._instantiationService.createInstance(a.BufferService)),this._instantiationService.setService(r.IBufferService,this._bufferService),this._logService=this.register(this._instantiationService.createInstance(o.LogService)),this._instantiationService.setService(r.ILogService,this._logService),this.coreService=this.register(this._instantiationService.createInstance(c.CoreService)),this._instantiationService.setService(r.ICoreService,this.coreService),this.coreMouseService=this.register(this._instantiationService.createInstance(d.CoreMouseService)),this._instantiationService.setService(r.ICoreMouseService,this.coreMouseService),this.unicodeService=this.register(this._instantiationService.createInstance(_.UnicodeService)),this._instantiationService.setService(r.IUnicodeService,this.unicodeService),this._charsetService=this._instantiationService.createInstance(u.CharsetService),this._instantiationService.setService(r.ICharsetService,this._charsetService),this._oscLinkService=this._instantiationService.createInstance(g.OscLinkService),this._instantiationService.setService(r.IOscLinkService,this._oscLinkService),this._inputHandler=this.register(new v.InputHandler(this._bufferService,this._charsetService,this.coreService,this._logService,this.optionsService,this._oscLinkService,this.coreMouseService,this.unicodeService)),this.register((0, l.forwardEvent)(this._inputHandler.onLineFeed,this._onLineFeed)),this.register(this._inputHandler),this.register((0, l.forwardEvent)(this._bufferService.onResize,this._onResize)),this.register((0, l.forwardEvent)(this.coreService.onData,this._onData)),this.register((0, l.forwardEvent)(this.coreService.onBinary,this._onBinary)),this.register(this.coreService.onRequestScrollToBottom((()=>this.scrollToBottom()))),this.register(this.coreService.onUserInput((()=>this._writeBuffer.handleUserInput()))),this.register(this.optionsService.onMultipleOptionChange(["windowsMode","windowsPty"],(()=>this._handleWindowsPtyOptionChange()))),this.register(this._bufferService.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom);}))),this.register(this._inputHandler.onScroll((e=>{this._onScroll.fire({position:this._bufferService.buffer.ydisp,source:0}),this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop,this._bufferService.buffer.scrollBottom);}))),this._writeBuffer=this.register(new p.WriteBuffer(((e,t)=>this._inputHandler.parse(e,t)))),this.register((0, l.forwardEvent)(this._writeBuffer.onWriteParsed,this._onWriteParsed));}write(e,t){this._writeBuffer.write(e,t);}writeSync(e,t){this._logService.logLevel<=r.LogLevelEnum.WARN&&!m&&(this._logService.warn("writeSync is unreliable and will be removed soon."),m=!0),this._writeBuffer.writeSync(e,t);}resize(e,t){isNaN(e)||isNaN(t)||(e=Math.max(e,a.MINIMUM_COLS),t=Math.max(t,a.MINIMUM_ROWS),this._bufferService.resize(e,t));}scroll(e,t=!1){this._bufferService.scroll(e,t);}scrollLines(e,t,i){this._bufferService.scrollLines(e,t,i);}scrollPages(e){this.scrollLines(e*(this.rows-1));}scrollToTop(){this.scrollLines(-this._bufferService.buffer.ydisp);}scrollToBottom(){this.scrollLines(this._bufferService.buffer.ybase-this._bufferService.buffer.ydisp);}scrollToLine(e){const t=e-this._bufferService.buffer.ydisp;0!==t&&this.scrollLines(t);}registerEscHandler(e,t){return this._inputHandler.registerEscHandler(e,t)}registerDcsHandler(e,t){return this._inputHandler.registerDcsHandler(e,t)}registerCsiHandler(e,t){return this._inputHandler.registerCsiHandler(e,t)}registerOscHandler(e,t){return this._inputHandler.registerOscHandler(e,t)}_setup(){this._handleWindowsPtyOptionChange();}reset(){this._inputHandler.reset(),this._bufferService.reset(),this._charsetService.reset(),this.coreService.reset(),this.coreMouseService.reset();}_handleWindowsPtyOptionChange(){let e=!1;const t=this.optionsService.rawOptions.windowsPty;t&&void 0!==t.buildNumber&&void 0!==t.buildNumber?e=!!("conpty"===t.backend&&t.buildNumber<21376):this.optionsService.rawOptions.windowsMode&&(e=!0),e?this._enableWindowsWrappingHeuristics():this._windowsWrappingHeuristics.clear();}_enableWindowsWrappingHeuristics(){if(!this._windowsWrappingHeuristics.value){const e=[];e.push(this.onLineFeed(f.updateWindowsModeWrappedState.bind(null,this._bufferService))),e.push(this.registerCsiHandler({final:"H"},(()=>((0, f.updateWindowsModeWrappedState)(this._bufferService),!1)))),this._windowsWrappingHeuristics.value=(0, s.toDisposable)((()=>{for(const t of e)t.dispose();}));}}}t.CoreTerminal=S;},8460:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.forwardEvent=t.EventEmitter=void 0,t.EventEmitter=class{constructor(){this._listeners=[],this._disposed=!1;}get event(){return this._event||(this._event=e=>(this._listeners.push(e),{dispose:()=>{if(!this._disposed)for(let t=0;t<this._listeners.length;t++)if(this._listeners[t]===e)return void this._listeners.splice(t,1)}})),this._event}fire(e,t){const i=[];for(let e=0;e<this._listeners.length;e++)i.push(this._listeners[e]);for(let s=0;s<i.length;s++)i[s].call(void 0,e,t);}dispose(){this.clearListeners(),this._disposed=!0;}clearListeners(){this._listeners&&(this._listeners.length=0);}},t.forwardEvent=function(e,t){return e((e=>t.fire(e)))};},5435:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.InputHandler=t.WindowsOptionsReportType=void 0;const n=i(2584),o=i(7116),a=i(2015),h=i(844),c=i(482),l=i(8437),d=i(8460),_=i(643),u=i(511),f=i(3734),v=i(2585),p=i(6242),g=i(6351),m=i(5941),S={"(":0,")":1,"*":2,"+":3,"-":1,".":2},C=131072;function b(e,t){if(e>24)return t.setWinLines||!1;switch(e){case 1:return !!t.restoreWin;case 2:return !!t.minimizeWin;case 3:return !!t.setWinPosition;case 4:return !!t.setWinSizePixels;case 5:return !!t.raiseWin;case 6:return !!t.lowerWin;case 7:return !!t.refreshWin;case 8:return !!t.setWinSizeChars;case 9:return !!t.maximizeWin;case 10:return !!t.fullscreenWin;case 11:return !!t.getWinState;case 13:return !!t.getWinPosition;case 14:return !!t.getWinSizePixels;case 15:return !!t.getScreenSizePixels;case 16:return !!t.getCellSizePixels;case 18:return !!t.getWinSizeChars;case 19:return !!t.getScreenSizeChars;case 20:return !!t.getIconTitle;case 21:return !!t.getWinTitle;case 22:return !!t.pushTitle;case 23:return !!t.popTitle;case 24:return !!t.setWinLines}return !1}var y;!function(e){e[e.GET_WIN_SIZE_PIXELS=0]="GET_WIN_SIZE_PIXELS",e[e.GET_CELL_SIZE_PIXELS=1]="GET_CELL_SIZE_PIXELS";}(y||(t.WindowsOptionsReportType=y={}));let w=0;class E extends h.Disposable{getAttrData(){return this._curAttrData}constructor(e,t,i,s,r,h,_,f,v=new a.EscapeSequenceParser){super(),this._bufferService=e,this._charsetService=t,this._coreService=i,this._logService=s,this._optionsService=r,this._oscLinkService=h,this._coreMouseService=_,this._unicodeService=f,this._parser=v,this._parseBuffer=new Uint32Array(4096),this._stringDecoder=new c.StringToUtf32,this._utf8Decoder=new c.Utf8ToUtf32,this._workCell=new u.CellData,this._windowTitle="",this._iconName="",this._windowTitleStack=[],this._iconNameStack=[],this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=l.DEFAULT_ATTR_DATA.clone(),this._onRequestBell=this.register(new d.EventEmitter),this.onRequestBell=this._onRequestBell.event,this._onRequestRefreshRows=this.register(new d.EventEmitter),this.onRequestRefreshRows=this._onRequestRefreshRows.event,this._onRequestReset=this.register(new d.EventEmitter),this.onRequestReset=this._onRequestReset.event,this._onRequestSendFocus=this.register(new d.EventEmitter),this.onRequestSendFocus=this._onRequestSendFocus.event,this._onRequestSyncScrollBar=this.register(new d.EventEmitter),this.onRequestSyncScrollBar=this._onRequestSyncScrollBar.event,this._onRequestWindowsOptionsReport=this.register(new d.EventEmitter),this.onRequestWindowsOptionsReport=this._onRequestWindowsOptionsReport.event,this._onA11yChar=this.register(new d.EventEmitter),this.onA11yChar=this._onA11yChar.event,this._onA11yTab=this.register(new d.EventEmitter),this.onA11yTab=this._onA11yTab.event,this._onCursorMove=this.register(new d.EventEmitter),this.onCursorMove=this._onCursorMove.event,this._onLineFeed=this.register(new d.EventEmitter),this.onLineFeed=this._onLineFeed.event,this._onScroll=this.register(new d.EventEmitter),this.onScroll=this._onScroll.event,this._onTitleChange=this.register(new d.EventEmitter),this.onTitleChange=this._onTitleChange.event,this._onColor=this.register(new d.EventEmitter),this.onColor=this._onColor.event,this._parseStack={paused:!1,cursorStartX:0,cursorStartY:0,decodedLength:0,position:0},this._specialColors=[256,257,258],this.register(this._parser),this._dirtyRowTracker=new k(this._bufferService),this._activeBuffer=this._bufferService.buffer,this.register(this._bufferService.buffers.onBufferActivate((e=>this._activeBuffer=e.activeBuffer))),this._parser.setCsiHandlerFallback(((e,t)=>{this._logService.debug("Unknown CSI code: ",{identifier:this._parser.identToString(e),params:t.toArray()});})),this._parser.setEscHandlerFallback((e=>{this._logService.debug("Unknown ESC code: ",{identifier:this._parser.identToString(e)});})),this._parser.setExecuteHandlerFallback((e=>{this._logService.debug("Unknown EXECUTE code: ",{code:e});})),this._parser.setOscHandlerFallback(((e,t,i)=>{this._logService.debug("Unknown OSC code: ",{identifier:e,action:t,data:i});})),this._parser.setDcsHandlerFallback(((e,t,i)=>{"HOOK"===t&&(i=i.toArray()),this._logService.debug("Unknown DCS code: ",{identifier:this._parser.identToString(e),action:t,payload:i});})),this._parser.setPrintHandler(((e,t,i)=>this.print(e,t,i))),this._parser.registerCsiHandler({final:"@"},(e=>this.insertChars(e))),this._parser.registerCsiHandler({intermediates:" ",final:"@"},(e=>this.scrollLeft(e))),this._parser.registerCsiHandler({final:"A"},(e=>this.cursorUp(e))),this._parser.registerCsiHandler({intermediates:" ",final:"A"},(e=>this.scrollRight(e))),this._parser.registerCsiHandler({final:"B"},(e=>this.cursorDown(e))),this._parser.registerCsiHandler({final:"C"},(e=>this.cursorForward(e))),this._parser.registerCsiHandler({final:"D"},(e=>this.cursorBackward(e))),this._parser.registerCsiHandler({final:"E"},(e=>this.cursorNextLine(e))),this._parser.registerCsiHandler({final:"F"},(e=>this.cursorPrecedingLine(e))),this._parser.registerCsiHandler({final:"G"},(e=>this.cursorCharAbsolute(e))),this._parser.registerCsiHandler({final:"H"},(e=>this.cursorPosition(e))),this._parser.registerCsiHandler({final:"I"},(e=>this.cursorForwardTab(e))),this._parser.registerCsiHandler({final:"J"},(e=>this.eraseInDisplay(e,!1))),this._parser.registerCsiHandler({prefix:"?",final:"J"},(e=>this.eraseInDisplay(e,!0))),this._parser.registerCsiHandler({final:"K"},(e=>this.eraseInLine(e,!1))),this._parser.registerCsiHandler({prefix:"?",final:"K"},(e=>this.eraseInLine(e,!0))),this._parser.registerCsiHandler({final:"L"},(e=>this.insertLines(e))),this._parser.registerCsiHandler({final:"M"},(e=>this.deleteLines(e))),this._parser.registerCsiHandler({final:"P"},(e=>this.deleteChars(e))),this._parser.registerCsiHandler({final:"S"},(e=>this.scrollUp(e))),this._parser.registerCsiHandler({final:"T"},(e=>this.scrollDown(e))),this._parser.registerCsiHandler({final:"X"},(e=>this.eraseChars(e))),this._parser.registerCsiHandler({final:"Z"},(e=>this.cursorBackwardTab(e))),this._parser.registerCsiHandler({final:"`"},(e=>this.charPosAbsolute(e))),this._parser.registerCsiHandler({final:"a"},(e=>this.hPositionRelative(e))),this._parser.registerCsiHandler({final:"b"},(e=>this.repeatPrecedingCharacter(e))),this._parser.registerCsiHandler({final:"c"},(e=>this.sendDeviceAttributesPrimary(e))),this._parser.registerCsiHandler({prefix:">",final:"c"},(e=>this.sendDeviceAttributesSecondary(e))),this._parser.registerCsiHandler({final:"d"},(e=>this.linePosAbsolute(e))),this._parser.registerCsiHandler({final:"e"},(e=>this.vPositionRelative(e))),this._parser.registerCsiHandler({final:"f"},(e=>this.hVPosition(e))),this._parser.registerCsiHandler({final:"g"},(e=>this.tabClear(e))),this._parser.registerCsiHandler({final:"h"},(e=>this.setMode(e))),this._parser.registerCsiHandler({prefix:"?",final:"h"},(e=>this.setModePrivate(e))),this._parser.registerCsiHandler({final:"l"},(e=>this.resetMode(e))),this._parser.registerCsiHandler({prefix:"?",final:"l"},(e=>this.resetModePrivate(e))),this._parser.registerCsiHandler({final:"m"},(e=>this.charAttributes(e))),this._parser.registerCsiHandler({final:"n"},(e=>this.deviceStatus(e))),this._parser.registerCsiHandler({prefix:"?",final:"n"},(e=>this.deviceStatusPrivate(e))),this._parser.registerCsiHandler({intermediates:"!",final:"p"},(e=>this.softReset(e))),this._parser.registerCsiHandler({intermediates:" ",final:"q"},(e=>this.setCursorStyle(e))),this._parser.registerCsiHandler({final:"r"},(e=>this.setScrollRegion(e))),this._parser.registerCsiHandler({final:"s"},(e=>this.saveCursor(e))),this._parser.registerCsiHandler({final:"t"},(e=>this.windowOptions(e))),this._parser.registerCsiHandler({final:"u"},(e=>this.restoreCursor(e))),this._parser.registerCsiHandler({intermediates:"'",final:"}"},(e=>this.insertColumns(e))),this._parser.registerCsiHandler({intermediates:"'",final:"~"},(e=>this.deleteColumns(e))),this._parser.registerCsiHandler({intermediates:'"',final:"q"},(e=>this.selectProtected(e))),this._parser.registerCsiHandler({intermediates:"$",final:"p"},(e=>this.requestMode(e,!0))),this._parser.registerCsiHandler({prefix:"?",intermediates:"$",final:"p"},(e=>this.requestMode(e,!1))),this._parser.setExecuteHandler(n.C0.BEL,(()=>this.bell())),this._parser.setExecuteHandler(n.C0.LF,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.VT,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.FF,(()=>this.lineFeed())),this._parser.setExecuteHandler(n.C0.CR,(()=>this.carriageReturn())),this._parser.setExecuteHandler(n.C0.BS,(()=>this.backspace())),this._parser.setExecuteHandler(n.C0.HT,(()=>this.tab())),this._parser.setExecuteHandler(n.C0.SO,(()=>this.shiftOut())),this._parser.setExecuteHandler(n.C0.SI,(()=>this.shiftIn())),this._parser.setExecuteHandler(n.C1.IND,(()=>this.index())),this._parser.setExecuteHandler(n.C1.NEL,(()=>this.nextLine())),this._parser.setExecuteHandler(n.C1.HTS,(()=>this.tabSet())),this._parser.registerOscHandler(0,new p.OscHandler((e=>(this.setTitle(e),this.setIconName(e),!0)))),this._parser.registerOscHandler(1,new p.OscHandler((e=>this.setIconName(e)))),this._parser.registerOscHandler(2,new p.OscHandler((e=>this.setTitle(e)))),this._parser.registerOscHandler(4,new p.OscHandler((e=>this.setOrReportIndexedColor(e)))),this._parser.registerOscHandler(8,new p.OscHandler((e=>this.setHyperlink(e)))),this._parser.registerOscHandler(10,new p.OscHandler((e=>this.setOrReportFgColor(e)))),this._parser.registerOscHandler(11,new p.OscHandler((e=>this.setOrReportBgColor(e)))),this._parser.registerOscHandler(12,new p.OscHandler((e=>this.setOrReportCursorColor(e)))),this._parser.registerOscHandler(104,new p.OscHandler((e=>this.restoreIndexedColor(e)))),this._parser.registerOscHandler(110,new p.OscHandler((e=>this.restoreFgColor(e)))),this._parser.registerOscHandler(111,new p.OscHandler((e=>this.restoreBgColor(e)))),this._parser.registerOscHandler(112,new p.OscHandler((e=>this.restoreCursorColor(e)))),this._parser.registerEscHandler({final:"7"},(()=>this.saveCursor())),this._parser.registerEscHandler({final:"8"},(()=>this.restoreCursor())),this._parser.registerEscHandler({final:"D"},(()=>this.index())),this._parser.registerEscHandler({final:"E"},(()=>this.nextLine())),this._parser.registerEscHandler({final:"H"},(()=>this.tabSet())),this._parser.registerEscHandler({final:"M"},(()=>this.reverseIndex())),this._parser.registerEscHandler({final:"="},(()=>this.keypadApplicationMode())),this._parser.registerEscHandler({final:">"},(()=>this.keypadNumericMode())),this._parser.registerEscHandler({final:"c"},(()=>this.fullReset())),this._parser.registerEscHandler({final:"n"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:"o"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:"|"},(()=>this.setgLevel(3))),this._parser.registerEscHandler({final:"}"},(()=>this.setgLevel(2))),this._parser.registerEscHandler({final:"~"},(()=>this.setgLevel(1))),this._parser.registerEscHandler({intermediates:"%",final:"@"},(()=>this.selectDefaultCharset())),this._parser.registerEscHandler({intermediates:"%",final:"G"},(()=>this.selectDefaultCharset()));for(const e in o.CHARSETS)this._parser.registerEscHandler({intermediates:"(",final:e},(()=>this.selectCharset("("+e))),this._parser.registerEscHandler({intermediates:")",final:e},(()=>this.selectCharset(")"+e))),this._parser.registerEscHandler({intermediates:"*",final:e},(()=>this.selectCharset("*"+e))),this._parser.registerEscHandler({intermediates:"+",final:e},(()=>this.selectCharset("+"+e))),this._parser.registerEscHandler({intermediates:"-",final:e},(()=>this.selectCharset("-"+e))),this._parser.registerEscHandler({intermediates:".",final:e},(()=>this.selectCharset("."+e))),this._parser.registerEscHandler({intermediates:"/",final:e},(()=>this.selectCharset("/"+e)));this._parser.registerEscHandler({intermediates:"#",final:"8"},(()=>this.screenAlignmentPattern())),this._parser.setErrorHandler((e=>(this._logService.error("Parsing error: ",e),e))),this._parser.registerDcsHandler({intermediates:"$",final:"q"},new g.DcsHandler(((e,t)=>this.requestStatusString(e,t))));}_preserveStack(e,t,i,s){this._parseStack.paused=!0,this._parseStack.cursorStartX=e,this._parseStack.cursorStartY=t,this._parseStack.decodedLength=i,this._parseStack.position=s;}_logSlowResolvingAsync(e){this._logService.logLevel<=v.LogLevelEnum.WARN&&Promise.race([e,new Promise(((e,t)=>setTimeout((()=>t("#SLOW_TIMEOUT")),5e3)))]).catch((e=>{if("#SLOW_TIMEOUT"!==e)throw e;console.warn("async parser handler taking longer than 5000 ms");}));}_getCurrentLinkId(){return this._curAttrData.extended.urlId}parse(e,t){let i,s=this._activeBuffer.x,r=this._activeBuffer.y,n=0;const o=this._parseStack.paused;if(o){if(i=this._parser.parse(this._parseBuffer,this._parseStack.decodedLength,t))return this._logSlowResolvingAsync(i),i;s=this._parseStack.cursorStartX,r=this._parseStack.cursorStartY,this._parseStack.paused=!1,e.length>C&&(n=this._parseStack.position+C);}if(this._logService.logLevel<=v.LogLevelEnum.DEBUG&&this._logService.debug("parsing data"+("string"==typeof e?` "${e}"`:` "${Array.prototype.map.call(e,(e=>String.fromCharCode(e))).join("")}"`),"string"==typeof e?e.split("").map((e=>e.charCodeAt(0))):e),this._parseBuffer.length<e.length&&this._parseBuffer.length<C&&(this._parseBuffer=new Uint32Array(Math.min(e.length,C))),o||this._dirtyRowTracker.clearRange(),e.length>C)for(let t=n;t<e.length;t+=C){const n=t+C<e.length?t+C:e.length,o="string"==typeof e?this._stringDecoder.decode(e.substring(t,n),this._parseBuffer):this._utf8Decoder.decode(e.subarray(t,n),this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,o))return this._preserveStack(s,r,o,t),this._logSlowResolvingAsync(i),i}else if(!o){const t="string"==typeof e?this._stringDecoder.decode(e,this._parseBuffer):this._utf8Decoder.decode(e,this._parseBuffer);if(i=this._parser.parse(this._parseBuffer,t))return this._preserveStack(s,r,t,0),this._logSlowResolvingAsync(i),i}this._activeBuffer.x===s&&this._activeBuffer.y===r||this._onCursorMove.fire(),this._onRequestRefreshRows.fire(this._dirtyRowTracker.start,this._dirtyRowTracker.end);}print(e,t,i){let s,r;const n=this._charsetService.charset,o=this._optionsService.rawOptions.screenReaderMode,a=this._bufferService.cols,h=this._coreService.decPrivateModes.wraparound,l=this._coreService.modes.insertMode,d=this._curAttrData;let u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._activeBuffer.x&&i-t>0&&2===u.getWidth(this._activeBuffer.x-1)&&u.setCellFromCodePoint(this._activeBuffer.x-1,0,1,d.fg,d.bg,d.extended);for(let f=t;f<i;++f){if(s=e[f],r=this._unicodeService.wcwidth(s),s<127&&n){const e=n[String.fromCharCode(s)];e&&(s=e.charCodeAt(0));}if(o&&this._onA11yChar.fire((0, c.stringFromCodePoint)(s)),this._getCurrentLinkId()&&this._oscLinkService.addLineToLink(this._getCurrentLinkId(),this._activeBuffer.ybase+this._activeBuffer.y),r||!this._activeBuffer.x){if(this._activeBuffer.x+r-1>=a)if(h){for(;this._activeBuffer.x<a;)u.setCellFromCodePoint(this._activeBuffer.x++,0,1,d.fg,d.bg,d.extended);this._activeBuffer.x=0,this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData(),!0)):(this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!0),u=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);}else if(this._activeBuffer.x=a-1,2===r)continue;if(l&&(u.insertCells(this._activeBuffer.x,r,this._activeBuffer.getNullCell(d),d),2===u.getWidth(a-1)&&u.setCellFromCodePoint(a-1,_.NULL_CELL_CODE,_.NULL_CELL_WIDTH,d.fg,d.bg,d.extended)),u.setCellFromCodePoint(this._activeBuffer.x++,s,r,d.fg,d.bg,d.extended),r>0)for(;--r;)u.setCellFromCodePoint(this._activeBuffer.x++,0,0,d.fg,d.bg,d.extended);}else u.getWidth(this._activeBuffer.x-1)?u.addCodepointToCell(this._activeBuffer.x-1,s):u.addCodepointToCell(this._activeBuffer.x-2,s);}i-t>0&&(u.loadCell(this._activeBuffer.x-1,this._workCell),2===this._workCell.getWidth()||this._workCell.getCode()>65535?this._parser.precedingCodepoint=0:this._workCell.isCombined()?this._parser.precedingCodepoint=this._workCell.getChars().charCodeAt(0):this._parser.precedingCodepoint=this._workCell.content),this._activeBuffer.x<a&&i-t>0&&0===u.getWidth(this._activeBuffer.x)&&!u.hasContent(this._activeBuffer.x)&&u.setCellFromCodePoint(this._activeBuffer.x,0,1,d.fg,d.bg,d.extended),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}registerCsiHandler(e,t){return "t"!==e.final||e.prefix||e.intermediates?this._parser.registerCsiHandler(e,t):this._parser.registerCsiHandler(e,(e=>!b(e.params[0],this._optionsService.rawOptions.windowOptions)||t(e)))}registerDcsHandler(e,t){return this._parser.registerDcsHandler(e,new g.DcsHandler(t))}registerEscHandler(e,t){return this._parser.registerEscHandler(e,t)}registerOscHandler(e,t){return this._parser.registerOscHandler(e,new p.OscHandler(t))}bell(){return this._onRequestBell.fire(),!0}lineFeed(){return this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._optionsService.rawOptions.convertEol&&(this._activeBuffer.x=0),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows?this._activeBuffer.y=this._bufferService.rows-1:this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.x>=this._bufferService.cols&&this._activeBuffer.x--,this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._onLineFeed.fire(),!0}carriageReturn(){return this._activeBuffer.x=0,!0}backspace(){var e;if(!this._coreService.decPrivateModes.reverseWraparound)return this._restrictCursor(),this._activeBuffer.x>0&&this._activeBuffer.x--,!0;if(this._restrictCursor(this._bufferService.cols),this._activeBuffer.x>0)this._activeBuffer.x--;else if(0===this._activeBuffer.x&&this._activeBuffer.y>this._activeBuffer.scrollTop&&this._activeBuffer.y<=this._activeBuffer.scrollBottom&&(null===(e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y))||void 0===e?void 0:e.isWrapped)){this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y).isWrapped=!1,this._activeBuffer.y--,this._activeBuffer.x=this._bufferService.cols-1;const e=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);e.hasWidth(this._activeBuffer.x)&&!e.hasContent(this._activeBuffer.x)&&this._activeBuffer.x--;}return this._restrictCursor(),!0}tab(){if(this._activeBuffer.x>=this._bufferService.cols)return !0;const e=this._activeBuffer.x;return this._activeBuffer.x=this._activeBuffer.nextStop(),this._optionsService.rawOptions.screenReaderMode&&this._onA11yTab.fire(this._activeBuffer.x-e),!0}shiftOut(){return this._charsetService.setgLevel(1),!0}shiftIn(){return this._charsetService.setgLevel(0),!0}_restrictCursor(e=this._bufferService.cols-1){this._activeBuffer.x=Math.min(e,Math.max(0,this._activeBuffer.x)),this._activeBuffer.y=this._coreService.decPrivateModes.origin?Math.min(this._activeBuffer.scrollBottom,Math.max(this._activeBuffer.scrollTop,this._activeBuffer.y)):Math.min(this._bufferService.rows-1,Math.max(0,this._activeBuffer.y)),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}_setCursor(e,t){this._dirtyRowTracker.markDirty(this._activeBuffer.y),this._coreService.decPrivateModes.origin?(this._activeBuffer.x=e,this._activeBuffer.y=this._activeBuffer.scrollTop+t):(this._activeBuffer.x=e,this._activeBuffer.y=t),this._restrictCursor(),this._dirtyRowTracker.markDirty(this._activeBuffer.y);}_moveCursor(e,t){this._restrictCursor(),this._setCursor(this._activeBuffer.x+e,this._activeBuffer.y+t);}cursorUp(e){const t=this._activeBuffer.y-this._activeBuffer.scrollTop;return t>=0?this._moveCursor(0,-Math.min(t,e.params[0]||1)):this._moveCursor(0,-(e.params[0]||1)),!0}cursorDown(e){const t=this._activeBuffer.scrollBottom-this._activeBuffer.y;return t>=0?this._moveCursor(0,Math.min(t,e.params[0]||1)):this._moveCursor(0,e.params[0]||1),!0}cursorForward(e){return this._moveCursor(e.params[0]||1,0),!0}cursorBackward(e){return this._moveCursor(-(e.params[0]||1),0),!0}cursorNextLine(e){return this.cursorDown(e),this._activeBuffer.x=0,!0}cursorPrecedingLine(e){return this.cursorUp(e),this._activeBuffer.x=0,!0}cursorCharAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}cursorPosition(e){return this._setCursor(e.length>=2?(e.params[1]||1)-1:0,(e.params[0]||1)-1),!0}charPosAbsolute(e){return this._setCursor((e.params[0]||1)-1,this._activeBuffer.y),!0}hPositionRelative(e){return this._moveCursor(e.params[0]||1,0),!0}linePosAbsolute(e){return this._setCursor(this._activeBuffer.x,(e.params[0]||1)-1),!0}vPositionRelative(e){return this._moveCursor(0,e.params[0]||1),!0}hVPosition(e){return this.cursorPosition(e),!0}tabClear(e){const t=e.params[0];return 0===t?delete this._activeBuffer.tabs[this._activeBuffer.x]:3===t&&(this._activeBuffer.tabs={}),!0}cursorForwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.nextStop();return !0}cursorBackwardTab(e){if(this._activeBuffer.x>=this._bufferService.cols)return !0;let t=e.params[0]||1;for(;t--;)this._activeBuffer.x=this._activeBuffer.prevStop();return !0}selectProtected(e){const t=e.params[0];return 1===t&&(this._curAttrData.bg|=536870912),2!==t&&0!==t||(this._curAttrData.bg&=-536870913),!0}_eraseInBufferLine(e,t,i,s=!1,r=!1){const n=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);n.replaceCells(t,i,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData(),r),s&&(n.isWrapped=!1);}_resetBufferLine(e,t=!1){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i&&(i.fill(this._activeBuffer.getNullCell(this._eraseAttrData()),t),this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase+e),i.isWrapped=!1);}eraseInDisplay(e,t=!1){let i;switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:for(i=this._activeBuffer.y,this._dirtyRowTracker.markDirty(i),this._eraseInBufferLine(i++,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);i<this._bufferService.rows;i++)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(i);break;case 1:for(i=this._activeBuffer.y,this._dirtyRowTracker.markDirty(i),this._eraseInBufferLine(i,0,this._activeBuffer.x+1,!0,t),this._activeBuffer.x+1>=this._bufferService.cols&&(this._activeBuffer.lines.get(i+1).isWrapped=!1);i--;)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(0);break;case 2:for(i=this._bufferService.rows,this._dirtyRowTracker.markDirty(i-1);i--;)this._resetBufferLine(i,t);this._dirtyRowTracker.markDirty(0);break;case 3:const e=this._activeBuffer.lines.length-this._bufferService.rows;e>0&&(this._activeBuffer.lines.trimStart(e),this._activeBuffer.ybase=Math.max(this._activeBuffer.ybase-e,0),this._activeBuffer.ydisp=Math.max(this._activeBuffer.ydisp-e,0),this._onScroll.fire(0));}return !0}eraseInLine(e,t=!1){switch(this._restrictCursor(this._bufferService.cols),e.params[0]){case 0:this._eraseInBufferLine(this._activeBuffer.y,this._activeBuffer.x,this._bufferService.cols,0===this._activeBuffer.x,t);break;case 1:this._eraseInBufferLine(this._activeBuffer.y,0,this._activeBuffer.x+1,!1,t);break;case 2:this._eraseInBufferLine(this._activeBuffer.y,0,this._bufferService.cols,!0,t);}return this._dirtyRowTracker.markDirty(this._activeBuffer.y),!0}insertLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const i=this._activeBuffer.ybase+this._activeBuffer.y,s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,r=this._bufferService.rows-1+this._activeBuffer.ybase-s+1;for(;t--;)this._activeBuffer.lines.splice(r-1,1),this._activeBuffer.lines.splice(i,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}deleteLines(e){this._restrictCursor();let t=e.params[0]||1;if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const i=this._activeBuffer.ybase+this._activeBuffer.y;let s;for(s=this._bufferService.rows-1-this._activeBuffer.scrollBottom,s=this._bufferService.rows-1+this._activeBuffer.ybase-s;t--;)this._activeBuffer.lines.splice(i,1),this._activeBuffer.lines.splice(s,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y,this._activeBuffer.scrollBottom),this._activeBuffer.x=0,!0}insertChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.insertCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}deleteChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.deleteCells(this._activeBuffer.x,e.params[0]||1,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}scrollUp(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,0,this._activeBuffer.getBlankLine(this._eraseAttrData()));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollDown(e){let t=e.params[0]||1;for(;t--;)this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollBottom,1),this._activeBuffer.lines.splice(this._activeBuffer.ybase+this._activeBuffer.scrollTop,0,this._activeBuffer.getBlankLine(l.DEFAULT_ATTR_DATA));return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollLeft(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}scrollRight(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(0,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}insertColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.insertCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}deleteColumns(e){if(this._activeBuffer.y>this._activeBuffer.scrollBottom||this._activeBuffer.y<this._activeBuffer.scrollTop)return !0;const t=e.params[0]||1;for(let e=this._activeBuffer.scrollTop;e<=this._activeBuffer.scrollBottom;++e){const i=this._activeBuffer.lines.get(this._activeBuffer.ybase+e);i.deleteCells(this._activeBuffer.x,t,this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),i.isWrapped=!1;}return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom),!0}eraseChars(e){this._restrictCursor();const t=this._activeBuffer.lines.get(this._activeBuffer.ybase+this._activeBuffer.y);return t&&(t.replaceCells(this._activeBuffer.x,this._activeBuffer.x+(e.params[0]||1),this._activeBuffer.getNullCell(this._eraseAttrData()),this._eraseAttrData()),this._dirtyRowTracker.markDirty(this._activeBuffer.y)),!0}repeatPrecedingCharacter(e){if(!this._parser.precedingCodepoint)return !0;const t=e.params[0]||1,i=new Uint32Array(t);for(let e=0;e<t;++e)i[e]=this._parser.precedingCodepoint;return this.print(i,0,i.length),!0}sendDeviceAttributesPrimary(e){return e.params[0]>0||(this._is("xterm")||this._is("rxvt-unicode")||this._is("screen")?this._coreService.triggerDataEvent(n.C0.ESC+"[?1;2c"):this._is("linux")&&this._coreService.triggerDataEvent(n.C0.ESC+"[?6c")),!0}sendDeviceAttributesSecondary(e){return e.params[0]>0||(this._is("xterm")?this._coreService.triggerDataEvent(n.C0.ESC+"[>0;276;0c"):this._is("rxvt-unicode")?this._coreService.triggerDataEvent(n.C0.ESC+"[>85;95;0c"):this._is("linux")?this._coreService.triggerDataEvent(e.params[0]+"c"):this._is("screen")&&this._coreService.triggerDataEvent(n.C0.ESC+"[>83;40003;0c")),!0}_is(e){return 0===(this._optionsService.rawOptions.termName+"").indexOf(e)}setMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!0;break;case 20:this._optionsService.options.convertEol=!0;}return !0}setModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!0;break;case 2:this._charsetService.setgCharset(0,o.DEFAULT_CHARSET),this._charsetService.setgCharset(1,o.DEFAULT_CHARSET),this._charsetService.setgCharset(2,o.DEFAULT_CHARSET),this._charsetService.setgCharset(3,o.DEFAULT_CHARSET);break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(132,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!0,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!0;break;case 12:this._optionsService.options.cursorBlink=!0;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!0;break;case 66:this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire();break;case 9:this._coreMouseService.activeProtocol="X10";break;case 1e3:this._coreMouseService.activeProtocol="VT200";break;case 1002:this._coreMouseService.activeProtocol="DRAG";break;case 1003:this._coreMouseService.activeProtocol="ANY";break;case 1004:this._coreService.decPrivateModes.sendFocus=!0,this._onRequestSendFocus.fire();break;case 1005:this._logService.debug("DECSET 1005 not supported (see #2507)");break;case 1006:this._coreMouseService.activeEncoding="SGR";break;case 1015:this._logService.debug("DECSET 1015 not supported (see #2507)");break;case 1016:this._coreMouseService.activeEncoding="SGR_PIXELS";break;case 25:this._coreService.isCursorHidden=!1;break;case 1048:this.saveCursor();break;case 1049:this.saveCursor();case 47:case 1047:this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!0;}return !0}resetMode(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 4:this._coreService.modes.insertMode=!1;break;case 20:this._optionsService.options.convertEol=!1;}return !0}resetModePrivate(e){for(let t=0;t<e.length;t++)switch(e.params[t]){case 1:this._coreService.decPrivateModes.applicationCursorKeys=!1;break;case 3:this._optionsService.rawOptions.windowOptions.setWinLines&&(this._bufferService.resize(80,this._bufferService.rows),this._onRequestReset.fire());break;case 6:this._coreService.decPrivateModes.origin=!1,this._setCursor(0,0);break;case 7:this._coreService.decPrivateModes.wraparound=!1;break;case 12:this._optionsService.options.cursorBlink=!1;break;case 45:this._coreService.decPrivateModes.reverseWraparound=!1;break;case 66:this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire();break;case 9:case 1e3:case 1002:case 1003:this._coreMouseService.activeProtocol="NONE";break;case 1004:this._coreService.decPrivateModes.sendFocus=!1;break;case 1005:this._logService.debug("DECRST 1005 not supported (see #2507)");break;case 1006:case 1016:this._coreMouseService.activeEncoding="DEFAULT";break;case 1015:this._logService.debug("DECRST 1015 not supported (see #2507)");break;case 25:this._coreService.isCursorHidden=!0;break;case 1048:this.restoreCursor();break;case 1049:case 47:case 1047:this._bufferService.buffers.activateNormalBuffer(),1049===e.params[t]&&this.restoreCursor(),this._coreService.isCursorInitialized=!0,this._onRequestRefreshRows.fire(0,this._bufferService.rows-1),this._onRequestSyncScrollBar.fire();break;case 2004:this._coreService.decPrivateModes.bracketedPasteMode=!1;}return !0}requestMode(e,t){const i=this._coreService.decPrivateModes,{activeProtocol:s,activeEncoding:r}=this._coreMouseService,o=this._coreService,{buffers:a,cols:h}=this._bufferService,{active:c,alt:l}=a,d=this._optionsService.rawOptions,_=e=>e?1:2,u=e.params[0];return f=u,v=t?2===u?4:4===u?_(o.modes.insertMode):12===u?3:20===u?_(d.convertEol):0:1===u?_(i.applicationCursorKeys):3===u?d.windowOptions.setWinLines?80===h?2:132===h?1:0:0:6===u?_(i.origin):7===u?_(i.wraparound):8===u?3:9===u?_("X10"===s):12===u?_(d.cursorBlink):25===u?_(!o.isCursorHidden):45===u?_(i.reverseWraparound):66===u?_(i.applicationKeypad):67===u?4:1e3===u?_("VT200"===s):1002===u?_("DRAG"===s):1003===u?_("ANY"===s):1004===u?_(i.sendFocus):1005===u?4:1006===u?_("SGR"===r):1015===u?4:1016===u?_("SGR_PIXELS"===r):1048===u?1:47===u||1047===u||1049===u?_(c===l):2004===u?_(i.bracketedPasteMode):0,o.triggerDataEvent(`${n.C0.ESC}[${t?"":"?"}${f};${v}$y`),!0;var f,v;}_updateAttrColor(e,t,i,s,r){return 2===t?(e|=50331648,e&=-16777216,e|=f.AttributeData.fromColorRGB([i,s,r])):5===t&&(e&=-50331904,e|=33554432|255&i),e}_extractColor(e,t,i){const s=[0,0,-1,0,0,0];let r=0,n=0;do{if(s[n+r]=e.params[t+n],e.hasSubParams(t+n)){const i=e.getSubParams(t+n);let o=0;do{5===s[1]&&(r=1),s[n+o+1+r]=i[o];}while(++o<i.length&&o+n+1+r<s.length);break}if(5===s[1]&&n+r>=2||2===s[1]&&n+r>=5)break;s[1]&&(r=1);}while(++n+t<e.length&&n+r<s.length);for(let e=2;e<s.length;++e)-1===s[e]&&(s[e]=0);switch(s[0]){case 38:i.fg=this._updateAttrColor(i.fg,s[1],s[3],s[4],s[5]);break;case 48:i.bg=this._updateAttrColor(i.bg,s[1],s[3],s[4],s[5]);break;case 58:i.extended=i.extended.clone(),i.extended.underlineColor=this._updateAttrColor(i.extended.underlineColor,s[1],s[3],s[4],s[5]);}return n}_processUnderline(e,t){t.extended=t.extended.clone(),(!~e||e>5)&&(e=1),t.extended.underlineStyle=e,t.fg|=268435456,0===e&&(t.fg&=-268435457),t.updateExtended();}_processSGR0(e){e.fg=l.DEFAULT_ATTR_DATA.fg,e.bg=l.DEFAULT_ATTR_DATA.bg,e.extended=e.extended.clone(),e.extended.underlineStyle=0,e.extended.underlineColor&=-67108864,e.updateExtended();}charAttributes(e){if(1===e.length&&0===e.params[0])return this._processSGR0(this._curAttrData),!0;const t=e.length;let i;const s=this._curAttrData;for(let r=0;r<t;r++)i=e.params[r],i>=30&&i<=37?(s.fg&=-50331904,s.fg|=16777216|i-30):i>=40&&i<=47?(s.bg&=-50331904,s.bg|=16777216|i-40):i>=90&&i<=97?(s.fg&=-50331904,s.fg|=16777224|i-90):i>=100&&i<=107?(s.bg&=-50331904,s.bg|=16777224|i-100):0===i?this._processSGR0(s):1===i?s.fg|=134217728:3===i?s.bg|=67108864:4===i?(s.fg|=268435456,this._processUnderline(e.hasSubParams(r)?e.getSubParams(r)[0]:1,s)):5===i?s.fg|=536870912:7===i?s.fg|=67108864:8===i?s.fg|=1073741824:9===i?s.fg|=2147483648:2===i?s.bg|=134217728:21===i?this._processUnderline(2,s):22===i?(s.fg&=-134217729,s.bg&=-134217729):23===i?s.bg&=-67108865:24===i?(s.fg&=-268435457,this._processUnderline(0,s)):25===i?s.fg&=-536870913:27===i?s.fg&=-67108865:28===i?s.fg&=-1073741825:29===i?s.fg&=2147483647:39===i?(s.fg&=-67108864,s.fg|=16777215&l.DEFAULT_ATTR_DATA.fg):49===i?(s.bg&=-67108864,s.bg|=16777215&l.DEFAULT_ATTR_DATA.bg):38===i||48===i||58===i?r+=this._extractColor(e,r,s):53===i?s.bg|=1073741824:55===i?s.bg&=-1073741825:59===i?(s.extended=s.extended.clone(),s.extended.underlineColor=-1,s.updateExtended()):100===i?(s.fg&=-67108864,s.fg|=16777215&l.DEFAULT_ATTR_DATA.fg,s.bg&=-67108864,s.bg|=16777215&l.DEFAULT_ATTR_DATA.bg):this._logService.debug("Unknown SGR attribute: %d.",i);return !0}deviceStatus(e){switch(e.params[0]){case 5:this._coreService.triggerDataEvent(`${n.C0.ESC}[0n`);break;case 6:const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${n.C0.ESC}[${e};${t}R`);}return !0}deviceStatusPrivate(e){if(6===e.params[0]){const e=this._activeBuffer.y+1,t=this._activeBuffer.x+1;this._coreService.triggerDataEvent(`${n.C0.ESC}[?${e};${t}R`);}return !0}softReset(e){return this._coreService.isCursorHidden=!1,this._onRequestSyncScrollBar.fire(),this._activeBuffer.scrollTop=0,this._activeBuffer.scrollBottom=this._bufferService.rows-1,this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._coreService.reset(),this._charsetService.reset(),this._activeBuffer.savedX=0,this._activeBuffer.savedY=this._activeBuffer.ybase,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,this._coreService.decPrivateModes.origin=!1,!0}setCursorStyle(e){const t=e.params[0]||1;switch(t){case 1:case 2:this._optionsService.options.cursorStyle="block";break;case 3:case 4:this._optionsService.options.cursorStyle="underline";break;case 5:case 6:this._optionsService.options.cursorStyle="bar";}const i=t%2==1;return this._optionsService.options.cursorBlink=i,!0}setScrollRegion(e){const t=e.params[0]||1;let i;return (e.length<2||(i=e.params[1])>this._bufferService.rows||0===i)&&(i=this._bufferService.rows),i>t&&(this._activeBuffer.scrollTop=t-1,this._activeBuffer.scrollBottom=i-1,this._setCursor(0,0)),!0}windowOptions(e){if(!b(e.params[0],this._optionsService.rawOptions.windowOptions))return !0;const t=e.length>1?e.params[1]:0;switch(e.params[0]){case 14:2!==t&&this._onRequestWindowsOptionsReport.fire(y.GET_WIN_SIZE_PIXELS);break;case 16:this._onRequestWindowsOptionsReport.fire(y.GET_CELL_SIZE_PIXELS);break;case 18:this._bufferService&&this._coreService.triggerDataEvent(`${n.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);break;case 22:0!==t&&2!==t||(this._windowTitleStack.push(this._windowTitle),this._windowTitleStack.length>10&&this._windowTitleStack.shift()),0!==t&&1!==t||(this._iconNameStack.push(this._iconName),this._iconNameStack.length>10&&this._iconNameStack.shift());break;case 23:0!==t&&2!==t||this._windowTitleStack.length&&this.setTitle(this._windowTitleStack.pop()),0!==t&&1!==t||this._iconNameStack.length&&this.setIconName(this._iconNameStack.pop());}return !0}saveCursor(e){return this._activeBuffer.savedX=this._activeBuffer.x,this._activeBuffer.savedY=this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.savedCurAttrData.fg=this._curAttrData.fg,this._activeBuffer.savedCurAttrData.bg=this._curAttrData.bg,this._activeBuffer.savedCharset=this._charsetService.charset,!0}restoreCursor(e){return this._activeBuffer.x=this._activeBuffer.savedX||0,this._activeBuffer.y=Math.max(this._activeBuffer.savedY-this._activeBuffer.ybase,0),this._curAttrData.fg=this._activeBuffer.savedCurAttrData.fg,this._curAttrData.bg=this._activeBuffer.savedCurAttrData.bg,this._charsetService.charset=this._savedCharset,this._activeBuffer.savedCharset&&(this._charsetService.charset=this._activeBuffer.savedCharset),this._restrictCursor(),!0}setTitle(e){return this._windowTitle=e,this._onTitleChange.fire(e),!0}setIconName(e){return this._iconName=e,!0}setOrReportIndexedColor(e){const t=[],i=e.split(";");for(;i.length>1;){const e=i.shift(),s=i.shift();if(/^\d+$/.exec(e)){const i=parseInt(e);if(L(i))if("?"===s)t.push({type:0,index:i});else {const e=(0, m.parseColor)(s);e&&t.push({type:1,index:i,color:e});}}}return t.length&&this._onColor.fire(t),!0}setHyperlink(e){const t=e.split(";");return !(t.length<2)&&(t[1]?this._createHyperlink(t[0],t[1]):!t[0]&&this._finishHyperlink())}_createHyperlink(e,t){this._getCurrentLinkId()&&this._finishHyperlink();const i=e.split(":");let s;const r=i.findIndex((e=>e.startsWith("id=")));return -1!==r&&(s=i[r].slice(3)||void 0),this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=this._oscLinkService.registerLink({id:s,uri:t}),this._curAttrData.updateExtended(),!0}_finishHyperlink(){return this._curAttrData.extended=this._curAttrData.extended.clone(),this._curAttrData.extended.urlId=0,this._curAttrData.updateExtended(),!0}_setOrReportSpecialColor(e,t){const i=e.split(";");for(let e=0;e<i.length&&!(t>=this._specialColors.length);++e,++t)if("?"===i[e])this._onColor.fire([{type:0,index:this._specialColors[t]}]);else {const s=(0, m.parseColor)(i[e]);s&&this._onColor.fire([{type:1,index:this._specialColors[t],color:s}]);}return !0}setOrReportFgColor(e){return this._setOrReportSpecialColor(e,0)}setOrReportBgColor(e){return this._setOrReportSpecialColor(e,1)}setOrReportCursorColor(e){return this._setOrReportSpecialColor(e,2)}restoreIndexedColor(e){if(!e)return this._onColor.fire([{type:2}]),!0;const t=[],i=e.split(";");for(let e=0;e<i.length;++e)if(/^\d+$/.exec(i[e])){const s=parseInt(i[e]);L(s)&&t.push({type:2,index:s});}return t.length&&this._onColor.fire(t),!0}restoreFgColor(e){return this._onColor.fire([{type:2,index:256}]),!0}restoreBgColor(e){return this._onColor.fire([{type:2,index:257}]),!0}restoreCursorColor(e){return this._onColor.fire([{type:2,index:258}]),!0}nextLine(){return this._activeBuffer.x=0,this.index(),!0}keypadApplicationMode(){return this._logService.debug("Serial port requested application keypad."),this._coreService.decPrivateModes.applicationKeypad=!0,this._onRequestSyncScrollBar.fire(),!0}keypadNumericMode(){return this._logService.debug("Switching back to normal keypad."),this._coreService.decPrivateModes.applicationKeypad=!1,this._onRequestSyncScrollBar.fire(),!0}selectDefaultCharset(){return this._charsetService.setgLevel(0),this._charsetService.setgCharset(0,o.DEFAULT_CHARSET),!0}selectCharset(e){return 2!==e.length?(this.selectDefaultCharset(),!0):("/"===e[0]||this._charsetService.setgCharset(S[e[0]],o.CHARSETS[e[1]]||o.DEFAULT_CHARSET),!0)}index(){return this._restrictCursor(),this._activeBuffer.y++,this._activeBuffer.y===this._activeBuffer.scrollBottom+1?(this._activeBuffer.y--,this._bufferService.scroll(this._eraseAttrData())):this._activeBuffer.y>=this._bufferService.rows&&(this._activeBuffer.y=this._bufferService.rows-1),this._restrictCursor(),!0}tabSet(){return this._activeBuffer.tabs[this._activeBuffer.x]=!0,!0}reverseIndex(){if(this._restrictCursor(),this._activeBuffer.y===this._activeBuffer.scrollTop){const e=this._activeBuffer.scrollBottom-this._activeBuffer.scrollTop;this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase+this._activeBuffer.y,e,1),this._activeBuffer.lines.set(this._activeBuffer.ybase+this._activeBuffer.y,this._activeBuffer.getBlankLine(this._eraseAttrData())),this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop,this._activeBuffer.scrollBottom);}else this._activeBuffer.y--,this._restrictCursor();return !0}fullReset(){return this._parser.reset(),this._onRequestReset.fire(),!0}reset(){this._curAttrData=l.DEFAULT_ATTR_DATA.clone(),this._eraseAttrDataInternal=l.DEFAULT_ATTR_DATA.clone();}_eraseAttrData(){return this._eraseAttrDataInternal.bg&=-67108864,this._eraseAttrDataInternal.bg|=67108863&this._curAttrData.bg,this._eraseAttrDataInternal}setgLevel(e){return this._charsetService.setgLevel(e),!0}screenAlignmentPattern(){const e=new u.CellData;e.content=1<<22|"E".charCodeAt(0),e.fg=this._curAttrData.fg,e.bg=this._curAttrData.bg,this._setCursor(0,0);for(let t=0;t<this._bufferService.rows;++t){const i=this._activeBuffer.ybase+this._activeBuffer.y+t,s=this._activeBuffer.lines.get(i);s&&(s.fill(e),s.isWrapped=!1);}return this._dirtyRowTracker.markAllDirty(),this._setCursor(0,0),!0}requestStatusString(e,t){const i=this._bufferService.buffer,s=this._optionsService.rawOptions;return (e=>(this._coreService.triggerDataEvent(`${n.C0.ESC}${e}${n.C0.ESC}\\`),!0))('"q'===e?`P1$r${this._curAttrData.isProtected()?1:0}"q`:'"p'===e?'P1$r61;1"p':"r"===e?`P1$r${i.scrollTop+1};${i.scrollBottom+1}r`:"m"===e?"P1$r0m":" q"===e?`P1$r${{block:2,underline:4,bar:6}[s.cursorStyle]-(s.cursorBlink?1:0)} q`:"P0$r")}markRangeDirty(e,t){this._dirtyRowTracker.markRangeDirty(e,t);}}t.InputHandler=E;let k=class{constructor(e){this._bufferService=e,this.clearRange();}clearRange(){this.start=this._bufferService.buffer.y,this.end=this._bufferService.buffer.y;}markDirty(e){e<this.start?this.start=e:e>this.end&&(this.end=e);}markRangeDirty(e,t){e>t&&(w=e,e=t,t=w),e<this.start&&(this.start=e),t>this.end&&(this.end=t);}markAllDirty(){this.markRangeDirty(0,this._bufferService.rows-1);}};function L(e){return 0<=e&&e<256}k=s([r(0,v.IBufferService)],k);},844:(e,t)=>{function i(e){for(const t of e)t.dispose();e.length=0;}Object.defineProperty(t,"__esModule",{value:!0}),t.getDisposeArrayDisposable=t.disposeArray=t.toDisposable=t.MutableDisposable=t.Disposable=void 0,t.Disposable=class{constructor(){this._disposables=[],this._isDisposed=!1;}dispose(){this._isDisposed=!0;for(const e of this._disposables)e.dispose();this._disposables.length=0;}register(e){return this._disposables.push(e),e}unregister(e){const t=this._disposables.indexOf(e);-1!==t&&this._disposables.splice(t,1);}},t.MutableDisposable=class{constructor(){this._isDisposed=!1;}get value(){return this._isDisposed?void 0:this._value}set value(e){var t;this._isDisposed||e===this._value||(null===(t=this._value)||void 0===t||t.dispose(),this._value=e);}clear(){this.value=void 0;}dispose(){var e;this._isDisposed=!0,null===(e=this._value)||void 0===e||e.dispose(),this._value=void 0;}},t.toDisposable=function(e){return {dispose:e}},t.disposeArray=i,t.getDisposeArrayDisposable=function(e){return {dispose:()=>i(e)}};},1505:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.FourKeyMap=t.TwoKeyMap=void 0;class i{constructor(){this._data={};}set(e,t,i){this._data[e]||(this._data[e]={}),this._data[e][t]=i;}get(e,t){return this._data[e]?this._data[e][t]:void 0}clear(){this._data={};}}t.TwoKeyMap=i,t.FourKeyMap=class{constructor(){this._data=new i;}set(e,t,s,r,n){this._data.get(e,t)||this._data.set(e,t,new i),this._data.get(e,t).set(s,r,n);}get(e,t,i,s){var r;return null===(r=this._data.get(e,t))||void 0===r?void 0:r.get(i,s)}clear(){this._data.clear();}};},6114:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.isChromeOS=t.isLinux=t.isWindows=t.isIphone=t.isIpad=t.isMac=t.getSafariVersion=t.isSafari=t.isLegacyEdge=t.isFirefox=t.isNode=void 0,t.isNode="undefined"==typeof navigator;const i=t.isNode?"node":navigator.userAgent,s=t.isNode?"node":navigator.platform;t.isFirefox=i.includes("Firefox"),t.isLegacyEdge=i.includes("Edge"),t.isSafari=/^((?!chrome|android).)*safari/i.test(i),t.getSafariVersion=function(){if(!t.isSafari)return 0;const e=i.match(/Version\/(\d+)/);return null===e||e.length<2?0:parseInt(e[1])},t.isMac=["Macintosh","MacIntel","MacPPC","Mac68K"].includes(s),t.isIpad="iPad"===s,t.isIphone="iPhone"===s,t.isWindows=["Windows","Win16","Win32","WinCE"].includes(s),t.isLinux=s.indexOf("Linux")>=0,t.isChromeOS=/\bCrOS\b/.test(i);},6106:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.SortedList=void 0;let i=0;t.SortedList=class{constructor(e){this._getKey=e,this._array=[];}clear(){this._array.length=0;}insert(e){0!==this._array.length?(i=this._search(this._getKey(e)),this._array.splice(i,0,e)):this._array.push(e);}delete(e){if(0===this._array.length)return !1;const t=this._getKey(e);if(void 0===t)return !1;if(i=this._search(t),-1===i)return !1;if(this._getKey(this._array[i])!==t)return !1;do{if(this._array[i]===e)return this._array.splice(i,1),!0}while(++i<this._array.length&&this._getKey(this._array[i])===t);return !1}*getKeyIterator(e){if(0!==this._array.length&&(i=this._search(e),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{yield this._array[i];}while(++i<this._array.length&&this._getKey(this._array[i])===e)}forEachByKey(e,t){if(0!==this._array.length&&(i=this._search(e),!(i<0||i>=this._array.length)&&this._getKey(this._array[i])===e))do{t(this._array[i]);}while(++i<this._array.length&&this._getKey(this._array[i])===e)}values(){return [...this._array].values()}_search(e){let t=0,i=this._array.length-1;for(;i>=t;){let s=t+i>>1;const r=this._getKey(this._array[s]);if(r>e)i=s-1;else {if(!(r<e)){for(;s>0&&this._getKey(this._array[s-1])===e;)s--;return s}t=s+1;}}return t}};},7226:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DebouncedIdleTask=t.IdleTaskQueue=t.PriorityTaskQueue=void 0;const s=i(6114);class r{constructor(){this._tasks=[],this._i=0;}enqueue(e){this._tasks.push(e),this._start();}flush(){for(;this._i<this._tasks.length;)this._tasks[this._i]()||this._i++;this.clear();}clear(){this._idleCallback&&(this._cancelCallback(this._idleCallback),this._idleCallback=void 0),this._i=0,this._tasks.length=0;}_start(){this._idleCallback||(this._idleCallback=this._requestCallback(this._process.bind(this)));}_process(e){this._idleCallback=void 0;let t=0,i=0,s=e.timeRemaining(),r=0;for(;this._i<this._tasks.length;){if(t=Date.now(),this._tasks[this._i]()||this._i++,t=Math.max(1,Date.now()-t),i=Math.max(t,i),r=e.timeRemaining(),1.5*i>r)return s-t<-20&&console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(s-t))}ms`),void this._start();s=r;}this.clear();}}class n extends r{_requestCallback(e){return setTimeout((()=>e(this._createDeadline(16))))}_cancelCallback(e){clearTimeout(e);}_createDeadline(e){const t=Date.now()+e;return {timeRemaining:()=>Math.max(0,t-Date.now())}}}t.PriorityTaskQueue=n,t.IdleTaskQueue=!s.isNode&&"requestIdleCallback"in window?class extends r{_requestCallback(e){return requestIdleCallback(e)}_cancelCallback(e){cancelIdleCallback(e);}}:n,t.DebouncedIdleTask=class{constructor(){this._queue=new t.IdleTaskQueue;}set(e){this._queue.clear(),this._queue.enqueue(e);}flush(){this._queue.flush();}};},9282:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateWindowsModeWrappedState=void 0;const s=i(643);t.updateWindowsModeWrappedState=function(e){const t=e.buffer.lines.get(e.buffer.ybase+e.buffer.y-1),i=null==t?void 0:t.get(e.cols-1),r=e.buffer.lines.get(e.buffer.ybase+e.buffer.y);r&&i&&(r.isWrapped=i[s.CHAR_DATA_CODE_INDEX]!==s.NULL_CELL_CODE&&i[s.CHAR_DATA_CODE_INDEX]!==s.WHITESPACE_CELL_CODE);};},3734:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ExtendedAttrs=t.AttributeData=void 0;class i{constructor(){this.fg=0,this.bg=0,this.extended=new s;}static toColorRGB(e){return [e>>>16&255,e>>>8&255,255&e]}static fromColorRGB(e){return (255&e[0])<<16|(255&e[1])<<8|255&e[2]}clone(){const e=new i;return e.fg=this.fg,e.bg=this.bg,e.extended=this.extended.clone(),e}isInverse(){return 67108864&this.fg}isBold(){return 134217728&this.fg}isUnderline(){return this.hasExtendedAttrs()&&0!==this.extended.underlineStyle?1:268435456&this.fg}isBlink(){return 536870912&this.fg}isInvisible(){return 1073741824&this.fg}isItalic(){return 67108864&this.bg}isDim(){return 134217728&this.bg}isStrikethrough(){return 2147483648&this.fg}isProtected(){return 536870912&this.bg}isOverline(){return 1073741824&this.bg}getFgColorMode(){return 50331648&this.fg}getBgColorMode(){return 50331648&this.bg}isFgRGB(){return 50331648==(50331648&this.fg)}isBgRGB(){return 50331648==(50331648&this.bg)}isFgPalette(){return 16777216==(50331648&this.fg)||33554432==(50331648&this.fg)}isBgPalette(){return 16777216==(50331648&this.bg)||33554432==(50331648&this.bg)}isFgDefault(){return 0==(50331648&this.fg)}isBgDefault(){return 0==(50331648&this.bg)}isAttributeDefault(){return 0===this.fg&&0===this.bg}getFgColor(){switch(50331648&this.fg){case 16777216:case 33554432:return 255&this.fg;case 50331648:return 16777215&this.fg;default:return -1}}getBgColor(){switch(50331648&this.bg){case 16777216:case 33554432:return 255&this.bg;case 50331648:return 16777215&this.bg;default:return -1}}hasExtendedAttrs(){return 268435456&this.bg}updateExtended(){this.extended.isEmpty()?this.bg&=-268435457:this.bg|=268435456;}getUnderlineColor(){if(268435456&this.bg&&~this.extended.underlineColor)switch(50331648&this.extended.underlineColor){case 16777216:case 33554432:return 255&this.extended.underlineColor;case 50331648:return 16777215&this.extended.underlineColor;default:return this.getFgColor()}return this.getFgColor()}getUnderlineColorMode(){return 268435456&this.bg&&~this.extended.underlineColor?50331648&this.extended.underlineColor:this.getFgColorMode()}isUnderlineColorRGB(){return 268435456&this.bg&&~this.extended.underlineColor?50331648==(50331648&this.extended.underlineColor):this.isFgRGB()}isUnderlineColorPalette(){return 268435456&this.bg&&~this.extended.underlineColor?16777216==(50331648&this.extended.underlineColor)||33554432==(50331648&this.extended.underlineColor):this.isFgPalette()}isUnderlineColorDefault(){return 268435456&this.bg&&~this.extended.underlineColor?0==(50331648&this.extended.underlineColor):this.isFgDefault()}getUnderlineStyle(){return 268435456&this.fg?268435456&this.bg?this.extended.underlineStyle:1:0}}t.AttributeData=i;class s{get ext(){return this._urlId?-469762049&this._ext|this.underlineStyle<<26:this._ext}set ext(e){this._ext=e;}get underlineStyle(){return this._urlId?5:(469762048&this._ext)>>26}set underlineStyle(e){this._ext&=-469762049,this._ext|=e<<26&469762048;}get underlineColor(){return 67108863&this._ext}set underlineColor(e){this._ext&=-67108864,this._ext|=67108863&e;}get urlId(){return this._urlId}set urlId(e){this._urlId=e;}constructor(e=0,t=0){this._ext=0,this._urlId=0,this._ext=e,this._urlId=t;}clone(){return new s(this._ext,this._urlId)}isEmpty(){return 0===this.underlineStyle&&0===this._urlId}}t.ExtendedAttrs=s;},9092:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Buffer=t.MAX_BUFFER_SIZE=void 0;const s=i(6349),r=i(7226),n=i(3734),o=i(8437),a=i(4634),h=i(511),c=i(643),l=i(4863),d=i(7116);t.MAX_BUFFER_SIZE=4294967295,t.Buffer=class{constructor(e,t,i){this._hasScrollback=e,this._optionsService=t,this._bufferService=i,this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.tabs={},this.savedY=0,this.savedX=0,this.savedCurAttrData=o.DEFAULT_ATTR_DATA.clone(),this.savedCharset=d.DEFAULT_CHARSET,this.markers=[],this._nullCell=h.CellData.fromCharData([0,c.NULL_CELL_CHAR,c.NULL_CELL_WIDTH,c.NULL_CELL_CODE]),this._whitespaceCell=h.CellData.fromCharData([0,c.WHITESPACE_CELL_CHAR,c.WHITESPACE_CELL_WIDTH,c.WHITESPACE_CELL_CODE]),this._isClearing=!1,this._memoryCleanupQueue=new r.IdleTaskQueue,this._memoryCleanupPosition=0,this._cols=this._bufferService.cols,this._rows=this._bufferService.rows,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();}getNullCell(e){return e?(this._nullCell.fg=e.fg,this._nullCell.bg=e.bg,this._nullCell.extended=e.extended):(this._nullCell.fg=0,this._nullCell.bg=0,this._nullCell.extended=new n.ExtendedAttrs),this._nullCell}getWhitespaceCell(e){return e?(this._whitespaceCell.fg=e.fg,this._whitespaceCell.bg=e.bg,this._whitespaceCell.extended=e.extended):(this._whitespaceCell.fg=0,this._whitespaceCell.bg=0,this._whitespaceCell.extended=new n.ExtendedAttrs),this._whitespaceCell}getBlankLine(e,t){return new o.BufferLine(this._bufferService.cols,this.getNullCell(e),t)}get hasScrollback(){return this._hasScrollback&&this.lines.maxLength>this._rows}get isCursorInViewport(){const e=this.ybase+this.y-this.ydisp;return e>=0&&e<this._rows}_getCorrectBufferLength(e){if(!this._hasScrollback)return e;const i=e+this._optionsService.rawOptions.scrollback;return i>t.MAX_BUFFER_SIZE?t.MAX_BUFFER_SIZE:i}fillViewportRows(e){if(0===this.lines.length){void 0===e&&(e=o.DEFAULT_ATTR_DATA);let t=this._rows;for(;t--;)this.lines.push(this.getBlankLine(e));}}clear(){this.ydisp=0,this.ybase=0,this.y=0,this.x=0,this.lines=new s.CircularList(this._getCorrectBufferLength(this._rows)),this.scrollTop=0,this.scrollBottom=this._rows-1,this.setupTabStops();}resize(e,t){const i=this.getNullCell(o.DEFAULT_ATTR_DATA);let s=0;const r=this._getCorrectBufferLength(t);if(r>this.lines.maxLength&&(this.lines.maxLength=r),this.lines.length>0){if(this._cols<e)for(let t=0;t<this.lines.length;t++)s+=+this.lines.get(t).resize(e,i);let n=0;if(this._rows<t)for(let s=this._rows;s<t;s++)this.lines.length<t+this.ybase&&(this._optionsService.rawOptions.windowsMode||void 0!==this._optionsService.rawOptions.windowsPty.backend||void 0!==this._optionsService.rawOptions.windowsPty.buildNumber?this.lines.push(new o.BufferLine(e,i)):this.ybase>0&&this.lines.length<=this.ybase+this.y+n+1?(this.ybase--,n++,this.ydisp>0&&this.ydisp--):this.lines.push(new o.BufferLine(e,i)));else for(let e=this._rows;e>t;e--)this.lines.length>t+this.ybase&&(this.lines.length>this.ybase+this.y+1?this.lines.pop():(this.ybase++,this.ydisp++));if(r<this.lines.maxLength){const e=this.lines.length-r;e>0&&(this.lines.trimStart(e),this.ybase=Math.max(this.ybase-e,0),this.ydisp=Math.max(this.ydisp-e,0),this.savedY=Math.max(this.savedY-e,0)),this.lines.maxLength=r;}this.x=Math.min(this.x,e-1),this.y=Math.min(this.y,t-1),n&&(this.y+=n),this.savedX=Math.min(this.savedX,e-1),this.scrollTop=0;}if(this.scrollBottom=t-1,this._isReflowEnabled&&(this._reflow(e,t),this._cols>e))for(let t=0;t<this.lines.length;t++)s+=+this.lines.get(t).resize(e,i);this._cols=e,this._rows=t,this._memoryCleanupQueue.clear(),s>.1*this.lines.length&&(this._memoryCleanupPosition=0,this._memoryCleanupQueue.enqueue((()=>this._batchedMemoryCleanup())));}_batchedMemoryCleanup(){let e=!0;this._memoryCleanupPosition>=this.lines.length&&(this._memoryCleanupPosition=0,e=!1);let t=0;for(;this._memoryCleanupPosition<this.lines.length;)if(t+=this.lines.get(this._memoryCleanupPosition++).cleanupMemory(),t>100)return !0;return e}get _isReflowEnabled(){const e=this._optionsService.rawOptions.windowsPty;return e&&e.buildNumber?this._hasScrollback&&"conpty"===e.backend&&e.buildNumber>=21376:this._hasScrollback&&!this._optionsService.rawOptions.windowsMode}_reflow(e,t){this._cols!==e&&(e>this._cols?this._reflowLarger(e,t):this._reflowSmaller(e,t));}_reflowLarger(e,t){const i=(0, a.reflowLargerGetLinesToRemove)(this.lines,this._cols,e,this.ybase+this.y,this.getNullCell(o.DEFAULT_ATTR_DATA));if(i.length>0){const s=(0, a.reflowLargerCreateNewLayout)(this.lines,i);(0, a.reflowLargerApplyNewLayout)(this.lines,s.layout),this._reflowLargerAdjustViewport(e,t,s.countRemoved);}}_reflowLargerAdjustViewport(e,t,i){const s=this.getNullCell(o.DEFAULT_ATTR_DATA);let r=i;for(;r-- >0;)0===this.ybase?(this.y>0&&this.y--,this.lines.length<t&&this.lines.push(new o.BufferLine(e,s))):(this.ydisp===this.ybase&&this.ydisp--,this.ybase--);this.savedY=Math.max(this.savedY-i,0);}_reflowSmaller(e,t){const i=this.getNullCell(o.DEFAULT_ATTR_DATA),s=[];let r=0;for(let n=this.lines.length-1;n>=0;n--){let h=this.lines.get(n);if(!h||!h.isWrapped&&h.getTrimmedLength()<=e)continue;const c=[h];for(;h.isWrapped&&n>0;)h=this.lines.get(--n),c.unshift(h);const l=this.ybase+this.y;if(l>=n&&l<n+c.length)continue;const d=c[c.length-1].getTrimmedLength(),_=(0, a.reflowSmallerGetNewLineLengths)(c,this._cols,e),u=_.length-c.length;let f;f=0===this.ybase&&this.y!==this.lines.length-1?Math.max(0,this.y-this.lines.maxLength+u):Math.max(0,this.lines.length-this.lines.maxLength+u);const v=[];for(let e=0;e<u;e++){const e=this.getBlankLine(o.DEFAULT_ATTR_DATA,!0);v.push(e);}v.length>0&&(s.push({start:n+c.length+r,newLines:v}),r+=v.length),c.push(...v);let p=_.length-1,g=_[p];0===g&&(p--,g=_[p]);let m=c.length-u-1,S=d;for(;m>=0;){const e=Math.min(S,g);if(void 0===c[p])break;if(c[p].copyCellsFrom(c[m],S-e,g-e,e,!0),g-=e,0===g&&(p--,g=_[p]),S-=e,0===S){m--;const e=Math.max(m,0);S=(0, a.getWrappedLineTrimmedLength)(c,e,this._cols);}}for(let t=0;t<c.length;t++)_[t]<e&&c[t].setCell(_[t],i);let C=u-f;for(;C-- >0;)0===this.ybase?this.y<t-1?(this.y++,this.lines.pop()):(this.ybase++,this.ydisp++):this.ybase<Math.min(this.lines.maxLength,this.lines.length+r)-t&&(this.ybase===this.ydisp&&this.ydisp++,this.ybase++);this.savedY=Math.min(this.savedY+u,this.ybase+t-1);}if(s.length>0){const e=[],t=[];for(let e=0;e<this.lines.length;e++)t.push(this.lines.get(e));const i=this.lines.length;let n=i-1,o=0,a=s[o];this.lines.length=Math.min(this.lines.maxLength,this.lines.length+r);let h=0;for(let c=Math.min(this.lines.maxLength-1,i+r-1);c>=0;c--)if(a&&a.start>n+h){for(let e=a.newLines.length-1;e>=0;e--)this.lines.set(c--,a.newLines[e]);c++,e.push({index:n+1,amount:a.newLines.length}),h+=a.newLines.length,a=s[++o];}else this.lines.set(c,t[n--]);let c=0;for(let t=e.length-1;t>=0;t--)e[t].index+=c,this.lines.onInsertEmitter.fire(e[t]),c+=e[t].amount;const l=Math.max(0,i+r-this.lines.maxLength);l>0&&this.lines.onTrimEmitter.fire(l);}}translateBufferLineToString(e,t,i=0,s){const r=this.lines.get(e);return r?r.translateToString(t,i,s):""}getWrappedRangeForLine(e){let t=e,i=e;for(;t>0&&this.lines.get(t).isWrapped;)t--;for(;i+1<this.lines.length&&this.lines.get(i+1).isWrapped;)i++;return {first:t,last:i}}setupTabStops(e){for(null!=e?this.tabs[e]||(e=this.prevStop(e)):(this.tabs={},e=0);e<this._cols;e+=this._optionsService.rawOptions.tabStopWidth)this.tabs[e]=!0;}prevStop(e){for(null==e&&(e=this.x);!this.tabs[--e]&&e>0;);return e>=this._cols?this._cols-1:e<0?0:e}nextStop(e){for(null==e&&(e=this.x);!this.tabs[++e]&&e<this._cols;);return e>=this._cols?this._cols-1:e<0?0:e}clearMarkers(e){this._isClearing=!0;for(let t=0;t<this.markers.length;t++)this.markers[t].line===e&&(this.markers[t].dispose(),this.markers.splice(t--,1));this._isClearing=!1;}clearAllMarkers(){this._isClearing=!0;for(let e=0;e<this.markers.length;e++)this.markers[e].dispose(),this.markers.splice(e--,1);this._isClearing=!1;}addMarker(e){const t=new l.Marker(e);return this.markers.push(t),t.register(this.lines.onTrim((e=>{t.line-=e,t.line<0&&t.dispose();}))),t.register(this.lines.onInsert((e=>{t.line>=e.index&&(t.line+=e.amount);}))),t.register(this.lines.onDelete((e=>{t.line>=e.index&&t.line<e.index+e.amount&&t.dispose(),t.line>e.index&&(t.line-=e.amount);}))),t.register(t.onDispose((()=>this._removeMarker(t)))),t}_removeMarker(e){this._isClearing||this.markers.splice(this.markers.indexOf(e),1);}};},8437:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLine=t.DEFAULT_ATTR_DATA=void 0;const s=i(3734),r=i(511),n=i(643),o=i(482);t.DEFAULT_ATTR_DATA=Object.freeze(new s.AttributeData);let a=0;class h{constructor(e,t,i=!1){this.isWrapped=i,this._combined={},this._extendedAttrs={},this._data=new Uint32Array(3*e);const s=t||r.CellData.fromCharData([0,n.NULL_CELL_CHAR,n.NULL_CELL_WIDTH,n.NULL_CELL_CODE]);for(let t=0;t<e;++t)this.setCell(t,s);this.length=e;}get(e){const t=this._data[3*e+0],i=2097151&t;return [this._data[3*e+1],2097152&t?this._combined[e]:i?(0, o.stringFromCodePoint)(i):"",t>>22,2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):i]}set(e,t){this._data[3*e+1]=t[n.CHAR_DATA_ATTR_INDEX],t[n.CHAR_DATA_CHAR_INDEX].length>1?(this._combined[e]=t[1],this._data[3*e+0]=2097152|e|t[n.CHAR_DATA_WIDTH_INDEX]<<22):this._data[3*e+0]=t[n.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|t[n.CHAR_DATA_WIDTH_INDEX]<<22;}getWidth(e){return this._data[3*e+0]>>22}hasWidth(e){return 12582912&this._data[3*e+0]}getFg(e){return this._data[3*e+1]}getBg(e){return this._data[3*e+2]}hasContent(e){return 4194303&this._data[3*e+0]}getCodePoint(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e].charCodeAt(this._combined[e].length-1):2097151&t}isCombined(e){return 2097152&this._data[3*e+0]}getString(e){const t=this._data[3*e+0];return 2097152&t?this._combined[e]:2097151&t?(0, o.stringFromCodePoint)(2097151&t):""}isProtected(e){return 536870912&this._data[3*e+2]}loadCell(e,t){return a=3*e,t.content=this._data[a+0],t.fg=this._data[a+1],t.bg=this._data[a+2],2097152&t.content&&(t.combinedData=this._combined[e]),268435456&t.bg&&(t.extended=this._extendedAttrs[e]),t}setCell(e,t){2097152&t.content&&(this._combined[e]=t.combinedData),268435456&t.bg&&(this._extendedAttrs[e]=t.extended),this._data[3*e+0]=t.content,this._data[3*e+1]=t.fg,this._data[3*e+2]=t.bg;}setCellFromCodePoint(e,t,i,s,r,n){268435456&r&&(this._extendedAttrs[e]=n),this._data[3*e+0]=t|i<<22,this._data[3*e+1]=s,this._data[3*e+2]=r;}addCodepointToCell(e,t){let i=this._data[3*e+0];2097152&i?this._combined[e]+=(0, o.stringFromCodePoint)(t):(2097151&i?(this._combined[e]=(0, o.stringFromCodePoint)(2097151&i)+(0, o.stringFromCodePoint)(t),i&=-2097152,i|=2097152):i=t|1<<22,this._data[3*e+0]=i);}insertCells(e,t,i,n){if((e%=this.length)&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==n?void 0:n.fg)||0,(null==n?void 0:n.bg)||0,(null==n?void 0:n.extended)||new s.ExtendedAttrs),t<this.length-e){const s=new r.CellData;for(let i=this.length-e-t-1;i>=0;--i)this.setCell(e+t+i,this.loadCell(e+i,s));for(let s=0;s<t;++s)this.setCell(e+s,i);}else for(let t=e;t<this.length;++t)this.setCell(t,i);2===this.getWidth(this.length-1)&&this.setCellFromCodePoint(this.length-1,0,1,(null==n?void 0:n.fg)||0,(null==n?void 0:n.bg)||0,(null==n?void 0:n.extended)||new s.ExtendedAttrs);}deleteCells(e,t,i,n){if(e%=this.length,t<this.length-e){const s=new r.CellData;for(let i=0;i<this.length-e-t;++i)this.setCell(e+i,this.loadCell(e+t+i,s));for(let e=this.length-t;e<this.length;++e)this.setCell(e,i);}else for(let t=e;t<this.length;++t)this.setCell(t,i);e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==n?void 0:n.fg)||0,(null==n?void 0:n.bg)||0,(null==n?void 0:n.extended)||new s.ExtendedAttrs),0!==this.getWidth(e)||this.hasContent(e)||this.setCellFromCodePoint(e,0,1,(null==n?void 0:n.fg)||0,(null==n?void 0:n.bg)||0,(null==n?void 0:n.extended)||new s.ExtendedAttrs);}replaceCells(e,t,i,r,n=!1){if(n)for(e&&2===this.getWidth(e-1)&&!this.isProtected(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==r?void 0:r.fg)||0,(null==r?void 0:r.bg)||0,(null==r?void 0:r.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&!this.isProtected(t)&&this.setCellFromCodePoint(t,0,1,(null==r?void 0:r.fg)||0,(null==r?void 0:r.bg)||0,(null==r?void 0:r.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.isProtected(e)||this.setCell(e,i),e++;else for(e&&2===this.getWidth(e-1)&&this.setCellFromCodePoint(e-1,0,1,(null==r?void 0:r.fg)||0,(null==r?void 0:r.bg)||0,(null==r?void 0:r.extended)||new s.ExtendedAttrs),t<this.length&&2===this.getWidth(t-1)&&this.setCellFromCodePoint(t,0,1,(null==r?void 0:r.fg)||0,(null==r?void 0:r.bg)||0,(null==r?void 0:r.extended)||new s.ExtendedAttrs);e<t&&e<this.length;)this.setCell(e++,i);}resize(e,t){if(e===this.length)return 4*this._data.length*2<this._data.buffer.byteLength;const i=3*e;if(e>this.length){if(this._data.buffer.byteLength>=4*i)this._data=new Uint32Array(this._data.buffer,0,i);else {const e=new Uint32Array(i);e.set(this._data),this._data=e;}for(let i=this.length;i<e;++i)this.setCell(i,t);}else {this._data=this._data.subarray(0,i);const t=Object.keys(this._combined);for(let i=0;i<t.length;i++){const s=parseInt(t[i],10);s>=e&&delete this._combined[s];}const s=Object.keys(this._extendedAttrs);for(let t=0;t<s.length;t++){const i=parseInt(s[t],10);i>=e&&delete this._extendedAttrs[i];}}return this.length=e,4*i*2<this._data.buffer.byteLength}cleanupMemory(){if(4*this._data.length*2<this._data.buffer.byteLength){const e=new Uint32Array(this._data.length);return e.set(this._data),this._data=e,1}return 0}fill(e,t=!1){if(t)for(let t=0;t<this.length;++t)this.isProtected(t)||this.setCell(t,e);else {this._combined={},this._extendedAttrs={};for(let t=0;t<this.length;++t)this.setCell(t,e);}}copyFrom(e){this.length!==e.length?this._data=new Uint32Array(e._data):this._data.set(e._data),this.length=e.length,this._combined={};for(const t in e._combined)this._combined[t]=e._combined[t];this._extendedAttrs={};for(const t in e._extendedAttrs)this._extendedAttrs[t]=e._extendedAttrs[t];this.isWrapped=e.isWrapped;}clone(){const e=new h(0);e._data=new Uint32Array(this._data),e.length=this.length;for(const t in this._combined)e._combined[t]=this._combined[t];for(const t in this._extendedAttrs)e._extendedAttrs[t]=this._extendedAttrs[t];return e.isWrapped=this.isWrapped,e}getTrimmedLength(){for(let e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0])return e+(this._data[3*e+0]>>22);return 0}getNoBgTrimmedLength(){for(let e=this.length-1;e>=0;--e)if(4194303&this._data[3*e+0]||50331648&this._data[3*e+2])return e+(this._data[3*e+0]>>22);return 0}copyCellsFrom(e,t,i,s,r){const n=e._data;if(r)for(let r=s-1;r>=0;r--){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r]);}else for(let r=0;r<s;r++){for(let e=0;e<3;e++)this._data[3*(i+r)+e]=n[3*(t+r)+e];268435456&n[3*(t+r)+2]&&(this._extendedAttrs[i+r]=e._extendedAttrs[t+r]);}const o=Object.keys(e._combined);for(let s=0;s<o.length;s++){const r=parseInt(o[s],10);r>=t&&(this._combined[r-t+i]=e._combined[r]);}}translateToString(e=!1,t=0,i=this.length){e&&(i=Math.min(i,this.getTrimmedLength()));let s="";for(;t<i;){const e=this._data[3*t+0],i=2097151&e;s+=2097152&e?this._combined[t]:i?(0, o.stringFromCodePoint)(i):n.WHITESPACE_CELL_CHAR,t+=e>>22||1;}return s}}t.BufferLine=h;},4841:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.getRangeLength=void 0,t.getRangeLength=function(e,t){if(e.start.y>e.end.y)throw new Error(`Buffer range end (${e.end.x}, ${e.end.y}) cannot be before start (${e.start.x}, ${e.start.y})`);return t*(e.end.y-e.start.y)+(e.end.x-e.start.x+1)};},4634:(e,t)=>{function i(e,t,i){if(t===e.length-1)return e[t].getTrimmedLength();const s=!e[t].hasContent(i-1)&&1===e[t].getWidth(i-1),r=2===e[t+1].getWidth(0);return s&&r?i-1:i}Object.defineProperty(t,"__esModule",{value:!0}),t.getWrappedLineTrimmedLength=t.reflowSmallerGetNewLineLengths=t.reflowLargerApplyNewLayout=t.reflowLargerCreateNewLayout=t.reflowLargerGetLinesToRemove=void 0,t.reflowLargerGetLinesToRemove=function(e,t,s,r,n){const o=[];for(let a=0;a<e.length-1;a++){let h=a,c=e.get(++h);if(!c.isWrapped)continue;const l=[e.get(a)];for(;h<e.length&&c.isWrapped;)l.push(c),c=e.get(++h);if(r>=a&&r<h){a+=l.length-1;continue}let d=0,_=i(l,d,t),u=1,f=0;for(;u<l.length;){const e=i(l,u,t),r=e-f,o=s-_,a=Math.min(r,o);l[d].copyCellsFrom(l[u],f,_,a,!1),_+=a,_===s&&(d++,_=0),f+=a,f===e&&(u++,f=0),0===_&&0!==d&&2===l[d-1].getWidth(s-1)&&(l[d].copyCellsFrom(l[d-1],s-1,_++,1,!1),l[d-1].setCell(s-1,n));}l[d].replaceCells(_,s,n);let v=0;for(let e=l.length-1;e>0&&(e>d||0===l[e].getTrimmedLength());e--)v++;v>0&&(o.push(a+l.length-v),o.push(v)),a+=l.length-1;}return o},t.reflowLargerCreateNewLayout=function(e,t){const i=[];let s=0,r=t[s],n=0;for(let o=0;o<e.length;o++)if(r===o){const i=t[++s];e.onDeleteEmitter.fire({index:o-n,amount:i}),o+=i-1,n+=i,r=t[++s];}else i.push(o);return {layout:i,countRemoved:n}},t.reflowLargerApplyNewLayout=function(e,t){const i=[];for(let s=0;s<t.length;s++)i.push(e.get(t[s]));for(let t=0;t<i.length;t++)e.set(t,i[t]);e.length=t.length;},t.reflowSmallerGetNewLineLengths=function(e,t,s){const r=[],n=e.map(((s,r)=>i(e,r,t))).reduce(((e,t)=>e+t));let o=0,a=0,h=0;for(;h<n;){if(n-h<s){r.push(n-h);break}o+=s;const c=i(e,a,t);o>c&&(o-=c,a++);const l=2===e[a].getWidth(o-1);l&&o--;const d=l?s-1:s;r.push(d),h+=d;}return r},t.getWrappedLineTrimmedLength=i;},5295:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferSet=void 0;const s=i(8460),r=i(844),n=i(9092);class o extends r.Disposable{constructor(e,t){super(),this._optionsService=e,this._bufferService=t,this._onBufferActivate=this.register(new s.EventEmitter),this.onBufferActivate=this._onBufferActivate.event,this.reset(),this.register(this._optionsService.onSpecificOptionChange("scrollback",(()=>this.resize(this._bufferService.cols,this._bufferService.rows)))),this.register(this._optionsService.onSpecificOptionChange("tabStopWidth",(()=>this.setupTabStops())));}reset(){this._normal=new n.Buffer(!0,this._optionsService,this._bufferService),this._normal.fillViewportRows(),this._alt=new n.Buffer(!1,this._optionsService,this._bufferService),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}),this.setupTabStops();}get alt(){return this._alt}get active(){return this._activeBuffer}get normal(){return this._normal}activateNormalBuffer(){this._activeBuffer!==this._normal&&(this._normal.x=this._alt.x,this._normal.y=this._alt.y,this._alt.clearAllMarkers(),this._alt.clear(),this._activeBuffer=this._normal,this._onBufferActivate.fire({activeBuffer:this._normal,inactiveBuffer:this._alt}));}activateAltBuffer(e){this._activeBuffer!==this._alt&&(this._alt.fillViewportRows(e),this._alt.x=this._normal.x,this._alt.y=this._normal.y,this._activeBuffer=this._alt,this._onBufferActivate.fire({activeBuffer:this._alt,inactiveBuffer:this._normal}));}resize(e,t){this._normal.resize(e,t),this._alt.resize(e,t),this.setupTabStops(e);}setupTabStops(e){this._normal.setupTabStops(e),this._alt.setupTabStops(e);}}t.BufferSet=o;},511:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CellData=void 0;const s=i(482),r=i(643),n=i(3734);class o extends n.AttributeData{constructor(){super(...arguments),this.content=0,this.fg=0,this.bg=0,this.extended=new n.ExtendedAttrs,this.combinedData="";}static fromCharData(e){const t=new o;return t.setFromCharData(e),t}isCombined(){return 2097152&this.content}getWidth(){return this.content>>22}getChars(){return 2097152&this.content?this.combinedData:2097151&this.content?(0, s.stringFromCodePoint)(2097151&this.content):""}getCode(){return this.isCombined()?this.combinedData.charCodeAt(this.combinedData.length-1):2097151&this.content}setFromCharData(e){this.fg=e[r.CHAR_DATA_ATTR_INDEX],this.bg=0;let t=!1;if(e[r.CHAR_DATA_CHAR_INDEX].length>2)t=!0;else if(2===e[r.CHAR_DATA_CHAR_INDEX].length){const i=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0);if(55296<=i&&i<=56319){const s=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(1);56320<=s&&s<=57343?this.content=1024*(i-55296)+s-56320+65536|e[r.CHAR_DATA_WIDTH_INDEX]<<22:t=!0;}else t=!0;}else this.content=e[r.CHAR_DATA_CHAR_INDEX].charCodeAt(0)|e[r.CHAR_DATA_WIDTH_INDEX]<<22;t&&(this.combinedData=e[r.CHAR_DATA_CHAR_INDEX],this.content=2097152|e[r.CHAR_DATA_WIDTH_INDEX]<<22);}getAsCharData(){return [this.fg,this.getChars(),this.getWidth(),this.getCode()]}}t.CellData=o;},643:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WHITESPACE_CELL_CODE=t.WHITESPACE_CELL_WIDTH=t.WHITESPACE_CELL_CHAR=t.NULL_CELL_CODE=t.NULL_CELL_WIDTH=t.NULL_CELL_CHAR=t.CHAR_DATA_CODE_INDEX=t.CHAR_DATA_WIDTH_INDEX=t.CHAR_DATA_CHAR_INDEX=t.CHAR_DATA_ATTR_INDEX=t.DEFAULT_EXT=t.DEFAULT_ATTR=t.DEFAULT_COLOR=void 0,t.DEFAULT_COLOR=0,t.DEFAULT_ATTR=256|t.DEFAULT_COLOR<<9,t.DEFAULT_EXT=0,t.CHAR_DATA_ATTR_INDEX=0,t.CHAR_DATA_CHAR_INDEX=1,t.CHAR_DATA_WIDTH_INDEX=2,t.CHAR_DATA_CODE_INDEX=3,t.NULL_CELL_CHAR="",t.NULL_CELL_WIDTH=1,t.NULL_CELL_CODE=0,t.WHITESPACE_CELL_CHAR=" ",t.WHITESPACE_CELL_WIDTH=1,t.WHITESPACE_CELL_CODE=32;},4863:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Marker=void 0;const s=i(8460),r=i(844);class n{get id(){return this._id}constructor(e){this.line=e,this.isDisposed=!1,this._disposables=[],this._id=n._nextId++,this._onDispose=this.register(new s.EventEmitter),this.onDispose=this._onDispose.event;}dispose(){this.isDisposed||(this.isDisposed=!0,this.line=-1,this._onDispose.fire(),(0, r.disposeArray)(this._disposables),this._disposables.length=0);}register(e){return this._disposables.push(e),e}}t.Marker=n,n._nextId=1;},7116:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_CHARSET=t.CHARSETS=void 0,t.CHARSETS={},t.DEFAULT_CHARSET=t.CHARSETS.B,t.CHARSETS[0]={"`":"◆",a:"▒",b:"␉",c:"␌",d:"␍",e:"␊",f:"°",g:"±",h:"␤",i:"␋",j:"┘",k:"┐",l:"┌",m:"└",n:"┼",o:"⎺",p:"⎻",q:"─",r:"⎼",s:"⎽",t:"├",u:"┤",v:"┴",w:"┬",x:"│",y:"≤",z:"≥","{":"π","|":"≠","}":"£","~":"·"},t.CHARSETS.A={"#":"£"},t.CHARSETS.B=void 0,t.CHARSETS[4]={"#":"£","@":"¾","[":"ij","\\":"½","]":"|","{":"¨","|":"f","}":"¼","~":"´"},t.CHARSETS.C=t.CHARSETS[5]={"[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS.R={"#":"£","@":"à","[":"°","\\":"ç","]":"§","{":"é","|":"ù","}":"è","~":"¨"},t.CHARSETS.Q={"@":"à","[":"â","\\":"ç","]":"ê","^":"î","`":"ô","{":"é","|":"ù","}":"è","~":"û"},t.CHARSETS.K={"@":"§","[":"Ä","\\":"Ö","]":"Ü","{":"ä","|":"ö","}":"ü","~":"ß"},t.CHARSETS.Y={"#":"£","@":"§","[":"°","\\":"ç","]":"é","`":"ù","{":"à","|":"ò","}":"è","~":"ì"},t.CHARSETS.E=t.CHARSETS[6]={"@":"Ä","[":"Æ","\\":"Ø","]":"Å","^":"Ü","`":"ä","{":"æ","|":"ø","}":"å","~":"ü"},t.CHARSETS.Z={"#":"£","@":"§","[":"¡","\\":"Ñ","]":"¿","{":"°","|":"ñ","}":"ç"},t.CHARSETS.H=t.CHARSETS[7]={"@":"É","[":"Ä","\\":"Ö","]":"Å","^":"Ü","`":"é","{":"ä","|":"ö","}":"å","~":"ü"},t.CHARSETS["="]={"#":"ù","@":"à","[":"é","\\":"ç","]":"ê","^":"î",_:"è","`":"ô","{":"ä","|":"ö","}":"ü","~":"û"};},2584:(e,t)=>{var i,s,r;Object.defineProperty(t,"__esModule",{value:!0}),t.C1_ESCAPED=t.C1=t.C0=void 0,function(e){e.NUL="\0",e.SOH="",e.STX="",e.ETX="",e.EOT="",e.ENQ="",e.ACK="",e.BEL="",e.BS="\b",e.HT="\t",e.LF="\n",e.VT="\v",e.FF="\f",e.CR="\r",e.SO="",e.SI="",e.DLE="",e.DC1="",e.DC2="",e.DC3="",e.DC4="",e.NAK="",e.SYN="",e.ETB="",e.CAN="",e.EM="",e.SUB="",e.ESC="",e.FS="",e.GS="",e.RS="",e.US="",e.SP=" ",e.DEL="";}(i||(t.C0=i={})),function(e){e.PAD="",e.HOP="",e.BPH="",e.NBH="",e.IND="",e.NEL="",e.SSA="",e.ESA="",e.HTS="",e.HTJ="",e.VTS="",e.PLD="",e.PLU="",e.RI="",e.SS2="",e.SS3="",e.DCS="",e.PU1="",e.PU2="",e.STS="",e.CCH="",e.MW="",e.SPA="",e.EPA="",e.SOS="",e.SGCI="",e.SCI="",e.CSI="",e.ST="",e.OSC="",e.PM="",e.APC="";}(s||(t.C1=s={})),function(e){e.ST=`${i.ESC}\\`;}(r||(t.C1_ESCAPED=r={}));},7399:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.evaluateKeyboardEvent=void 0;const s=i(2584),r={48:["0",")"],49:["1","!"],50:["2","@"],51:["3","#"],52:["4","$"],53:["5","%"],54:["6","^"],55:["7","&"],56:["8","*"],57:["9","("],186:[";",":"],187:["=","+"],188:[",","<"],189:["-","_"],190:[".",">"],191:["/","?"],192:["`","~"],219:["[","{"],220:["\\","|"],221:["]","}"],222:["'",'"']};t.evaluateKeyboardEvent=function(e,t,i,n){const o={type:0,cancel:!1,key:void 0},a=(e.shiftKey?1:0)|(e.altKey?2:0)|(e.ctrlKey?4:0)|(e.metaKey?8:0);switch(e.keyCode){case 0:"UIKeyInputUpArrow"===e.key?o.key=t?s.C0.ESC+"OA":s.C0.ESC+"[A":"UIKeyInputLeftArrow"===e.key?o.key=t?s.C0.ESC+"OD":s.C0.ESC+"[D":"UIKeyInputRightArrow"===e.key?o.key=t?s.C0.ESC+"OC":s.C0.ESC+"[C":"UIKeyInputDownArrow"===e.key&&(o.key=t?s.C0.ESC+"OB":s.C0.ESC+"[B");break;case 8:if(e.altKey){o.key=s.C0.ESC+s.C0.DEL;break}o.key=s.C0.DEL;break;case 9:if(e.shiftKey){o.key=s.C0.ESC+"[Z";break}o.key=s.C0.HT,o.cancel=!0;break;case 13:o.key=e.altKey?s.C0.ESC+s.C0.CR:s.C0.CR,o.cancel=!0;break;case 27:o.key=s.C0.ESC,e.altKey&&(o.key=s.C0.ESC+s.C0.ESC),o.cancel=!0;break;case 37:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"D",o.key===s.C0.ESC+"[1;3D"&&(o.key=s.C0.ESC+(i?"b":"[1;5D"))):o.key=t?s.C0.ESC+"OD":s.C0.ESC+"[D";break;case 39:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"C",o.key===s.C0.ESC+"[1;3C"&&(o.key=s.C0.ESC+(i?"f":"[1;5C"))):o.key=t?s.C0.ESC+"OC":s.C0.ESC+"[C";break;case 38:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"A",i||o.key!==s.C0.ESC+"[1;3A"||(o.key=s.C0.ESC+"[1;5A")):o.key=t?s.C0.ESC+"OA":s.C0.ESC+"[A";break;case 40:if(e.metaKey)break;a?(o.key=s.C0.ESC+"[1;"+(a+1)+"B",i||o.key!==s.C0.ESC+"[1;3B"||(o.key=s.C0.ESC+"[1;5B")):o.key=t?s.C0.ESC+"OB":s.C0.ESC+"[B";break;case 45:e.shiftKey||e.ctrlKey||(o.key=s.C0.ESC+"[2~");break;case 46:o.key=a?s.C0.ESC+"[3;"+(a+1)+"~":s.C0.ESC+"[3~";break;case 36:o.key=a?s.C0.ESC+"[1;"+(a+1)+"H":t?s.C0.ESC+"OH":s.C0.ESC+"[H";break;case 35:o.key=a?s.C0.ESC+"[1;"+(a+1)+"F":t?s.C0.ESC+"OF":s.C0.ESC+"[F";break;case 33:e.shiftKey?o.type=2:e.ctrlKey?o.key=s.C0.ESC+"[5;"+(a+1)+"~":o.key=s.C0.ESC+"[5~";break;case 34:e.shiftKey?o.type=3:e.ctrlKey?o.key=s.C0.ESC+"[6;"+(a+1)+"~":o.key=s.C0.ESC+"[6~";break;case 112:o.key=a?s.C0.ESC+"[1;"+(a+1)+"P":s.C0.ESC+"OP";break;case 113:o.key=a?s.C0.ESC+"[1;"+(a+1)+"Q":s.C0.ESC+"OQ";break;case 114:o.key=a?s.C0.ESC+"[1;"+(a+1)+"R":s.C0.ESC+"OR";break;case 115:o.key=a?s.C0.ESC+"[1;"+(a+1)+"S":s.C0.ESC+"OS";break;case 116:o.key=a?s.C0.ESC+"[15;"+(a+1)+"~":s.C0.ESC+"[15~";break;case 117:o.key=a?s.C0.ESC+"[17;"+(a+1)+"~":s.C0.ESC+"[17~";break;case 118:o.key=a?s.C0.ESC+"[18;"+(a+1)+"~":s.C0.ESC+"[18~";break;case 119:o.key=a?s.C0.ESC+"[19;"+(a+1)+"~":s.C0.ESC+"[19~";break;case 120:o.key=a?s.C0.ESC+"[20;"+(a+1)+"~":s.C0.ESC+"[20~";break;case 121:o.key=a?s.C0.ESC+"[21;"+(a+1)+"~":s.C0.ESC+"[21~";break;case 122:o.key=a?s.C0.ESC+"[23;"+(a+1)+"~":s.C0.ESC+"[23~";break;case 123:o.key=a?s.C0.ESC+"[24;"+(a+1)+"~":s.C0.ESC+"[24~";break;default:if(!e.ctrlKey||e.shiftKey||e.altKey||e.metaKey)if(i&&!n||!e.altKey||e.metaKey)!i||e.altKey||e.ctrlKey||e.shiftKey||!e.metaKey?e.key&&!e.ctrlKey&&!e.altKey&&!e.metaKey&&e.keyCode>=48&&1===e.key.length?o.key=e.key:e.key&&e.ctrlKey&&("_"===e.key&&(o.key=s.C0.US),"@"===e.key&&(o.key=s.C0.NUL)):65===e.keyCode&&(o.type=1);else {const t=r[e.keyCode],i=null==t?void 0:t[e.shiftKey?1:0];if(i)o.key=s.C0.ESC+i;else if(e.keyCode>=65&&e.keyCode<=90){const t=e.ctrlKey?e.keyCode-64:e.keyCode+32;let i=String.fromCharCode(t);e.shiftKey&&(i=i.toUpperCase()),o.key=s.C0.ESC+i;}else if(32===e.keyCode)o.key=s.C0.ESC+(e.ctrlKey?s.C0.NUL:" ");else if("Dead"===e.key&&e.code.startsWith("Key")){let t=e.code.slice(3,4);e.shiftKey||(t=t.toLowerCase()),o.key=s.C0.ESC+t,o.cancel=!0;}}else e.keyCode>=65&&e.keyCode<=90?o.key=String.fromCharCode(e.keyCode-64):32===e.keyCode?o.key=s.C0.NUL:e.keyCode>=51&&e.keyCode<=55?o.key=String.fromCharCode(e.keyCode-51+27):56===e.keyCode?o.key=s.C0.DEL:219===e.keyCode?o.key=s.C0.ESC:220===e.keyCode?o.key=s.C0.FS:221===e.keyCode&&(o.key=s.C0.GS);}return o};},482:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Utf8ToUtf32=t.StringToUtf32=t.utf32ToString=t.stringFromCodePoint=void 0,t.stringFromCodePoint=function(e){return e>65535?(e-=65536,String.fromCharCode(55296+(e>>10))+String.fromCharCode(e%1024+56320)):String.fromCharCode(e)},t.utf32ToString=function(e,t=0,i=e.length){let s="";for(let r=t;r<i;++r){let t=e[r];t>65535?(t-=65536,s+=String.fromCharCode(55296+(t>>10))+String.fromCharCode(t%1024+56320)):s+=String.fromCharCode(t);}return s},t.StringToUtf32=class{constructor(){this._interim=0;}clear(){this._interim=0;}decode(e,t){const i=e.length;if(!i)return 0;let s=0,r=0;if(this._interim){const i=e.charCodeAt(r++);56320<=i&&i<=57343?t[s++]=1024*(this._interim-55296)+i-56320+65536:(t[s++]=this._interim,t[s++]=i),this._interim=0;}for(let n=r;n<i;++n){const r=e.charCodeAt(n);if(55296<=r&&r<=56319){if(++n>=i)return this._interim=r,s;const o=e.charCodeAt(n);56320<=o&&o<=57343?t[s++]=1024*(r-55296)+o-56320+65536:(t[s++]=r,t[s++]=o);}else 65279!==r&&(t[s++]=r);}return s}},t.Utf8ToUtf32=class{constructor(){this.interim=new Uint8Array(3);}clear(){this.interim.fill(0);}decode(e,t){const i=e.length;if(!i)return 0;let s,r,n,o,a=0,h=0,c=0;if(this.interim[0]){let s=!1,r=this.interim[0];r&=192==(224&r)?31:224==(240&r)?15:7;let n,o=0;for(;(n=63&this.interim[++o])&&o<4;)r<<=6,r|=n;const h=192==(224&this.interim[0])?2:224==(240&this.interim[0])?3:4,l=h-o;for(;c<l;){if(c>=i)return 0;if(n=e[c++],128!=(192&n)){c--,s=!0;break}this.interim[o++]=n,r<<=6,r|=63&n;}s||(2===h?r<128?c--:t[a++]=r:3===h?r<2048||r>=55296&&r<=57343||65279===r||(t[a++]=r):r<65536||r>1114111||(t[a++]=r)),this.interim.fill(0);}const l=i-4;let d=c;for(;d<i;){for(;!(!(d<l)||128&(s=e[d])||128&(r=e[d+1])||128&(n=e[d+2])||128&(o=e[d+3]));)t[a++]=s,t[a++]=r,t[a++]=n,t[a++]=o,d+=4;if(s=e[d++],s<128)t[a++]=s;else if(192==(224&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(h=(31&s)<<6|63&r,h<128){d--;continue}t[a++]=h;}else if(224==(240&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(h=(15&s)<<12|(63&r)<<6|63&n,h<2048||h>=55296&&h<=57343||65279===h)continue;t[a++]=h;}else if(240==(248&s)){if(d>=i)return this.interim[0]=s,a;if(r=e[d++],128!=(192&r)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,a;if(n=e[d++],128!=(192&n)){d--;continue}if(d>=i)return this.interim[0]=s,this.interim[1]=r,this.interim[2]=n,a;if(o=e[d++],128!=(192&o)){d--;continue}if(h=(7&s)<<18|(63&r)<<12|(63&n)<<6|63&o,h<65536||h>1114111)continue;t[a++]=h;}}return a}};},225:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeV6=void 0;const i=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531]],s=[[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]];let r;t.UnicodeV6=class{constructor(){if(this.version="6",!r){r=new Uint8Array(65536),r.fill(1),r[0]=0,r.fill(0,1,32),r.fill(0,127,160),r.fill(2,4352,4448),r[9001]=2,r[9002]=2,r.fill(2,11904,42192),r[12351]=1,r.fill(2,44032,55204),r.fill(2,63744,64256),r.fill(2,65040,65050),r.fill(2,65072,65136),r.fill(2,65280,65377),r.fill(2,65504,65511);for(let e=0;e<i.length;++e)r.fill(0,i[e][0],i[e][1]+1);}}wcwidth(e){return e<32?0:e<127?1:e<65536?r[e]:function(e,t){let i,s=0,r=t.length-1;if(e<t[0][0]||e>t[r][1])return !1;for(;r>=s;)if(i=s+r>>1,e>t[i][1])s=i+1;else {if(!(e<t[i][0]))return !0;r=i-1;}return !1}(e,s)?0:e>=131072&&e<=196605||e>=196608&&e<=262141?2:1}};},5981:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.WriteBuffer=void 0;const s=i(8460),r=i(844);class n extends r.Disposable{constructor(e){super(),this._action=e,this._writeBuffer=[],this._callbacks=[],this._pendingData=0,this._bufferOffset=0,this._isSyncWriting=!1,this._syncCalls=0,this._didUserInput=!1,this._onWriteParsed=this.register(new s.EventEmitter),this.onWriteParsed=this._onWriteParsed.event;}handleUserInput(){this._didUserInput=!0;}writeSync(e,t){if(void 0!==t&&this._syncCalls>t)return void(this._syncCalls=0);if(this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(void 0),this._syncCalls++,this._isSyncWriting)return;let i;for(this._isSyncWriting=!0;i=this._writeBuffer.shift();){this._action(i);const e=this._callbacks.shift();e&&e();}this._pendingData=0,this._bufferOffset=2147483647,this._isSyncWriting=!1,this._syncCalls=0;}write(e,t){if(this._pendingData>5e7)throw new Error("write data discarded, use flow control to avoid losing data");if(!this._writeBuffer.length){if(this._bufferOffset=0,this._didUserInput)return this._didUserInput=!1,this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t),void this._innerWrite();setTimeout((()=>this._innerWrite()));}this._pendingData+=e.length,this._writeBuffer.push(e),this._callbacks.push(t);}_innerWrite(e=0,t=!0){const i=e||Date.now();for(;this._writeBuffer.length>this._bufferOffset;){const e=this._writeBuffer[this._bufferOffset],s=this._action(e,t);if(s){const e=e=>Date.now()-i>=12?setTimeout((()=>this._innerWrite(0,e))):this._innerWrite(i,e);return void s.catch((e=>(queueMicrotask((()=>{throw e})),Promise.resolve(!1)))).then(e)}const r=this._callbacks[this._bufferOffset];if(r&&r(),this._bufferOffset++,this._pendingData-=e.length,Date.now()-i>=12)break}this._writeBuffer.length>this._bufferOffset?(this._bufferOffset>50&&(this._writeBuffer=this._writeBuffer.slice(this._bufferOffset),this._callbacks=this._callbacks.slice(this._bufferOffset),this._bufferOffset=0),setTimeout((()=>this._innerWrite()))):(this._writeBuffer.length=0,this._callbacks.length=0,this._pendingData=0,this._bufferOffset=0),this._onWriteParsed.fire();}}t.WriteBuffer=n;},5941:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.toRgbString=t.parseColor=void 0;const i=/^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/,s=/^[\da-f]+$/;function r(e,t){const i=e.toString(16),s=i.length<2?"0"+i:i;switch(t){case 4:return i[0];case 8:return s;case 12:return (s+s).slice(0,3);default:return s+s}}t.parseColor=function(e){if(!e)return;let t=e.toLowerCase();if(0===t.indexOf("rgb:")){t=t.slice(4);const e=i.exec(t);if(e){const t=e[1]?15:e[4]?255:e[7]?4095:65535;return [Math.round(parseInt(e[1]||e[4]||e[7]||e[10],16)/t*255),Math.round(parseInt(e[2]||e[5]||e[8]||e[11],16)/t*255),Math.round(parseInt(e[3]||e[6]||e[9]||e[12],16)/t*255)]}}else if(0===t.indexOf("#")&&(t=t.slice(1),s.exec(t)&&[3,6,9,12].includes(t.length))){const e=t.length/3,i=[0,0,0];for(let s=0;s<3;++s){const r=parseInt(t.slice(e*s,e*s+e),16);i[s]=1===e?r<<4:2===e?r:3===e?r>>4:r>>8;}return i}},t.toRgbString=function(e,t=16){const[i,s,n]=e;return `rgb:${r(i,t)}/${r(s,t)}/${r(n,t)}`};},5770:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.PAYLOAD_LIMIT=void 0,t.PAYLOAD_LIMIT=1e7;},6351:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DcsHandler=t.DcsParser=void 0;const s=i(482),r=i(8742),n=i(5770),o=[];t.DcsParser=class{constructor(){this._handlers=Object.create(null),this._active=o,this._ident=0,this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=o;}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1);}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e];}setHandlerFallback(e){this._handlerFb=e;}reset(){if(this._active.length)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].unhook(!1);this._stack.paused=!1,this._active=o,this._ident=0;}hook(e,t){if(this.reset(),this._ident=e,this._active=this._handlers[e]||o,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].hook(t);else this._handlerFb(this._ident,"HOOK",t);}put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._ident,"PUT",(0, s.utf32ToString)(e,t,i));}unhook(e,t=!0){if(this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].unhook(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--;}for(;s>=0;s--)if(i=this._active[s].unhook(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._ident,"UNHOOK",e);this._active=o,this._ident=0;}};const a=new r.Params;a.addParam(0),t.DcsHandler=class{constructor(e){this._handler=e,this._data="",this._params=a,this._hitLimit=!1;}hook(e){this._params=e.length>1||e.params[0]?e.clone():a,this._data="",this._hitLimit=!1;}put(e,t,i){this._hitLimit||(this._data+=(0, s.utf32ToString)(e,t,i),this._data.length>n.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));}unhook(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data,this._params),t instanceof Promise))return t.then((e=>(this._params=a,this._data="",this._hitLimit=!1,e)));return this._params=a,this._data="",this._hitLimit=!1,t}};},2015:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.EscapeSequenceParser=t.VT500_TRANSITION_TABLE=t.TransitionTable=void 0;const s=i(844),r=i(8742),n=i(6242),o=i(6351);class a{constructor(e){this.table=new Uint8Array(e);}setDefault(e,t){this.table.fill(e<<4|t);}add(e,t,i,s){this.table[t<<8|e]=i<<4|s;}addMany(e,t,i,s){for(let r=0;r<e.length;r++)this.table[t<<8|e[r]]=i<<4|s;}}t.TransitionTable=a;const h=160;t.VT500_TRANSITION_TABLE=function(){const e=new a(4095),t=Array.apply(null,Array(256)).map(((e,t)=>t)),i=(e,i)=>t.slice(e,i),s=i(32,127),r=i(0,24);r.push(25),r.push.apply(r,i(28,32));const n=i(0,14);let o;for(o in e.setDefault(1,0),e.addMany(s,0,2,0),n)e.addMany([24,26,153,154],o,3,0),e.addMany(i(128,144),o,3,0),e.addMany(i(144,152),o,3,0),e.add(156,o,0,0),e.add(27,o,11,1),e.add(157,o,4,8),e.addMany([152,158,159],o,0,7),e.add(155,o,11,3),e.add(144,o,11,9);return e.addMany(r,0,3,0),e.addMany(r,1,3,1),e.add(127,1,0,1),e.addMany(r,8,0,8),e.addMany(r,3,3,3),e.add(127,3,0,3),e.addMany(r,4,3,4),e.add(127,4,0,4),e.addMany(r,6,3,6),e.addMany(r,5,3,5),e.add(127,5,0,5),e.addMany(r,2,3,2),e.add(127,2,0,2),e.add(93,1,4,8),e.addMany(s,8,5,8),e.add(127,8,5,8),e.addMany([156,27,24,26,7],8,6,0),e.addMany(i(28,32),8,0,8),e.addMany([88,94,95],1,0,7),e.addMany(s,7,0,7),e.addMany(r,7,0,7),e.add(156,7,0,0),e.add(127,7,0,7),e.add(91,1,11,3),e.addMany(i(64,127),3,7,0),e.addMany(i(48,60),3,8,4),e.addMany([60,61,62,63],3,9,4),e.addMany(i(48,60),4,8,4),e.addMany(i(64,127),4,7,0),e.addMany([60,61,62,63],4,0,6),e.addMany(i(32,64),6,0,6),e.add(127,6,0,6),e.addMany(i(64,127),6,0,0),e.addMany(i(32,48),3,9,5),e.addMany(i(32,48),5,9,5),e.addMany(i(48,64),5,0,6),e.addMany(i(64,127),5,7,0),e.addMany(i(32,48),4,9,5),e.addMany(i(32,48),1,9,2),e.addMany(i(32,48),2,9,2),e.addMany(i(48,127),2,10,0),e.addMany(i(48,80),1,10,0),e.addMany(i(81,88),1,10,0),e.addMany([89,90,92],1,10,0),e.addMany(i(96,127),1,10,0),e.add(80,1,11,9),e.addMany(r,9,0,9),e.add(127,9,0,9),e.addMany(i(28,32),9,0,9),e.addMany(i(32,48),9,9,12),e.addMany(i(48,60),9,8,10),e.addMany([60,61,62,63],9,9,10),e.addMany(r,11,0,11),e.addMany(i(32,128),11,0,11),e.addMany(i(28,32),11,0,11),e.addMany(r,10,0,10),e.add(127,10,0,10),e.addMany(i(28,32),10,0,10),e.addMany(i(48,60),10,8,10),e.addMany([60,61,62,63],10,0,11),e.addMany(i(32,48),10,9,12),e.addMany(r,12,0,12),e.add(127,12,0,12),e.addMany(i(28,32),12,0,12),e.addMany(i(32,48),12,9,12),e.addMany(i(48,64),12,0,11),e.addMany(i(64,127),12,12,13),e.addMany(i(64,127),10,12,13),e.addMany(i(64,127),9,12,13),e.addMany(r,13,13,13),e.addMany(s,13,13,13),e.add(127,13,0,13),e.addMany([27,156,24,26],13,14,0),e.add(h,0,2,0),e.add(h,8,5,8),e.add(h,6,0,6),e.add(h,11,0,11),e.add(h,13,13,13),e}();class c extends s.Disposable{constructor(e=t.VT500_TRANSITION_TABLE){super(),this._transitions=e,this._parseStack={state:0,handlers:[],handlerPos:0,transition:0,chunkPos:0},this.initialState=0,this.currentState=this.initialState,this._params=new r.Params,this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,this._printHandlerFb=(e,t,i)=>{},this._executeHandlerFb=e=>{},this._csiHandlerFb=(e,t)=>{},this._escHandlerFb=e=>{},this._errorHandlerFb=e=>e,this._printHandler=this._printHandlerFb,this._executeHandlers=Object.create(null),this._csiHandlers=Object.create(null),this._escHandlers=Object.create(null),this.register((0, s.toDisposable)((()=>{this._csiHandlers=Object.create(null),this._executeHandlers=Object.create(null),this._escHandlers=Object.create(null);}))),this._oscParser=this.register(new n.OscParser),this._dcsParser=this.register(new o.DcsParser),this._errorHandler=this._errorHandlerFb,this.registerEscHandler({final:"\\"},(()=>!0));}_identifier(e,t=[64,126]){let i=0;if(e.prefix){if(e.prefix.length>1)throw new Error("only one byte as prefix supported");if(i=e.prefix.charCodeAt(0),i&&60>i||i>63)throw new Error("prefix must be in range 0x3c .. 0x3f")}if(e.intermediates){if(e.intermediates.length>2)throw new Error("only two bytes as intermediates are supported");for(let t=0;t<e.intermediates.length;++t){const s=e.intermediates.charCodeAt(t);if(32>s||s>47)throw new Error("intermediate must be in range 0x20 .. 0x2f");i<<=8,i|=s;}}if(1!==e.final.length)throw new Error("final must be a single byte");const s=e.final.charCodeAt(0);if(t[0]>s||s>t[1])throw new Error(`final must be in range ${t[0]} .. ${t[1]}`);return i<<=8,i|=s,i}identToString(e){const t=[];for(;e;)t.push(String.fromCharCode(255&e)),e>>=8;return t.reverse().join("")}setPrintHandler(e){this._printHandler=e;}clearPrintHandler(){this._printHandler=this._printHandlerFb;}registerEscHandler(e,t){const i=this._identifier(e,[48,126]);void 0===this._escHandlers[i]&&(this._escHandlers[i]=[]);const s=this._escHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1);}}}clearEscHandler(e){this._escHandlers[this._identifier(e,[48,126])]&&delete this._escHandlers[this._identifier(e,[48,126])];}setEscHandlerFallback(e){this._escHandlerFb=e;}setExecuteHandler(e,t){this._executeHandlers[e.charCodeAt(0)]=t;}clearExecuteHandler(e){this._executeHandlers[e.charCodeAt(0)]&&delete this._executeHandlers[e.charCodeAt(0)];}setExecuteHandlerFallback(e){this._executeHandlerFb=e;}registerCsiHandler(e,t){const i=this._identifier(e);void 0===this._csiHandlers[i]&&(this._csiHandlers[i]=[]);const s=this._csiHandlers[i];return s.push(t),{dispose:()=>{const e=s.indexOf(t);-1!==e&&s.splice(e,1);}}}clearCsiHandler(e){this._csiHandlers[this._identifier(e)]&&delete this._csiHandlers[this._identifier(e)];}setCsiHandlerFallback(e){this._csiHandlerFb=e;}registerDcsHandler(e,t){return this._dcsParser.registerHandler(this._identifier(e),t)}clearDcsHandler(e){this._dcsParser.clearHandler(this._identifier(e));}setDcsHandlerFallback(e){this._dcsParser.setHandlerFallback(e);}registerOscHandler(e,t){return this._oscParser.registerHandler(e,t)}clearOscHandler(e){this._oscParser.clearHandler(e);}setOscHandlerFallback(e){this._oscParser.setHandlerFallback(e);}setErrorHandler(e){this._errorHandler=e;}clearErrorHandler(){this._errorHandler=this._errorHandlerFb;}reset(){this.currentState=this.initialState,this._oscParser.reset(),this._dcsParser.reset(),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0,0!==this._parseStack.state&&(this._parseStack.state=2,this._parseStack.handlers=[]);}_preserveStack(e,t,i,s,r){this._parseStack.state=e,this._parseStack.handlers=t,this._parseStack.handlerPos=i,this._parseStack.transition=s,this._parseStack.chunkPos=r;}parse(e,t,i){let s,r=0,n=0,o=0;if(this._parseStack.state)if(2===this._parseStack.state)this._parseStack.state=0,o=this._parseStack.chunkPos+1;else {if(void 0===i||1===this._parseStack.state)throw this._parseStack.state=1,new Error("improper continuation due to previous async handler, giving up parsing");const t=this._parseStack.handlers;let n=this._parseStack.handlerPos-1;switch(this._parseStack.state){case 3:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](this._params),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 4:if(!1===i&&n>-1)for(;n>=0&&(s=t[n](),!0!==s);n--)if(s instanceof Promise)return this._parseStack.handlerPos=n,s;this._parseStack.handlers=[];break;case 6:if(r=e[this._parseStack.chunkPos],s=this._dcsParser.unhook(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;break;case 5:if(r=e[this._parseStack.chunkPos],s=this._oscParser.end(24!==r&&26!==r,i),s)return s;27===r&&(this._parseStack.transition|=1),this._params.reset(),this._params.addParam(0),this._collect=0;}this._parseStack.state=0,o=this._parseStack.chunkPos+1,this.precedingCodepoint=0,this.currentState=15&this._parseStack.transition;}for(let i=o;i<t;++i){switch(r=e[i],n=this._transitions.table[this.currentState<<8|(r<160?r:h)],n>>4){case 2:for(let s=i+1;;++s){if(s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}if(++s>=t||(r=e[s])<32||r>126&&r<h){this._printHandler(e,i,s),i=s-1;break}}break;case 3:this._executeHandlers[r]?this._executeHandlers[r]():this._executeHandlerFb(r),this.precedingCodepoint=0;break;case 0:break;case 1:if(this._errorHandler({position:i,code:r,currentState:this.currentState,collect:this._collect,params:this._params,abort:!1}).abort)return;break;case 7:const o=this._csiHandlers[this._collect<<8|r];let a=o?o.length-1:-1;for(;a>=0&&(s=o[a](this._params),!0!==s);a--)if(s instanceof Promise)return this._preserveStack(3,o,a,n,i),s;a<0&&this._csiHandlerFb(this._collect<<8|r,this._params),this.precedingCodepoint=0;break;case 8:do{switch(r){case 59:this._params.addParam(0);break;case 58:this._params.addSubParam(-1);break;default:this._params.addDigit(r-48);}}while(++i<t&&(r=e[i])>47&&r<60);i--;break;case 9:this._collect<<=8,this._collect|=r;break;case 10:const c=this._escHandlers[this._collect<<8|r];let l=c?c.length-1:-1;for(;l>=0&&(s=c[l](),!0!==s);l--)if(s instanceof Promise)return this._preserveStack(4,c,l,n,i),s;l<0&&this._escHandlerFb(this._collect<<8|r),this.precedingCodepoint=0;break;case 11:this._params.reset(),this._params.addParam(0),this._collect=0;break;case 12:this._dcsParser.hook(this._collect<<8|r,this._params);break;case 13:for(let s=i+1;;++s)if(s>=t||24===(r=e[s])||26===r||27===r||r>127&&r<h){this._dcsParser.put(e,i,s),i=s-1;break}break;case 14:if(s=this._dcsParser.unhook(24!==r&&26!==r),s)return this._preserveStack(6,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;break;case 4:this._oscParser.start();break;case 5:for(let s=i+1;;s++)if(s>=t||(r=e[s])<32||r>127&&r<h){this._oscParser.put(e,i,s),i=s-1;break}break;case 6:if(s=this._oscParser.end(24!==r&&26!==r),s)return this._preserveStack(5,[],0,n,i),s;27===r&&(n|=1),this._params.reset(),this._params.addParam(0),this._collect=0,this.precedingCodepoint=0;}this.currentState=15&n;}}}t.EscapeSequenceParser=c;},6242:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OscHandler=t.OscParser=void 0;const s=i(5770),r=i(482),n=[];t.OscParser=class{constructor(){this._state=0,this._active=n,this._id=-1,this._handlers=Object.create(null),this._handlerFb=()=>{},this._stack={paused:!1,loopPosition:0,fallThrough:!1};}registerHandler(e,t){void 0===this._handlers[e]&&(this._handlers[e]=[]);const i=this._handlers[e];return i.push(t),{dispose:()=>{const e=i.indexOf(t);-1!==e&&i.splice(e,1);}}}clearHandler(e){this._handlers[e]&&delete this._handlers[e];}setHandlerFallback(e){this._handlerFb=e;}dispose(){this._handlers=Object.create(null),this._handlerFb=()=>{},this._active=n;}reset(){if(2===this._state)for(let e=this._stack.paused?this._stack.loopPosition-1:this._active.length-1;e>=0;--e)this._active[e].end(!1);this._stack.paused=!1,this._active=n,this._id=-1,this._state=0;}_start(){if(this._active=this._handlers[this._id]||n,this._active.length)for(let e=this._active.length-1;e>=0;e--)this._active[e].start();else this._handlerFb(this._id,"START");}_put(e,t,i){if(this._active.length)for(let s=this._active.length-1;s>=0;s--)this._active[s].put(e,t,i);else this._handlerFb(this._id,"PUT",(0, r.utf32ToString)(e,t,i));}start(){this.reset(),this._state=1;}put(e,t,i){if(3!==this._state){if(1===this._state)for(;t<i;){const i=e[t++];if(59===i){this._state=2,this._start();break}if(i<48||57<i)return void(this._state=3);-1===this._id&&(this._id=0),this._id=10*this._id+i-48;}2===this._state&&i-t>0&&this._put(e,t,i);}}end(e,t=!0){if(0!==this._state){if(3!==this._state)if(1===this._state&&this._start(),this._active.length){let i=!1,s=this._active.length-1,r=!1;if(this._stack.paused&&(s=this._stack.loopPosition-1,i=t,r=this._stack.fallThrough,this._stack.paused=!1),!r&&!1===i){for(;s>=0&&(i=this._active[s].end(e),!0!==i);s--)if(i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!1,i;s--;}for(;s>=0;s--)if(i=this._active[s].end(!1),i instanceof Promise)return this._stack.paused=!0,this._stack.loopPosition=s,this._stack.fallThrough=!0,i}else this._handlerFb(this._id,"END",e);this._active=n,this._id=-1,this._state=0;}}},t.OscHandler=class{constructor(e){this._handler=e,this._data="",this._hitLimit=!1;}start(){this._data="",this._hitLimit=!1;}put(e,t,i){this._hitLimit||(this._data+=(0, r.utf32ToString)(e,t,i),this._data.length>s.PAYLOAD_LIMIT&&(this._data="",this._hitLimit=!0));}end(e){let t=!1;if(this._hitLimit)t=!1;else if(e&&(t=this._handler(this._data),t instanceof Promise))return t.then((e=>(this._data="",this._hitLimit=!1,e)));return this._data="",this._hitLimit=!1,t}};},8742:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.Params=void 0;const i=2147483647;class s{static fromArray(e){const t=new s;if(!e.length)return t;for(let i=Array.isArray(e[0])?1:0;i<e.length;++i){const s=e[i];if(Array.isArray(s))for(let e=0;e<s.length;++e)t.addSubParam(s[e]);else t.addParam(s);}return t}constructor(e=32,t=32){if(this.maxLength=e,this.maxSubParamsLength=t,t>256)throw new Error("maxSubParamsLength must not be greater than 256");this.params=new Int32Array(e),this.length=0,this._subParams=new Int32Array(t),this._subParamsLength=0,this._subParamsIdx=new Uint16Array(e),this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;}clone(){const e=new s(this.maxLength,this.maxSubParamsLength);return e.params.set(this.params),e.length=this.length,e._subParams.set(this._subParams),e._subParamsLength=this._subParamsLength,e._subParamsIdx.set(this._subParamsIdx),e._rejectDigits=this._rejectDigits,e._rejectSubDigits=this._rejectSubDigits,e._digitIsSub=this._digitIsSub,e}toArray(){const e=[];for(let t=0;t<this.length;++t){e.push(this.params[t]);const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&e.push(Array.prototype.slice.call(this._subParams,i,s));}return e}reset(){this.length=0,this._subParamsLength=0,this._rejectDigits=!1,this._rejectSubDigits=!1,this._digitIsSub=!1;}addParam(e){if(this._digitIsSub=!1,this.length>=this.maxLength)this._rejectDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParamsIdx[this.length]=this._subParamsLength<<8|this._subParamsLength,this.params[this.length++]=e>i?i:e;}}addSubParam(e){if(this._digitIsSub=!0,this.length)if(this._rejectDigits||this._subParamsLength>=this.maxSubParamsLength)this._rejectSubDigits=!0;else {if(e<-1)throw new Error("values lesser than -1 are not allowed");this._subParams[this._subParamsLength++]=e>i?i:e,this._subParamsIdx[this.length-1]++;}}hasSubParams(e){return (255&this._subParamsIdx[e])-(this._subParamsIdx[e]>>8)>0}getSubParams(e){const t=this._subParamsIdx[e]>>8,i=255&this._subParamsIdx[e];return i-t>0?this._subParams.subarray(t,i):null}getSubParamsAll(){const e={};for(let t=0;t<this.length;++t){const i=this._subParamsIdx[t]>>8,s=255&this._subParamsIdx[t];s-i>0&&(e[t]=this._subParams.slice(i,s));}return e}addDigit(e){let t;if(this._rejectDigits||!(t=this._digitIsSub?this._subParamsLength:this.length)||this._digitIsSub&&this._rejectSubDigits)return;const s=this._digitIsSub?this._subParams:this.params,r=s[t-1];s[t-1]=~r?Math.min(10*r+e,i):e;}}t.Params=s;},5741:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.AddonManager=void 0,t.AddonManager=class{constructor(){this._addons=[];}dispose(){for(let e=this._addons.length-1;e>=0;e--)this._addons[e].instance.dispose();}loadAddon(e,t){const i={instance:t,dispose:t.dispose,isDisposed:!1};this._addons.push(i),t.dispose=()=>this._wrappedAddonDispose(i),t.activate(e);}_wrappedAddonDispose(e){if(e.isDisposed)return;let t=-1;for(let i=0;i<this._addons.length;i++)if(this._addons[i]===e){t=i;break}if(-1===t)throw new Error("Could not dispose an addon that has not been loaded");e.isDisposed=!0,e.dispose.apply(e.instance),this._addons.splice(t,1);}};},8771:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferApiView=void 0;const s=i(3785),r=i(511);t.BufferApiView=class{constructor(e,t){this._buffer=e,this.type=t;}init(e){return this._buffer=e,this}get cursorY(){return this._buffer.y}get cursorX(){return this._buffer.x}get viewportY(){return this._buffer.ydisp}get baseY(){return this._buffer.ybase}get length(){return this._buffer.lines.length}getLine(e){const t=this._buffer.lines.get(e);if(t)return new s.BufferLineApiView(t)}getNullCell(){return new r.CellData}};},3785:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferLineApiView=void 0;const s=i(511);t.BufferLineApiView=class{constructor(e){this._line=e;}get isWrapped(){return this._line.isWrapped}get length(){return this._line.length}getCell(e,t){if(!(e<0||e>=this._line.length))return t?(this._line.loadCell(e,t),t):this._line.loadCell(e,new s.CellData)}translateToString(e,t,i){return this._line.translateToString(e,t,i)}};},8285:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.BufferNamespaceApi=void 0;const s=i(8771),r=i(8460),n=i(844);class o extends n.Disposable{constructor(e){super(),this._core=e,this._onBufferChange=this.register(new r.EventEmitter),this.onBufferChange=this._onBufferChange.event,this._normal=new s.BufferApiView(this._core.buffers.normal,"normal"),this._alternate=new s.BufferApiView(this._core.buffers.alt,"alternate"),this._core.buffers.onBufferActivate((()=>this._onBufferChange.fire(this.active)));}get active(){if(this._core.buffers.active===this._core.buffers.normal)return this.normal;if(this._core.buffers.active===this._core.buffers.alt)return this.alternate;throw new Error("Active buffer is neither normal nor alternate")}get normal(){return this._normal.init(this._core.buffers.normal)}get alternate(){return this._alternate.init(this._core.buffers.alt)}}t.BufferNamespaceApi=o;},7975:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ParserApi=void 0,t.ParserApi=class{constructor(e){this._core=e;}registerCsiHandler(e,t){return this._core.registerCsiHandler(e,(e=>t(e.toArray())))}addCsiHandler(e,t){return this.registerCsiHandler(e,t)}registerDcsHandler(e,t){return this._core.registerDcsHandler(e,((e,i)=>t(e,i.toArray())))}addDcsHandler(e,t){return this.registerDcsHandler(e,t)}registerEscHandler(e,t){return this._core.registerEscHandler(e,t)}addEscHandler(e,t){return this.registerEscHandler(e,t)}registerOscHandler(e,t){return this._core.registerOscHandler(e,t)}addOscHandler(e,t){return this.registerOscHandler(e,t)}};},7090:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeApi=void 0,t.UnicodeApi=class{constructor(e){this._core=e;}register(e){this._core.unicodeService.register(e);}get versions(){return this._core.unicodeService.versions}get activeVersion(){return this._core.unicodeService.activeVersion}set activeVersion(e){this._core.unicodeService.activeVersion=e;}};},744:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.BufferService=t.MINIMUM_ROWS=t.MINIMUM_COLS=void 0;const n=i(8460),o=i(844),a=i(5295),h=i(2585);t.MINIMUM_COLS=2,t.MINIMUM_ROWS=1;let c=t.BufferService=class extends o.Disposable{get buffer(){return this.buffers.active}constructor(e){super(),this.isUserScrolling=!1,this._onResize=this.register(new n.EventEmitter),this.onResize=this._onResize.event,this._onScroll=this.register(new n.EventEmitter),this.onScroll=this._onScroll.event,this.cols=Math.max(e.rawOptions.cols||0,t.MINIMUM_COLS),this.rows=Math.max(e.rawOptions.rows||0,t.MINIMUM_ROWS),this.buffers=this.register(new a.BufferSet(e,this));}resize(e,t){this.cols=e,this.rows=t,this.buffers.resize(e,t),this._onResize.fire({cols:e,rows:t});}reset(){this.buffers.reset(),this.isUserScrolling=!1;}scroll(e,t=!1){const i=this.buffer;let s;s=this._cachedBlankLine,s&&s.length===this.cols&&s.getFg(0)===e.fg&&s.getBg(0)===e.bg||(s=i.getBlankLine(e,t),this._cachedBlankLine=s),s.isWrapped=t;const r=i.ybase+i.scrollTop,n=i.ybase+i.scrollBottom;if(0===i.scrollTop){const e=i.lines.isFull;n===i.lines.length-1?e?i.lines.recycle().copyFrom(s):i.lines.push(s.clone()):i.lines.splice(n+1,0,s.clone()),e?this.isUserScrolling&&(i.ydisp=Math.max(i.ydisp-1,0)):(i.ybase++,this.isUserScrolling||i.ydisp++);}else {const e=n-r+1;i.lines.shiftElements(r+1,e-1,-1),i.lines.set(n,s.clone());}this.isUserScrolling||(i.ydisp=i.ybase),this._onScroll.fire(i.ydisp);}scrollLines(e,t,i){const s=this.buffer;if(e<0){if(0===s.ydisp)return;this.isUserScrolling=!0;}else e+s.ydisp>=s.ybase&&(this.isUserScrolling=!1);const r=s.ydisp;s.ydisp=Math.max(Math.min(s.ydisp+e,s.ybase),0),r!==s.ydisp&&(t||this._onScroll.fire(s.ydisp));}};t.BufferService=c=s([r(0,h.IOptionsService)],c);},7994:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.CharsetService=void 0,t.CharsetService=class{constructor(){this.glevel=0,this._charsets=[];}reset(){this.charset=void 0,this._charsets=[],this.glevel=0;}setgLevel(e){this.glevel=e,this.charset=this._charsets[e];}setgCharset(e,t){this._charsets[e]=t,this.glevel===e&&(this.charset=t);}};},1753:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreMouseService=void 0;const n=i(2585),o=i(8460),a=i(844),h={NONE:{events:0,restrict:()=>!1},X10:{events:1,restrict:e=>4!==e.button&&1===e.action&&(e.ctrl=!1,e.alt=!1,e.shift=!1,!0)},VT200:{events:19,restrict:e=>32!==e.action},DRAG:{events:23,restrict:e=>32!==e.action||3!==e.button},ANY:{events:31,restrict:e=>!0}};function c(e,t){let i=(e.ctrl?16:0)|(e.shift?4:0)|(e.alt?8:0);return 4===e.button?(i|=64,i|=e.action):(i|=3&e.button,4&e.button&&(i|=64),8&e.button&&(i|=128),32===e.action?i|=32:0!==e.action||t||(i|=3)),i}const l=String.fromCharCode,d={DEFAULT:e=>{const t=[c(e,!1)+32,e.col+32,e.row+32];return t[0]>255||t[1]>255||t[2]>255?"":`[M${l(t[0])}${l(t[1])}${l(t[2])}`},SGR:e=>{const t=0===e.action&&4!==e.button?"m":"M";return `[<${c(e,!0)};${e.col};${e.row}${t}`},SGR_PIXELS:e=>{const t=0===e.action&&4!==e.button?"m":"M";return `[<${c(e,!0)};${e.x};${e.y}${t}`}};let _=t.CoreMouseService=class extends a.Disposable{constructor(e,t){super(),this._bufferService=e,this._coreService=t,this._protocols={},this._encodings={},this._activeProtocol="",this._activeEncoding="",this._lastEvent=null,this._onProtocolChange=this.register(new o.EventEmitter),this.onProtocolChange=this._onProtocolChange.event;for(const e of Object.keys(h))this.addProtocol(e,h[e]);for(const e of Object.keys(d))this.addEncoding(e,d[e]);this.reset();}addProtocol(e,t){this._protocols[e]=t;}addEncoding(e,t){this._encodings[e]=t;}get activeProtocol(){return this._activeProtocol}get areMouseEventsActive(){return 0!==this._protocols[this._activeProtocol].events}set activeProtocol(e){if(!this._protocols[e])throw new Error(`unknown protocol "${e}"`);this._activeProtocol=e,this._onProtocolChange.fire(this._protocols[e].events);}get activeEncoding(){return this._activeEncoding}set activeEncoding(e){if(!this._encodings[e])throw new Error(`unknown encoding "${e}"`);this._activeEncoding=e;}reset(){this.activeProtocol="NONE",this.activeEncoding="DEFAULT",this._lastEvent=null;}triggerMouseEvent(e){if(e.col<0||e.col>=this._bufferService.cols||e.row<0||e.row>=this._bufferService.rows)return !1;if(4===e.button&&32===e.action)return !1;if(3===e.button&&32!==e.action)return !1;if(4!==e.button&&(2===e.action||3===e.action))return !1;if(e.col++,e.row++,32===e.action&&this._lastEvent&&this._equalEvents(this._lastEvent,e,"SGR_PIXELS"===this._activeEncoding))return !1;if(!this._protocols[this._activeProtocol].restrict(e))return !1;const t=this._encodings[this._activeEncoding](e);return t&&("DEFAULT"===this._activeEncoding?this._coreService.triggerBinaryEvent(t):this._coreService.triggerDataEvent(t,!0)),this._lastEvent=e,!0}explainEvents(e){return {down:!!(1&e),up:!!(2&e),drag:!!(4&e),move:!!(8&e),wheel:!!(16&e)}}_equalEvents(e,t,i){if(i){if(e.x!==t.x)return !1;if(e.y!==t.y)return !1}else {if(e.col!==t.col)return !1;if(e.row!==t.row)return !1}return e.button===t.button&&e.action===t.action&&e.ctrl===t.ctrl&&e.alt===t.alt&&e.shift===t.shift}};t.CoreMouseService=_=s([r(0,n.IBufferService),r(1,n.ICoreService)],_);},6975:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.CoreService=void 0;const n=i(1439),o=i(8460),a=i(844),h=i(2585),c=Object.freeze({insertMode:!1}),l=Object.freeze({applicationCursorKeys:!1,applicationKeypad:!1,bracketedPasteMode:!1,origin:!1,reverseWraparound:!1,sendFocus:!1,wraparound:!0});let d=t.CoreService=class extends a.Disposable{constructor(e,t,i){super(),this._bufferService=e,this._logService=t,this._optionsService=i,this.isCursorInitialized=!1,this.isCursorHidden=!1,this._onData=this.register(new o.EventEmitter),this.onData=this._onData.event,this._onUserInput=this.register(new o.EventEmitter),this.onUserInput=this._onUserInput.event,this._onBinary=this.register(new o.EventEmitter),this.onBinary=this._onBinary.event,this._onRequestScrollToBottom=this.register(new o.EventEmitter),this.onRequestScrollToBottom=this._onRequestScrollToBottom.event,this.modes=(0, n.clone)(c),this.decPrivateModes=(0, n.clone)(l);}reset(){this.modes=(0, n.clone)(c),this.decPrivateModes=(0, n.clone)(l);}triggerDataEvent(e,t=!1){if(this._optionsService.rawOptions.disableStdin)return;const i=this._bufferService.buffer;t&&this._optionsService.rawOptions.scrollOnUserInput&&i.ybase!==i.ydisp&&this._onRequestScrollToBottom.fire(),t&&this._onUserInput.fire(),this._logService.debug(`sending data "${e}"`,(()=>e.split("").map((e=>e.charCodeAt(0))))),this._onData.fire(e);}triggerBinaryEvent(e){this._optionsService.rawOptions.disableStdin||(this._logService.debug(`sending binary "${e}"`,(()=>e.split("").map((e=>e.charCodeAt(0))))),this._onBinary.fire(e));}};t.CoreService=d=s([r(0,h.IBufferService),r(1,h.ILogService),r(2,h.IOptionsService)],d);},9074:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.DecorationService=void 0;const s=i(8055),r=i(8460),n=i(844),o=i(6106);let a=0,h=0;class c extends n.Disposable{get decorations(){return this._decorations.values()}constructor(){super(),this._decorations=new o.SortedList((e=>null==e?void 0:e.marker.line)),this._onDecorationRegistered=this.register(new r.EventEmitter),this.onDecorationRegistered=this._onDecorationRegistered.event,this._onDecorationRemoved=this.register(new r.EventEmitter),this.onDecorationRemoved=this._onDecorationRemoved.event,this.register((0, n.toDisposable)((()=>this.reset())));}registerDecoration(e){if(e.marker.isDisposed)return;const t=new l(e);if(t){const e=t.marker.onDispose((()=>t.dispose()));t.onDispose((()=>{t&&(this._decorations.delete(t)&&this._onDecorationRemoved.fire(t),e.dispose());})),this._decorations.insert(t),this._onDecorationRegistered.fire(t);}return t}reset(){for(const e of this._decorations.values())e.dispose();this._decorations.clear();}*getDecorationsAtCell(e,t,i){var s,r,n;let o=0,a=0;for(const h of this._decorations.getKeyIterator(t))o=null!==(s=h.options.x)&&void 0!==s?s:0,a=o+(null!==(r=h.options.width)&&void 0!==r?r:1),e>=o&&e<a&&(!i||(null!==(n=h.options.layer)&&void 0!==n?n:"bottom")===i)&&(yield h);}forEachDecorationAtCell(e,t,i,s){this._decorations.forEachByKey(t,(t=>{var r,n,o;a=null!==(r=t.options.x)&&void 0!==r?r:0,h=a+(null!==(n=t.options.width)&&void 0!==n?n:1),e>=a&&e<h&&(!i||(null!==(o=t.options.layer)&&void 0!==o?o:"bottom")===i)&&s(t);}));}}t.DecorationService=c;class l extends n.Disposable{get isDisposed(){return this._isDisposed}get backgroundColorRGB(){return null===this._cachedBg&&(this.options.backgroundColor?this._cachedBg=s.css.toColor(this.options.backgroundColor):this._cachedBg=void 0),this._cachedBg}get foregroundColorRGB(){return null===this._cachedFg&&(this.options.foregroundColor?this._cachedFg=s.css.toColor(this.options.foregroundColor):this._cachedFg=void 0),this._cachedFg}constructor(e){super(),this.options=e,this.onRenderEmitter=this.register(new r.EventEmitter),this.onRender=this.onRenderEmitter.event,this._onDispose=this.register(new r.EventEmitter),this.onDispose=this._onDispose.event,this._cachedBg=null,this._cachedFg=null,this.marker=e.marker,this.options.overviewRulerOptions&&!this.options.overviewRulerOptions.position&&(this.options.overviewRulerOptions.position="full");}dispose(){this._onDispose.fire(),super.dispose();}}},4348:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InstantiationService=t.ServiceCollection=void 0;const s=i(2585),r=i(8343);class n{constructor(...e){this._entries=new Map;for(const[t,i]of e)this.set(t,i);}set(e,t){const i=this._entries.get(e);return this._entries.set(e,t),i}forEach(e){for(const[t,i]of this._entries.entries())e(t,i);}has(e){return this._entries.has(e)}get(e){return this._entries.get(e)}}t.ServiceCollection=n,t.InstantiationService=class{constructor(){this._services=new n,this._services.set(s.IInstantiationService,this);}setService(e,t){this._services.set(e,t);}getService(e){return this._services.get(e)}createInstance(e,...t){const i=(0, r.getServiceDependencies)(e).sort(((e,t)=>e.index-t.index)),s=[];for(const t of i){const i=this._services.get(t.id);if(!i)throw new Error(`[createInstance] ${e.name} depends on UNKNOWN service ${t.id}.`);s.push(i);}const n=i.length>0?i[0].index:t.length;if(t.length!==n)throw new Error(`[createInstance] First service dependency of ${e.name} at position ${n+1} conflicts with ${t.length} static arguments`);return new e(...[...t,...s])}};},7866:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.traceCall=t.setTraceLogger=t.LogService=void 0;const n=i(844),o=i(2585),a={trace:o.LogLevelEnum.TRACE,debug:o.LogLevelEnum.DEBUG,info:o.LogLevelEnum.INFO,warn:o.LogLevelEnum.WARN,error:o.LogLevelEnum.ERROR,off:o.LogLevelEnum.OFF};let h,c=t.LogService=class extends n.Disposable{get logLevel(){return this._logLevel}constructor(e){super(),this._optionsService=e,this._logLevel=o.LogLevelEnum.OFF,this._updateLogLevel(),this.register(this._optionsService.onSpecificOptionChange("logLevel",(()=>this._updateLogLevel()))),h=this;}_updateLogLevel(){this._logLevel=a[this._optionsService.rawOptions.logLevel];}_evalLazyOptionalParams(e){for(let t=0;t<e.length;t++)"function"==typeof e[t]&&(e[t]=e[t]());}_log(e,t,i){this._evalLazyOptionalParams(i),e.call(console,(this._optionsService.options.logger?"":"xterm.js: ")+t,...i);}trace(e,...t){var i,s;this._logLevel<=o.LogLevelEnum.TRACE&&this._log(null!==(s=null===(i=this._optionsService.options.logger)||void 0===i?void 0:i.trace.bind(this._optionsService.options.logger))&&void 0!==s?s:console.log,e,t);}debug(e,...t){var i,s;this._logLevel<=o.LogLevelEnum.DEBUG&&this._log(null!==(s=null===(i=this._optionsService.options.logger)||void 0===i?void 0:i.debug.bind(this._optionsService.options.logger))&&void 0!==s?s:console.log,e,t);}info(e,...t){var i,s;this._logLevel<=o.LogLevelEnum.INFO&&this._log(null!==(s=null===(i=this._optionsService.options.logger)||void 0===i?void 0:i.info.bind(this._optionsService.options.logger))&&void 0!==s?s:console.info,e,t);}warn(e,...t){var i,s;this._logLevel<=o.LogLevelEnum.WARN&&this._log(null!==(s=null===(i=this._optionsService.options.logger)||void 0===i?void 0:i.warn.bind(this._optionsService.options.logger))&&void 0!==s?s:console.warn,e,t);}error(e,...t){var i,s;this._logLevel<=o.LogLevelEnum.ERROR&&this._log(null!==(s=null===(i=this._optionsService.options.logger)||void 0===i?void 0:i.error.bind(this._optionsService.options.logger))&&void 0!==s?s:console.error,e,t);}};t.LogService=c=s([r(0,o.IOptionsService)],c),t.setTraceLogger=function(e){h=e;},t.traceCall=function(e,t,i){if("function"!=typeof i.value)throw new Error("not supported");const s=i.value;i.value=function(...e){if(h.logLevel!==o.LogLevelEnum.TRACE)return s.apply(this,e);h.trace(`GlyphRenderer#${s.name}(${e.map((e=>JSON.stringify(e))).join(", ")})`);const t=s.apply(this,e);return h.trace(`GlyphRenderer#${s.name} return`,t),t};};},7302:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.OptionsService=t.DEFAULT_OPTIONS=void 0;const s=i(8460),r=i(844),n=i(6114);t.DEFAULT_OPTIONS={cols:80,rows:24,cursorBlink:!1,cursorStyle:"block",cursorWidth:1,cursorInactiveStyle:"outline",customGlyphs:!0,drawBoldTextInBrightColors:!0,fastScrollModifier:"alt",fastScrollSensitivity:5,fontFamily:"courier-new, courier, monospace",fontSize:15,fontWeight:"normal",fontWeightBold:"bold",ignoreBracketedPasteMode:!1,lineHeight:1,letterSpacing:0,linkHandler:null,logLevel:"info",logger:null,scrollback:1e3,scrollOnUserInput:!0,scrollSensitivity:1,screenReaderMode:!1,smoothScrollDuration:0,macOptionIsMeta:!1,macOptionClickForcesSelection:!1,minimumContrastRatio:1,disableStdin:!1,allowProposedApi:!1,allowTransparency:!1,tabStopWidth:8,theme:{},rightClickSelectsWord:n.isMac,windowOptions:{},windowsMode:!1,windowsPty:{},wordSeparator:" ()[]{}',\"`",altClickMovesCursor:!0,convertEol:!1,termName:"xterm",cancelEvents:!1,overviewRulerWidth:0};const o=["normal","bold","100","200","300","400","500","600","700","800","900"];class a extends r.Disposable{constructor(e){super(),this._onOptionChange=this.register(new s.EventEmitter),this.onOptionChange=this._onOptionChange.event;const i=Object.assign({},t.DEFAULT_OPTIONS);for(const t in e)if(t in i)try{const s=e[t];i[t]=this._sanitizeAndValidateOption(t,s);}catch(e){console.error(e);}this.rawOptions=i,this.options=Object.assign({},i),this._setupOptions();}onSpecificOptionChange(e,t){return this.onOptionChange((i=>{i===e&&t(this.rawOptions[e]);}))}onMultipleOptionChange(e,t){return this.onOptionChange((i=>{-1!==e.indexOf(i)&&t();}))}_setupOptions(){const e=e=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key "${e}"`);return this.rawOptions[e]},i=(e,i)=>{if(!(e in t.DEFAULT_OPTIONS))throw new Error(`No option with key "${e}"`);i=this._sanitizeAndValidateOption(e,i),this.rawOptions[e]!==i&&(this.rawOptions[e]=i,this._onOptionChange.fire(e));};for(const t in this.rawOptions){const s={get:e.bind(this,t),set:i.bind(this,t)};Object.defineProperty(this.options,t,s);}}_sanitizeAndValidateOption(e,i){switch(e){case"cursorStyle":if(i||(i=t.DEFAULT_OPTIONS[e]),!function(e){return "block"===e||"underline"===e||"bar"===e}(i))throw new Error(`"${i}" is not a valid value for ${e}`);break;case"wordSeparator":i||(i=t.DEFAULT_OPTIONS[e]);break;case"fontWeight":case"fontWeightBold":if("number"==typeof i&&1<=i&&i<=1e3)break;i=o.includes(i)?i:t.DEFAULT_OPTIONS[e];break;case"cursorWidth":i=Math.floor(i);case"lineHeight":case"tabStopWidth":if(i<1)throw new Error(`${e} cannot be less than 1, value: ${i}`);break;case"minimumContrastRatio":i=Math.max(1,Math.min(21,Math.round(10*i)/10));break;case"scrollback":if((i=Math.min(i,4294967295))<0)throw new Error(`${e} cannot be less than 0, value: ${i}`);break;case"fastScrollSensitivity":case"scrollSensitivity":if(i<=0)throw new Error(`${e} cannot be less than or equal to 0, value: ${i}`);break;case"rows":case"cols":if(!i&&0!==i)throw new Error(`${e} must be numeric, value: ${i}`);break;case"windowsPty":i=null!=i?i:{};}return i}}t.OptionsService=a;},2660:function(e,t,i){var s=this&&this.__decorate||function(e,t,i,s){var r,n=arguments.length,o=n<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,i):s;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(e,t,i,s);else for(var a=e.length-1;a>=0;a--)(r=e[a])&&(o=(n<3?r(o):n>3?r(t,i,o):r(t,i))||o);return n>3&&o&&Object.defineProperty(t,i,o),o},r=this&&this.__param||function(e,t){return function(i,s){t(i,s,e);}};Object.defineProperty(t,"__esModule",{value:!0}),t.OscLinkService=void 0;const n=i(2585);let o=t.OscLinkService=class{constructor(e){this._bufferService=e,this._nextId=1,this._entriesWithId=new Map,this._dataByLinkId=new Map;}registerLink(e){const t=this._bufferService.buffer;if(void 0===e.id){const i=t.addMarker(t.ybase+t.y),s={data:e,id:this._nextId++,lines:[i]};return i.onDispose((()=>this._removeMarkerFromLink(s,i))),this._dataByLinkId.set(s.id,s),s.id}const i=e,s=this._getEntryIdKey(i),r=this._entriesWithId.get(s);if(r)return this.addLineToLink(r.id,t.ybase+t.y),r.id;const n=t.addMarker(t.ybase+t.y),o={id:this._nextId++,key:this._getEntryIdKey(i),data:i,lines:[n]};return n.onDispose((()=>this._removeMarkerFromLink(o,n))),this._entriesWithId.set(o.key,o),this._dataByLinkId.set(o.id,o),o.id}addLineToLink(e,t){const i=this._dataByLinkId.get(e);if(i&&i.lines.every((e=>e.line!==t))){const e=this._bufferService.buffer.addMarker(t);i.lines.push(e),e.onDispose((()=>this._removeMarkerFromLink(i,e)));}}getLinkData(e){var t;return null===(t=this._dataByLinkId.get(e))||void 0===t?void 0:t.data}_getEntryIdKey(e){return `${e.id};;${e.uri}`}_removeMarkerFromLink(e,t){const i=e.lines.indexOf(t);-1!==i&&(e.lines.splice(i,1),0===e.lines.length&&(void 0!==e.data.id&&this._entriesWithId.delete(e.key),this._dataByLinkId.delete(e.id)));}};t.OscLinkService=o=s([r(0,n.IBufferService)],o);},8343:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.createDecorator=t.getServiceDependencies=t.serviceRegistry=void 0;const i="di$target",s="di$dependencies";t.serviceRegistry=new Map,t.getServiceDependencies=function(e){return e[s]||[]},t.createDecorator=function(e){if(t.serviceRegistry.has(e))return t.serviceRegistry.get(e);const r=function(e,t,n){if(3!==arguments.length)throw new Error("@IServiceName-decorator can only be used to decorate a parameter");!function(e,t,r){t[i]===t?t[s].push({id:e,index:r}):(t[s]=[{id:e,index:r}],t[i]=t);}(r,e,n);};return r.toString=()=>e,t.serviceRegistry.set(e,r),r};},2585:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.IDecorationService=t.IUnicodeService=t.IOscLinkService=t.IOptionsService=t.ILogService=t.LogLevelEnum=t.IInstantiationService=t.ICharsetService=t.ICoreService=t.ICoreMouseService=t.IBufferService=void 0;const s=i(8343);var r;t.IBufferService=(0, s.createDecorator)("BufferService"),t.ICoreMouseService=(0, s.createDecorator)("CoreMouseService"),t.ICoreService=(0, s.createDecorator)("CoreService"),t.ICharsetService=(0, s.createDecorator)("CharsetService"),t.IInstantiationService=(0, s.createDecorator)("InstantiationService"),function(e){e[e.TRACE=0]="TRACE",e[e.DEBUG=1]="DEBUG",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.OFF=5]="OFF";}(r||(t.LogLevelEnum=r={})),t.ILogService=(0, s.createDecorator)("LogService"),t.IOptionsService=(0, s.createDecorator)("OptionsService"),t.IOscLinkService=(0, s.createDecorator)("OscLinkService"),t.IUnicodeService=(0, s.createDecorator)("UnicodeService"),t.IDecorationService=(0, s.createDecorator)("DecorationService");},1480:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.UnicodeService=void 0;const s=i(8460),r=i(225);t.UnicodeService=class{constructor(){this._providers=Object.create(null),this._active="",this._onChange=new s.EventEmitter,this.onChange=this._onChange.event;const e=new r.UnicodeV6;this.register(e),this._active=e.version,this._activeProvider=e;}dispose(){this._onChange.dispose();}get versions(){return Object.keys(this._providers)}get activeVersion(){return this._active}set activeVersion(e){if(!this._providers[e])throw new Error(`unknown Unicode version "${e}"`);this._active=e,this._activeProvider=this._providers[e],this._onChange.fire(e);}register(e){this._providers[e.version]=e;}wcwidth(e){return this._activeProvider.wcwidth(e)}getStringCellWidth(e){let t=0;const i=e.length;for(let s=0;s<i;++s){let r=e.charCodeAt(s);if(55296<=r&&r<=56319){if(++s>=i)return t+this.wcwidth(r);const n=e.charCodeAt(s);56320<=n&&n<=57343?r=1024*(r-55296)+n-56320+65536:t+=this.wcwidth(n);}t+=this.wcwidth(r);}return t}};}},t={};function i(s){var r=t[s];if(void 0!==r)return r.exports;var n=t[s]={exports:{}};return e[s].call(n.exports,n,n.exports,i),n.exports}var s={};return (()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.Terminal=void 0;const t=i(9042),r=i(3236),n=i(844),o=i(5741),a=i(8285),h=i(7975),c=i(7090),l=["cols","rows"];class d extends n.Disposable{constructor(e){super(),this._core=this.register(new r.Terminal(e)),this._addonManager=this.register(new o.AddonManager),this._publicOptions=Object.assign({},this._core.options);const t=e=>this._core.options[e],i=(e,t)=>{this._checkReadonlyOptions(e),this._core.options[e]=t;};for(const e in this._core.options){const s={get:t.bind(this,e),set:i.bind(this,e)};Object.defineProperty(this._publicOptions,e,s);}}_checkReadonlyOptions(e){if(l.includes(e))throw new Error(`Option "${e}" can only be set in the constructor`)}_checkProposedApi(){if(!this._core.optionsService.rawOptions.allowProposedApi)throw new Error("You must set the allowProposedApi option to true to use proposed API")}get onBell(){return this._core.onBell}get onBinary(){return this._core.onBinary}get onCursorMove(){return this._core.onCursorMove}get onData(){return this._core.onData}get onKey(){return this._core.onKey}get onLineFeed(){return this._core.onLineFeed}get onRender(){return this._core.onRender}get onResize(){return this._core.onResize}get onScroll(){return this._core.onScroll}get onSelectionChange(){return this._core.onSelectionChange}get onTitleChange(){return this._core.onTitleChange}get onWriteParsed(){return this._core.onWriteParsed}get element(){return this._core.element}get parser(){return this._parser||(this._parser=new h.ParserApi(this._core)),this._parser}get unicode(){return this._checkProposedApi(),new c.UnicodeApi(this._core)}get textarea(){return this._core.textarea}get rows(){return this._core.rows}get cols(){return this._core.cols}get buffer(){return this._buffer||(this._buffer=this.register(new a.BufferNamespaceApi(this._core))),this._buffer}get markers(){return this._checkProposedApi(),this._core.markers}get modes(){const e=this._core.coreService.decPrivateModes;let t="none";switch(this._core.coreMouseService.activeProtocol){case"X10":t="x10";break;case"VT200":t="vt200";break;case"DRAG":t="drag";break;case"ANY":t="any";}return {applicationCursorKeysMode:e.applicationCursorKeys,applicationKeypadMode:e.applicationKeypad,bracketedPasteMode:e.bracketedPasteMode,insertMode:this._core.coreService.modes.insertMode,mouseTrackingMode:t,originMode:e.origin,reverseWraparoundMode:e.reverseWraparound,sendFocusMode:e.sendFocus,wraparoundMode:e.wraparound}}get options(){return this._publicOptions}set options(e){for(const t in e)this._publicOptions[t]=e[t];}blur(){this._core.blur();}focus(){this._core.focus();}resize(e,t){this._verifyIntegers(e,t),this._core.resize(e,t);}open(e){this._core.open(e);}attachCustomKeyEventHandler(e){this._core.attachCustomKeyEventHandler(e);}registerLinkProvider(e){return this._core.registerLinkProvider(e)}registerCharacterJoiner(e){return this._checkProposedApi(),this._core.registerCharacterJoiner(e)}deregisterCharacterJoiner(e){this._checkProposedApi(),this._core.deregisterCharacterJoiner(e);}registerMarker(e=0){return this._verifyIntegers(e),this._core.registerMarker(e)}registerDecoration(e){var t,i,s;return this._checkProposedApi(),this._verifyPositiveIntegers(null!==(t=e.x)&&void 0!==t?t:0,null!==(i=e.width)&&void 0!==i?i:0,null!==(s=e.height)&&void 0!==s?s:0),this._core.registerDecoration(e)}hasSelection(){return this._core.hasSelection()}select(e,t,i){this._verifyIntegers(e,t,i),this._core.select(e,t,i);}getSelection(){return this._core.getSelection()}getSelectionPosition(){return this._core.getSelectionPosition()}clearSelection(){this._core.clearSelection();}selectAll(){this._core.selectAll();}selectLines(e,t){this._verifyIntegers(e,t),this._core.selectLines(e,t);}dispose(){super.dispose();}scrollLines(e){this._verifyIntegers(e),this._core.scrollLines(e);}scrollPages(e){this._verifyIntegers(e),this._core.scrollPages(e);}scrollToTop(){this._core.scrollToTop();}scrollToBottom(){this._core.scrollToBottom();}scrollToLine(e){this._verifyIntegers(e),this._core.scrollToLine(e);}clear(){this._core.clear();}write(e,t){this._core.write(e,t);}writeln(e,t){this._core.write(e),this._core.write("\r\n",t);}paste(e){this._core.paste(e);}refresh(e,t){this._verifyIntegers(e,t),this._core.refresh(e,t);}reset(){this._core.reset();}clearTextureAtlas(){this._core.clearTextureAtlas();}loadAddon(e){this._addonManager.loadAddon(this,e);}static get strings(){return t}_verifyIntegers(...e){for(const t of e)if(t===1/0||isNaN(t)||t%1!=0)throw new Error("This API only accepts integers")}_verifyPositiveIntegers(...e){for(const t of e)if(t&&(t===1/0||isNaN(t)||t%1!=0||t<0))throw new Error("This API only accepts positive integers")}}e.Terminal=d;})(),s})()));
		
	} (xterm));

	var xtermExports = xterm.exports;

	/**
	 * Represents a terminal user interface.
	 */
	class TerminalUI {
	  /**
	   * Creates a TerminalUI instance.
	   * @param {SocketIO.Socket} socket - The socket.io client socket.
	   */
	  constructor(socket) {
	    /** @type {Terminal} */
	    this.terminal = new xtermExports.Terminal();
	    /** @type {SocketIO.Socket} */
	    this.socket = socket;
	  }

	  /**
	   * Attach event listeners for terminal UI and socket.io client.
	   */
	  startListening() {
	    this.terminal.onData(data => this.sendInput(data));
	    this.socket.on("output", data => {
	      // When there is data from PTY on server, print that on Terminal.
	      this.write(data);
	    });
	  }

	  /**
	   * Print something to terminal UI.
	   * @param {string} text - The text to print.
	   */
	  write(text) {
	    this.terminal.write(text);
	  }

	  /**
	   * Utility function to print new line on terminal.
	   */
	  prompt() {
	    this.terminal.write(`\r\n$ `);
	  }

	  /**
	   * Send whatever you type in Terminal UI to PTY process in server.
	   * @param {string} input - Input to send to server.
	   */
	  sendInput(input) {
	    this.socket.emit("input", input);
	  }

	  /**
	   * Attach the terminal UI to a container element.
	   * @param {HTMLElement} container - The HTMLElement where xterm can attach the terminal UI instance.
	   */
	  attachTo(container) {
	    this.terminal.open(container);
	    this.prompt();
	  }

	  /**
	   * Clear the terminal UI.
	   */
	  clear() {
	    this.terminal.clear();
	  }
	}

	/* TESTSING
	//console.log(window.location.pathname)
	//statment to dynamically add event handler based on the window location
	// to avoid conflicts with other event handlers for other views
	if(window.location.pathname === '/users/login'){
	//document.getElementById('UserLoginButton').addEventListener('click', textfromDb);
	}
	*/

	//GLOBALS
	const serverAddress = 'http://localhost:8080';
	let socket = null;


	/**
	 * Connects to a WebSocket server.
	 * @param {string} serverAddress - The address of the WebSocket server.
	 * @returns {Promise<Socket>} - A Promise that resolves to the socket connection.
	 */
	function connectToSocket(serverAddress) {
	  return new Promise(res => {
	    socket = io(serverAddress);
	    res(socket);
	  });
	}

	/**
	 * Starts a terminal interface.
	 * @param {HTMLElement} container - The DOM element to which the terminal will be attached.
	 * @param {Socket} socket - The WebSocket socket connection.
	 */
	function startTerminal(container, socket) {
	  const terminal = new TerminalUI(socket);
	  terminal.attachTo(container);
	  terminal.startListening();
	  //console.log(`Socket connected to server: ${socket.io.uri}`);
	  //console.log(`Terminal attached to container: ${container.id}`);
	}

	/**
	 * Starts the application by connecting to the WebSocket server and initializing the terminal.
	 */
	function start() {
	  const container = document.getElementById("terminal-container");
	  connectToSocket(serverAddress).then(socket => {
	    startTerminal(container, socket);
	  });
	}

	/**
	 * Sends a message to start a Java process.
	 * @param {string} userId - The ID of the user for whom the Java process is started.
	 */
	async function sendStartJavaProcessMessage(userId) {
	  try {
	    const userDataResponse = await fetch('/users/current-user-data');
	    if (!userDataResponse.ok) {
	      throw new Error('Network response was not ok');
	    }
	    const javaCode = await userDataResponse.text();

	    const response = await fetch('/editor/runcode', {
	      method: 'POST',
	      headers: {
	        'Content-Type': 'application/json'
	      },
	      body: JSON.stringify({ code: javaCode })
	    });

	    const container = document.getElementById("terminal-container");

	    socket.send(JSON.stringify({ action: 'startJavaProcess', userId: userId }));

	    if (!response.ok) {
	      throw new Error('Failed to execute Java code');
	    }
	  } catch (error) {
	    console.error('Error executing Java code:', error);
	  }
	}


	/**
	 * Function to handle click event of the save button.
	 * Saves user data to the server.
	 * @function saveButtonEvent
	 */
	function saveButtonEvent() {
	  //console.log(Array.from(document.querySelectorAll(".cm-line")).map(e => e.textContent).join("\n"));
	  const userData = Array.from(document.querySelectorAll(".cm-line")).map(e => e.textContent).join("\n");
	  //console.log(userData);

	  // Send an HTTP POST request to the server with the user data
	  fetch('/users/updateUserData', {
	    method: 'POST',
	    headers: {
	      'Content-Type': 'application/json'
	    },
	    body: JSON.stringify({ userData })
	  })
	    .then(response => {
	      if (response.ok) {
	        console.log('User data updated successfully');
	      } else {
	        console.error('Failed to update user data');
	      }
	    })
	    .catch(error => {
	      console.error('Error:', error);
	    });
	}

	/**
	 * Function to fetch user data from the database and then create an editor with or without this data
	 * @function textfromDb
	 */
	async function textfromDb() {
	  fetch('/users/current-user-data')
	    .then(response => {
	      if (!response.ok) {
	        throw new Error('Network response was not ok');
	      }
	      return response.text();
	    })
	    .then(userData => {
	      //console.log('Current user data:', userData);
	      //If there is userdata in the database create a editor with the contents from the db
	      if (userData) {
	        //editor.updateState(userData)
	        new Editor(
	          document.querySelector('#editor'),
	          userData
	        );
	      }
	      //If there is no data create an editor with java main class and void method.
	      else {
	        new Editor(
	          document.querySelector('#editor'),
	          `public class Main{\n public static void main(String args[]){\n\n}\n}`
	        );
	      }
	    })
	    .catch(error => {
	      console.error('There was a problem with the fetch operation:', error);
	    });
	}

	async function getUserID() {
	  try {
	    const response = await fetch('/editor/get-userID');
	    if (!response.ok) {
	      throw new Error('Failed to fetch userID');
	    }
	    const userID = await response.text();
	    return userID;
	  } catch (error) {
	    console.error('Error fetching userID:', error);
	    return null;
	  }
	}


	// Usage



	//statment to dynamically add event handler based on the window location
	// to avoid conflicts with other event handlers for other views
	if (window.location.pathname === '/editor') {
	  document.getElementById('saveButton').addEventListener('click', saveButtonEvent);
	  //Initial call to check if there is code in the database 
	  //see function for more details
	  //if student do this 
	  textfromDb();
	  //if instructor do something else

	  //document.getElementById('runButton').addEventListener('click', runjava);
	  //setInterval(textfromDb,5000); TESTING

	  // Button click event listener
	  document.getElementById('runButton').addEventListener('click', async () => {
	    try {
	      const userID = await getUserID();
	      if (userID) {
	        sendStartJavaProcessMessage(userID);
	      } else {
	        console.log('UserID not available');
	      }
	    } catch (error) {
	      console.error('Error:', error);
	    }
	  });
	  document.getElementById('submit').addEventListener('click', async () => {
	    try {
	      const instructorNameInput = document.getElementById('instructorNameInput');
	      const instructorName = instructorNameInput.value.trim(); // Get the value of the input field
	      console.log(`Instructor Name: ${instructorName}`);

	      fetch('/users/current-user-data')
	        .then(response => {
	          if (!response.ok) {
	            throw new Error('Network response was not ok');
	          }
	          return response.text();
	        })
	        .then(async userData => {
	          const uploadData = userData;
	          // Create a new Date object
	          var currentDate = new Date();

	          // Get the current hour, minute, second, month, day, and year
	          var hour = currentDate.getHours();
	          var minute = currentDate.getMinutes();
	          var second = currentDate.getSeconds();
	          var month = currentDate.getMonth() + 1; // January is 0, so add 1
	          var day = currentDate.getDate();
	          var year = currentDate.getFullYear();

	          // Add leading zeros to ensure two-digit format
	          hour = hour < 10 ? '0' + hour : hour;
	          minute = minute < 10 ? '0' + minute : minute;
	          second = second < 10 ? '0' + second : second;
	          month = month < 10 ? '0' + month : month;
	          day = day < 10 ? '0' + day : day;

	          // Format the date and time as a string
	          var formattedDateTime = hour + ":" + minute + ":" + second + " " + month + "/" + day + "/" + year;

	          //console.log("Current time and date:", formattedDateTime);

	         
	      const userID = await getUserID();
	      console.log(userID);
	      if (!userID) {
	        console.log('UserID not available');
	      }
	        

	          //upload the user data from the database to an instructor.
	          const response = await fetch('/editor/upload', {
	            method: 'POST',
	            headers: {
	              'Content-Type': 'application/json'
	            },
	            body: JSON.stringify({ uploadData, instructorName, formattedDateTime})
	          });

	          const data = await response.json();
	          alert(data.message); // Display success or error message
	        })
	        .catch(error => {
	          console.error('There was a problem with the fetch operation:', error);
	        });
	    } catch (error) {
	      console.error(error);
	      alert('An error occurred. Please try again later.');
	    }
	  });


	  start();

	}

	//TO DO 
	//Get the userID from the session.

})();
